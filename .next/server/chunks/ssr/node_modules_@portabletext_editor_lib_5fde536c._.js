module.exports = {

"[project]/node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isTextBlock": (()=>isTextBlock),
    "isTypedObject": (()=>isTypedObject),
    "parseBlock": (()=>parseBlock),
    "parseBlocks": (()=>parseBlocks)
});
function isTypedObject(object) {
    return isRecord(object) && typeof object._type == "string";
}
function isRecord(value) {
    return !!value && (typeof value == "object" || typeof value == "function");
}
function parseBlocks({ context, blocks, options }) {
    return Array.isArray(blocks) ? blocks.flatMap((block)=>{
        const parsedBlock = parseBlock({
            context,
            block,
            options
        });
        return parsedBlock ? [
            parsedBlock
        ] : [];
    }) : [];
}
function parseBlock({ context, block, options }) {
    return parseTextBlock({
        block,
        context,
        options
    }) ?? parseBlockObject({
        blockObject: block,
        context,
        options
    });
}
function parseBlockObject({ blockObject, context, options }) {
    if (isTypedObject(blockObject) && !(blockObject._type === context.schema.block.name || blockObject._type === "block" || !context.schema.blockObjects.some(({ name })=>name === blockObject._type))) return {
        ...blockObject,
        _key: options.refreshKeys ? context.keyGenerator() : typeof blockObject._key == "string" ? blockObject._key : context.keyGenerator()
    };
}
function isTextBlock(schema, block) {
    return parseTextBlock({
        block,
        context: {
            schema,
            keyGenerator: ()=>""
        },
        options: {
            refreshKeys: !1
        }
    }) !== void 0;
}
function parseTextBlock({ block, context, options }) {
    if (!isTypedObject(block) || block._type !== context.schema.block.name) return;
    const _key = options.refreshKeys ? context.keyGenerator() : typeof block._key == "string" ? block._key : context.keyGenerator(), unparsedMarkDefs = Array.isArray(block.markDefs) ? block.markDefs : [], markDefKeyMap = /* @__PURE__ */ new Map(), markDefs = unparsedMarkDefs.flatMap((markDef)=>{
        if (!isTypedObject(markDef)) return [];
        if (typeof markDef._key != "string") return [];
        if (context.schema.annotations.some((annotation)=>annotation.name === markDef._type)) {
            const _key2 = options.refreshKeys ? context.keyGenerator() : markDef._key;
            return markDefKeyMap.set(markDef._key, _key2), [
                {
                    ...markDef,
                    _key: _key2
                }
            ];
        }
        return [];
    }), children = (Array.isArray(block.children) ? block.children : []).map((child)=>parseSpan({
            span: child,
            context,
            markDefKeyMap,
            options
        }) ?? parseInlineObject({
            inlineObject: child,
            context,
            options
        })).filter((child)=>child !== void 0), parsedBlock = {
        // Spread the entire block to allow custom properties on it
        ...block,
        _key,
        children: children.length > 0 ? children : [
            {
                _key: context.keyGenerator(),
                _type: context.schema.span.name,
                text: "",
                marks: []
            }
        ],
        markDefs
    };
    if (typeof parsedBlock.style != "string" || !context.schema.styles.find((style)=>style.value === block.style)) {
        const defaultStyle = context.schema.styles.at(0)?.value;
        defaultStyle !== void 0 ? parsedBlock.style = defaultStyle : delete parsedBlock.style;
    }
    return (typeof parsedBlock.listItem != "string" || !context.schema.lists.find((list)=>list.value === block.listItem)) && delete parsedBlock.listItem, typeof parsedBlock.level != "number" && delete parsedBlock.level, parsedBlock;
}
function parseSpan({ span, context, markDefKeyMap, options }) {
    if (!isTypedObject(span) || span._type !== context.schema.span.name || span._type !== "span") return;
    const marks = (Array.isArray(span.marks) ? span.marks : []).flatMap((mark)=>{
        if (typeof mark != "string") return [];
        const markDefKey = markDefKeyMap.get(mark);
        return markDefKey !== void 0 ? [
            markDefKey
        ] : context.schema.decorators.some((decorator)=>decorator.value === mark) ? [
            mark
        ] : [];
    });
    return {
        // Spread the entire span to allow custom properties on it
        ...span,
        _type: "span",
        _key: options.refreshKeys ? context.keyGenerator() : typeof span._key == "string" ? span._key : context.keyGenerator(),
        text: typeof span.text == "string" ? span.text : "",
        marks
    };
}
function parseInlineObject({ inlineObject, context, options }) {
    if (isTypedObject(inlineObject) && !(inlineObject._type === context.schema.span.name || inlineObject._type === "span" || // Respect the schema definition and don't parse inline objects that are not defined
    !context.schema.inlineObjects.some(({ name })=>name === inlineObject._type))) return {
        // Spread the entire inline object to allow custom properties on it
        ...inlineObject,
        _key: options.refreshKeys ? context.keyGenerator() : typeof inlineObject._key == "string" ? inlineObject._key : context.keyGenerator()
    };
}
;
 //# sourceMappingURL=parse-blocks.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "blockOffsetToSpanSelectionPoint": (()=>blockOffsetToSpanSelectionPoint),
    "getBlockEndPoint": (()=>getBlockEndPoint),
    "getBlockStartPoint": (()=>getBlockStartPoint),
    "getTextBlockText": (()=>getTextBlockText),
    "isEmptyTextBlock": (()=>isEmptyTextBlock),
    "isEqualSelectionPoints": (()=>isEqualSelectionPoints),
    "isKeyedSegment": (()=>isKeyedSegment),
    "isSpan": (()=>isSpan),
    "reverseSelection": (()=>reverseSelection),
    "sliceBlocks": (()=>sliceBlocks),
    "spanSelectionPointToBlockOffset": (()=>spanSelectionPointToBlockOffset)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
;
function isKeyedSegment(segment) {
    return typeof segment == "object" && segment !== null && "_key" in segment;
}
function blockOffsetToSpanSelectionPoint({ value, blockOffset, direction }) {
    let offsetLeft = blockOffset.offset, selectionPoint, skippedInlineObject = !1;
    for (const block of value)if (block._key === blockOffset.path[0]._key && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) for (const child of block.children){
        if (direction === "forward") {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) continue;
            if (offsetLeft <= child.text.length) {
                selectionPoint = {
                    path: [
                        ...blockOffset.path,
                        "children",
                        {
                            _key: child._key
                        }
                    ],
                    offset: offsetLeft
                };
                break;
            }
            offsetLeft -= child.text.length;
            continue;
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
            skippedInlineObject = !0;
            continue;
        }
        if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {
            skippedInlineObject && (selectionPoint = {
                path: [
                    ...blockOffset.path,
                    "children",
                    {
                        _key: child._key
                    }
                ],
                offset: 0
            });
            break;
        }
        if (offsetLeft > child.text.length) {
            offsetLeft -= child.text.length;
            continue;
        }
        if (offsetLeft <= child.text.length && (selectionPoint = {
            path: [
                ...blockOffset.path,
                "children",
                {
                    _key: child._key
                }
            ],
            offset: offsetLeft
        }, offsetLeft -= child.text.length, offsetLeft !== 0)) break;
    }
    return selectionPoint;
}
function spanSelectionPointToBlockOffset({ value, selectionPoint }) {
    let offset = 0;
    const blockKey = isKeyedSegment(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, spanKey = isKeyedSegment(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;
    if (!(!blockKey || !spanKey)) {
        for (const block of value)if (block._key === blockKey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) {
            for (const child of block.children)if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
                if (child._key === spanKey) return {
                    path: [
                        {
                            _key: block._key
                        }
                    ],
                    offset: offset + selectionPoint.offset
                };
                offset += child.text.length;
            }
        }
    }
}
function getBlockEndPoint({ node, path }) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(node)) {
        const lastChild = node.children[node.children.length - 1];
        if (lastChild) return {
            path: [
                ...path,
                "children",
                {
                    _key: lastChild._key
                }
            ],
            offset: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(lastChild) ? lastChild.text.length : 0
        };
    }
    return {
        path,
        offset: 0
    };
}
function getBlockStartPoint({ node, path }) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(node) ? {
        path: [
            ...path,
            "children",
            {
                _key: node.children[0]._key
            }
        ],
        offset: 0
    } : {
        path,
        offset: 0
    };
}
function getTextBlockText(block) {
    return block.children.map((child)=>child.text ?? "").join("");
}
function isEmptyTextBlock(block) {
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) return !1;
    const onlyText = block.children.every(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"]), blockText = getTextBlockText(block);
    return onlyText && blockText === "";
}
function isEqualSelectionPoints(a, b) {
    return a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path);
}
function isSpan(context, child) {
    return child._type === context.schema.span.name;
}
function reverseSelection(selection) {
    return selection && (selection.backward ? {
        anchor: selection.focus,
        focus: selection.anchor,
        backward: !1
    } : {
        anchor: selection.focus,
        focus: selection.anchor,
        backward: !0
    });
}
function sliceBlocks({ blocks, selection }) {
    const slice = [];
    if (!selection) return slice;
    let startBlock;
    const middleBlocks = [];
    let endBlock;
    const startPoint = selection.backward ? selection.focus : selection.anchor, endPoint = selection.backward ? selection.anchor : selection.focus, startBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(endPoint.path[0]) ? endPoint.path[0]._key : void 0, startChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(endPoint.path[2]) ? endPoint.path[2]._key : void 0;
    if (!startBlockKey || !endBlockKey) return slice;
    for (const block of blocks){
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) && block._key === startBlockKey && block._key === endBlockKey) {
            startBlock = block;
            break;
        }
        if (block._key === startBlockKey) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) {
                startBlock = block;
                continue;
            }
            if (startChildKey) {
                for (const child of block.children){
                    if (child._key === startChildKey) {
                        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
                            const text = child._key === endChildKey ? child.text.slice(startPoint.offset, endPoint.offset) : child.text.slice(startPoint.offset);
                            startBlock = {
                                ...block,
                                children: [
                                    {
                                        ...child,
                                        text
                                    }
                                ]
                            };
                        } else startBlock = {
                            ...block,
                            children: [
                                child
                            ]
                        };
                        if (startChildKey === endChildKey) break;
                        continue;
                    }
                    if (startBlock && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(startBlock) && (endChildKey && child._key === endChildKey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) ? startBlock.children.push({
                        ...child,
                        text: child.text.slice(0, endPoint.offset)
                    }) : startBlock.children.push(child), block._key === endBlockKey && endChildKey && child._key === endChildKey)) break;
                }
                if (startBlockKey === endBlockKey) break;
                continue;
            }
            if (startBlock = block, startBlockKey === endBlockKey) break;
        }
        if (block._key === endBlockKey) {
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) {
                endBlock = block;
                break;
            }
            if (endChildKey) {
                endBlock = {
                    ...block,
                    children: []
                };
                for (const child of block.children)if (endBlock && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(endBlock)) {
                    if (child._key === endChildKey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
                        endBlock.children.push({
                            ...child,
                            text: child.text.slice(0, endPoint.offset)
                        });
                        break;
                    }
                    if (endBlock.children.push(child), endChildKey && child._key === endChildKey) break;
                }
                break;
            }
            endBlock = block;
            break;
        }
        startBlock && middleBlocks.push(block);
    }
    return [
        ...startBlock ? [
            startBlock
        ] : [],
        ...middleBlocks,
        ...endBlock ? [
            endBlock
        ] : []
    ];
}
;
 //# sourceMappingURL=util.slice-blocks.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "blockOffsetToBlockSelectionPoint": (()=>blockOffsetToBlockSelectionPoint),
    "blockOffsetToSelectionPoint": (()=>blockOffsetToSelectionPoint),
    "blockOffsetsToSelection": (()=>blockOffsetsToSelection),
    "childSelectionPointToBlockOffset": (()=>childSelectionPointToBlockOffset),
    "selectionPointToBlockOffset": (()=>selectionPointToBlockOffset)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
;
;
function blockOffsetToBlockSelectionPoint({ value, blockOffset }) {
    let selectionPoint;
    for (const block of value)if (block._key === blockOffset.path[0]._key) {
        selectionPoint = {
            path: [
                {
                    _key: block._key
                }
            ],
            offset: blockOffset.offset
        };
        break;
    }
    return selectionPoint;
}
function blockOffsetToSelectionPoint({ value, blockOffset, direction }) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetToSpanSelectionPoint"])({
        value,
        blockOffset,
        direction
    }) || blockOffsetToBlockSelectionPoint({
        value,
        blockOffset
    });
}
function blockOffsetsToSelection({ value, offsets, backward }) {
    const anchor = blockOffsetToSelectionPoint({
        value,
        blockOffset: offsets.anchor,
        direction: backward ? "backward" : "forward"
    }), focus = blockOffsetToSelectionPoint({
        value,
        blockOffset: offsets.focus,
        direction: backward ? "forward" : "backward"
    });
    return !anchor || !focus ? null : {
        anchor,
        focus,
        backward
    };
}
function childSelectionPointToBlockOffset({ value, selectionPoint }) {
    let offset = 0;
    const blockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(selectionPoint.path[0]) ? selectionPoint.path[0]._key : void 0, childKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(selectionPoint.path[2]) ? selectionPoint.path[2]._key : void 0;
    if (!(!blockKey || !childKey)) {
        for (const block of value)if (block._key === blockKey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) for (const child of block.children){
            if (child._key === childKey) return {
                path: [
                    {
                        _key: block._key
                    }
                ],
                offset: offset + selectionPoint.offset
            };
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) && (offset += child.text.length);
        }
    }
}
function selectionPointToBlockOffset({ value, selectionPoint }) {
    return selectionPoint.path.length === 1 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(selectionPoint.path[0]) ? {
        path: [
            {
                _key: selectionPoint.path[0]._key
            }
        ],
        offset: selectionPoint.offset
    } : childSelectionPointToBlockOffset({
        value,
        selectionPoint
    });
}
;
 //# sourceMappingURL=util.selection-point-to-block-offset.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGuards": (()=>createGuards),
    "getCaretWordSelection": (()=>getCaretWordSelection),
    "getFirstBlock": (()=>getFirstBlock),
    "getFocusBlock": (()=>getFocusBlock),
    "getFocusBlockObject": (()=>getFocusBlockObject),
    "getFocusChild": (()=>getFocusChild),
    "getFocusListBlock": (()=>getFocusListBlock),
    "getFocusSpan": (()=>getFocusSpan),
    "getFocusTextBlock": (()=>getFocusTextBlock),
    "getLastBlock": (()=>getLastBlock),
    "getNextBlock": (()=>getNextBlock),
    "getNextInlineObject": (()=>getNextInlineObject),
    "getPreviousBlock": (()=>getPreviousBlock),
    "getPreviousInlineObject": (()=>getPreviousInlineObject),
    "getSelectedBlocks": (()=>getSelectedBlocks),
    "getSelectedSlice": (()=>getSelectedSlice),
    "getSelectionEndBlock": (()=>getSelectionEndBlock),
    "getSelectionEndPoint": (()=>getSelectionEndPoint),
    "getSelectionStartBlock": (()=>getSelectionStartBlock),
    "getSelectionStartPoint": (()=>getSelectionStartPoint),
    "getSelectionText": (()=>getSelectionText),
    "isAtTheEndOfBlock": (()=>isAtTheEndOfBlock),
    "isAtTheStartOfBlock": (()=>isAtTheStartOfBlock),
    "isOverlappingSelection": (()=>isOverlappingSelection),
    "isPointAfterSelection": (()=>isPointAfterSelection),
    "isPointBeforeSelection": (()=>isPointBeforeSelection),
    "isSelectionCollapsed": (()=>isSelectionCollapsed),
    "isSelectionExpanded": (()=>isSelectionExpanded)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
;
;
const isSelectionCollapsed = (snapshot)=>snapshot.context.selection ? JSON.stringify(snapshot.context.selection.anchor.path) === JSON.stringify(snapshot.context.selection.focus.path) && snapshot.context.selection?.anchor.offset === snapshot.context.selection?.focus.offset : !1;
function createGuards({ schema }) {
    function isListBlock(block) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextListBlock"])(block) && block._type === schema.block.name;
    }
    function isTextBlock(block) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) && block._type === schema.block.name;
    }
    return {
        isListBlock,
        isTextBlock
    };
}
const getFocusBlock = (snapshot)=>{
    const key = snapshot.context.selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0, node = key ? snapshot.context.value.find((block)=>block._key === key) : void 0;
    return node && key ? {
        node,
        path: [
            {
                _key: key
            }
        ]
    } : void 0;
}, getFocusListBlock = (snapshot)=>{
    const guards = createGuards(snapshot.context), focusBlock = getFocusBlock(snapshot);
    return focusBlock && guards.isListBlock(focusBlock.node) ? {
        node: focusBlock.node,
        path: focusBlock.path
    } : void 0;
}, getFocusTextBlock = (snapshot)=>{
    const focusBlock = getFocusBlock(snapshot);
    return focusBlock && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(focusBlock.node) ? {
        node: focusBlock.node,
        path: focusBlock.path
    } : void 0;
}, getFocusBlockObject = (snapshot)=>{
    const focusBlock = getFocusBlock(snapshot);
    return focusBlock && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(focusBlock.node) ? {
        node: focusBlock.node,
        path: focusBlock.path
    } : void 0;
}, getFocusChild = (snapshot)=>{
    const focusBlock = getFocusTextBlock(snapshot);
    if (!focusBlock) return;
    const key = snapshot.context.selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.focus.path[2]) ? snapshot.context.selection.focus.path[2]._key : void 0, node = key ? focusBlock.node.children.find((span)=>span._key === key) : void 0;
    return node && key ? {
        node,
        path: [
            ...focusBlock.path,
            "children",
            {
                _key: key
            }
        ]
    } : void 0;
}, getFocusSpan = (snapshot)=>{
    const focusChild = getFocusChild(snapshot);
    return focusChild && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(focusChild.node) ? {
        node: focusChild.node,
        path: focusChild.path
    } : void 0;
}, getFirstBlock = (snapshot)=>{
    const node = snapshot.context.value[0];
    return node ? {
        node,
        path: [
            {
                _key: node._key
            }
        ]
    } : void 0;
}, getLastBlock = (snapshot)=>{
    const node = snapshot.context.value[snapshot.context.value.length - 1] ? snapshot.context.value[snapshot.context.value.length - 1] : void 0;
    return node ? {
        node,
        path: [
            {
                _key: node._key
            }
        ]
    } : void 0;
}, getSelectedBlocks = (snapshot)=>{
    if (!snapshot.context.selection) return [];
    const selectedBlocks = [], startKey = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, endKey = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0;
    if (!startKey || !endKey) return selectedBlocks;
    for (const block of snapshot.context.value){
        if (block._key === startKey) {
            if (selectedBlocks.push({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            }), startKey === endKey) break;
            continue;
        }
        if (block._key === endKey) {
            selectedBlocks.push({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            });
            break;
        }
        selectedBlocks.length > 0 && selectedBlocks.push({
            node: block,
            path: [
                {
                    _key: block._key
                }
            ]
        });
    }
    return selectedBlocks;
}, getSelectionStartBlock = (snapshot)=>{
    if (!snapshot.context.selection) return;
    const key = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, node = key ? snapshot.context.value.find((block)=>block._key === key) : void 0;
    return node && key ? {
        node,
        path: [
            {
                _key: key
            }
        ]
    } : void 0;
}, getSelectionEndBlock = (snapshot)=>{
    if (!snapshot.context.selection) return;
    const key = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0, node = key ? snapshot.context.value.find((block)=>block._key === key) : void 0;
    return node && key ? {
        node,
        path: [
            {
                _key: key
            }
        ]
    } : void 0;
}, getPreviousBlock = (snapshot)=>{
    let previousBlock;
    const selectionStartBlock = getSelectionStartBlock(snapshot);
    if (!selectionStartBlock) return;
    let foundSelectionStartBlock = !1;
    for (const block of snapshot.context.value){
        if (block._key === selectionStartBlock.node._key) {
            foundSelectionStartBlock = !0;
            break;
        }
        previousBlock = {
            node: block,
            path: [
                {
                    _key: block._key
                }
            ]
        };
    }
    if (foundSelectionStartBlock && previousBlock) return previousBlock;
}, getNextBlock = (snapshot)=>{
    let nextBlock;
    const selectionEndBlock = getSelectionEndBlock(snapshot);
    if (!selectionEndBlock) return;
    let foundSelectionEndBlock = !1;
    for (const block of snapshot.context.value){
        if (block._key === selectionEndBlock.node._key) {
            foundSelectionEndBlock = !0;
            continue;
        }
        if (foundSelectionEndBlock) {
            nextBlock = {
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            };
            break;
        }
    }
    if (foundSelectionEndBlock && nextBlock) return nextBlock;
}, getSelectionEndPoint = (snapshot)=>{
    if (snapshot.context.selection) return snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus;
}, getSelectionStartPoint = (snapshot)=>{
    if (snapshot.context.selection) return snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor;
}, getNextInlineObject = (snapshot)=>{
    const focusTextBlock = getFocusTextBlock(snapshot), selectionEndPoint = getSelectionEndPoint(snapshot), selectionEndPointChildKey = selectionEndPoint && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(selectionEndPoint.path[2]) ? selectionEndPoint.path[2]._key : void 0;
    if (!focusTextBlock || !selectionEndPointChildKey) return;
    let endPointChildFound = !1, inlineObject;
    for (const child of focusTextBlock.node.children){
        if (child._key === selectionEndPointChildKey) {
            endPointChildFound = !0;
            continue;
        }
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])(snapshot.context, child) && endPointChildFound) {
            inlineObject = {
                node: child,
                path: [
                    ...focusTextBlock.path,
                    "children",
                    {
                        _key: child._key
                    }
                ]
            };
            break;
        }
    }
    return inlineObject;
}, getPreviousInlineObject = (snapshot)=>{
    const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartPointChildKey = selectionStartPoint && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(selectionStartPoint.path[2]) ? selectionStartPoint.path[2]._key : void 0;
    if (!focusTextBlock || !selectionStartPointChildKey) return;
    let inlineObject;
    for (const child of focusTextBlock.node.children){
        if (child._key === selectionStartPointChildKey) break;
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSpan"])(snapshot.context, child) || (inlineObject = {
            node: child,
            path: [
                ...focusTextBlock.path,
                "children",
                {
                    _key: child._key
                }
            ]
        });
    }
    return inlineObject;
}, getSelectedSlice = (snapshot)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sliceBlocks"])({
        blocks: snapshot.context.value,
        selection: snapshot.context.selection
    }), getSelectionText = (snapshot)=>getSelectedSlice(snapshot).reduce((text, block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) ? text + block.children.reduce((text2, child)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) ? text2 + child.text : text2, "") : text, ""), isSelectionExpanded = (snapshot)=>!isSelectionCollapsed(snapshot), getCaretWordSelection = (snapshot)=>{
    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) return null;
    const focusTextBlock = getFocusTextBlock(snapshot), selectionStartPoint = getSelectionStartPoint(snapshot), selectionStartOffset = selectionStartPoint ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
        value: snapshot.context.value,
        selectionPoint: selectionStartPoint
    }) : void 0;
    if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) return null;
    const previousInlineObject = getPreviousInlineObject(snapshot), blockStartPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(focusTextBlock), textDirectlyBefore = getSelectionText({
        context: {
            ...snapshot.context,
            selection: {
                anchor: previousInlineObject ? {
                    path: previousInlineObject.path,
                    offset: 0
                } : blockStartPoint,
                focus: selectionStartPoint
            }
        }
    }).split(/\s+/).at(-1), nextInlineObject = getNextInlineObject(snapshot), blockEndPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(focusTextBlock), textDirectlyAfter = getSelectionText({
        context: {
            ...snapshot.context,
            selection: {
                anchor: selectionStartPoint,
                focus: nextInlineObject ? {
                    path: nextInlineObject.path,
                    offset: 0
                } : blockEndPoint
            }
        }
    }).split(/\s+/).at(0);
    if ((textDirectlyBefore === void 0 || textDirectlyBefore === "") && (textDirectlyAfter === void 0 || textDirectlyAfter === "")) return null;
    const caretWordStartOffset = textDirectlyBefore ? {
        ...selectionStartOffset,
        offset: selectionStartOffset.offset - textDirectlyBefore.length
    } : selectionStartOffset, caretWordEndOffset = textDirectlyAfter ? {
        ...selectionStartOffset,
        offset: selectionStartOffset.offset + textDirectlyAfter.length
    } : selectionStartOffset, caretWordStartSelectionPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetToSpanSelectionPoint"])({
        value: snapshot.context.value,
        blockOffset: caretWordStartOffset,
        direction: "backward"
    }), caretWordEndSelectionPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetToSpanSelectionPoint"])({
        value: snapshot.context.value,
        blockOffset: caretWordEndOffset,
        direction: "forward"
    });
    if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) return null;
    const caretWordSelection = {
        anchor: caretWordStartSelectionPoint,
        focus: caretWordEndSelectionPoint
    };
    return isSelectionExpanded({
        context: {
            ...snapshot.context,
            selection: caretWordSelection
        }
    }) ? caretWordSelection : null;
};
function isAtTheEndOfBlock(block) {
    return (snapshot)=>{
        if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) return !1;
        const blockEndPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(block);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualSelectionPoints"])(snapshot.context.selection.focus, blockEndPoint);
    };
}
function isAtTheStartOfBlock(block) {
    return (snapshot)=>{
        if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) return !1;
        const blockStartPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(block);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualSelectionPoints"])(snapshot.context.selection.focus, blockStartPoint);
    };
}
function isPointAfterSelection(point) {
    return (snapshot)=>{
        if (!snapshot.context.selection) return !1;
        const selection = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reverseSelection"])(snapshot.context.selection) : snapshot.context.selection, pointBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(point.path[2]) ? point.path[2]._key : void 0, endBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0, endChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(selection.focus.path[2]) ? selection.focus.path[2]._key : void 0;
        if (!pointBlockKey || !endBlockKey) return !1;
        let after = !1;
        for (const block of snapshot.context.value){
            if (block._key === endBlockKey) {
                if (block._key !== pointBlockKey) {
                    after = !0;
                    break;
                }
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) || !pointChildKey || !endChildKey) break;
                for (const child of block.children){
                    if (child._key === endChildKey) {
                        if (child._key !== pointChildKey) {
                            after = !0;
                            break;
                        }
                        after = point.offset > selection.focus.offset;
                        break;
                    }
                    if (child._key === pointChildKey) break;
                }
            }
            if (block._key === pointBlockKey) break;
        }
        return after;
    };
}
function isPointBeforeSelection(point) {
    return (snapshot)=>{
        if (!snapshot.context.selection) return !1;
        const selection = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reverseSelection"])(snapshot.context.selection) : snapshot.context.selection, pointBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(point.path[0]) ? point.path[0]._key : void 0, pointChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(point.path[2]) ? point.path[2]._key : void 0, startBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(selection.anchor.path[0]) ? selection.anchor.path[0]._key : void 0, startChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(selection.anchor.path[2]) ? selection.anchor.path[2]._key : void 0;
        if (!pointBlockKey || !startBlockKey) return !1;
        let before = !1;
        for (const block of snapshot.context.value){
            if (block._key === pointBlockKey) {
                if (block._key !== startBlockKey) {
                    before = !0;
                    break;
                }
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) || !pointChildKey || !startChildKey) break;
                for (const child of block.children){
                    if (child._key === pointChildKey) {
                        if (child._key !== startChildKey) {
                            before = !0;
                            break;
                        }
                        before = point.offset < selection.anchor.offset;
                        break;
                    }
                    if (child._key === startChildKey) break;
                }
            }
            if (block._key === startBlockKey) break;
        }
        return before;
    };
}
function isOverlappingSelection(selection) {
    return (snapshot)=>{
        if (!selection || !snapshot.context.selection) return !1;
        const selectionStartPoint = getSelectionStartPoint({
            context: {
                ...snapshot.context,
                selection
            }
        }), selectionEndPoint = getSelectionEndPoint({
            context: {
                ...snapshot.context,
                selection
            }
        }), originalSelectionStartPoint = getSelectionStartPoint(snapshot), originalSelectionEndPoint = getSelectionEndPoint(snapshot);
        if (!selectionStartPoint || !selectionEndPoint || !originalSelectionStartPoint || !originalSelectionEndPoint) return !1;
        const startPointBeforeSelection = isPointBeforeSelection(selectionStartPoint)(snapshot), startPointAfterSelection = isPointAfterSelection(selectionStartPoint)(snapshot), endPointBeforeSelection = isPointBeforeSelection(selectionEndPoint)(snapshot), endPointAfterSelection = isPointAfterSelection(selectionEndPoint)(snapshot), originalStartPointBeforeStartPoint = isPointBeforeSelection(originalSelectionStartPoint)({
            ...snapshot,
            context: {
                ...snapshot.context,
                selection: {
                    anchor: selectionStartPoint,
                    focus: selectionStartPoint
                }
            }
        }), originalStartPointAfterStartPoint = isPointAfterSelection(originalSelectionStartPoint)({
            ...snapshot,
            context: {
                ...snapshot.context,
                selection: {
                    anchor: selectionStartPoint,
                    focus: selectionStartPoint
                }
            }
        }), originalEndPointBeforeEndPoint = isPointBeforeSelection(originalSelectionEndPoint)({
            ...snapshot,
            context: {
                ...snapshot.context,
                selection: {
                    anchor: selectionEndPoint,
                    focus: selectionEndPoint
                }
            }
        }), originalEndPointAfterEndPoint = isPointAfterSelection(originalSelectionEndPoint)({
            ...snapshot,
            context: {
                ...snapshot.context,
                selection: {
                    anchor: selectionEndPoint,
                    focus: selectionEndPoint
                }
            }
        }), endPointEqualToOriginalStartPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualSelectionPoints"])(selectionEndPoint, originalSelectionStartPoint), startPointEqualToOriginalEndPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualSelectionPoints"])(selectionStartPoint, originalSelectionEndPoint);
        return endPointBeforeSelection && !endPointEqualToOriginalStartPoint || startPointAfterSelection && !startPointEqualToOriginalEndPoint ? !1 : !originalStartPointBeforeStartPoint && originalStartPointAfterStartPoint && !originalEndPointBeforeEndPoint && originalEndPointAfterEndPoint ? !endPointEqualToOriginalStartPoint : originalStartPointBeforeStartPoint && !originalStartPointAfterStartPoint && originalEndPointBeforeEndPoint && !originalEndPointAfterEndPoint ? !startPointEqualToOriginalEndPoint : !startPointAfterSelection || !startPointBeforeSelection || !endPointAfterSelection || !endPointBeforeSelection;
    };
}
;
 //# sourceMappingURL=selector.is-overlapping-selection.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getActiveAnnotations": (()=>getActiveAnnotations),
    "getActiveListItem": (()=>getActiveListItem),
    "getActiveStyle": (()=>getActiveStyle),
    "getSelectedSpans": (()=>getSelectedSpans),
    "getSelectedTextBlocks": (()=>getSelectedTextBlocks),
    "getTrimmedSelection": (()=>getTrimmedSelection),
    "isActiveAnnotation": (()=>isActiveAnnotation),
    "isActiveDecorator": (()=>isActiveDecorator),
    "isActiveListItem": (()=>isActiveListItem),
    "isActiveStyle": (()=>isActiveStyle),
    "isSelectingEntireBlocks": (()=>isSelectingEntireBlocks)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
;
;
;
;
const getSelectedSpans = (snapshot)=>{
    if (!snapshot.context.selection) return [];
    const selectedSpans = [], startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(startPoint.path[0]) ? startPoint.path[0]._key : void 0, endBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(endPoint.path[0]) ? endPoint.path[0]._key : void 0;
    if (!startBlockKey || !endBlockKey) return selectedSpans;
    const startSpanKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(startPoint.path[2]) ? startPoint.path[2]._key : void 0, endSpanKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(endPoint.path[2]) ? endPoint.path[2]._key : void 0;
    let startBlockFound = !1;
    for (const block of snapshot.context.value)if (block._key === startBlockKey && (startBlockFound = !0), !!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) {
        if (block._key === startBlockKey) {
            for (const child of block.children)if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
                if (startSpanKey && child._key === startSpanKey) {
                    if (startPoint.offset < child.text.length && selectedSpans.push({
                        node: child,
                        path: [
                            {
                                _key: block._key
                            },
                            "children",
                            {
                                _key: child._key
                            }
                        ]
                    }), startSpanKey === endSpanKey) break;
                    continue;
                }
                if (endSpanKey && child._key === endSpanKey) {
                    endPoint.offset > 0 && selectedSpans.push({
                        node: child,
                        path: [
                            {
                                _key: block._key
                            },
                            "children",
                            {
                                _key: child._key
                            }
                        ]
                    });
                    break;
                }
                selectedSpans.length > 0 && selectedSpans.push({
                    node: child,
                    path: [
                        {
                            _key: block._key
                        },
                        "children",
                        {
                            _key: child._key
                        }
                    ]
                });
            }
            if (startBlockKey === endBlockKey) break;
            continue;
        }
        if (block._key === endBlockKey) {
            for (const child of block.children)if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
                if (endSpanKey && child._key === endSpanKey) {
                    endPoint.offset > 0 && selectedSpans.push({
                        node: child,
                        path: [
                            {
                                _key: block._key
                            },
                            "children",
                            {
                                _key: child._key
                            }
                        ]
                    });
                    break;
                }
                selectedSpans.push({
                    node: child,
                    path: [
                        {
                            _key: block._key
                        },
                        "children",
                        {
                            _key: child._key
                        }
                    ]
                });
            }
            break;
        }
        if (startBlockFound) for (const child of block.children)(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) && selectedSpans.push({
            node: child,
            path: [
                {
                    _key: block._key
                },
                "children",
                {
                    _key: child._key
                }
            ]
        });
    }
    return selectedSpans;
}, getActiveAnnotations = (snapshot)=>{
    if (!snapshot.context.selection) return [];
    const selectedBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot), selectedSpans = getSelectedSpans(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
    if (selectedSpans.length === 0 || !focusSpan) return [];
    if (selectedSpans.length === 1 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot)) {
        if (snapshot.context.selection.focus.offset === 0) return [];
        if (snapshot.context.selection.focus.offset === focusSpan.node.text.length) return [];
    }
    return selectedBlocks.flatMap((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block.node) ? block.node.markDefs ?? [] : []).filter((markDef)=>selectedSpans.some((span)=>span.node.marks?.includes(markDef._key)));
}, getActiveListItem = (snapshot)=>{
    if (!snapshot.context.selection) return;
    const guards = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createGuards"])(snapshot.context), selectedTextBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot).map((block)=>block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);
    if (!firstTextBlock) return;
    const firstListItem = firstTextBlock.listItem;
    if (firstListItem && selectedTextBlocks.every((block)=>block.listItem === firstListItem)) return firstListItem;
}, getActiveStyle = (snapshot)=>{
    if (!snapshot.context.selection) return;
    const guards = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createGuards"])(snapshot.context), selectedTextBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot).map((block)=>block.node).filter(guards.isTextBlock), firstTextBlock = selectedTextBlocks.at(0);
    if (!firstTextBlock) return;
    const firstStyle = firstTextBlock.style;
    if (firstStyle && selectedTextBlocks.every((block)=>block.style === firstStyle)) return firstStyle;
}, getSelectedTextBlocks = (snapshot)=>{
    if (!snapshot.context.selection) return [];
    const selectedTextBlocks = [], startKey = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0, endKey = snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(snapshot.context.selection.anchor.path[0]) ? snapshot.context.selection.anchor.path[0]._key : void 0 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(snapshot.context.selection.focus.path[0]) ? snapshot.context.selection.focus.path[0]._key : void 0;
    if (!startKey || !endKey) return selectedTextBlocks;
    for (const block of snapshot.context.value){
        if (block._key === startKey) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(snapshot.context.schema, block) && selectedTextBlocks.push({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            }), startKey === endKey) break;
            continue;
        }
        if (block._key === endKey) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(snapshot.context.schema, block) && selectedTextBlocks.push({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            });
            break;
        }
        selectedTextBlocks.length > 0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(snapshot.context.schema, block) && selectedTextBlocks.push({
            node: block,
            path: [
                {
                    _key: block._key
                }
            ]
        });
    }
    return selectedTextBlocks;
}, getTrimmedSelection = (snapshot)=>{
    if (!snapshot.context.selection) return snapshot.context.selection;
    const startPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionStartPoint"])(snapshot), endPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionEndPoint"])(snapshot);
    if (!startPoint || !endPoint) return snapshot.context.selection;
    const startBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(startPoint.path[0]) ? startPoint.path[0]._key : null, startChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(startPoint.path[2]) ? startPoint.path[2]._key : null, endBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(endPoint.path[0]) ? endPoint.path[0]._key : null, endChildKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(endPoint.path[2]) ? endPoint.path[2]._key : null;
    if (!startBlockKey || !endBlockKey) return snapshot.context.selection;
    let startBlockFound = !1, adjustedStartPoint, trimStartPoint = !1, adjustedEndPoint, trimEndPoint = !1, previousPotentialEndpoint;
    for (const block of snapshot.context.value)if (!(block._key === startBlockKey && (startBlockFound = !0, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmptyTextBlock"])(block))) && startBlockFound && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block)) {
        if (block._key === endBlockKey && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmptyTextBlock"])(block)) break;
        for (const child of block.children){
            if (child._key === endChildKey && (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) || endPoint.offset === 0)) {
                adjustedEndPoint = previousPotentialEndpoint ? {
                    path: [
                        {
                            _key: previousPotentialEndpoint.blockKey
                        },
                        "children",
                        {
                            _key: previousPotentialEndpoint.span._key
                        }
                    ],
                    offset: previousPotentialEndpoint.span.text.length
                } : void 0, trimEndPoint = !0;
                break;
            }
            if (trimStartPoint) {
                const lonelySpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) && block.children.length === 1;
                ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) && child.text.length > 0 || lonelySpan) && (adjustedStartPoint = {
                    path: [
                        {
                            _key: block._key
                        },
                        "children",
                        {
                            _key: child._key
                        }
                    ],
                    offset: 0
                }, previousPotentialEndpoint = {
                    blockKey: block._key,
                    span: child
                }, trimStartPoint = !1);
                continue;
            }
            if (child._key === startChildKey) {
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child)) {
                    trimStartPoint = !0;
                    continue;
                }
                if (startPoint.offset === child.text.length) {
                    trimStartPoint = !0, previousPotentialEndpoint = child.text.length > 0 ? {
                        blockKey: block._key,
                        span: child
                    } : previousPotentialEndpoint;
                    continue;
                }
            }
            previousPotentialEndpoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(child) && child.text.length > 0 ? {
                blockKey: block._key,
                span: child
            } : previousPotentialEndpoint;
        }
        if (block._key === endBlockKey) break;
    }
    const trimmedSelection = snapshot.context.selection.backward ? {
        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,
        focus: adjustedStartPoint ?? startPoint,
        backward: !0
    } : {
        anchor: adjustedStartPoint ?? startPoint,
        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint
    };
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])({
        context: {
            ...snapshot.context,
            selection: trimmedSelection
        }
    })) {
        const focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])({
            context: {
                ...snapshot.context,
                selection: trimmedSelection
            }
        });
        if (focusTextBlock && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmptyTextBlock"])(focusTextBlock.node)) return null;
    }
    return trimmedSelection;
};
function isActiveAnnotation(annotation) {
    return (snapshot)=>{
        if (!snapshot.context.selection) return !1;
        const selectedBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot), selectedSpans = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionExpanded"])(snapshot) ? getSelectedSpans(snapshot) : focusSpan ? [
            focusSpan
        ] : [];
        if (selectedSpans.length === 0 || selectedSpans.some((span)=>!span.node.marks || span.node.marks?.length === 0)) return !1;
        const selectionMarkDefs = selectedBlocks.flatMap((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block.node) ? block.node.markDefs ?? [] : []);
        return selectedSpans.every((span)=>(span.node.marks?.flatMap((mark)=>{
                const markDef = selectionMarkDefs.find((markDef2)=>markDef2._key === mark);
                return markDef ? [
                    markDef._type
                ] : [];
            }) ?? []).includes(annotation));
    };
}
function isActiveDecorator(decorator) {
    return (snapshot)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionExpanded"])(snapshot)) {
            const selectedSpans = getSelectedSpans(snapshot);
            return selectedSpans.length > 0 && selectedSpans.every((span)=>span.node.marks?.includes(decorator));
        }
        return snapshot.context.activeDecorators.includes(decorator);
    };
}
function isActiveListItem(listItem) {
    return (snapshot)=>getActiveListItem(snapshot) === listItem;
}
function isActiveStyle(style) {
    return (snapshot)=>getActiveStyle(snapshot) === style;
}
const isSelectingEntireBlocks = (snapshot)=>{
    if (!snapshot.context.selection) return !1;
    const startPoint = snapshot.context.selection.backward ? snapshot.context.selection.focus : snapshot.context.selection.anchor, endPoint = snapshot.context.selection.backward ? snapshot.context.selection.anchor : snapshot.context.selection.focus, startBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionStartBlock"])(snapshot), endBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionEndBlock"])(snapshot);
    if (!startBlock || !endBlock) return !1;
    const startBlockStartPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(startBlock), endBlockEndPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(endBlock);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualSelectionPoints"])(startBlockStartPoint, startPoint) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualSelectionPoints"])(endBlockEndPoint, endPoint);
};
;
 //# sourceMappingURL=selector.is-selecting-entire-blocks.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "coreBehaviors": (()=>coreBehaviors),
    "defineBehavior": (()=>defineBehavior),
    "isHotkey": (()=>isHotkey),
    "raise": (()=>raise)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
;
;
;
const IS_MAC = typeof window < "u" && /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent), modifiers = {
    alt: "altKey",
    control: "ctrlKey",
    meta: "metaKey",
    shift: "shiftKey"
}, aliases = {
    add: "+",
    break: "pause",
    cmd: "meta",
    command: "meta",
    ctl: "control",
    ctrl: "control",
    del: "delete",
    down: "arrowdown",
    esc: "escape",
    ins: "insert",
    left: "arrowleft",
    mod: IS_MAC ? "meta" : "control",
    opt: "alt",
    option: "alt",
    return: "enter",
    right: "arrowright",
    space: " ",
    spacebar: " ",
    up: "arrowup",
    win: "meta",
    windows: "meta"
}, keyCodes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    control: 17,
    alt: 18,
    pause: 19,
    capslock: 20,
    escape: 27,
    " ": 32,
    pageup: 33,
    pagedown: 34,
    end: 35,
    home: 36,
    arrowleft: 37,
    arrowup: 38,
    arrowright: 39,
    arrowdown: 40,
    insert: 45,
    delete: 46,
    meta: 91,
    numlock: 144,
    scrolllock: 145,
    ";": 186,
    "=": 187,
    ",": 188,
    "-": 189,
    ".": 190,
    "/": 191,
    "`": 192,
    "[": 219,
    "\\": 220,
    "]": 221,
    "'": 222,
    f1: 112,
    f2: 113,
    f3: 114,
    f4: 115,
    f5: 116,
    f6: 117,
    f7: 118,
    f8: 119,
    f9: 120,
    f10: 121,
    f11: 122,
    f12: 123,
    f13: 124,
    f14: 125,
    f15: 126,
    f16: 127,
    f17: 128,
    f18: 129,
    f19: 130,
    f20: 131
};
function isHotkey(hotkey, event) {
    return compareHotkey(parseHotkey(hotkey), event);
}
function parseHotkey(hotkey) {
    const parsedHotkey = {
        altKey: !1,
        ctrlKey: !1,
        metaKey: !1,
        shiftKey: !1
    }, hotkeySegments = hotkey.replace("++", "+add").split("+");
    for (const rawHotkeySegment of hotkeySegments){
        const optional = rawHotkeySegment.endsWith("?") && rawHotkeySegment.length > 1, hotkeySegment = optional ? rawHotkeySegment.slice(0, -1) : rawHotkeySegment, keyName = toKeyName(hotkeySegment), modifier = modifiers[keyName], alias = aliases[hotkeySegment], code = keyCodes[keyName];
        if (hotkeySegment.length > 1 && modifier === void 0 && alias === void 0 && code === void 0) throw new TypeError(`Unknown modifier: "${hotkeySegment}"`);
        (hotkeySegments.length === 1 || modifier === void 0) && (parsedHotkey.key = keyName, parsedHotkey.keyCode = toKeyCode(hotkeySegment)), modifier !== void 0 && (parsedHotkey[modifier] = optional ? null : !0);
    }
    return parsedHotkey;
}
function compareHotkey(parsedHotkey, event) {
    return (parsedHotkey.altKey == null || parsedHotkey.altKey === event.altKey) && (parsedHotkey.ctrlKey == null || parsedHotkey.ctrlKey === event.ctrlKey) && (parsedHotkey.metaKey == null || parsedHotkey.metaKey === event.metaKey) && (parsedHotkey.shiftKey == null || parsedHotkey.shiftKey === event.shiftKey) ? parsedHotkey.keyCode !== void 0 && event.keyCode !== void 0 ? parsedHotkey.keyCode === 91 && event.keyCode === 93 ? !0 : parsedHotkey.keyCode === event.keyCode : parsedHotkey.keyCode === event.keyCode || parsedHotkey.key === event.key.toLowerCase() : !1;
}
function toKeyCode(name) {
    const keyName = toKeyName(name);
    return keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0);
}
function toKeyName(name) {
    const keyName = name.toLowerCase();
    return aliases[keyName] ?? keyName;
}
function defineBehavior(behavior) {
    return behavior;
}
function raise(event) {
    return {
        type: "raise",
        event
    };
}
const addAnnotationOnCollapsedSelection = {
    on: "annotation.add",
    guard: ({ snapshot })=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot)) return !1;
        const caretWordSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getCaretWordSelection"])(snapshot);
        return !caretWordSelection || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionExpanded"])({
            context: {
                ...snapshot.context,
                selection: caretWordSelection
            }
        }) ? !1 : {
            caretWordSelection
        };
    },
    actions: [
        ({ event }, { caretWordSelection })=>[
                raise({
                    type: "select",
                    selection: caretWordSelection
                }),
                raise({
                    type: "annotation.add",
                    annotation: event.annotation
                })
            ]
    ]
}, coreAnnotationBehaviors = {
    addAnnotationOnCollapsedSelection
}, arrowDownOnLonelyBlockObject = {
    on: "keyboard.keydown",
    guard: ({ snapshot, event })=>{
        if (!isHotkey("ArrowDown", event.originEvent) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot)) return !1;
        const focusBlockObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlockObject"])(snapshot), nextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getNextBlock"])(snapshot);
        return focusBlockObject && !nextBlock;
    },
    actions: [
        ({ snapshot })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name
                    },
                    placement: "after"
                })
            ]
    ]
}, arrowUpOnLonelyBlockObject = {
    on: "keyboard.keydown",
    guard: ({ snapshot, event })=>{
        if (!isHotkey("ArrowUp", event.originEvent) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot)) return !1;
        const focusBlockObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlockObject"])(snapshot), previousBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousBlock"])(snapshot);
        return focusBlockObject && !previousBlock;
    },
    actions: [
        ({ snapshot })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name
                    },
                    placement: "before"
                })
            ]
    ]
}, breakingBlockObject = {
    on: "insert.break",
    guard: ({ snapshot })=>{
        const focusBlockObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlockObject"])(snapshot);
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot) && focusBlockObject !== void 0;
    },
    actions: [
        ({ snapshot })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name
                    },
                    placement: "after"
                })
            ]
    ]
}, clickingAboveLonelyBlockObject = {
    on: "mouse.click",
    guard: ({ snapshot, event })=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot)) return !1;
        const focusBlockObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlockObject"])(snapshot), previousBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousBlock"])(snapshot);
        return event.position.isEditor && event.position.block === "start" && focusBlockObject && !previousBlock;
    },
    actions: [
        ({ snapshot })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name
                    },
                    placement: "before"
                })
            ]
    ]
}, clickingBelowLonelyBlockObject = {
    on: "mouse.click",
    guard: ({ snapshot, event })=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot)) return !1;
        const focusBlockObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlockObject"])(snapshot), nextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getNextBlock"])(snapshot);
        return event.position.isEditor && event.position.block === "end" && focusBlockObject && !nextBlock;
    },
    actions: [
        ({ snapshot })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name
                    },
                    placement: "after"
                })
            ]
    ]
}, deletingEmptyTextBlockAfterBlockObject = {
    on: "delete.backward",
    guard: ({ snapshot })=>{
        const focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), previousBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousBlock"])(snapshot);
        return !focusTextBlock || !selectionCollapsed || !previousBlock ? !1 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmptyTextBlock"])(focusTextBlock.node) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(previousBlock.node) ? {
            focusTextBlock,
            previousBlock
        } : !1;
    },
    actions: [
        (_, { focusTextBlock, previousBlock })=>[
                raise({
                    type: "delete.block",
                    at: focusTextBlock.path
                }),
                raise({
                    type: "select",
                    selection: {
                        anchor: {
                            path: previousBlock.path,
                            offset: 0
                        },
                        focus: {
                            path: previousBlock.path,
                            offset: 0
                        }
                    }
                })
            ]
    ]
}, deletingEmptyTextBlockBeforeBlockObject = {
    on: "delete.forward",
    guard: ({ snapshot })=>{
        const focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), nextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getNextBlock"])(snapshot);
        return !focusTextBlock || !selectionCollapsed || !nextBlock ? !1 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmptyTextBlock"])(focusTextBlock.node) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(nextBlock.node) ? {
            focusTextBlock,
            nextBlock
        } : !1;
    },
    actions: [
        (_, { focusTextBlock, nextBlock })=>[
                raise({
                    type: "delete.block",
                    at: focusTextBlock.path
                }),
                raise({
                    type: "select",
                    selection: {
                        anchor: {
                            path: nextBlock.path,
                            offset: 0
                        },
                        focus: {
                            path: nextBlock.path,
                            offset: 0
                        }
                    }
                })
            ]
    ]
}, coreBlockObjectBehaviors = {
    arrowDownOnLonelyBlockObject,
    arrowUpOnLonelyBlockObject,
    breakingBlockObject,
    clickingAboveLonelyBlockObject,
    clickingBelowLonelyBlockObject,
    deletingEmptyTextBlockAfterBlockObject,
    deletingEmptyTextBlockBeforeBlockObject
}, coreDecoratorBehaviors = {
    strongShortcut: {
        on: "keyboard.keydown",
        guard: ({ snapshot, event })=>isHotkey("mod+b", event.originEvent) && snapshot.context.schema.decorators.some((decorator)=>decorator.value === "strong"),
        actions: [
            ()=>[
                    raise({
                        type: "decorator.toggle",
                        decorator: "strong"
                    })
                ]
        ]
    },
    emShortcut: {
        on: "keyboard.keydown",
        guard: ({ snapshot, event })=>isHotkey("mod+i", event.originEvent) && snapshot.context.schema.decorators.some((decorator)=>decorator.value === "em"),
        actions: [
            ()=>[
                    raise({
                        type: "decorator.toggle",
                        decorator: "em"
                    })
                ]
        ]
    },
    underlineShortcut: {
        on: "keyboard.keydown",
        guard: ({ snapshot, event })=>isHotkey("mod+u", event.originEvent) && snapshot.context.schema.decorators.some((decorator)=>decorator.value === "underline"),
        actions: [
            ()=>[
                    raise({
                        type: "decorator.toggle",
                        decorator: "underline"
                    })
                ]
        ]
    },
    codeShortcut: {
        on: "keyboard.keydown",
        guard: ({ snapshot, event })=>isHotkey("mod+'", event.originEvent) && snapshot.context.schema.decorators.some((decorator)=>decorator.value === "code"),
        actions: [
            ()=>[
                    raise({
                        type: "decorator.toggle",
                        decorator: "code"
                    })
                ]
        ]
    }
}, coreDndBehaviors = [
    /**
   * When dragging over the drag origin, we don't want to show the caret in the
   * text.
   */ {
        on: "drag.dragover",
        guard: ({ snapshot, event })=>{
            const dragOrigin = snapshot.beta.internalDrag?.origin;
            return dragOrigin ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isOverlappingSelection"])(event.position.selection)({
                ...snapshot,
                context: {
                    ...snapshot.context,
                    selection: dragOrigin.selection
                }
            }) : !1;
        },
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }
], breakingAtTheEndOfTextBlock = {
    on: "insert.break",
    guard: ({ snapshot })=>{
        const focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot);
        if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) return !1;
        const atTheEndOfBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAtTheEndOfBlock"])(focusTextBlock)(snapshot), focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;
        return atTheEndOfBlock ? {
            focusListItem,
            focusLevel
        } : !1;
    },
    actions: [
        ({ snapshot }, { focusListItem, focusLevel })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name,
                        children: [
                            {
                                _type: snapshot.context.schema.span.name,
                                text: "",
                                marks: []
                            }
                        ],
                        markDefs: [],
                        listItem: focusListItem,
                        level: focusLevel,
                        style: snapshot.context.schema.styles[0]?.value
                    },
                    placement: "after"
                })
            ]
    ]
}, breakingAtTheStartOfTextBlock = {
    on: "insert.break",
    guard: ({ snapshot })=>{
        const focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot);
        if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) return !1;
        const focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot), focusDecorators = focusSpan?.node.marks?.filter((mark)=>snapshot.context.schema.decorators.some((decorator)=>decorator.value === mark) ?? []), focusAnnotations = focusSpan?.node.marks?.filter((mark)=>!snapshot.context.schema.decorators.some((decorator)=>decorator.value === mark)) ?? [], focusListItem = focusTextBlock.node.listItem, focusLevel = focusTextBlock.node.level;
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isAtTheStartOfBlock"])(focusTextBlock)(snapshot) ? {
            focusAnnotations,
            focusDecorators,
            focusListItem,
            focusLevel
        } : !1;
    },
    actions: [
        ({ snapshot }, { focusAnnotations, focusDecorators, focusListItem, focusLevel })=>[
                raise({
                    type: "insert.block",
                    block: {
                        _type: snapshot.context.schema.block.name,
                        children: [
                            {
                                _type: snapshot.context.schema.span.name,
                                marks: focusAnnotations.length === 0 ? focusDecorators : [],
                                text: ""
                            }
                        ],
                        listItem: focusListItem,
                        level: focusLevel,
                        style: snapshot.context.schema.styles[0]?.value
                    },
                    placement: "before",
                    select: "none"
                })
            ]
    ]
}, coreInsertBreakBehaviors = {
    breakingAtTheEndOfTextBlock,
    breakingAtTheStartOfTextBlock
}, MAX_LIST_LEVEL = 10, clearListOnBackspace = {
    on: "delete.backward",
    guard: ({ snapshot })=>{
        const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
        return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level === 1 ? {
            focusTextBlock
        } : !1;
    },
    actions: [
        (_, { focusTextBlock })=>[
                raise({
                    type: "block.unset",
                    props: [
                        "listItem",
                        "level"
                    ],
                    at: focusTextBlock.path
                })
            ]
    ]
}, unindentListOnBackspace = {
    on: "delete.backward",
    guard: ({ snapshot })=>{
        const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
        return !selectionCollapsed || !focusTextBlock || !focusSpan ? !1 : focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0 && focusTextBlock.node.level !== void 0 && focusTextBlock.node.level > 1 ? {
            focusTextBlock,
            level: focusTextBlock.node.level - 1
        } : !1;
    },
    actions: [
        (_, { focusTextBlock, level })=>[
                raise({
                    type: "block.set",
                    props: {
                        level
                    },
                    at: focusTextBlock.path
                })
            ]
    ]
}, clearListOnEnter = {
    on: "insert.break",
    guard: ({ snapshot })=>{
        const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusListBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusListBlock"])(snapshot);
        return !selectionCollapsed || !focusListBlock || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEmptyTextBlock"])(focusListBlock.node) ? !1 : {
            focusListBlock
        };
    },
    actions: [
        (_, { focusListBlock })=>[
                raise({
                    type: "block.unset",
                    props: [
                        "listItem",
                        "level"
                    ],
                    at: focusListBlock.path
                })
            ]
    ]
}, indentListOnTab = {
    on: "keyboard.keydown",
    guard: ({ snapshot, event })=>{
        if (!isHotkey("Tab", event.originEvent)) return !1;
        const selectedBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot), guards = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createGuards"])(snapshot.context), selectedListBlocks = selectedBlocks.flatMap((block)=>guards.isListBlock(block.node) ? [
                {
                    node: block.node,
                    path: block.path
                }
            ] : []);
        return selectedListBlocks.length === selectedBlocks.length ? {
            selectedListBlocks
        } : !1;
    },
    actions: [
        (_, { selectedListBlocks })=>selectedListBlocks.map((selectedListBlock)=>raise({
                    type: "block.set",
                    props: {
                        level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level + 1))
                    },
                    at: selectedListBlock.path
                }))
    ]
}, unindentListOnShiftTab = {
    on: "keyboard.keydown",
    guard: ({ snapshot, event })=>{
        if (!isHotkey("Shift+Tab", event.originEvent)) return !1;
        const selectedBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot), guards = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createGuards"])(snapshot.context), selectedListBlocks = selectedBlocks.flatMap((block)=>guards.isListBlock(block.node) ? [
                {
                    node: block.node,
                    path: block.path
                }
            ] : []);
        return selectedListBlocks.length === selectedBlocks.length ? {
            selectedListBlocks
        } : !1;
    },
    actions: [
        (_, { selectedListBlocks })=>selectedListBlocks.map((selectedListBlock)=>raise({
                    type: "block.set",
                    props: {
                        level: Math.min(MAX_LIST_LEVEL, Math.max(1, selectedListBlock.node.level - 1))
                    },
                    at: selectedListBlock.path
                }))
    ]
}, coreListBehaviors = {
    clearListOnBackspace,
    unindentListOnBackspace,
    clearListOnEnter,
    indentListOnTab,
    unindentListOnShiftTab
}, coreBehaviors = [
    coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,
    coreDecoratorBehaviors.strongShortcut,
    coreDecoratorBehaviors.emShortcut,
    coreDecoratorBehaviors.underlineShortcut,
    coreDecoratorBehaviors.codeShortcut,
    ...coreDndBehaviors,
    coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,
    coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,
    coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,
    coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,
    coreBlockObjectBehaviors.breakingBlockObject,
    coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,
    coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,
    coreListBehaviors.clearListOnBackspace,
    coreListBehaviors.unindentListOnBackspace,
    coreListBehaviors.clearListOnEnter,
    coreListBehaviors.indentListOnTab,
    coreListBehaviors.unindentListOnShiftTab,
    coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,
    coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock
];
;
 //# sourceMappingURL=behavior.core.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "EditorActorContext": (()=>EditorActorContext),
    "EditorProvider": (()=>EditorProvider),
    "KEY_TO_VALUE_ELEMENT": (()=>KEY_TO_VALUE_ELEMENT),
    "PortableTextEditor": (()=>PortableTextEditor),
    "debugWithName": (()=>debugWithName),
    "defaultKeyGenerator": (()=>defaultKeyGenerator),
    "defineSchema": (()=>defineSchema),
    "fromSlateValue": (()=>fromSlateValue),
    "getEditorSnapshot": (()=>getEditorSnapshot),
    "getFirstBlock": (()=>getFirstBlock),
    "getLastBlock": (()=>getLastBlock),
    "getNodeBlock": (()=>getNodeBlock),
    "isEqualToEmptyEditor": (()=>isEqualToEmptyEditor),
    "moveRangeByOperation": (()=>moveRangeByOperation),
    "toPortableTextRange": (()=>toPortableTextRange),
    "toSlateRange": (()=>toSlateRange),
    "useEditor": (()=>useEditor),
    "useEditorSelector": (()=>useEditorSelector),
    "usePortableTextEditor": (()=>usePortableTextEditor),
    "usePortableTextEditorSelection": (()=>usePortableTextEditorSelection)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@xstate/react/dist/xstate-react.development.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/debug/src/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/slate/dist/index.es.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/xstate.development.esm.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__G__as__stateIn$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-1db27a82.development.esm.js [app-ssr] (ecmascript) <export G as stateIn>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/actors/dist/xstate-actors.development.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-0acd9069.development.esm.js [app-ssr] (ecmascript) <export a as assign>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__b__as__enqueueActions$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-0acd9069.development.esm.js [app-ssr] (ecmascript) <export b as enqueueActions>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-0acd9069.development.esm.js [app-ssr] (ecmascript) <export e as emit>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__D__as__and$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-1db27a82.development.esm.js [app-ssr] (ecmascript) <export D as and>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__E__as__not$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-1db27a82.development.esm.js [app-ssr] (ecmascript) <export E as not>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__A__as__createActor$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/raise-1db27a82.development.esm.js [app-ssr] (ecmascript) <export A as createActor>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/patches/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/flatten.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isPlainObject$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isPlainObject.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/uniq.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$get$2d$random$2d$values$2d$esm$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/get-random-values-esm/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/block-tools/lib/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$to$2d$html$2f$dist$2f$pt$2d$to$2d$html$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/to-html/dist/pt-to-html.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/schema/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$get$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/get.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isUndefined$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isUndefined.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omitBy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/omitBy.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/omit.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/slate-dom/dist/index.es.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash.startcase/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$rxjs$2f$dist$2f$cjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/rxjs/dist/cjs/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$effect$2d$event$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/use-effect-event/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function createEditorSchema(portableTextType) {
    if (!portableTextType) throw new Error("Parameter 'portabletextType' missing (required)");
    const blockType = portableTextType.of?.find(findBlockType);
    if (!blockType) throw new Error("Block type is not defined in this schema (required)");
    const childrenField = blockType.fields?.find((field)=>field.name === "children");
    if (!childrenField) throw new Error("Children field for block type found in schema (required)");
    const ofType = childrenField.type.of;
    if (!ofType) throw new Error("Valid types for block children not found in schema (required)");
    const spanType = ofType.find((memberType)=>memberType.name === "span");
    if (!spanType) throw new Error("Span type not found in schema (required)");
    const inlineObjectTypes = ofType.filter((memberType)=>memberType.name !== "span") || [], blockObjectTypes = portableTextType.of?.filter((field)=>field.name !== blockType.name) || [];
    return {
        styles: resolveEnabledStyles(blockType),
        decorators: resolveEnabledDecorators(spanType),
        lists: resolveEnabledListItems(blockType),
        block: blockType,
        span: spanType,
        portableText: portableTextType,
        inlineObjects: inlineObjectTypes,
        blockObjects: blockObjectTypes,
        annotations: spanType.annotations
    };
}
function resolveEnabledStyles(blockType) {
    const styleField = blockType.fields?.find((btField)=>btField.name === "style");
    if (!styleField) throw new Error("A field with name 'style' is not defined in the block type (required).");
    const textStyles = styleField.type.options?.list && styleField.type.options.list?.filter((style)=>style.value);
    if (!textStyles || textStyles.length === 0) throw new Error("The style fields need at least one style defined. I.e: {title: 'Normal', value: 'normal'}.");
    return textStyles;
}
function resolveEnabledDecorators(spanType) {
    return spanType.decorators;
}
function resolveEnabledListItems(blockType) {
    const listField = blockType.fields?.find((btField)=>btField.name === "listItem");
    if (!listField) throw new Error("A field with name 'listItem' is not defined in the block type (required).");
    const listItems = listField.type.options?.list && listField.type.options.list.filter((list)=>list.value);
    if (!listItems) throw new Error("The list field need at least to be an empty array");
    return listItems;
}
function findBlockType(type) {
    return type.type ? findBlockType(type.type) : type.name === "block" ? type : null;
}
function defineSchema(definition) {
    return definition;
}
function compileSchemaDefinition(definition) {
    const blockObjects = definition?.blockObjects?.map((blockObject)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineType"])({
            type: "object",
            // Very naive way to work around `SanitySchema.compile` adding default
            // fields to objects with the name `image`
            name: blockObject.name === "image" ? "tmp-image" : blockObject.name,
            title: blockObject.name === "image" && blockObject.title === void 0 ? "Image" : blockObject.title,
            fields: []
        })) ?? [], inlineObjects = definition?.inlineObjects?.map((inlineObject)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineType"])({
            type: "object",
            name: inlineObject.name,
            title: inlineObject.title,
            fields: []
        })) ?? [], portableTextSchema = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineField"])({
        type: "array",
        name: "portable-text",
        of: [
            ...blockObjects.map((blockObject)=>({
                    type: blockObject.name
                })),
            {
                type: "block",
                name: "block",
                of: inlineObjects.map((inlineObject)=>({
                        type: inlineObject.name
                    })),
                marks: {
                    decorators: definition?.decorators?.map((decorator)=>({
                            title: decorator.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(decorator.name),
                            value: decorator.name
                        })) ?? [],
                    annotations: definition?.annotations?.map((annotation)=>({
                            name: annotation.name,
                            type: "object",
                            title: annotation.title
                        })) ?? []
                },
                lists: definition?.lists?.map((list)=>({
                        value: list.name,
                        title: list.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(list.name)
                    })) ?? [],
                styles: definition?.styles?.map((style)=>({
                        value: style.name,
                        title: style.title ?? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2e$startcase$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(style.name)
                    })) ?? []
            }
        ]
    }), schema = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Schema"].compile({
        types: [
            portableTextSchema,
            ...blockObjects,
            ...inlineObjects
        ]
    }).get("portable-text"), pteSchema = createEditorSchema(schema);
    return {
        ...pteSchema,
        blockObjects: pteSchema.blockObjects.map((blockObject)=>blockObject.name === "tmp-image" ? {
                ...blockObject,
                name: "image",
                type: {
                    ...blockObject.type,
                    name: "image"
                }
            } : blockObject)
    };
}
const rootName = "sanity-pte:";
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rootName);
function debugWithName(name) {
    const namespace = `${rootName}${name}`;
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].enabled(namespace) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(namespace) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$debug$2f$src$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rootName);
}
function createKeyedPath(point, value, types) {
    const blockPath = [
        point.path[0]
    ];
    if (!value) return null;
    const block = value[blockPath[0]];
    if (!block) return null;
    const keyedBlockPath = [
        {
            _key: block._key
        }
    ];
    if (block._type !== types.block.name) return keyedBlockPath;
    let keyedChildPath;
    const childPath = point.path.slice(0, 2), child = Array.isArray(block.children) && block.children[childPath[1]];
    return child && (keyedChildPath = [
        "children",
        {
            _key: child._key
        }
    ]), keyedChildPath ? [
        ...keyedBlockPath,
        ...keyedChildPath
    ] : keyedBlockPath;
}
function toSlatePath(path, editor) {
    if (!editor) return [];
    const [block, blockPath] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
        at: [],
        match: (n)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeySegment"])(path[0]) && n._key === path[0]._key
    }))[0] || [
        void 0,
        void 0
    ];
    if (!block || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(block)) return [];
    if (editor.isVoid(block)) return [
        blockPath[0],
        0
    ];
    const childPath = [
        path[2]
    ], childIndex = block.children.findIndex((child)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])([
            {
                _key: child._key
            }
        ], childPath));
    if (childIndex >= 0 && block.children[childIndex]) {
        const child = block.children[childIndex];
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(child) && editor.isVoid(child) ? blockPath.concat(childIndex).concat(0) : blockPath.concat(childIndex);
    }
    return [
        blockPath[0],
        0
    ];
}
function toPortableTextRange(value, range, types) {
    if (!range) return null;
    let anchor = null, focus = null;
    const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types);
    anchorPath && range.anchor && (anchor = {
        path: anchorPath,
        offset: range.anchor.offset
    });
    const focusPath = range.focus && createKeyedPath(range.focus, value, types);
    focusPath && range.focus && (focus = {
        path: focusPath,
        offset: range.focus.offset
    });
    const backward = !!(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isRange(range) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isBackward(range));
    return anchor && focus ? {
        anchor,
        focus,
        backward
    } : null;
}
function toSlateRange(selection, editor) {
    if (!selection || !editor) return null;
    const anchor = {
        path: toSlatePath(selection.anchor.path, editor),
        offset: selection.anchor.offset
    }, focus = {
        path: toSlatePath(selection.focus.path, editor),
        offset: selection.focus.offset
    };
    return focus.path.length === 0 || anchor.path.length === 0 ? null : anchor && focus ? {
        anchor,
        focus
    } : null;
}
function moveRangeByOperation(range, operation) {
    const anchor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].transform(range.anchor, operation), focus = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].transform(range.focus, operation);
    return anchor === null || focus === null ? null : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].equals(anchor, range.anchor) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].equals(focus, range.focus) ? range : {
        anchor,
        focus
    };
}
const VOID_CHILD_KEY = "void-child";
function keepObjectEquality(object, keyMap) {
    const value = keyMap[object._key];
    return value && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(object, value) ? value : (keyMap[object._key] = object, object);
}
function toSlateValue(value, { schemaTypes }, keyMap = {}) {
    return value && Array.isArray(value) ? value.map((block)=>{
        const { _type, _key, ...rest } = block;
        if (block && block._type === schemaTypes.block.name) {
            const textBlock = block;
            let hasInlines = !1;
            const hasMissingStyle = typeof textBlock.style > "u", hasMissingMarkDefs = typeof textBlock.markDefs > "u", hasMissingChildren = typeof textBlock.children > "u", children = (textBlock.children || []).map((child)=>{
                const { _type: cType, _key: cKey, ...cRest } = child;
                return cType !== "span" ? (hasInlines = !0, keepObjectEquality({
                    _type: cType,
                    _key: cKey,
                    children: [
                        {
                            _key: VOID_CHILD_KEY,
                            _type: "span",
                            text: "",
                            marks: []
                        }
                    ],
                    value: cRest,
                    __inline: !0
                }, keyMap)) : child;
            });
            return !hasMissingStyle && !hasMissingMarkDefs && !hasMissingChildren && !hasInlines && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(block) ? block : (hasMissingStyle && (rest.style = schemaTypes.styles[0].value), keepObjectEquality({
                _type,
                _key,
                ...rest,
                children
            }, keyMap));
        }
        return keepObjectEquality({
            _type,
            _key,
            children: [
                {
                    _key: VOID_CHILD_KEY,
                    _type: "span",
                    text: "",
                    marks: []
                }
            ],
            value: rest
        }, keyMap);
    }) : [];
}
function fromSlateValue(value, textBlockType, keyMap = {}) {
    return value.map((block)=>{
        const { _key, _type } = block;
        if (!_key || !_type) throw new Error("Not a valid block");
        if (_type === textBlockType && "children" in block && Array.isArray(block.children) && _key) {
            let hasInlines = !1;
            const children = block.children.map((child)=>{
                const { _type: _cType } = child;
                if ("value" in child && _cType !== "span") {
                    hasInlines = !0;
                    const { value: v, _key: k, _type: t, __inline: _i, children: _c, ...rest } = child;
                    return keepObjectEquality({
                        ...rest,
                        ...v,
                        _key: k,
                        _type: t
                    }, keyMap);
                }
                return child;
            });
            return hasInlines ? keepObjectEquality({
                ...block,
                children,
                _key,
                _type
            }, keyMap) : block;
        }
        const blockValue = "value" in block && block.value;
        return keepObjectEquality({
            _key,
            _type,
            ...typeof blockValue == "object" ? blockValue : {}
        }, keyMap);
    });
}
function isEqualToEmptyEditor(children, schemaTypes) {
    return children === void 0 || children && Array.isArray(children) && children.length === 0 || children && Array.isArray(children) && children.length === 1 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(children[0]) && children[0]._type === schemaTypes.block.name && "style" in children[0] && children[0].style === schemaTypes.styles[0].value && !("listItem" in children[0]) && Array.isArray(children[0].children) && children[0].children.length === 1 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(children[0].children[0]) && children[0].children[0]._type === "span" && !children[0].children[0].marks?.join("") && children[0].children[0].text === "";
}
function getFocusBlock({ editor }) {
    return editor.selection ? Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
        at: editor.selection.focus.path.slice(0, 1),
        match: (n)=>!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(n)
    })).at(0) ?? [
        void 0,
        void 0
    ] : [
        void 0,
        void 0
    ];
}
function getFocusChild({ editor }) {
    const [focusBlock, focusBlockPath] = getFocusBlock({
        editor
    }), childIndex = editor.selection?.focus.path.at(1);
    if (!focusBlock || !focusBlockPath || childIndex === void 0) return [
        void 0,
        void 0
    ];
    const focusChild = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].child(focusBlock, childIndex);
    return focusChild ? [
        focusChild,
        [
            ...focusBlockPath,
            childIndex
        ]
    ] : [
        void 0,
        void 0
    ];
}
function getFirstBlock({ editor }) {
    const firstBlockPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, []).path.at(0);
    return firstBlockPath !== void 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, [
        firstBlockPath
    ]) ?? [
        void 0,
        void 0
    ] : [
        void 0,
        void 0
    ];
}
function getLastBlock({ editor }) {
    const lastBlockPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, []).path.at(0);
    return lastBlockPath !== void 0 ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, [
        lastBlockPath
    ]) ?? [
        void 0,
        void 0
    ] : [
        void 0,
        void 0
    ];
}
function getNodeBlock({ editor, schema, node }) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(node)) return;
    if (isBlockElement({
        editor,
        schema
    }, node)) return elementToBlock({
        schema,
        element: node
    });
    const parent = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
        mode: "highest",
        at: [],
        match: (n)=>isBlockElement({
                editor,
                schema
            }, n) && n.children.some((child)=>child._key === node._key)
    })).at(0)?.at(0);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(parent) ? elementToBlock({
        schema,
        element: parent
    }) : void 0;
}
function elementToBlock({ schema, element }) {
    return fromSlateValue([
        element
    ], schema.block.name)?.at(0);
}
function isBlockElement({ editor, schema }, node) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(node) && !editor.isInline(node) && (schema.block.name === node._type || schema.blockObjects.some((blockObject)=>blockObject.name === node._type));
}
function isListItemActive({ editor, listItem }) {
    if (!editor.selection) return !1;
    const selectedBlocks = [
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
            at: editor.selection,
            match: (node)=>editor.isTextBlock(node)
        })
    ];
    return selectedBlocks.length > 0 ? selectedBlocks.every(([node])=>editor.isListBlock(node) && node.listItem === listItem) : !1;
}
function isStyleActive({ editor, style }) {
    if (!editor.selection) return !1;
    const selectedBlocks = [
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
            at: editor.selection,
            match: (node)=>editor.isTextBlock(node)
        })
    ];
    return selectedBlocks.length > 0 ? selectedBlocks.every(([node])=>node.style === style) : !1;
}
const IS_PROCESSING_REMOTE_CHANGES = /* @__PURE__ */ new WeakMap(), KEY_TO_SLATE_ELEMENT = /* @__PURE__ */ new WeakMap(), KEY_TO_VALUE_ELEMENT = /* @__PURE__ */ new WeakMap(), SLATE_TO_PORTABLE_TEXT_RANGE = /* @__PURE__ */ new WeakMap(), EditorActorContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContext"])({}), PortableTextEditorContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContext"])(null), usePortableTextEditor = ()=>{
    const editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"])(PortableTextEditorContext);
    if (!editor) throw new Error("The `usePortableTextEditor` hook must be used inside the <PortableTextEditor> component's context.");
    return editor;
};
function compileType(rawType) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$schema$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Schema"].compile({
        name: "blockTypeSchema",
        types: [
            rawType
        ]
    }).get(rawType.name);
}
const mutationMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    types: {
        context: {},
        events: {},
        input: {},
        emitted: {}
    },
    actions: {
        "emit has pending patches": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
            type: "has pending patches"
        }),
        "emit mutations": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__b__as__enqueueActions$3e$__["enqueueActions"])(({ context, enqueue })=>{
            for (const bulk of context.pendingMutations)enqueue.emit({
                type: "mutation",
                patches: bulk.patches,
                snapshot: bulk.value
            });
        }),
        "clear pending mutations": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            pendingMutations: []
        }),
        "defer patch": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            pendingMutations: ({ context, event })=>{
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "patch"), context.pendingMutations.length === 0) return [
                    {
                        actionId: event.actionId,
                        value: event.value,
                        patches: [
                            event.patch
                        ]
                    }
                ];
                const lastBulk = context.pendingMutations.at(-1);
                return lastBulk && lastBulk.actionId === event.actionId ? context.pendingMutations.slice(0, -1).concat({
                    value: event.value,
                    actionId: lastBulk.actionId,
                    patches: [
                        ...lastBulk.patches,
                        event.patch
                    ]
                }) : context.pendingMutations.concat({
                    value: event.value,
                    actionId: event.actionId,
                    patches: [
                        event.patch
                    ]
                });
            }
        })
    },
    actors: {
        "type listener": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromCallback"])(({ input, sendBack })=>{
            const originalApply = input.slateEditor.apply;
            return input.slateEditor.apply = (op)=>{
                op.type === "insert_text" || op.type === "remove_text" ? sendBack({
                    type: "typing"
                }) : sendBack({
                    type: "not typing"
                }), originalApply(op);
            }, ()=>{
                input.slateEditor.apply = originalApply;
            };
        })
    },
    guards: {
        "is typing": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__G__as__stateIn$3e$__["stateIn"])({
            typing: "typing"
        }),
        "no pending mutations": ({ context })=>context.pendingMutations.length === 0,
        "slate is normalizing": ({ context })=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isNormalizing(context.slateEditor)
    },
    delays: {
        "mutation debounce": ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : 0,
        "type debounce": ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : 250
    }
}).createMachine({
    id: "mutation",
    context: ({ input })=>({
            pendingMutations: [],
            schema: input.schema,
            slateEditor: input.slateEditor
        }),
    type: "parallel",
    states: {
        typing: {
            initial: "idle",
            invoke: {
                src: "type listener",
                input: ({ context })=>({
                        slateEditor: context.slateEditor
                    })
            },
            states: {
                idle: {
                    on: {
                        typing: {
                            target: "typing"
                        }
                    }
                },
                typing: {
                    after: {
                        "type debounce": {
                            target: "idle"
                        }
                    },
                    on: {
                        "not typing": {
                            target: "idle"
                        },
                        typing: {
                            target: "typing",
                            reenter: !0
                        }
                    }
                }
            }
        },
        mutations: {
            initial: "idle",
            states: {
                idle: {
                    on: {
                        patch: {
                            actions: [
                                "defer patch",
                                "emit has pending patches"
                            ],
                            target: "emitting mutations"
                        }
                    }
                },
                "emitting mutations": {
                    after: {
                        "mutation debounce": [
                            {
                                guard: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__D__as__and$3e$__["and"])([
                                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__E__as__not$3e$__["not"])("is typing"),
                                    "slate is normalizing"
                                ]),
                                target: "idle",
                                actions: [
                                    "emit mutations",
                                    "clear pending mutations"
                                ]
                            },
                            {
                                target: "emitting mutations",
                                reenter: !0
                            }
                        ]
                    },
                    on: {
                        patch: {
                            target: "emitting mutations",
                            actions: [
                                "defer patch"
                            ],
                            reenter: !0
                        }
                    }
                }
            }
        }
    }
});
function validateValue(value, types, keyGenerator) {
    let resolution = null, valid = !0;
    const validChildTypes = [
        types.span.name,
        ...types.inlineObjects.map((t)=>t.name)
    ], validBlockTypes = [
        types.block.name,
        ...types.blockObjects.map((t)=>t.name)
    ];
    return value === void 0 ? {
        valid: !0,
        resolution: null,
        value
    } : !Array.isArray(value) || value.length === 0 ? {
        valid: !1,
        resolution: {
            patches: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([])
            ],
            description: "Editor value must be an array of Portable Text blocks, or undefined.",
            action: "Unset the value",
            item: value,
            i18n: {
                description: "inputs.portable-text.invalid-value.not-an-array.description",
                action: "inputs.portable-text.invalid-value.not-an-array.action"
            }
        },
        value
    } : (value.some((blk, index)=>{
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isPlainObject$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(blk)) return resolution = {
            patches: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                    index
                ])
            ],
            description: `Block must be an object, got ${String(blk)}`,
            action: "Unset invalid item",
            item: blk,
            i18n: {
                description: "inputs.portable-text.invalid-value.not-an-object.description",
                action: "inputs.portable-text.invalid-value.not-an-object.action",
                values: {
                    index
                }
            }
        }, !0;
        if (!blk._key || typeof blk._key != "string") return resolution = {
            patches: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])({
                    ...blk,
                    _key: keyGenerator()
                }, [
                    index
                ])
            ],
            description: `Block at index ${index} is missing required _key.`,
            action: "Set the block with a random _key value",
            item: blk,
            i18n: {
                description: "inputs.portable-text.invalid-value.missing-key.description",
                action: "inputs.portable-text.invalid-value.missing-key.action",
                values: {
                    index
                }
            }
        }, !0;
        if (!blk._type || !validBlockTypes.includes(blk._type)) {
            if (blk._type === "block") {
                const currentBlockTypeName = types.block.name;
                return resolution = {
                    patches: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])({
                            ...blk,
                            _type: currentBlockTypeName
                        }, [
                            {
                                _key: blk._key
                            }
                        ])
                    ],
                    description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,
                    action: `Use type '${currentBlockTypeName}'`,
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.incorrect-block-type.description",
                        action: "inputs.portable-text.invalid-value.incorrect-block-type.action",
                        values: {
                            key: blk._key,
                            expectedTypeName: currentBlockTypeName
                        }
                    }
                }, !0;
            }
            return !blk._type && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])({
                ...blk,
                _type: types.block.name
            }) ? (resolution = {
                patches: [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])({
                        ...blk,
                        _type: types.block.name
                    }, [
                        {
                            _key: blk._key
                        }
                    ])
                ],
                description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,
                action: `Use type '${types.block.name}'`,
                item: blk,
                i18n: {
                    description: "inputs.portable-text.invalid-value.missing-block-type.description",
                    action: "inputs.portable-text.invalid-value.missing-block-type.action",
                    values: {
                        key: blk._key,
                        expectedTypeName: types.block.name
                    }
                }
            }, !0) : blk._type ? (resolution = {
                patches: [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                        {
                            _key: blk._key
                        }
                    ])
                ],
                description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,
                action: "Remove the block",
                item: blk,
                i18n: {
                    description: "inputs.portable-text.invalid-value.disallowed-type.description",
                    action: "inputs.portable-text.invalid-value.disallowed-type.action",
                    values: {
                        key: blk._key,
                        typeName: blk._type
                    }
                }
            }, !0) : (resolution = {
                patches: [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                        {
                            _key: blk._key
                        }
                    ])
                ],
                description: `Block with _key '${blk._key}' is missing an _type property`,
                action: "Remove the block",
                item: blk,
                i18n: {
                    description: "inputs.portable-text.invalid-value.missing-type.description",
                    action: "inputs.portable-text.invalid-value.missing-type.action",
                    values: {
                        key: blk._key
                    }
                }
            }, !0);
        }
        if (blk._type === types.block.name) {
            const textBlock = blk;
            if (textBlock.children && !Array.isArray(textBlock.children)) return resolution = {
                patches: [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])({
                        children: []
                    }, [
                        {
                            _key: textBlock._key
                        }
                    ])
                ],
                description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,
                action: "Reset the children property",
                item: textBlock,
                i18n: {
                    description: "inputs.portable-text.invalid-value.missing-or-invalid-children.description",
                    action: "inputs.portable-text.invalid-value.missing-or-invalid-children.action",
                    values: {
                        key: textBlock._key
                    }
                }
            }, !0;
            if (textBlock.children === void 0 || Array.isArray(textBlock.children) && textBlock.children.length === 0) {
                const newSpan = {
                    _type: types.span.name,
                    _key: keyGenerator(),
                    text: "",
                    marks: []
                };
                return resolution = {
                    autoResolve: !0,
                    patches: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setIfMissing"])([], [
                            {
                                _key: blk._key
                            },
                            "children"
                        ]),
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                            newSpan
                        ], "after", [
                            {
                                _key: blk._key
                            },
                            "children",
                            0
                        ])
                    ],
                    description: `Children for text block with _key '${blk._key}' is empty.`,
                    action: "Insert an empty text",
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.empty-children.description",
                        action: "inputs.portable-text.invalid-value.empty-children.action",
                        values: {
                            key: blk._key
                        }
                    }
                }, !0;
            }
            const allUsedMarks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(textBlock.children.filter((cld)=>cld._type === types.span.name).map((cld)=>cld.marks || [])));
            if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {
                const unusedMarkDefs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(blk.markDefs.map((def)=>def._key).filter((key)=>!allUsedMarks.includes(key)));
                if (unusedMarkDefs.length > 0) return resolution = {
                    autoResolve: !0,
                    patches: unusedMarkDefs.map((markDefKey)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                            {
                                _key: blk._key
                            },
                            "markDefs",
                            {
                                _key: markDefKey
                            }
                        ])),
                    description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(", ")}.`,
                    action: "Remove unused mark definition item",
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.orphaned-mark-defs.description",
                        action: "inputs.portable-text.invalid-value.orphaned-mark-defs.action",
                        values: {
                            key: blk._key,
                            unusedMarkDefs: unusedMarkDefs.map((m)=>m.toString())
                        }
                    }
                }, !0;
            }
            const orphanedMarks = allUsedMarks.filter((mark)=>!types.decorators.map((dec)=>dec.value).includes(mark)).filter((mark)=>textBlock.markDefs === void 0 || !textBlock.markDefs.find((def)=>def._key === mark));
            if (orphanedMarks.length > 0) {
                const spanChildren = textBlock.children.filter((cld)=>cld._type === types.span.name && Array.isArray(cld.marks) && cld.marks.some((mark)=>orphanedMarks.includes(mark)));
                if (spanChildren) {
                    const orphaned = orphanedMarks.join(", ");
                    return resolution = {
                        autoResolve: !0,
                        patches: spanChildren.map((child)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])((child.marks || []).filter((cMrk)=>!orphanedMarks.includes(cMrk)), [
                                {
                                    _key: blk._key
                                },
                                "children",
                                {
                                    _key: child._key
                                },
                                "marks"
                            ])),
                        description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,
                        action: "Remove invalid marks",
                        item: blk,
                        i18n: {
                            description: "inputs.portable-text.invalid-value.orphaned-marks.description",
                            action: "inputs.portable-text.invalid-value.orphaned-marks.action",
                            values: {
                                key: blk._key,
                                orphanedMarks: orphanedMarks.map((m)=>m.toString())
                            }
                        }
                    }, !0;
                }
            }
            textBlock.children.some((child, cIndex)=>{
                if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isPlainObject$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(child)) return resolution = {
                    patches: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                            {
                                _key: blk._key
                            },
                            "children",
                            cIndex
                        ])
                    ],
                    description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,
                    action: "Remove the item",
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.non-object-child.description",
                        action: "inputs.portable-text.invalid-value.non-object-child.action",
                        values: {
                            key: blk._key,
                            index: cIndex
                        }
                    }
                }, !0;
                if (!child._key || typeof child._key != "string") {
                    const newChild = {
                        ...child,
                        _key: keyGenerator()
                    };
                    return resolution = {
                        autoResolve: !0,
                        patches: [
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(newChild, [
                                {
                                    _key: blk._key
                                },
                                "children",
                                cIndex
                            ])
                        ],
                        description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,
                        action: "Set a new random _key on the object",
                        item: blk,
                        i18n: {
                            description: "inputs.portable-text.invalid-value.missing-child-key.description",
                            action: "inputs.portable-text.invalid-value.missing-child-key.action",
                            values: {
                                key: blk._key,
                                index: cIndex
                            }
                        }
                    }, !0;
                }
                return child._type ? validChildTypes.includes(child._type) ? child._type === types.span.name && typeof child.text != "string" ? (resolution = {
                    patches: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])({
                            ...child,
                            text: ""
                        }, [
                            {
                                _key: blk._key
                            },
                            "children",
                            {
                                _key: child._key
                            }
                        ])
                    ],
                    description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,
                    action: "Write an empty text property to the object",
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.invalid-span-text.description",
                        action: "inputs.portable-text.invalid-value.invalid-span-text.action",
                        values: {
                            key: blk._key,
                            childKey: child._key
                        }
                    }
                }, !0) : !1 : (resolution = {
                    patches: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                            {
                                _key: blk._key
                            },
                            "children",
                            {
                                _key: child._key
                            }
                        ])
                    ],
                    description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,
                    action: "Remove the object",
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.disallowed-child-type.description",
                        action: "inputs.portable-text.invalid-value.disallowed-child-type.action",
                        values: {
                            key: blk._key,
                            childKey: child._key,
                            childType: child._type
                        }
                    }
                }, !0) : (resolution = {
                    patches: [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                            {
                                _key: blk._key
                            },
                            "children",
                            {
                                _key: child._key
                            }
                        ])
                    ],
                    description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,
                    action: "Remove the object",
                    item: blk,
                    i18n: {
                        description: "inputs.portable-text.invalid-value.missing-child-type.description",
                        action: "inputs.portable-text.invalid-value.missing-child-type.action",
                        values: {
                            key: blk._key,
                            childKey: child._key
                        }
                    }
                }, !0);
            }) && (valid = !1);
        }
        return !1;
    }) && (valid = !1), {
        valid,
        resolution,
        value
    });
}
function withRemoteChanges(editor, fn) {
    const prev = isChangingRemotely(editor) || !1;
    IS_PROCESSING_REMOTE_CHANGES.set(editor, !0), fn(), IS_PROCESSING_REMOTE_CHANGES.set(editor, prev);
}
function isChangingRemotely(editor) {
    return IS_PROCESSING_REMOTE_CHANGES.get(editor);
}
const PATCHING = /* @__PURE__ */ new WeakMap();
function withoutPatching(editor, fn) {
    const prev = isPatching(editor);
    PATCHING.set(editor, !1), fn(), PATCHING.set(editor, prev);
}
function isPatching(editor) {
    return PATCHING.get(editor);
}
function cloneDiff(diff2) {
    const [type, patch] = diff2;
    return [
        type,
        patch
    ];
}
function getCommonOverlap(textA, textB) {
    let text1 = textA, text2 = textB;
    const text1Length = text1.length, text2Length = text2.length;
    if (text1Length === 0 || text2Length === 0) return 0;
    text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));
    const textLength = Math.min(text1Length, text2Length);
    if (text1 === text2) return textLength;
    let best = 0, length = 1;
    for(let found = 0; found !== -1;){
        const pattern = text1.substring(textLength - length);
        if (found = text2.indexOf(pattern), found === -1) return best;
        length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);
    }
    return best;
}
function getCommonPrefix(text1, text2) {
    if (!text1 || !text2 || text1[0] !== text2[0]) return 0;
    let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;
    for(; pointerMin < pointerMid;)text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);
    return pointerMid;
}
function getCommonSuffix(text1, text2) {
    if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1]) return 0;
    let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;
    for(; pointerMin < pointerMid;)text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);
    return pointerMid;
}
function isHighSurrogate(char) {
    const charCode = char.charCodeAt(0);
    return charCode >= 55296 && charCode <= 56319;
}
function isLowSurrogate(char) {
    const charCode = char.charCodeAt(0);
    return charCode >= 56320 && charCode <= 57343;
}
function bisect(text1, text2, deadline) {
    const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);
    for(let x = 0; x < vLength; x++)v1[x] = -1, v2[x] = -1;
    v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;
    const delta = text1Length - text2Length, front = delta % 2 !== 0;
    let k1start = 0, k1end = 0, k2start = 0, k2end = 0;
    for(let d = 0; d < maxD && !(Date.now() > deadline); d++){
        for(let k1 = -d + k1start; k1 <= d - k1end; k1 += 2){
            const k1Offset = vOffset + k1;
            let x1;
            k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;
            let y1 = x1 - k1;
            for(; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1);)x1++, y1++;
            if (v1[k1Offset] = x1, x1 > text1Length) k1end += 2;
            else if (y1 > text2Length) k1start += 2;
            else if (front) {
                const k2Offset = vOffset + delta - k1;
                if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {
                    const x2 = text1Length - v2[k2Offset];
                    if (x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);
                }
            }
        }
        for(let k2 = -d + k2start; k2 <= d - k2end; k2 += 2){
            const k2Offset = vOffset + k2;
            let x2;
            k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;
            let y2 = x2 - k2;
            for(; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1);)x2++, y2++;
            if (v2[k2Offset] = x2, x2 > text1Length) k2end += 2;
            else if (y2 > text2Length) k2start += 2;
            else if (!front) {
                const k1Offset = vOffset + delta - k2;
                if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {
                    const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;
                    if (x2 = text1Length - x2, x1 >= x2) return bisectSplit(text1, text2, x1, y1, deadline);
                }
            }
        }
    }
    return [
        [
            DIFF_DELETE,
            text1
        ],
        [
            DIFF_INSERT,
            text2
        ]
    ];
}
function bisectSplit(text1, text2, x, y, deadline) {
    const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, {
        checkLines: !1,
        deadline
    }), diffsb = doDiff(text1b, text2b, {
        checkLines: !1,
        deadline
    });
    return diffs.concat(diffsb);
}
function findHalfMatch(text1, text2, timeout = 1) {
    if (timeout <= 0) return null;
    const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;
    if (longText.length < 4 || shortText.length * 2 < longText.length) return null;
    const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));
    let halfMatch;
    if (halfMatch1 && halfMatch2) halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;
    else {
        if (!halfMatch1 && !halfMatch2) return null;
        halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;
    }
    if (!halfMatch) throw new Error("Unable to find a half match.");
    let text1A, text1B, text2A, text2B;
    text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);
    const midCommon = halfMatch[4];
    return [
        text1A,
        text1B,
        text2A,
        text2B,
        midCommon
    ];
}
function halfMatchI(longText, shortText, i) {
    const seed = longText.slice(i, i + Math.floor(longText.length / 4));
    let j = -1, bestCommon = "", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;
    for(; (j = shortText.indexOf(seed, j + 1)) !== -1;){
        const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));
        bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));
    }
    return bestCommon.length * 2 >= longText.length ? [
        bestLongTextA || "",
        bestLongTextB || "",
        bestShortTextA || "",
        bestShortTextB || "",
        bestCommon || ""
    ] : null;
}
function charsToLines(diffs, lineArray) {
    for(let x = 0; x < diffs.length; x++){
        const chars = diffs[x][1], text = [];
        for(let y = 0; y < chars.length; y++)text[y] = lineArray[chars.charCodeAt(y)];
        diffs[x][1] = text.join("");
    }
}
function linesToChars(textA, textB) {
    const lineArray = [], lineHash = {};
    lineArray[0] = "";
    function diffLinesToMunge(text) {
        let chars = "", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;
        for(; lineEnd < text.length - 1;){
            lineEnd = text.indexOf(`
`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);
            let line = text.slice(lineStart, lineEnd + 1);
            (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;
        }
        return chars;
    }
    let maxLines = 4e4;
    const chars1 = diffLinesToMunge(textA);
    maxLines = 65535;
    const chars2 = diffLinesToMunge(textB);
    return {
        chars1,
        chars2,
        lineArray
    };
}
function doLineModeDiff(textA, textB, opts) {
    let text1 = textA, text2 = textB;
    const a = linesToChars(text1, text2);
    text1 = a.chars1, text2 = a.chars2;
    const linearray = a.lineArray;
    let diffs = doDiff(text1, text2, {
        checkLines: !1,
        deadline: opts.deadline
    });
    charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([
        DIFF_EQUAL,
        ""
    ]);
    let pointer = 0, countDelete = 0, countInsert = 0, textDelete = "", textInsert = "";
    for(; pointer < diffs.length;){
        switch(diffs[pointer][0]){
            case DIFF_INSERT:
                countInsert++, textInsert += diffs[pointer][1];
                break;
            case DIFF_DELETE:
                countDelete++, textDelete += diffs[pointer][1];
                break;
            case DIFF_EQUAL:
                if (countDelete >= 1 && countInsert >= 1) {
                    diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;
                    const aa = doDiff(textDelete, textInsert, {
                        checkLines: !1,
                        deadline: opts.deadline
                    });
                    for(let j = aa.length - 1; j >= 0; j--)diffs.splice(pointer, 0, aa[j]);
                    pointer += aa.length;
                }
                countInsert = 0, countDelete = 0, textDelete = "", textInsert = "";
                break;
            default:
                throw new Error("Unknown diff operation.");
        }
        pointer++;
    }
    return diffs.pop(), diffs;
}
function computeDiff(text1, text2, opts) {
    let diffs;
    if (!text1) return [
        [
            DIFF_INSERT,
            text2
        ]
    ];
    if (!text2) return [
        [
            DIFF_DELETE,
            text1
        ]
    ];
    const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);
    if (i !== -1) return diffs = [
        [
            DIFF_INSERT,
            longtext.substring(0, i)
        ],
        [
            DIFF_EQUAL,
            shorttext
        ],
        [
            DIFF_INSERT,
            longtext.substring(i + shorttext.length)
        ]
    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;
    if (shorttext.length === 1) return [
        [
            DIFF_DELETE,
            text1
        ],
        [
            DIFF_INSERT,
            text2
        ]
    ];
    const halfMatch = findHalfMatch(text1, text2);
    if (halfMatch) {
        const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);
        return diffsA.concat([
            [
                DIFF_EQUAL,
                midCommon
            ]
        ], diffsB);
    }
    return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);
}
var __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value)=>key in obj ? __defProp$2(obj, key, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value
    }) : obj[key] = value, __spreadValues$2 = (a, b)=>{
    for(var prop in b || (b = {}))__hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);
    if (__getOwnPropSymbols$2) for (var prop of __getOwnPropSymbols$2(b))__propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);
    return a;
};
const DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;
function diff(textA, textB, opts) {
    if (textA === null || textB === null) throw new Error("Null input. (diff)");
    const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));
    return adjustDiffForSurrogatePairs(diffs), diffs;
}
function doDiff(textA, textB, options) {
    let text1 = textA, text2 = textB;
    if (text1 === text2) return text1 ? [
        [
            DIFF_EQUAL,
            text1
        ]
    ] : [];
    let commonlength = getCommonPrefix(text1, text2);
    const commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);
    const commonsuffix = text1.substring(text1.length - commonlength);
    text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);
    let diffs = computeDiff(text1, text2, options);
    return commonprefix && diffs.unshift([
        DIFF_EQUAL,
        commonprefix
    ]), commonsuffix && diffs.push([
        DIFF_EQUAL,
        commonsuffix
    ]), diffs = cleanupMerge(diffs), diffs;
}
function createDeadLine(timeout) {
    let t = 1;
    return typeof timeout < "u" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;
}
function createInternalOpts(opts) {
    return __spreadValues$2({
        checkLines: !0,
        deadline: createDeadLine(opts.timeout || 1)
    }, opts);
}
function combineChar(data, char, dir) {
    return dir === 1 ? data + char : char + data;
}
function splitChar(data, dir) {
    return dir === 1 ? [
        data.substring(0, data.length - 1),
        data[data.length - 1]
    ] : [
        data.substring(1),
        data[0]
    ];
}
function hasSharedChar(diffs, i, j, dir) {
    return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];
}
function deisolateChar(diffs, i, dir) {
    const inv = dir === 1 ? -1 : 1;
    let insertIdx = null, deleteIdx = null, j = i + dir;
    for(; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir){
        const [op, text2] = diffs[j];
        if (text2.length !== 0) {
            if (op === DIFF_INSERT) {
                insertIdx === null && (insertIdx = j);
                continue;
            } else if (op === DIFF_DELETE) {
                deleteIdx === null && (deleteIdx = j);
                continue;
            } else if (op === DIFF_EQUAL) {
                if (insertIdx === null && deleteIdx === null) {
                    const [rest, char2] = splitChar(diffs[i][1], dir);
                    diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);
                    return;
                }
                break;
            }
        }
    }
    if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {
        const [insertText2, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);
        diffs[insertIdx][1] = insertText2, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);
        return;
    }
    const [text, char] = splitChar(diffs[i][1], dir);
    diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [
        DIFF_INSERT,
        char
    ]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [
        DIFF_DELETE,
        char
    ]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);
}
function adjustDiffForSurrogatePairs(diffs) {
    for(let i = 0; i < diffs.length; i++){
        const [diffType, diffText] = diffs[i];
        if (diffText.length === 0) continue;
        const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];
        isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);
    }
    for(let i = 0; i < diffs.length; i++)diffs[i][1].length === 0 && diffs.splice(i, 1);
}
function cleanupSemantic(rawDiffs) {
    let diffs = rawDiffs.map((diff2)=>cloneDiff(diff2)), hasChanges = !1;
    const equalities = [];
    let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;
    for(; pointer < diffs.length;)diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [
        DIFF_DELETE,
        lastEquality
    ]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;
    for(hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length;){
        if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {
            const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);
            overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [
                DIFF_EQUAL,
                insertion.substring(0, overlapLength1)
            ]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [
                DIFF_EQUAL,
                deletion.substring(0, overlapLength2)
            ]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;
        }
        pointer++;
    }
    return diffs;
}
const nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\s/, linebreakRegex = /[\r\n]/, blanklineEndRegex = /\n\r?\n$/, blanklineStartRegex = /^\r?\n\r?\n/;
function cleanupSemanticLossless(rawDiffs) {
    const diffs = rawDiffs.map((diff2)=>cloneDiff(diff2));
    function diffCleanupSemanticScore(one, two) {
        if (!one || !two) return 6;
        const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);
        return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;
    }
    let pointer = 1;
    for(; pointer < diffs.length - 1;){
        if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {
            let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];
            const commonOffset = getCommonSuffix(equality1, edit);
            if (commonOffset) {
                const commonString = edit.substring(edit.length - commonOffset);
                equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;
            }
            let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);
            for(; edit.charAt(0) === equality2.charAt(0);){
                equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);
                const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);
                score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);
            }
            diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));
        }
        pointer++;
    }
    return diffs;
}
function cleanupMerge(rawDiffs) {
    let diffs = rawDiffs.map((diff2)=>cloneDiff(diff2));
    diffs.push([
        DIFF_EQUAL,
        ""
    ]);
    let pointer = 0, countDelete = 0, countInsert = 0, textDelete = "", textInsert = "", commonlength;
    for(; pointer < diffs.length;)switch(diffs[pointer][0]){
        case DIFF_INSERT:
            countInsert++, textInsert += diffs[pointer][1], pointer++;
            break;
        case DIFF_DELETE:
            countDelete++, textDelete += diffs[pointer][1], pointer++;
            break;
        case DIFF_EQUAL:
            countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength) : (diffs.splice(0, 0, [
                DIFF_EQUAL,
                textInsert.substring(0, commonlength)
            ]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [
                DIFF_DELETE,
                textDelete
            ]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [
                DIFF_INSERT,
                textInsert
            ]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = "", textInsert = "";
            break;
        default:
            throw new Error("Unknown diff operation");
    }
    diffs[diffs.length - 1][1] === "" && diffs.pop();
    let hasChanges = !1;
    for(pointer = 1; pointer < diffs.length - 1;)diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;
    return hasChanges && (diffs = cleanupMerge(diffs)), diffs;
}
function trueCount(...args) {
    return args.reduce((n, bool)=>n + (bool ? 1 : 0), 0);
}
function cleanupEfficiency(rawDiffs, editCost = 4) {
    let diffs = rawDiffs.map((diff2)=>cloneDiff(diff2)), hasChanges = !1;
    const equalities = [];
    let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;
    for(; pointer < diffs.length;)diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [
        DIFF_DELETE,
        lastEquality
    ]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;
    return hasChanges && (diffs = cleanupMerge(diffs)), diffs;
}
var __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value)=>key in obj ? __defProp$1(obj, key, {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value
    }) : obj[key] = value, __spreadValues$1 = (a, b)=>{
    for(var prop in b || (b = {}))__hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);
    if (__getOwnPropSymbols$1) for (var prop of __getOwnPropSymbols$1(b))__propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);
    return a;
};
const DEFAULT_OPTIONS = {
    /**
   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).
   */ threshold: 0.5,
    /**
   * How far to search for a match (0 = exact location, 1000+ = broad match).
   * A match this many characters away from the expected location will add
   * 1.0 to the score (0.0 is a perfect match).
   */ distance: 1e3
};
function applyDefaults(options) {
    return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);
}
const MAX_BITS$1 = 32;
function bitap(text, pattern, loc, opts = {}) {
    if (pattern.length > MAX_BITS$1) throw new Error("Pattern too long for this browser.");
    const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);
    function getBitapScore(e, x) {
        const accuracy = e / pattern.length, proximity = Math.abs(loc - x);
        return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;
    }
    let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);
    bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));
    const matchmask = 1 << pattern.length - 1;
    bestLoc = -1;
    let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];
    for(let d = 0; d < pattern.length; d++){
        for(binMin = 0, binMid = binMax; binMin < binMid;)getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);
        binMax = binMid;
        let start = Math.max(1, loc - binMid + 1);
        const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);
        rd[finish + 1] = (1 << d) - 1;
        for(let j = finish; j >= start; j--){
            const charMatch = s[text.charAt(j - 1)];
            if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {
                const score = getBitapScore(d, j - 1);
                if (score <= scoreThreshold) if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc) start = Math.max(1, 2 * loc - bestLoc);
                else break;
            }
        }
        if (getBitapScore(d + 1, loc) > scoreThreshold) break;
        lastRd = rd;
    }
    return bestLoc;
}
function getAlphabetFromPattern(pattern) {
    const s = {};
    for(let i = 0; i < pattern.length; i++)s[pattern.charAt(i)] = 0;
    for(let i = 0; i < pattern.length; i++)s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;
    return s;
}
function match(text, pattern, searchLocation, options = {}) {
    if (text === null || pattern === null || searchLocation === null) throw new Error("Null input. (match())");
    const loc = Math.max(0, Math.min(searchLocation, text.length));
    if (text === pattern) return 0;
    if (text.length) {
        if (text.substring(loc, loc + pattern.length) === pattern) return loc;
    } else return -1;
    return bitap(text, pattern, loc, options);
}
function diffText1(diffs) {
    const text = [];
    for(let x = 0; x < diffs.length; x++)diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);
    return text.join("");
}
function diffText2(diffs) {
    const text = [];
    for(let x = 0; x < diffs.length; x++)diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);
    return text.join("");
}
function levenshtein(diffs) {
    let leven = 0, insertions = 0, deletions = 0;
    for(let x = 0; x < diffs.length; x++){
        const op = diffs[x][0], data = diffs[x][1];
        switch(op){
            case DIFF_INSERT:
                insertions += data.length;
                break;
            case DIFF_DELETE:
                deletions += data.length;
                break;
            case DIFF_EQUAL:
                leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;
                break;
            default:
                throw new Error("Unknown diff operation.");
        }
    }
    return leven += Math.max(insertions, deletions), leven;
}
function xIndex(diffs, location) {
    let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;
    for(x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)lastChars1 = chars1, lastChars2 = chars2;
    return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);
}
function countUtf8Bytes(str) {
    let bytes = 0;
    for(let i = 0; i < str.length; i++){
        const codePoint = str.codePointAt(i);
        if (typeof codePoint > "u") throw new Error("Failed to get codepoint");
        bytes += utf8len(codePoint);
    }
    return bytes;
}
function adjustIndiciesToUcs2(patches, base, options = {}) {
    let byteOffset = 0, idx = 0;
    function advanceTo(target) {
        for(; byteOffset < target;){
            const codePoint = base.codePointAt(idx);
            if (typeof codePoint > "u") return idx;
            byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;
        }
        if (!options.allowExceedingIndices && byteOffset !== target) throw new Error("Failed to determine byte offset");
        return idx;
    }
    const adjusted = [];
    for (const patch of patches)adjusted.push({
        diffs: patch.diffs.map((diff2)=>cloneDiff(diff2)),
        start1: advanceTo(patch.start1),
        start2: advanceTo(patch.start2),
        utf8Start1: patch.utf8Start1,
        utf8Start2: patch.utf8Start2,
        length1: patch.length1,
        length2: patch.length2,
        utf8Length1: patch.utf8Length1,
        utf8Length2: patch.utf8Length2
    });
    return adjusted;
}
function utf8len(codePoint) {
    return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;
}
const MAX_BITS = 32, DEFAULT_MARGIN = 4;
function addPadding(patches, margin = DEFAULT_MARGIN) {
    const paddingLength = margin;
    let nullPadding = "";
    for(let x = 1; x <= paddingLength; x++)nullPadding += String.fromCharCode(x);
    for (const p of patches)p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;
    let patch = patches[0], diffs = patch.diffs;
    if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL) diffs.unshift([
        DIFF_EQUAL,
        nullPadding
    ]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;
    else if (paddingLength > diffs[0][1].length) {
        const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;
        diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;
    }
    if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL) diffs.push([
        DIFF_EQUAL,
        nullPadding
    ]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;
    else if (paddingLength > diffs[diffs.length - 1][1].length) {
        const extraLength = paddingLength - diffs[diffs.length - 1][1].length;
        diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;
    }
    return nullPadding;
}
function createPatchObject(start1, start2) {
    return {
        diffs: [],
        start1,
        start2,
        utf8Start1: start1,
        utf8Start2: start2,
        length1: 0,
        length2: 0,
        utf8Length1: 0,
        utf8Length2: 0
    };
}
function splitMax(patches, margin = DEFAULT_MARGIN) {
    const patchSize = MAX_BITS;
    for(let x = 0; x < patches.length; x++){
        if (patches[x].length1 <= patchSize) continue;
        const bigpatch = patches[x];
        patches.splice(x--, 1);
        let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = "";
        for(; bigpatch.diffs.length !== 0;){
            const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);
            let empty = !0;
            if (preContext !== "") {
                const precontextByteCount = countUtf8Bytes(preContext);
                patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([
                    DIFF_EQUAL,
                    preContext
                ]);
            }
            for(; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin;){
                const diffType = bigpatch.diffs[0][0];
                let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);
                if (diffType === DIFF_INSERT) {
                    patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;
                    const diff2 = bigpatch.diffs.shift();
                    diff2 && patch.diffs.push(diff2), empty = !1;
                } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([
                    diffType,
                    diffText
                ]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([
                    diffType,
                    diffText
                ]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));
            }
            preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);
            const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);
            postContext !== "" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([
                DIFF_EQUAL,
                postContext
            ])), empty || patches.splice(++x, 0, patch);
        }
    }
}
function apply(patches, originalText, opts = {}) {
    if (typeof patches == "string") throw new Error("Patches must be an array - pass the patch to `parsePatch()` first");
    let text = originalText;
    if (patches.length === 0) return [
        text,
        []
    ];
    const parsed = adjustIndiciesToUcs2(patches, text, {
        allowExceedingIndices: opts.allowExceedingIndices
    }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);
    text = nullPadding + text + nullPadding, splitMax(parsed, margin);
    let delta = 0;
    const results = [];
    for(let x = 0; x < parsed.length; x++){
        const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);
        let startLoc, endLoc = -1;
        if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(text, text1.substring(text1.length - MAX_BITS), expectedLoc + text1.length - MAX_BITS), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1) results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;
        else {
            results[x] = !0, delta = startLoc - expectedLoc;
            let text2;
            if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2) text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);
            else {
                let diffs = diff(text1, text2, {
                    checkLines: !1
                });
                if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold) results[x] = !1;
                else {
                    diffs = cleanupSemanticLossless(diffs);
                    let index1 = 0, index2 = 0;
                    for(let y = 0; y < parsed[x].diffs.length; y++){
                        const mod = parsed[x].diffs[y];
                        mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);
                    }
                }
            }
        }
    }
    return text = text.substring(nullPadding.length, text.length - nullPadding.length), [
        text,
        results
    ];
}
const patchHeader = /^@@ -(\d+),?(\d*) \+(\d+),?(\d*) @@$/;
function parse(textline) {
    if (!textline) return [];
    const patches = [], lines = textline.split(`
`);
    let textPointer = 0;
    for(; textPointer < lines.length;){
        const m = lines[textPointer].match(patchHeader);
        if (!m) throw new Error(`Invalid patch string: ${lines[textPointer]}`);
        const patch = createPatchObject(toInt(m[1]), toInt(m[3]));
        for(patches.push(patch), m[2] === "" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === "0" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === "" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === "0" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length;){
            const currentLine = lines[textPointer], sign = currentLine.charAt(0);
            if (sign === "@") break;
            if (sign === "") {
                textPointer++;
                continue;
            }
            let line;
            try {
                line = decodeURI(currentLine.slice(1));
            } catch  {
                throw new Error(`Illegal escape in parse: ${currentLine}`);
            }
            const utf8Diff = countUtf8Bytes(line) - line.length;
            if (sign === "-") patch.diffs.push([
                DIFF_DELETE,
                line
            ]), patch.length1 -= utf8Diff;
            else if (sign === "+") patch.diffs.push([
                DIFF_INSERT,
                line
            ]), patch.length2 -= utf8Diff;
            else if (sign === " ") patch.diffs.push([
                DIFF_EQUAL,
                line
            ]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;
            else throw new Error(`Invalid patch mode "${sign}" in: ${line}`);
            textPointer++;
        }
    }
    return patches;
}
function toInt(num) {
    return parseInt(num, 10);
}
const IS_UDOING = /* @__PURE__ */ new WeakMap(), IS_REDOING = /* @__PURE__ */ new WeakMap();
function withUndoing(editor, fn) {
    const prev = isUndoing(editor);
    IS_UDOING.set(editor, !0), fn(), IS_UDOING.set(editor, prev);
}
function isUndoing(editor) {
    return IS_UDOING.get(editor) ?? !1;
}
function setIsUndoing(editor, isUndoing2) {
    IS_UDOING.set(editor, isUndoing2);
}
function withRedoing(editor, fn) {
    const prev = isRedoing(editor);
    IS_REDOING.set(editor, !0), fn(), IS_REDOING.set(editor, prev);
}
function isRedoing(editor) {
    return IS_REDOING.get(editor) ?? !1;
}
function setIsRedoing(editor, isRedoing2) {
    IS_REDOING.set(editor, isRedoing2);
}
const defaultKeyGenerator = ()=>randomKey(12), getByteHexTable = /* @__PURE__ */ (()=>{
    let table;
    return ()=>{
        if (table) return table;
        table = [];
        for(let i = 0; i < 256; ++i)table[i] = (i + 256).toString(16).slice(1);
        return table;
    };
})();
function whatwgRNG(length = 16) {
    const rnds8 = new Uint8Array(length);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$get$2d$random$2d$values$2d$esm$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rnds8), rnds8;
}
function randomKey(length) {
    const table = getByteHexTable();
    return whatwgRNG(length).reduce((str, n)=>str + table[n], "").slice(0, length);
}
const CURRENT_ACTION_ID = /* @__PURE__ */ new WeakMap();
function withApplyingBehaviorActions(editor, fn) {
    CURRENT_ACTION_ID.set(editor, defaultKeyGenerator()), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(editor, fn), CURRENT_ACTION_ID.set(editor, void 0);
}
function getCurrentActionId(editor) {
    return CURRENT_ACTION_ID.get(editor);
}
function isApplyingBehaviorActions(editor) {
    return getCurrentActionId(editor) !== void 0;
}
const CURRENT_BEHAVIOR_ACTION_SET = /* @__PURE__ */ new WeakMap();
function withApplyingBehaviorActionSet(editor, fn) {
    const current = CURRENT_BEHAVIOR_ACTION_SET.get(editor);
    if (current) {
        withApplyingBehaviorActions(editor, fn);
        return;
    }
    CURRENT_BEHAVIOR_ACTION_SET.set(editor, current ?? {
        actionSetId: defaultKeyGenerator()
    }), withApplyingBehaviorActions(editor, fn), CURRENT_BEHAVIOR_ACTION_SET.set(editor, void 0);
}
function getCurrentBehaviorActionSetId(editor) {
    return CURRENT_BEHAVIOR_ACTION_SET.get(editor)?.actionSetId;
}
const debug$f = debugWithName("plugin:withUndoRedo"), SAVING = /* @__PURE__ */ new WeakMap(), REMOTE_PATCHES = /* @__PURE__ */ new WeakMap(), UNDO_STEP_LIMIT = 1e3, isSaving = (editor)=>{
    const state = SAVING.get(editor);
    return state === void 0 ? !0 : state;
}, getRemotePatches = (editor)=>(REMOTE_PATCHES.get(editor) || REMOTE_PATCHES.set(editor, []), REMOTE_PATCHES.get(editor) || []);
function createWithUndoRedo(options) {
    const { editorActor, blockSchemaType } = options;
    return (editor)=>{
        let previousSnapshot = fromSlateValue(editor.children, blockSchemaType.name);
        const remotePatches = getRemotePatches(editor);
        let previousBehaviorActionSetId = getCurrentBehaviorActionSetId(editor);
        options.subscriptions.push(()=>{
            debug$f("Subscribing to patches");
            const sub = editorActor.on("patches", ({ patches, snapshot })=>{
                let reset = !1;
                patches.forEach((patch)=>{
                    if (!reset && patch.origin !== "local" && remotePatches) {
                        if (patch.type === "unset" && patch.path.length === 0) {
                            debug$f("Someone else cleared the content, resetting undo/redo history"), editor.history = {
                                undos: [],
                                redos: []
                            }, remotePatches.splice(0, remotePatches.length), SAVING.set(editor, !0), reset = !0;
                            return;
                        }
                        remotePatches.push({
                            patch,
                            time: /* @__PURE__ */ new Date(),
                            snapshot,
                            previousSnapshot
                        });
                    }
                }), previousSnapshot = snapshot;
            });
            return ()=>{
                debug$f("Unsubscribing to patches"), sub.unsubscribe();
            };
        }), editor.history = {
            undos: [],
            redos: []
        };
        const { apply: apply2 } = editor;
        return editor.apply = (op)=>{
            if (editorActor.getSnapshot().matches({
                "edit mode": "read only"
            })) {
                apply2(op);
                return;
            }
            if (isChangingRemotely(editor)) {
                apply2(op);
                return;
            }
            if (isUndoing(editor) || isRedoing(editor)) {
                apply2(op);
                return;
            }
            const { operations, history } = editor, { undos } = history, step = undos[undos.length - 1], lastOp = step && step.operations && step.operations[step.operations.length - 1], overwrite = shouldOverwrite(op, lastOp), save = isSaving(editor), currentBehaviorActionSetId = getCurrentBehaviorActionSetId(editor);
            let merge = currentBehaviorActionSetId !== void 0 && previousBehaviorActionSetId === void 0 ? !1 : currentBehaviorActionSetId !== void 0 && previousBehaviorActionSetId !== void 0 ? currentBehaviorActionSetId === previousBehaviorActionSetId : !0;
            if (save) {
                if (step ? operations.length === 0 && (merge = currentBehaviorActionSetId === void 0 && previousBehaviorActionSetId === void 0 ? shouldMerge(op, lastOp) || overwrite : merge) : merge = !1, step && merge) step.operations.push(op);
                else {
                    const newStep = {
                        operations: [
                            ...editor.selection === null ? [] : [
                                createSelectOperation(editor)
                            ],
                            op
                        ],
                        timestamp: /* @__PURE__ */ new Date()
                    };
                    undos.push(newStep), debug$f("Created new undo step", step);
                }
                for(; undos.length > UNDO_STEP_LIMIT;)undos.shift();
                shouldClear(op) && (history.redos = []);
            }
            previousBehaviorActionSetId = currentBehaviorActionSetId, apply2(op);
        }, editor;
    };
}
const historyUndoActionImplementation = ({ action })=>{
    const editor = action.editor, { undos } = editor.history, remotePatches = getRemotePatches(editor);
    if (undos.length > 0) {
        const step = undos[undos.length - 1];
        if (debug$f("Undoing", step), step.operations.length > 0) {
            const otherPatches = remotePatches.filter((item)=>item.time >= step.timestamp);
            let transformedOperations = step.operations;
            otherPatches.forEach((item)=>{
                transformedOperations = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(transformedOperations.map((op)=>transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));
            });
            const reversedOperations = transformedOperations.map(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Operation"].inverse).reverse();
            try {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(editor, ()=>{
                    withUndoing(editor, ()=>{
                        withoutSaving(editor, ()=>{
                            reversedOperations.forEach((op)=>{
                                editor.apply(op);
                            });
                        });
                    });
                });
            } catch (err) {
                debug$f("Could not perform undo step", err), remotePatches.splice(0, remotePatches.length), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(editor), editor.history = {
                    undos: [],
                    redos: []
                }, SAVING.set(editor, !0), setIsUndoing(editor, !1), editor.onChange();
                return;
            }
            editor.history.redos.push(step), editor.history.undos.pop();
        }
    }
}, historyRedoActionImplementation = ({ action })=>{
    const editor = action.editor, { redos } = editor.history, remotePatches = getRemotePatches(editor);
    if (redos.length > 0) {
        const step = redos[redos.length - 1];
        if (debug$f("Redoing", step), step.operations.length > 0) {
            const otherPatches = remotePatches.filter((item)=>item.time >= step.timestamp);
            let transformedOperations = step.operations;
            otherPatches.forEach((item)=>{
                transformedOperations = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$flatten$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(transformedOperations.map((op)=>transformOperation(editor, item.patch, op, item.snapshot, item.previousSnapshot)));
            });
            try {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(editor, ()=>{
                    withRedoing(editor, ()=>{
                        withoutSaving(editor, ()=>{
                            transformedOperations.forEach((op)=>{
                                editor.apply(op);
                            });
                        });
                    });
                });
            } catch (err) {
                debug$f("Could not perform redo step", err), remotePatches.splice(0, remotePatches.length), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(editor), editor.history = {
                    undos: [],
                    redos: []
                }, SAVING.set(editor, !0), setIsRedoing(editor, !1), editor.onChange();
                return;
            }
            editor.history.undos.push(step), editor.history.redos.pop();
        }
    }
};
function transformOperation(editor, patch, operation, snapshot, previousSnapshot) {
    const transformedOperation = {
        ...operation
    };
    if (patch.type === "insert" && patch.path.length === 1) {
        const insertBlockIndex = (snapshot || []).findIndex((blk)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
                _key: blk._key
            }, patch.path[0]));
        return debug$f(`Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`), [
            adjustBlockPath(transformedOperation, patch.items.length, insertBlockIndex)
        ];
    }
    if (patch.type === "unset" && patch.path.length === 1) {
        const unsetBlockIndex = (previousSnapshot || []).findIndex((blk)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
                _key: blk._key
            }, patch.path[0]));
        return "path" in transformedOperation && Array.isArray(transformedOperation.path) && transformedOperation.path[0] === unsetBlockIndex ? (debug$f("Skipping transformation that targeted removed block"), []) : [
            adjustBlockPath(transformedOperation, -1, unsetBlockIndex)
        ];
    }
    if (patch.type === "unset" && patch.path.length === 0) return debug$f(`Adjusting selection for unset everything patch and ${operation.type} operation`), [];
    if (patch.type === "diffMatchPatch") {
        const operationTargetBlock = findOperationTargetBlock(editor, transformedOperation);
        return !operationTargetBlock || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
            _key: operationTargetBlock._key
        }, patch.path[0]) ? [
            transformedOperation
        ] : (parse(patch.value).forEach((diffPatch)=>{
            let adjustOffsetBy = 0, changedOffset = diffPatch.utf8Start1;
            const { diffs } = diffPatch;
            if (diffs.forEach((diff2, index)=>{
                const [diffType, text] = diff2;
                diffType === DIFF_INSERT ? (adjustOffsetBy += text.length, changedOffset += text.length) : diffType === DIFF_DELETE ? (adjustOffsetBy -= text.length, changedOffset -= text.length) : diffType === DIFF_EQUAL && (diffs.slice(index).every(([dType])=>dType === DIFF_EQUAL) || (changedOffset += text.length));
            }), transformedOperation.type === "insert_text" && changedOffset < transformedOperation.offset && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === "remove_text" && changedOffset <= transformedOperation.offset - transformedOperation.text.length && (transformedOperation.offset += adjustOffsetBy), transformedOperation.type === "set_selection") {
                const currentFocus = transformedOperation.properties?.focus ? {
                    ...transformedOperation.properties.focus
                } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {
                    ...transformedOperation.properties.anchor
                } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {
                    ...transformedOperation.newProperties.focus
                } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {
                    ...transformedOperation.newProperties.anchor
                } : void 0;
                (currentFocus && currentAnchor || newFocus && newAnchor) && ([
                    currentFocus,
                    currentAnchor,
                    newFocus,
                    newAnchor
                ].forEach((point)=>{
                    point && changedOffset < point.offset && (point.offset += adjustOffsetBy);
                }), currentFocus && currentAnchor && (transformedOperation.properties = {
                    focus: currentFocus,
                    anchor: currentAnchor
                }), newFocus && newAnchor && (transformedOperation.newProperties = {
                    focus: newFocus,
                    anchor: newAnchor
                }));
            }
        }), [
            transformedOperation
        ]);
    }
    return [
        transformedOperation
    ];
}
function adjustBlockPath(operation, level, blockIndex) {
    const transformedOperation = {
        ...operation
    };
    if (blockIndex >= 0 && transformedOperation.type !== "set_selection" && Array.isArray(transformedOperation.path) && transformedOperation.path[0] >= blockIndex + level && transformedOperation.path[0] + level > -1) {
        const newPath = [
            transformedOperation.path[0] + level,
            ...transformedOperation.path.slice(1)
        ];
        transformedOperation.path = newPath;
    }
    if (transformedOperation.type === "set_selection") {
        const currentFocus = transformedOperation.properties?.focus ? {
            ...transformedOperation.properties.focus
        } : void 0, currentAnchor = transformedOperation?.properties?.anchor ? {
            ...transformedOperation.properties.anchor
        } : void 0, newFocus = transformedOperation?.newProperties?.focus ? {
            ...transformedOperation.newProperties.focus
        } : void 0, newAnchor = transformedOperation?.newProperties?.anchor ? {
            ...transformedOperation.newProperties.anchor
        } : void 0;
        (currentFocus && currentAnchor || newFocus && newAnchor) && ([
            currentFocus,
            currentAnchor,
            newFocus,
            newAnchor
        ].forEach((point)=>{
            point && point.path[0] >= blockIndex + level && point.path[0] + level > -1 && (point.path = [
                point.path[0] + level,
                ...point.path.slice(1)
            ]);
        }), currentFocus && currentAnchor && (transformedOperation.properties = {
            focus: currentFocus,
            anchor: currentAnchor
        }), newFocus && newAnchor && (transformedOperation.newProperties = {
            focus: newFocus,
            anchor: newAnchor
        }));
    }
    return transformedOperation;
}
const shouldMerge = (op, prev)=>!!(op.type === "set_selection" || prev && op.type === "insert_text" && prev.type === "insert_text" && op.offset === prev.offset + prev.text.length && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].equals(op.path, prev.path) && op.text !== " " || prev && op.type === "remove_text" && prev.type === "remove_text" && op.offset + op.text.length === prev.offset && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].equals(op.path, prev.path)), shouldOverwrite = (op, prev)=>!!(prev && op.type === "set_selection" && prev.type === "set_selection"), shouldClear = (op)=>op.type !== "set_selection";
function withoutSaving(editor, fn) {
    const prev = isSaving(editor);
    SAVING.set(editor, !1), fn(), SAVING.set(editor, prev);
}
function createSelectOperation(editor) {
    return {
        type: "set_selection",
        properties: {
            ...editor.selection
        },
        newProperties: {
            ...editor.selection
        }
    };
}
function findOperationTargetBlock(editor, operation) {
    let block;
    return operation.type === "set_selection" && editor.selection ? block = editor.children[editor.selection.focus.path[0]] : "path" in operation && (block = editor.children[operation.path[0]]), block;
}
const debug$e = debugWithName("sync machine"), syncValueCallback = ({ sendBack, input })=>{
    updateValue({
        context: input.context,
        sendBack,
        slateEditor: input.slateEditor,
        value: input.value,
        streamBlocks: input.streamBlocks
    });
}, syncValueLogic = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromCallback"])(syncValueCallback), syncMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    types: {
        context: {},
        input: {},
        events: {},
        emitted: {}
    },
    actions: {
        "assign initial value synced": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            initialValueSynced: !0
        }),
        "assign readOnly": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            readOnly: ({ event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "update readOnly"), event.readOnly)
        }),
        "assign pending value": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            pendingValue: ({ event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "update value"), event.value)
        }),
        "clear pending value": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            pendingValue: void 0
        }),
        "assign previous value": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            previousValue: ({ event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "done syncing"), event.value)
        }),
        "emit done syncing initial value": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
            type: "done syncing initial value"
        })
    },
    guards: {
        "initial value synced": ({ context })=>context.initialValueSynced,
        "is busy": ({ context })=>{
            const editable = !context.readOnly, isProcessingLocalChanges = context.isProcessingLocalChanges, isChanging = isChangingRemotely(context.slateEditor) ?? !1, isBusy = editable && (isProcessingLocalChanges || isChanging);
            return debug$e("isBusy", {
                isBusy,
                editable,
                isProcessingLocalChanges,
                isChanging
            }), isBusy;
        },
        "value changed while syncing": ({ context, event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "done syncing"), context.pendingValue !== event.value),
        "pending value equals previous value": ({ context })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(context.pendingValue, context.previousValue)
    },
    actors: {
        "sync value": syncValueLogic
    }
}).createMachine({
    id: "sync",
    context: ({ input })=>({
            initialValueSynced: !1,
            isProcessingLocalChanges: !1,
            keyGenerator: input.keyGenerator,
            schema: input.schema,
            readOnly: input.readOnly,
            slateEditor: input.slateEditor,
            pendingValue: void 0,
            previousValue: void 0
        }),
    on: {
        "has pending patches": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                isProcessingLocalChanges: !0
            })
        },
        mutation: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                isProcessingLocalChanges: !1
            })
        },
        "update readOnly": {
            actions: [
                "assign readOnly"
            ]
        }
    },
    type: "parallel",
    states: {
        "setting up": {
            initial: "syncing initial value",
            states: {
                "syncing initial value": {
                    entry: [
                        ()=>{
                            debug$e("entry: syncing initial value");
                        }
                    ],
                    exit: [
                        ()=>{
                            debug$e("exit: syncing initial value");
                        }
                    ],
                    always: {
                        guard: "initial value synced",
                        target: "done syncing initial value"
                    }
                },
                "done syncing initial value": {
                    entry: [
                        "emit done syncing initial value",
                        ()=>{
                            debug$e("entry: done syncing initial value");
                        }
                    ],
                    exit: [
                        ()=>{
                            debug$e("exit: done syncing initial value");
                        }
                    ],
                    type: "final"
                }
            }
        },
        syncing: {
            initial: "idle",
            states: {
                idle: {
                    entry: [
                        ()=>{
                            debug$e("entry: syncing->idle");
                        }
                    ],
                    exit: [
                        ()=>{
                            debug$e("exit: syncing->idle");
                        }
                    ],
                    on: {
                        "update value": [
                            {
                                guard: "is busy",
                                target: "busy",
                                actions: [
                                    "assign pending value"
                                ]
                            },
                            {
                                target: "syncing",
                                actions: [
                                    "assign pending value"
                                ]
                            }
                        ]
                    }
                },
                busy: {
                    entry: [
                        ()=>{
                            debug$e("entry: syncing->busy");
                        }
                    ],
                    exit: [
                        ()=>{
                            debug$e("exit: syncing->busy");
                        }
                    ],
                    after: {
                        1e3: [
                            {
                                guard: "is busy",
                                target: ".",
                                reenter: !0,
                                actions: [
                                    ()=>{
                                        debug$e("reenter: syncing->busy");
                                    }
                                ]
                            },
                            {
                                target: "syncing"
                            }
                        ]
                    },
                    on: {
                        "update value": [
                            {
                                actions: [
                                    "assign pending value"
                                ]
                            }
                        ]
                    }
                },
                syncing: {
                    entry: [
                        ()=>{
                            debug$e("entry: syncing->syncing");
                        }
                    ],
                    exit: [
                        ()=>{
                            debug$e("exit: syncing->syncing");
                        }
                    ],
                    always: {
                        guard: "pending value equals previous value",
                        target: "idle",
                        actions: [
                            "clear pending value",
                            "assign initial value synced"
                        ]
                    },
                    invoke: {
                        src: "sync value",
                        id: "sync value",
                        input: ({ context })=>({
                                context: {
                                    keyGenerator: context.keyGenerator,
                                    previousValue: context.previousValue,
                                    readOnly: context.readOnly,
                                    schema: context.schema
                                },
                                slateEditor: context.slateEditor,
                                streamBlocks: !context.initialValueSynced,
                                value: context.pendingValue
                            })
                    },
                    on: {
                        "update value": {
                            actions: [
                                "assign pending value"
                            ]
                        },
                        patch: {
                            actions: [
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                            ]
                        },
                        "invalid value": {
                            actions: [
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                            ]
                        },
                        "value changed": {
                            actions: [
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                            ]
                        },
                        "done syncing": [
                            {
                                guard: "value changed while syncing",
                                actions: [
                                    "assign previous value",
                                    "assign initial value synced"
                                ],
                                target: "syncing",
                                reenter: !0
                            },
                            {
                                target: "idle",
                                actions: [
                                    "clear pending value",
                                    "assign previous value",
                                    "assign initial value synced"
                                ]
                            }
                        ]
                    }
                }
            }
        }
    }
});
async function updateValue({ context, sendBack, slateEditor, streamBlocks, value }) {
    let isChanged = !1, isValid = !0;
    const hadSelection = !!slateEditor.selection;
    if ((!value || value.length === 0) && (debug$e("Value is empty"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(slateEditor, ()=>{
        withoutSaving(slateEditor, ()=>{
            withoutPatching(slateEditor, ()=>{
                hadSelection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(slateEditor);
                const childrenLength = slateEditor.children.length;
                slateEditor.children.forEach((_, index)=>{
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(slateEditor, {
                        at: [
                            childrenLength - 1 - index
                        ]
                    });
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(slateEditor, slateEditor.pteCreateTextBlock({
                    decorators: []
                }), {
                    at: [
                        0
                    ]
                }), hadSelection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(slateEditor, [
                    0,
                    0
                ]);
            });
        });
    }), isChanged = !0), value && value.length > 0) {
        const slateValueFromProps = toSlateValue(value, {
            schemaTypes: context.schema
        });
        await new Promise((resolve)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(slateEditor, ()=>{
                withRemoteChanges(slateEditor, ()=>{
                    withoutPatching(slateEditor, async ()=>{
                        const childrenLength = slateEditor.children.length;
                        if (slateValueFromProps.length < childrenLength) {
                            for(let i = childrenLength - 1; i > slateValueFromProps.length - 1; i--)__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(slateEditor, {
                                at: [
                                    i
                                ]
                            });
                            isChanged = !0;
                        }
                        for await (const [currentBlock, currentBlockIndex] of getBlocks({
                            slateValue: slateValueFromProps,
                            streamBlocks
                        })){
                            const { blockChanged, blockValid } = syncBlock({
                                context,
                                sendBack,
                                block: currentBlock,
                                index: currentBlockIndex,
                                slateEditor,
                                value
                            });
                            isChanged = blockChanged || isChanged, isValid = isValid && blockValid;
                        }
                        resolve();
                    });
                });
            });
        });
    }
    if (!isValid) {
        debug$e("Invalid value, returning"), sendBack({
            type: "done syncing",
            value
        });
        return;
    }
    if (isChanged) {
        debug$e("Server value changed, syncing editor");
        try {
            slateEditor.onChange();
        } catch (err) {
            console.error(err), sendBack({
                type: "invalid value",
                resolution: null,
                value
            }), sendBack({
                type: "done syncing",
                value
            });
            return;
        }
        hadSelection && !slateEditor.selection && (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(slateEditor, {
            anchor: {
                path: [
                    0,
                    0
                ],
                offset: 0
            },
            focus: {
                path: [
                    0,
                    0
                ],
                offset: 0
            }
        }), slateEditor.onChange()), sendBack({
            type: "value changed",
            value
        });
    } else debug$e("Server value and editor value is equal, no need to sync.");
    sendBack({
        type: "done syncing",
        value
    });
}
async function* getBlocks({ slateValue, streamBlocks }) {
    let index = 0;
    for await (const block of slateValue)streamBlocks && index % 10 === 0 && await new Promise((resolve)=>setTimeout(resolve, 0)), yield [
        block,
        index
    ], index++;
}
function syncBlock({ context, sendBack, block, index, slateEditor, value }) {
    let blockChanged = !1, blockValid = !0;
    const currentBlock = block, currentBlockIndex = index, oldBlock = slateEditor.children[currentBlockIndex], hasChanges = oldBlock && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(currentBlock, oldBlock);
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(slateEditor, ()=>{
        withRemoteChanges(slateEditor, ()=>{
            withoutPatching(slateEditor, ()=>{
                if (hasChanges && blockValid) {
                    const validationValue = [
                        value[currentBlockIndex]
                    ], validation = validateValue(validationValue, context.schema, context.keyGenerator);
                    !validation.valid && validation.resolution?.autoResolve && validation.resolution?.patches.length > 0 && !context.readOnly && context.previousValue && context.previousValue !== value && (console.warn(`${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`), validation.resolution.patches.forEach((patch)=>{
                        sendBack({
                            type: "patch",
                            patch
                        });
                    })), validation.valid || validation.resolution?.autoResolve ? (oldBlock._key === currentBlock._key ? (debug$e.enabled && debug$e("Updating block", oldBlock, currentBlock), _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex)) : (debug$e.enabled && debug$e("Replacing block", oldBlock, currentBlock), _replaceBlock(slateEditor, currentBlock, currentBlockIndex)), blockChanged = !0) : (sendBack({
                        type: "invalid value",
                        resolution: validation.resolution,
                        value
                    }), blockValid = !1);
                }
                if (!oldBlock && blockValid) {
                    const validationValue = [
                        value[currentBlockIndex]
                    ], validation = validateValue(validationValue, context.schema, context.keyGenerator);
                    debug$e.enabled && debug$e("Validating and inserting new block in the end of the value", currentBlock), validation.valid || validation.resolution?.autoResolve ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(slateEditor, currentBlock, {
                        at: [
                            currentBlockIndex
                        ]
                    }) : (debug$e("Invalid", validation), sendBack({
                        type: "invalid value",
                        resolution: validation.resolution,
                        value
                    }), blockValid = !1);
                }
            });
        });
    }), {
        blockChanged,
        blockValid
    };
}
function _replaceBlock(slateEditor, currentBlock, currentBlockIndex) {
    const currentSelection = slateEditor.selection, selectionFocusOnBlock = currentSelection && currentSelection.focus.path[0] === currentBlockIndex;
    selectionFocusOnBlock && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(slateEditor), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(slateEditor, {
        at: [
            currentBlockIndex
        ]
    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(slateEditor, currentBlock, {
        at: [
            currentBlockIndex
        ]
    }), slateEditor.onChange(), selectionFocusOnBlock && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(slateEditor, currentSelection);
}
function _updateBlock(slateEditor, currentBlock, oldBlock, currentBlockIndex) {
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(slateEditor, currentBlock, {
        at: [
            currentBlockIndex
        ]
    }), slateEditor.isTextBlock(currentBlock) && slateEditor.isTextBlock(oldBlock)) {
        const oldBlockChildrenLength = oldBlock.children.length;
        currentBlock.children.length < oldBlockChildrenLength && Array.from(Array(oldBlockChildrenLength - currentBlock.children.length)).forEach((_, index)=>{
            const childIndex = oldBlockChildrenLength - 1 - index;
            childIndex > 0 && (debug$e("Removing child"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(slateEditor, {
                at: [
                    currentBlockIndex,
                    childIndex
                ]
            }));
        }), currentBlock.children.forEach((currentBlockChild, currentBlockChildIndex)=>{
            const oldBlockChild = oldBlock.children[currentBlockChildIndex], isChildChanged = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(currentBlockChild, oldBlockChild), isTextChanged = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(currentBlockChild.text, oldBlockChild?.text), path = [
                currentBlockIndex,
                currentBlockChildIndex
            ];
            if (isChildChanged) if (currentBlockChild._key === oldBlockChild?._key) {
                debug$e("Updating changed child", currentBlockChild, oldBlockChild), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(slateEditor, currentBlockChild, {
                    at: path
                });
                const isSpanNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(currentBlockChild) && currentBlockChild._type === "span" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(oldBlockChild) && oldBlockChild._type === "span";
                isSpanNode && isTextChanged ? (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].delete(slateEditor, {
                    at: {
                        focus: {
                            path,
                            offset: 0
                        },
                        anchor: {
                            path,
                            offset: oldBlockChild.text.length
                        }
                    }
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertText(slateEditor, currentBlockChild.text, {
                    at: path
                }), slateEditor.onChange()) : isSpanNode || (debug$e("Updating changed inline object child", currentBlockChild), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(slateEditor, {
                    _key: VOID_CHILD_KEY
                }, {
                    at: [
                        ...path,
                        0
                    ],
                    voids: !0
                }));
            } else oldBlockChild ? (debug$e("Replacing child", currentBlockChild), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(slateEditor, {
                at: [
                    currentBlockIndex,
                    currentBlockChildIndex
                ]
            }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(slateEditor, currentBlockChild, {
                at: [
                    currentBlockIndex,
                    currentBlockChildIndex
                ]
            }), slateEditor.onChange()) : oldBlockChild || (debug$e("Inserting new child", currentBlockChild), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(slateEditor, currentBlockChild, {
                at: [
                    currentBlockIndex,
                    currentBlockChildIndex
                ]
            }), slateEditor.onChange());
        });
    }
}
const debug$d = debugWithName("component:PortableTextEditor:Synchronizer");
function Synchronizer(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(41), { editorActor, slateEditor } = props, value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useSelector"])(props.editorActor, _temp), readOnly = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useSelector"])(props.editorActor, _temp2);
    let t0;
    $[0] !== props.editorActor ? (t0 = props.editorActor.getSnapshot(), $[0] = props.editorActor, $[1] = t0) : t0 = $[1];
    const t1 = t0.context.keyGenerator;
    let t2;
    $[2] !== props.editorActor ? (t2 = props.editorActor.getSnapshot().matches({
        "edit mode": "read only"
    }), $[2] = props.editorActor, $[3] = t2) : t2 = $[3];
    let t3;
    $[4] !== props.editorActor ? (t3 = props.editorActor.getSnapshot(), $[4] = props.editorActor, $[5] = t3) : t3 = $[5];
    let t4;
    $[6] !== slateEditor || $[7] !== t0.context.keyGenerator || $[8] !== t2 || $[9] !== t3.context.schema ? (t4 = {
        input: {
            keyGenerator: t1,
            readOnly: t2,
            schema: t3.context.schema,
            slateEditor
        }
    }, $[6] = slateEditor, $[7] = t0.context.keyGenerator, $[8] = t2, $[9] = t3.context.schema, $[10] = t4) : t4 = $[10];
    const syncActorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useActorRef"])(syncMachine, t4);
    let t5;
    $[11] !== editorActor ? (t5 = editorActor.getSnapshot(), $[11] = editorActor, $[12] = t5) : t5 = $[12];
    let t6;
    $[13] !== slateEditor || $[14] !== t5.context.schema ? (t6 = {
        input: {
            schema: t5.context.schema,
            slateEditor
        }
    }, $[13] = slateEditor, $[14] = t5.context.schema, $[15] = t6) : t6 = $[15];
    const mutationActorRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useActorRef"])(mutationMachine, t6);
    let t7, t8;
    $[16] !== editorActor || $[17] !== mutationActorRef || $[18] !== syncActorRef ? (t7 = ()=>{
        const subscription = mutationActorRef.on("*", (event)=>{
            event.type === "has pending patches" && syncActorRef.send({
                type: "has pending patches"
            }), event.type === "mutation" && (syncActorRef.send({
                type: "mutation"
            }), editorActor.send({
                type: "mutation",
                patches: event.patches,
                snapshot: event.snapshot,
                value: event.snapshot
            }));
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, t8 = [
        mutationActorRef,
        syncActorRef,
        editorActor
    ], $[16] = editorActor, $[17] = mutationActorRef, $[18] = syncActorRef, $[19] = t7, $[20] = t8) : (t7 = $[19], t8 = $[20]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t7, t8);
    let t10, t9;
    $[21] !== props.editorActor || $[22] !== slateEditor || $[23] !== syncActorRef ? (t9 = ()=>{
        const subscription_0 = syncActorRef.on("*", (event_0)=>{
            bb15: switch(event_0.type){
                case "invalid value":
                    {
                        props.editorActor.send({
                            ...event_0,
                            type: "notify.invalid value"
                        });
                        break bb15;
                    }
                case "value changed":
                    {
                        props.editorActor.send({
                            ...event_0,
                            type: "notify.value changed"
                        });
                        break bb15;
                    }
                case "patch":
                    {
                        props.editorActor.send({
                            ...event_0,
                            type: "internal.patch",
                            value: fromSlateValue(slateEditor.children, props.editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditor))
                        });
                        break bb15;
                    }
                default:
                    props.editorActor.send(event_0);
            }
        });
        return ()=>{
            subscription_0.unsubscribe();
        };
    }, t10 = [
        props.editorActor,
        slateEditor,
        syncActorRef
    ], $[21] = props.editorActor, $[22] = slateEditor, $[23] = syncActorRef, $[24] = t10, $[25] = t9) : (t10 = $[24], t9 = $[25]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t9, t10);
    let t11, t12;
    $[26] !== readOnly || $[27] !== syncActorRef ? (t11 = ()=>{
        syncActorRef.send({
            type: "update readOnly",
            readOnly
        });
    }, t12 = [
        syncActorRef,
        readOnly
    ], $[26] = readOnly, $[27] = syncActorRef, $[28] = t11, $[29] = t12) : (t11 = $[28], t12 = $[29]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t11, t12);
    let t13, t14;
    $[30] !== syncActorRef || $[31] !== value ? (t13 = ()=>{
        debug$d("Value from props changed, syncing new value"), syncActorRef.send({
            type: "update value",
            value
        });
    }, t14 = [
        syncActorRef,
        value
    ], $[30] = syncActorRef, $[31] = value, $[32] = t13, $[33] = t14) : (t13 = $[32], t14 = $[33]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t13, t14);
    let t15;
    $[34] !== editorActor || $[35] !== mutationActorRef ? (t15 = ()=>{
        debug$d("Subscribing to patch events");
        const sub = editorActor.on("internal.patch", (event_1)=>{
            mutationActorRef.send({
                ...event_1,
                type: "patch"
            });
        });
        return ()=>{
            debug$d("Unsubscribing to patch events"), sub.unsubscribe();
        };
    }, $[34] = editorActor, $[35] = mutationActorRef, $[36] = t15) : t15 = $[36];
    let t16;
    return $[37] !== editorActor || $[38] !== mutationActorRef || $[39] !== slateEditor ? (t16 = [
        editorActor,
        mutationActorRef,
        slateEditor
    ], $[37] = editorActor, $[38] = mutationActorRef, $[39] = slateEditor, $[40] = t16) : t16 = $[40], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t15, t16), null;
}
function _temp2(s_0) {
    return s_0.matches({
        "edit mode": "read only"
    });
}
function _temp(s) {
    return s.context.value;
}
Synchronizer.displayName = "Synchronizer";
const converterJson = {
    mimeType: "application/json",
    serialize: ({ snapshot, event })=>{
        const portableTextConverter = snapshot.context.converters.find((converter)=>converter.mimeType === "application/x-portable-text");
        return portableTextConverter ? {
            ...portableTextConverter.serialize({
                snapshot,
                event
            }),
            mimeType: "application/json",
            originEvent: event.originEvent
        } : {
            type: "serialization.failure",
            mimeType: "application/json",
            originEvent: event.originEvent,
            reason: "No application/x-portable-text Converter found"
        };
    },
    deserialize: ({ snapshot, event })=>{
        const portableTextConverter = snapshot.context.converters.find((converter)=>converter.mimeType === "application/x-portable-text");
        return portableTextConverter ? {
            ...portableTextConverter.deserialize({
                snapshot,
                event
            }),
            mimeType: "application/json"
        } : {
            type: "deserialization.failure",
            mimeType: "application/json",
            reason: "No application/x-portable-text Converter found"
        };
    }
}, converterPortableText = {
    mimeType: "application/x-portable-text",
    serialize: ({ snapshot, event })=>{
        const selection = snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection;
        if (!selection) return {
            type: "serialization.failure",
            mimeType: "application/x-portable-text",
            originEvent: event.originEvent,
            reason: "No selection"
        };
        const blocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sliceBlocks"])({
            blocks: snapshot.context.value,
            selection
        });
        return blocks.length === 0 ? {
            type: "serialization.failure",
            mimeType: "application/x-portable-text",
            reason: "No blocks serialized",
            originEvent: event.originEvent
        } : {
            type: "serialization.success",
            data: JSON.stringify(blocks),
            mimeType: "application/x-portable-text",
            originEvent: event.originEvent
        };
    },
    deserialize: ({ snapshot, event })=>{
        const blocks = JSON.parse(event.data);
        if (!Array.isArray(blocks)) return {
            type: "deserialization.failure",
            mimeType: "application/x-portable-text",
            reason: "Data is not an array"
        };
        const parsedBlocks = blocks.flatMap((block)=>{
            const parsedBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlock"])({
                context: snapshot.context,
                block,
                options: {
                    /**
           * If we are dragging internally then we would like to keep the
           * dropped portable text as is.
           */ refreshKeys: !snapshot.beta.hasTag?.("dragging internally")
                }
            });
            return parsedBlock ? [
                parsedBlock
            ] : [];
        });
        return parsedBlocks.length === 0 && blocks.length > 0 ? {
            type: "deserialization.failure",
            mimeType: "application/x-portable-text",
            reason: "No blocks were parsed"
        } : {
            type: "deserialization.success",
            data: parsedBlocks,
            mimeType: "application/x-portable-text"
        };
    }
}, converterTextHtml = {
    mimeType: "text/html",
    serialize: ({ snapshot, event })=>{
        const selection = snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection;
        if (!selection) return {
            type: "serialization.failure",
            mimeType: "text/html",
            originEvent: event.originEvent,
            reason: "No selection"
        };
        const blocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sliceBlocks"])({
            blocks: snapshot.context.value,
            selection
        }), html = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$to$2d$html$2f$dist$2f$pt$2d$to$2d$html$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toHTML"])(blocks, {
            onMissingComponent: !1,
            components: {
                unknownType: ({ children })=>children !== void 0 ? `${children}` : ""
            }
        });
        return html === "" ? {
            type: "serialization.failure",
            mimeType: "text/html",
            originEvent: event.originEvent,
            reason: "Serialized HTML is empty"
        } : {
            type: "serialization.success",
            data: html,
            mimeType: "text/html",
            originEvent: event.originEvent
        };
    },
    deserialize: ({ snapshot, event })=>{
        const blocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["htmlToBlocks"])(event.data, snapshot.context.schema.portableText, {
            keyGenerator: snapshot.context.keyGenerator,
            unstable_whitespaceOnPasteMode: snapshot.context.schema.block.options.unstable_whitespaceOnPasteMode
        });
        return blocks.length === 0 ? {
            type: "deserialization.failure",
            mimeType: "text/html",
            reason: "No blocks deserialized"
        } : {
            type: "deserialization.success",
            data: blocks,
            mimeType: "text/html"
        };
    }
}, converterTextPlain = {
    mimeType: "text/plain",
    serialize: ({ snapshot, event })=>{
        const selection = snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection;
        return selection ? {
            type: "serialization.success",
            data: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["sliceBlocks"])({
                blocks: snapshot.context.value,
                selection
            }).map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(block) ? block.children.map((child)=>child._type === snapshot.context.schema.span.name ? child.text : snapshot.beta.hasTag("dragging internally") ? `[${snapshot.context.schema.inlineObjects.find((inlineObjectType)=>inlineObjectType.name === child._type)?.title ?? "Object"}]` : "").join("") : snapshot.beta.hasTag("dragging internally") ? `[${snapshot.context.schema.blockObjects.find((blockObjectType)=>blockObjectType.name === block._type)?.title ?? "Object"}]` : "").filter((block)=>block !== "").join(`

`),
            mimeType: "text/plain",
            originEvent: event.originEvent
        } : {
            type: "serialization.failure",
            mimeType: "text/plain",
            originEvent: event.originEvent,
            reason: "No selection"
        };
    },
    deserialize: ({ snapshot, event })=>{
        const textToHtml = `<html><body>${escapeHtml(event.data).split(/\n{2,}/).map((line)=>line ? `<p>${line.replace(/(?:\r\n|\r|\n)/g, "<br/>")}</p>` : "<p></p>").join("")}</body></html>`, blocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$block$2d$tools$2f$lib$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["htmlToBlocks"])(textToHtml, snapshot.context.schema.portableText, {
            keyGenerator: snapshot.context.keyGenerator
        });
        return blocks.length === 0 ? {
            type: "deserialization.failure",
            mimeType: "text/plain",
            reason: "No blocks deserialized"
        } : {
            type: "deserialization.success",
            data: blocks,
            mimeType: "text/plain"
        };
    }
}, entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;",
    "/": "&#x2F;",
    "`": "&#x60;",
    "=": "&#x3D;"
};
function escapeHtml(str) {
    return String(str).replace(/[&<>"'`=/]/g, (s)=>entityMap[s]);
}
const coreConverters = [
    converterJson,
    converterPortableText,
    converterTextHtml,
    converterTextPlain
], debug$c = debugWithName("operationToPatches");
function createOperationToPatches(types) {
    const textBlockName = types.block.name;
    function insertTextPatch(editor, operation, beforeValue) {
        debug$c.enabled && debug$c("Operation", JSON.stringify(operation, null, 2));
        const block = editor.isTextBlock(editor.children[operation.path[0]]) && editor.children[operation.path[0]];
        if (!block) throw new Error("Could not find block");
        const textChild = editor.isTextBlock(block) && editor.isTextSpan(block.children[operation.path[1]]) && block.children[operation.path[1]];
        if (!textChild) throw new Error("Could not find child");
        const path = [
            {
                _key: block._key
            },
            "children",
            {
                _key: textChild._key
            },
            "text"
        ], prevBlock = beforeValue[operation.path[0]], prevChild = editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevChild) ? prevChild.text : "", patch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["diffMatchPatch"])(prevText, textChild.text, path);
        return patch.value.length ? [
            patch
        ] : [];
    }
    function removeTextPatch(editor, operation, beforeValue) {
        const block = editor && editor.children[operation.path[0]];
        if (!block) throw new Error("Could not find block");
        const child = editor.isTextBlock(block) && block.children[operation.path[1]] || void 0, textChild = editor.isTextSpan(child) ? child : void 0;
        if (child && !textChild) throw new Error("Expected span");
        if (!textChild) throw new Error("Could not find child");
        const path = [
            {
                _key: block._key
            },
            "children",
            {
                _key: textChild._key
            },
            "text"
        ], beforeBlock = beforeValue[operation.path[0]], prevTextChild = editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]], prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text, patch = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["diffMatchPatch"])(prevText || "", textChild.text, path);
        return patch.value ? [
            patch
        ] : [];
    }
    function setNodePatch(editor, operation) {
        if (operation.path.length === 1) {
            const block = editor.children[operation.path[0]];
            if (typeof block._key != "string") throw new Error("Expected block to have a _key");
            const setNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omitBy$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
                ...editor.children[operation.path[0]],
                ...operation.newProperties
            }, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isUndefined$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"]);
            return [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(fromSlateValue([
                    setNode
                ], textBlockName)[0], [
                    {
                        _key: block._key
                    }
                ])
            ];
        } else if (operation.path.length === 2) {
            const block = editor.children[operation.path[0]];
            if (editor.isTextBlock(block)) {
                const child = block.children[operation.path[1]];
                if (child) {
                    const blockKey = block._key, childKey = child._key, patches = [], keys = Object.keys(operation.newProperties);
                    return keys.forEach((keyName)=>{
                        if (keys.length === 1 && keyName === "_key") {
                            const val = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$get$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(operation.newProperties, keyName);
                            patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(val, [
                                {
                                    _key: blockKey
                                },
                                "children",
                                block.children.indexOf(child),
                                keyName
                            ]));
                        } else {
                            const val = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$get$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(operation.newProperties, keyName);
                            patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(val, [
                                {
                                    _key: blockKey
                                },
                                "children",
                                {
                                    _key: childKey
                                },
                                keyName
                            ]));
                        }
                    }), patches;
                }
                throw new Error("Could not find a valid child");
            }
            throw new Error("Could not find a valid block");
        } else throw new Error(`Unexpected path encountered: ${JSON.stringify(operation.path)}`);
    }
    function insertNodePatch(editor, operation, beforeValue) {
        const block = beforeValue[operation.path[0]], isTextBlock2 = editor.isTextBlock(block);
        if (operation.path.length === 1) {
            const position = operation.path[0] === 0 ? "before" : "after", beforeBlock = beforeValue[operation.path[0] - 1], targetKey = operation.path[0] === 0 ? block?._key : beforeBlock?._key;
            return targetKey ? [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                    fromSlateValue([
                        operation.node
                    ], textBlockName)[0]
                ], position, [
                    {
                        _key: targetKey
                    }
                ])
            ] : [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setIfMissing"])(beforeValue, []),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                    fromSlateValue([
                        operation.node
                    ], textBlockName)[0]
                ], "before", [
                    operation.path[0]
                ])
            ];
        } else if (isTextBlock2 && operation.path.length === 2 && editor.children[operation.path[0]]) {
            const position = block.children.length === 0 || !block.children[operation.path[1] - 1] ? "before" : "after", node = {
                ...operation.node
            };
            !node._type && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(node) && (node._type = "span", node.marks = []);
            const child = fromSlateValue([
                {
                    _key: "bogus",
                    _type: textBlockName,
                    children: [
                        node
                    ]
                }
            ], textBlockName)[0].children[0];
            return [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                    child
                ], position, [
                    {
                        _key: block._key
                    },
                    "children",
                    block.children.length <= 1 || !block.children[operation.path[1] - 1] ? 0 : {
                        _key: block.children[operation.path[1] - 1]._key
                    }
                ])
            ];
        }
        return debug$c("Something was inserted into a void block. Not producing editor patches."), [];
    }
    function splitNodePatch(editor, operation, beforeValue) {
        const patches = [], splitBlock = editor.children[operation.path[0]];
        if (!editor.isTextBlock(splitBlock)) throw new Error(`Block with path ${JSON.stringify(operation.path[0])} is not a text block and can't be split`);
        if (operation.path.length === 1) {
            const oldBlock = beforeValue[operation.path[0]];
            if (editor.isTextBlock(oldBlock)) {
                const targetValue = fromSlateValue([
                    editor.children[operation.path[0] + 1]
                ], textBlockName)[0];
                targetValue && (patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                    targetValue
                ], "after", [
                    {
                        _key: splitBlock._key
                    }
                ])), oldBlock.children.slice(operation.position).forEach((span)=>{
                    const path = [
                        {
                            _key: oldBlock._key
                        },
                        "children",
                        {
                            _key: span._key
                        }
                    ];
                    patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])(path));
                }));
            }
            return patches;
        }
        if (operation.path.length === 2) {
            const splitSpan = splitBlock.children[operation.path[1]];
            if (editor.isTextSpan(splitSpan)) {
                const targetSpans = fromSlateValue([
                    {
                        ...splitBlock,
                        children: splitBlock.children.slice(operation.path[1] + 1, operation.path[1] + 2)
                    }
                ], textBlockName)[0].children;
                patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])(targetSpans, "after", [
                    {
                        _key: splitBlock._key
                    },
                    "children",
                    {
                        _key: splitSpan._key
                    }
                ])), patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(splitSpan.text, [
                    {
                        _key: splitBlock._key
                    },
                    "children",
                    {
                        _key: splitSpan._key
                    },
                    "text"
                ]));
            }
            return patches;
        }
        return patches;
    }
    function removeNodePatch(editor, operation, beforeValue) {
        const block = beforeValue[operation.path[0]];
        if (operation.path.length === 1) {
            if (block && block._key) return [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                    {
                        _key: block._key
                    }
                ])
            ];
            throw new Error("Block not found");
        } else if (editor.isTextBlock(block) && operation.path.length === 2) {
            const spanToRemove = block.children[operation.path[1]];
            return spanToRemove ? block.children.filter((span)=>span._key === operation.node._key).length > 1 ? (console.warn(`Multiple spans have \`_key\` ${operation.node._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)), []) : [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                    {
                        _key: block._key
                    },
                    "children",
                    {
                        _key: spanToRemove._key
                    }
                ])
            ] : (debug$c("Span not found in editor trying to remove node"), []);
        } else return debug$c("Not creating patch inside object block"), [];
    }
    function mergeNodePatch(editor, operation, beforeValue) {
        const patches = [], block = beforeValue[operation.path[0]], updatedBlock = editor.children[operation.path[0]];
        if (operation.path.length === 1) if (block?._key) {
            const newBlock = fromSlateValue([
                editor.children[operation.path[0] - 1]
            ], textBlockName)[0];
            patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(newBlock, [
                {
                    _key: newBlock._key
                }
            ])), patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                {
                    _key: block._key
                }
            ]));
        } else throw new Error("Target key not found!");
        else if (editor.isTextBlock(block) && editor.isTextBlock(updatedBlock) && operation.path.length === 2) {
            const updatedSpan = updatedBlock.children[operation.path[1] - 1] && editor.isTextSpan(updatedBlock.children[operation.path[1] - 1]) ? updatedBlock.children[operation.path[1] - 1] : void 0, removedSpan = block.children[operation.path[1]] && editor.isTextSpan(block.children[operation.path[1]]) ? block.children[operation.path[1]] : void 0;
            updatedSpan && (block.children.filter((span)=>span._key === updatedSpan._key).length === 1 ? patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["set"])(updatedSpan.text, [
                {
                    _key: block._key
                },
                "children",
                {
                    _key: updatedSpan._key
                },
                "text"
            ])) : console.warn(`Multiple spans have \`_key\` ${updatedSpan._key}. It's ambiguous which one to update.`, JSON.stringify(block, null, 2))), removedSpan && (block.children.filter((span)=>span._key === removedSpan._key).length === 1 ? patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                {
                    _key: block._key
                },
                "children",
                {
                    _key: removedSpan._key
                }
            ])) : console.warn(`Multiple spans have \`_key\` ${removedSpan._key}. It's ambiguous which one to remove.`, JSON.stringify(block, null, 2)));
        } else debug$c("Void nodes can't be merged, not creating any patches");
        return patches;
    }
    function moveNodePatch(editor, operation, beforeValue) {
        const patches = [], block = beforeValue[operation.path[0]], targetBlock = beforeValue[operation.newPath[0]];
        if (!targetBlock) return patches;
        if (operation.path.length === 1) {
            const position = operation.path[0] > operation.newPath[0] ? "before" : "after";
            patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                {
                    _key: block._key
                }
            ])), patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                fromSlateValue([
                    block
                ], textBlockName)[0]
            ], position, [
                {
                    _key: targetBlock._key
                }
            ]));
        } else if (operation.path.length === 2 && editor.isTextBlock(block) && editor.isTextBlock(targetBlock)) {
            const child = block.children[operation.path[1]], targetChild = targetBlock.children[operation.newPath[1]], position = operation.newPath[1] === targetBlock.children.length ? "after" : "before", childToInsert = fromSlateValue([
                block
            ], textBlockName)[0].children[operation.path[1]];
            patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([
                {
                    _key: block._key
                },
                "children",
                {
                    _key: child._key
                }
            ])), patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])([
                childToInsert
            ], position, [
                {
                    _key: targetBlock._key
                },
                "children",
                {
                    _key: targetChild._key
                }
            ]));
        }
        return patches;
    }
    return {
        insertNodePatch,
        insertTextPatch,
        mergeNodePatch,
        moveNodePatch,
        removeNodePatch,
        removeTextPatch,
        setNodePatch,
        splitNodePatch
    };
}
const insertBreakActionImplementation = ({ context, action })=>{
    const keyGenerator = context.keyGenerator, schema = context.schema, editor = action.editor;
    if (!editor.selection) return;
    const anchorBlockPath = editor.selection.anchor.path.slice(0, 1), focusBlockPath = editor.selection.focus.path.slice(0, 1), focusBlock = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].descendant(editor, focusBlockPath);
    if (editor.isTextBlock(focusBlock) && anchorBlockPath[0] === focusBlockPath[0]) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].splitNodes(editor, {
            at: editor.selection,
            always: !0
        });
        const [nextBlock, nextBlockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].next(focusBlockPath), {
            depth: 1
        }), nextChild = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].child(nextBlock, 0);
        if (!editor.isTextSpan(nextChild) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
            _key: context.keyGenerator(),
            _type: "span",
            text: "",
            marks: []
        }, {
            at: [
                nextBlockPath[0],
                0
            ]
        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setSelection(editor, {
            anchor: {
                path: [
                    ...nextBlockPath,
                    0
                ],
                offset: 0
            },
            focus: {
                path: [
                    ...nextBlockPath,
                    0
                ],
                offset: 0
            }
        }), editor.isTextBlock(nextBlock) && nextBlock.markDefs && nextBlock.markDefs.length > 0) {
            const newMarkDefKeys = /* @__PURE__ */ new Map(), prevNodeSpans = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, focusBlockPath)).map((entry)=>entry[0]).filter((node)=>editor.isTextSpan(node)), children = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, nextBlockPath);
            for (const [child, childPath] of children){
                if (!editor.isTextSpan(child)) continue;
                const marks = child.marks ?? [];
                for (const mark of marks)schema.decorators.some((decorator)=>decorator.value === mark) || prevNodeSpans.some((prevNodeSpan)=>prevNodeSpan.marks?.includes(mark)) && !newMarkDefKeys.has(mark) && newMarkDefKeys.set(mark, keyGenerator());
                const newMarks = marks.map((mark)=>newMarkDefKeys.get(mark) ?? mark);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(marks, newMarks) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    marks: newMarks
                }, {
                    at: childPath
                });
            }
            const newMarkDefs = nextBlock.markDefs.map((markDef)=>({
                    ...markDef,
                    _key: newMarkDefKeys.get(markDef._key) ?? markDef._key
                }));
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(nextBlock.markDefs, newMarkDefs) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                markDefs: newMarkDefs
            }, {
                at: nextBlockPath,
                match: (node)=>editor.isTextBlock(node)
            });
        }
        return;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].splitNodes(editor, {
        always: !0
    });
}, insertSoftBreakActionImplementation = ({ action })=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insertText"])(action.editor, `
`);
};
function isPortableTextSpan(node) {
    return node._type === "span" && "text" in node && typeof node.text == "string" && (typeof node.marks > "u" || Array.isArray(node.marks) && node.marks.every((mark)=>typeof mark == "string"));
}
function isPortableTextBlock(node) {
    return(// A block doesn't _have_ to be named 'block' - to differentiate between
    // allowed child types and marks, one might name them differently
    typeof node._type == "string" && // Toolkit-types like nested spans are @-prefixed
    node._type[0] !== "@" && // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array
    (!("markDefs" in node) || !node.markDefs || Array.isArray(node.markDefs) && // Every mark definition needs to have an `_key` to be mappable in child spans
    node.markDefs.every((def)=>typeof def._key == "string")) && // `children` is required and needs to be an array
    "children" in node && Array.isArray(node.children) && // All children are objects with `_type` (usually spans, but can contain other stuff)
    node.children.every((child)=>typeof child == "object" && "_type" in child));
}
function getPreviousSpan({ editor, blockPath, spanPath }) {
    let previousSpan;
    for (const [child, childPath] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, blockPath, {
        reverse: !0
    }))if (editor.isTextSpan(child) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].isBefore(childPath, spanPath)) {
        previousSpan = child;
        break;
    }
    return previousSpan;
}
function getNextSpan({ editor, blockPath, spanPath }) {
    let nextSpan;
    for (const [child, childPath] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, blockPath))if (editor.isTextSpan(child) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].isAfter(childPath, spanPath)) {
        nextSpan = child;
        break;
    }
    return nextSpan;
}
const debug$b = debugWithName("plugin:withPortableTextMarkModel");
function createWithPortableTextMarkModel(editorActor, types) {
    return function(editor) {
        const { apply: apply2, normalizeNode } = editor, decorators = types.decorators.map((t)=>t.value);
        return editor.normalizeNode = (nodeEntry)=>{
            const [node, path] = nodeEntry;
            if (editor.isTextBlock(node)) {
                const children = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, path);
                for (const [child, childPath] of children){
                    const nextNode = node.children[childPath[1] + 1];
                    if (editor.isTextSpan(child) && editor.isTextSpan(nextNode) && child.marks?.every((mark)=>nextNode.marks?.includes(mark)) && nextNode.marks?.every((mark)=>child.marks?.includes(mark))) {
                        debug$b("Merging spans", JSON.stringify(child, null, 2), JSON.stringify(nextNode, null, 2)), editorActor.send({
                            type: "normalizing"
                        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].mergeNodes(editor, {
                            at: [
                                childPath[0],
                                childPath[1] + 1
                            ],
                            voids: !0
                        }), editorActor.send({
                            type: "done normalizing"
                        });
                        return;
                    }
                }
            }
            if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {
                debug$b("Adding .markDefs to block node"), editorActor.send({
                    type: "normalizing"
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    markDefs: []
                }, {
                    at: path
                }), editorActor.send({
                    type: "done normalizing"
                });
                return;
            }
            if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {
                debug$b("Adding .marks to span node"), editorActor.send({
                    type: "normalizing"
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    marks: []
                }, {
                    at: path
                }), editorActor.send({
                    type: "done normalizing"
                });
                return;
            }
            if (editor.isTextSpan(node)) {
                const blockPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].parent(path), [block] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, blockPath), decorators2 = types.decorators.map((decorator)=>decorator.value), annotations = node.marks?.filter((mark)=>!decorators2.includes(mark));
                if (editor.isTextBlock(block) && node.text === "" && annotations && annotations.length > 0) {
                    debug$b("Removing annotations from empty span node"), editorActor.send({
                        type: "normalizing"
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        marks: node.marks?.filter((mark)=>decorators2.includes(mark))
                    }, {
                        at: path
                    }), editorActor.send({
                        type: "done normalizing"
                    });
                    return;
                }
            }
            if (editor.isTextBlock(node)) {
                const decorators2 = types.decorators.map((decorator)=>decorator.value);
                for (const [child, childPath] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, path))if (editor.isTextSpan(child)) {
                    const marks = child.marks ?? [], orphanedAnnotations = marks.filter((mark)=>!decorators2.includes(mark) && !node.markDefs?.find((def)=>def._key === mark));
                    if (orphanedAnnotations.length > 0) {
                        debug$b("Removing orphaned annotations from span node"), editorActor.send({
                            type: "normalizing"
                        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                            marks: marks.filter((mark)=>!orphanedAnnotations.includes(mark))
                        }, {
                            at: childPath
                        }), editorActor.send({
                            type: "done normalizing"
                        });
                        return;
                    }
                }
            }
            if (editor.isTextSpan(node)) {
                const blockPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].parent(path), [block] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, blockPath);
                if (editor.isTextBlock(block)) {
                    const decorators2 = types.decorators.map((decorator)=>decorator.value), marks = node.marks ?? [], orphanedAnnotations = marks.filter((mark)=>!decorators2.includes(mark) && !block.markDefs?.find((def)=>def._key === mark));
                    if (orphanedAnnotations.length > 0) {
                        debug$b("Removing orphaned annotations from span node"), editorActor.send({
                            type: "normalizing"
                        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                            marks: marks.filter((mark)=>!orphanedAnnotations.includes(mark))
                        }, {
                            at: path
                        }), editorActor.send({
                            type: "done normalizing"
                        });
                        return;
                    }
                }
            }
            if (editor.isTextBlock(node)) {
                const markDefs = node.markDefs ?? [], markDefKeys = /* @__PURE__ */ new Set(), newMarkDefs = [];
                for (const markDef of markDefs)markDefKeys.has(markDef._key) || (markDefKeys.add(markDef._key), newMarkDefs.push(markDef));
                if (markDefs.length !== newMarkDefs.length) {
                    debug$b("Removing duplicate markDefs"), editorActor.send({
                        type: "normalizing"
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        markDefs: newMarkDefs
                    }, {
                        at: path
                    }), editorActor.send({
                        type: "done normalizing"
                    });
                    return;
                }
            }
            if (editor.isTextBlock(node) && !editor.operations.some((op)=>op.type === "merge_node" && "markDefs" in op.properties && op.path.length === 1)) {
                const newMarkDefs = (node.markDefs || []).filter((def)=>node.children.find((child)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(child) && Array.isArray(child.marks) && child.marks.includes(def._key)));
                if (node.markDefs && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(newMarkDefs, node.markDefs)) {
                    debug$b("Removing markDef not in use"), editorActor.send({
                        type: "normalizing"
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        markDefs: newMarkDefs
                    }, {
                        at: path
                    }), editorActor.send({
                        type: "done normalizing"
                    });
                    return;
                }
            }
            normalizeNode(nodeEntry);
        }, editor.apply = (op)=>{
            if (isChangingRemotely(editor)) {
                apply2(op);
                return;
            }
            if (isUndoing(editor) || isRedoing(editor)) {
                apply2(op);
                return;
            }
            if (op.type === "set_selection" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) && op.properties && op.newProperties && op.properties.anchor && op.properties.focus && op.newProperties.anchor && op.newProperties.focus) {
                const previousSelectionIsCollapsed = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed({
                    anchor: op.properties.anchor,
                    focus: op.properties.focus
                }), newSelectionIsCollapsed = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed({
                    anchor: op.newProperties.anchor,
                    focus: op.newProperties.focus
                });
                if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {
                    const focusSpan = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                        mode: "lowest",
                        at: op.properties.focus,
                        match: (n)=>editor.isTextSpan(n),
                        voids: !1
                    }))[0]?.[0], newFocusSpan = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                        mode: "lowest",
                        at: op.newProperties.focus,
                        match: (n)=>editor.isTextSpan(n),
                        voids: !1
                    }))[0]?.[0], movedToNextSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] + 1 && focusSpan.text.length === op.properties.focus.offset && op.newProperties.focus.offset === 0, movedToPreviousSpan = focusSpan && newFocusSpan && op.newProperties.focus.path[0] === op.properties.focus.path[0] && op.newProperties.focus.path[1] === op.properties.focus.path[1] - 1 && op.properties.focus.offset === 0 && newFocusSpan.text.length === op.newProperties.focus.offset;
                    if (movedToNextSpan || movedToPreviousSpan) return;
                }
            }
            if (op.type === "insert_node") {
                const { selection } = editor;
                if (selection) {
                    const [_block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, selection, {
                        depth: 1
                    }), previousSpan = getPreviousSpan({
                        editor,
                        blockPath,
                        spanPath: op.path
                    }), previousSpanAnnotations = previousSpan ? previousSpan.marks?.filter((mark)=>!decorators.includes(mark)) : [], nextSpan = getNextSpan({
                        editor,
                        blockPath,
                        spanPath: [
                            op.path[0],
                            op.path[1] - 1
                        ]
                    }), nextSpanAnnotations = nextSpan ? nextSpan.marks?.filter((mark)=>!decorators.includes(mark)) : [], annotationsEnding = previousSpanAnnotations?.filter((annotation)=>!nextSpanAnnotations?.includes(annotation)) ?? [], atTheEndOfAnnotation = annotationsEnding.length > 0;
                    if (atTheEndOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark)=>annotationsEnding.includes(mark))) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                            ...op.node,
                            _key: editorActor.getSnapshot().context.keyGenerator(),
                            marks: op.node.marks?.filter((mark)=>!annotationsEnding.includes(mark)) ?? []
                        });
                        return;
                    }
                    const annotationsStarting = nextSpanAnnotations?.filter((annotation)=>!previousSpanAnnotations?.includes(annotation)) ?? [], atTheStartOfAnnotation = annotationsStarting.length > 0;
                    if (atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.some((mark)=>annotationsStarting.includes(mark))) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                            ...op.node,
                            _key: editorActor.getSnapshot().context.keyGenerator(),
                            marks: op.node.marks?.filter((mark)=>!annotationsStarting.includes(mark)) ?? []
                        });
                        return;
                    }
                    const nextSpanDecorators = nextSpan?.marks?.filter((mark)=>decorators.includes(mark)) ?? [];
                    if (nextSpanDecorators.length > 0 && atTheEndOfAnnotation && !atTheStartOfAnnotation && isPortableTextSpan(op.node) && op.node.marks?.length === 0) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                            ...op.node,
                            _key: editorActor.getSnapshot().context.keyGenerator(),
                            marks: nextSpanDecorators
                        });
                        return;
                    }
                }
            }
            if (op.type === "insert_text") {
                const { selection } = editor, collapsedSelection = selection ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed(selection) : !1;
                if (selection && collapsedSelection) {
                    const [_block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, selection, {
                        depth: 1
                    }), [span, spanPath] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                        mode: "lowest",
                        at: selection.focus,
                        match: (n)=>editor.isTextSpan(n),
                        voids: !1
                    }))[0] ?? [
                        void 0,
                        void 0
                    ], marks = span.marks ?? [], marksWithoutAnnotations = marks.filter((mark)=>decorators.includes(mark)), spanHasAnnotations = marks.length > marksWithoutAnnotations.length, spanIsEmpty = span.text.length === 0, atTheBeginningOfSpan = selection.anchor.offset === 0, atTheEndOfSpan = selection.anchor.offset === span.text.length, previousSpan = getPreviousSpan({
                        editor,
                        blockPath,
                        spanPath
                    }), nextSpan = getNextSpan({
                        editor,
                        blockPath,
                        spanPath
                    }), nextSpanAnnotations = nextSpan?.marks?.filter((mark)=>!decorators.includes(mark)) ?? [], spanAnnotations = marks.filter((mark)=>!decorators.includes(mark)), previousSpanHasAnnotations = previousSpan ? previousSpan.marks?.some((mark)=>!decorators.includes(mark)) : !1, previousSpanHasSameAnnotations = previousSpan ? previousSpan.marks?.filter((mark)=>!decorators.includes(mark)).every((mark)=>marks.includes(mark)) : !1, previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark)=>!decorators.includes(mark) && marks.includes(mark)) : !1, previousSpanHasSameMarks = previousSpan ? previousSpan.marks?.every((mark)=>marks.includes(mark)) : !1, nextSpanSharesSomeAnnotations = spanAnnotations.some((mark)=>nextSpanAnnotations?.includes(mark));
                    if (spanHasAnnotations && !spanIsEmpty) {
                        if (atTheBeginningOfSpan) {
                            if (previousSpanHasSameMarks) {
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                                    _type: "span",
                                    _key: editorActor.getSnapshot().context.keyGenerator(),
                                    text: op.text,
                                    marks: previousSpan?.marks ?? []
                                });
                                return;
                            } else if (previousSpanHasSameAnnotations) {
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                                    _type: "span",
                                    _key: editorActor.getSnapshot().context.keyGenerator(),
                                    text: op.text,
                                    marks: previousSpan?.marks ?? []
                                });
                                return;
                            } else if (previousSpanHasSameAnnotation) {
                                apply2(op);
                                return;
                            } else if (!previousSpan) {
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                                    _type: "span",
                                    _key: editorActor.getSnapshot().context.keyGenerator(),
                                    text: op.text,
                                    marks: []
                                });
                                return;
                            }
                        }
                        if (atTheEndOfSpan) {
                            if (nextSpan && nextSpanSharesSomeAnnotations && nextSpanAnnotations.length < spanAnnotations.length || !nextSpanSharesSomeAnnotations) {
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                                    _type: "span",
                                    _key: editorActor.getSnapshot().context.keyGenerator(),
                                    text: op.text,
                                    marks: nextSpan?.marks ?? []
                                });
                                return;
                            }
                            if (!nextSpan) {
                                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                                    _type: "span",
                                    _key: editorActor.getSnapshot().context.keyGenerator(),
                                    text: op.text,
                                    marks: []
                                });
                                return;
                            }
                        }
                    }
                    if (atTheBeginningOfSpan && !spanIsEmpty && previousSpan) {
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, {
                            _type: "span",
                            _key: editorActor.getSnapshot().context.keyGenerator(),
                            text: op.text,
                            marks: previousSpanHasAnnotations ? [] : (previousSpan.marks ?? []).filter((mark)=>decorators.includes(mark))
                        });
                        return;
                    }
                }
            }
            if (op.type === "remove_text") {
                const { selection } = editor;
                if (selection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isExpanded(selection)) {
                    const [block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, selection, {
                        depth: 1
                    }), [span, spanPath] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                        mode: "lowest",
                        at: {
                            path: op.path,
                            offset: op.offset
                        },
                        match: (n)=>editor.isTextSpan(n),
                        voids: !1
                    }))[0] ?? [
                        void 0,
                        void 0
                    ];
                    if (span && block && isPortableTextBlock(block)) {
                        const markDefs = block.markDefs ?? [], marks = span.marks ?? [], spanHasAnnotations = marks.some((mark)=>markDefs.find((markDef)=>markDef._key === mark)), deletingFromTheEnd = op.offset + op.text.length === span.text.length, deletingAllText = op.offset === 0 && deletingFromTheEnd, previousSpan = getPreviousSpan({
                            editor,
                            blockPath,
                            spanPath
                        }), nextSpan = getNextSpan({
                            editor,
                            blockPath,
                            spanPath
                        }), previousSpanHasSameAnnotation = previousSpan ? previousSpan.marks?.some((mark)=>!decorators.includes(mark) && marks.includes(mark)) : !1, nextSpanHasSameAnnotation = nextSpan ? nextSpan.marks?.some((mark)=>!decorators.includes(mark) && marks.includes(mark)) : !1;
                        if (spanHasAnnotations && deletingAllText && !previousSpanHasSameAnnotation && !nextSpanHasSameAnnotation) {
                            const marksWithoutAnnotationMarks = (({
                                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {}
                            }).marks || []).filter((mark)=>decorators.includes(mark));
                            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(editor, ()=>{
                                apply2(op), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                                    marks: marksWithoutAnnotationMarks
                                }, {
                                    at: op.path
                                });
                            }), editor.onChange();
                            return;
                        }
                    }
                }
            }
            if (op.type === "merge_node" && op.path.length === 1 && "markDefs" in op.properties && op.properties._type === types.block.name && Array.isArray(op.properties.markDefs) && op.properties.markDefs.length > 0 && op.path[0] - 1 >= 0) {
                const [targetBlock, targetPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, [
                    op.path[0] - 1
                ]);
                if (editor.isTextBlock(targetBlock)) {
                    const oldDefs = Array.isArray(targetBlock.markDefs) && targetBlock.markDefs || [], newMarkDefs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])([
                        ...oldDefs,
                        ...op.properties.markDefs
                    ]);
                    debug$b("Copying markDefs over to merged block", op), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        markDefs: newMarkDefs
                    }, {
                        at: targetPath,
                        voids: !1
                    }), apply2(op);
                    return;
                }
            }
            apply2(op);
        }, editor;
    };
}
const removeDecoratorActionImplementation = ({ action })=>{
    const editor = action.editor, mark = action.decorator, { selection } = editor;
    if (selection) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isExpanded(selection)) __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {}, {
            match: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText,
            split: !0,
            hanging: !0
        }), editor.selection && [
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                at: editor.selection,
                match: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText
            })
        ].forEach(([node, path])=>{
            const block = editor.children[path[0]];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(block) && block.children.includes(node) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                marks: (Array.isArray(node.marks) ? node.marks : []).filter((eMark)=>eMark !== mark),
                _type: "span"
            }, {
                at: path
            });
        });
        else {
            const [block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, selection, {
                depth: 1
            }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === "" ? block.children[0] : void 0;
            if (lonelyEmptySpan) {
                const existingMarksWithoutDecorator = (lonelyEmptySpan.marks ?? []).filter((existingMark)=>existingMark !== mark);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    marks: existingMarksWithoutDecorator
                }, {
                    at: blockPath,
                    match: (node)=>editor.isTextSpan(node)
                });
            } else {
                const existingMarks = {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {}
                }.marks || [], marks = {
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {},
                    marks: existingMarks.filter((eMark)=>eMark !== mark)
                };
                editor.marks = {
                    marks: marks.marks,
                    _type: "span"
                };
            }
        }
        if (editor.selection) {
            const selection2 = editor.selection;
            editor.selection = {
                ...selection2
            };
        }
    }
};
function isDecoratorActive({ editor, decorator }) {
    if (!editor.selection) return !1;
    const selectedTextNodes = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
        match: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText,
        at: editor.selection
    }));
    return selectedTextNodes.length === 0 ? !1 : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isExpanded(editor.selection) ? selectedTextNodes.every((n)=>{
        const [node] = n;
        return node.marks?.includes(decorator);
    }) : (({
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {}
    }).marks || []).includes(decorator);
}
const debug$a = debugWithName("API:editable");
function createEditableAPI(editor, editorActor) {
    const types = editorActor.getSnapshot().context.schema;
    return {
        focus: ()=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "focus"
                },
                editor
            });
        },
        blur: ()=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "blur"
                },
                editor
            });
        },
        toggleMark: (mark)=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "decorator.toggle",
                    decorator: mark
                },
                editor
            });
        },
        toggleList: (listItem)=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "list item.toggle",
                    listItem
                },
                editor
            });
        },
        toggleBlockStyle: (style)=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "style.toggle",
                    style
                },
                editor
            });
        },
        isMarkActive: (mark)=>{
            try {
                return isDecoratorActive({
                    editor,
                    decorator: mark
                });
            } catch (err) {
                return console.warn(err), !1;
            }
        },
        marks: ()=>({
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {}
            }).marks || [],
        undo: ()=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "history.undo"
                },
                editor
            });
        },
        redo: ()=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "history.redo"
                },
                editor
            });
        },
        select: (selection)=>{
            const slateSelection = toSlateRange(selection, editor);
            slateSelection ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, slateSelection) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(editor), editor.onChange();
        },
        focusBlock: ()=>{
            if (editor.selection) {
                const block = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].descendant(editor, editor.selection.focus.path.slice(0, 1));
                if (block) return fromSlateValue([
                    block
                ], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];
            }
        },
        focusChild: ()=>{
            if (editor.selection) {
                const block = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].descendant(editor, editor.selection.focus.path.slice(0, 1));
                if (block && editor.isTextBlock(block)) return fromSlateValue([
                    block
                ], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0].children[editor.selection.focus.path[1]];
            }
        },
        insertChild: (type, value)=>{
            if (type.name !== types.span.name) return editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "insert.inline object",
                    inlineObject: {
                        name: type.name,
                        value
                    }
                },
                editor
            }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? [];
            if (!editor.selection) throw new Error("The editor has no selection");
            const [focusBlock] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                at: editor.selection.focus.path.slice(0, 1),
                match: (n)=>n._type === types.block.name
            }))[0] || [
                void 0
            ];
            if (!focusBlock) throw new Error("No focused text block");
            if (type.name !== types.span.name && !types.inlineObjects.some((t)=>t.name === type.name)) throw new Error("This type cannot be inserted as a child to a text block");
            const child = toSlateValue([
                {
                    _key: editorActor.getSnapshot().context.keyGenerator(),
                    _type: types.block.name,
                    children: [
                        {
                            _key: editorActor.getSnapshot().context.keyGenerator(),
                            _type: type.name,
                            ...value || {}
                        }
                    ]
                }
            ], {
                schemaTypes: editorActor.getSnapshot().context.schema
            })[0].children[0], focusChildPath = editor.selection.focus.path.slice(0, 2), isSpanNode = child._type === types.span.name, focusNode = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].get(editor, focusChildPath);
            return isSpanNode && focusNode._type !== types.span.name && (debug$a("Inserting span child next to inline object child, moving selection + 1"), editor.move({
                distance: 1,
                unit: "character"
            })), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, child, {
                select: !0,
                at: editor.selection
            }), editor.onChange(), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path || [];
        },
        insertBlock: (type, value)=>(editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "insert.block",
                    block: {
                        _type: type.name,
                        ...value || {}
                    },
                    placement: "auto"
                },
                editor
            }), toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types)?.focus.path ?? []),
        hasBlockStyle: (style)=>{
            try {
                return isStyleActive({
                    editor,
                    style
                });
            } catch  {
                return !1;
            }
        },
        hasListStyle: (listItem)=>{
            try {
                return isListItemActive({
                    editor,
                    listItem
                });
            } catch  {
                return !1;
            }
        },
        isVoid: (element)=>![
                types.block.name,
                types.span.name
            ].includes(element._type),
        findByPath: (path)=>{
            const slatePath = toSlateRange({
                focus: {
                    path,
                    offset: 0
                },
                anchor: {
                    path,
                    offset: 0
                }
            }, editor);
            if (slatePath) {
                const [block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, slatePath.focus.path.slice(0, 1));
                if (block && blockPath && typeof block._key == "string") {
                    if (path.length === 1 && slatePath.focus.path.length === 1) return [
                        fromSlateValue([
                            block
                        ], types.block.name)[0],
                        [
                            {
                                _key: block._key
                            }
                        ]
                    ];
                    const ptBlock = fromSlateValue([
                        block
                    ], types.block.name, KEY_TO_VALUE_ELEMENT.get(editor))[0];
                    if (editor.isTextBlock(ptBlock)) {
                        const ptChild = ptBlock.children[slatePath.focus.path[1]];
                        if (ptChild) return [
                            ptChild,
                            [
                                {
                                    _key: block._key
                                },
                                "children",
                                {
                                    _key: ptChild._key
                                }
                            ]
                        ];
                    }
                }
            }
            return [
                void 0,
                void 0
            ];
        },
        findDOMNode: (element)=>{
            let node;
            try {
                const [item] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                    at: [],
                    match: (n)=>n._key === element._key
                }) || [])[0] || [
                    void 0
                ];
                node = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].toDOMNode(editor, item);
            } catch  {}
            return node;
        },
        activeAnnotations: ()=>{
            if (!editor.selection || editor.selection.focus.path.length < 2) return [];
            try {
                const activeAnnotations = [], spans = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                    at: editor.selection,
                    match: (node)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(node) && node.marks !== void 0 && Array.isArray(node.marks) && node.marks.length > 0
                });
                for (const [span, path] of spans){
                    const [block] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, path, {
                        depth: 1
                    });
                    editor.isTextBlock(block) && block.markDefs?.forEach((def)=>{
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(span) && span.marks && Array.isArray(span.marks) && span.marks.includes(def._key) && activeAnnotations.push(def);
                    });
                }
                return activeAnnotations;
            } catch  {
                return [];
            }
        },
        isAnnotationActive: (annotationType)=>isAnnotationActive({
                editor,
                annotation: {
                    name: annotationType
                }
            }),
        addAnnotation: (type, value)=>{
            let paths;
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(editor, ()=>{
                paths = addAnnotationActionImplementation({
                    context: {
                        keyGenerator: editorActor.getSnapshot().context.keyGenerator,
                        schema: types
                    },
                    action: {
                        annotation: {
                            name: type.name,
                            value: value ?? {}
                        },
                        editor
                    }
                });
            }), editor.onChange(), paths;
        },
        delete: (selection, options)=>{
            if (selection) {
                const range = toSlateRange(selection, editor);
                if (!(range && range.anchor.path.length > 0 && range.focus.path.length > 0)) throw new Error("Invalid range");
                if (range) {
                    if (!options?.mode || options?.mode === "selected") {
                        debug$a("Deleting content in selection"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].delete(editor, {
                            at: range,
                            hanging: !0,
                            voids: !0
                        }), editor.onChange();
                        return;
                    }
                    options?.mode === "blocks" && (debug$a("Deleting blocks touched by selection"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
                        at: range,
                        voids: !0,
                        match: (node)=>editor.isTextBlock(node) || !editor.isTextBlock(node) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(node)
                    })), options?.mode === "children" && (debug$a("Deleting children touched by selection"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
                        at: range,
                        voids: !0,
                        match: (node)=>node._type === types.span.name || // Text children
                            !editor.isTextBlock(node) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(node)
                    })), editor.children.length === 0 && (editor.children = [
                        editor.pteCreateTextBlock({
                            decorators: []
                        })
                    ]), editor.onChange();
                }
            }
        },
        removeAnnotation: (type)=>{
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "annotation.remove",
                    annotation: {
                        name: type.name
                    }
                },
                editor
            });
        },
        getSelection: ()=>{
            let ptRange = null;
            if (editor.selection) {
                const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);
                if (existing) return existing;
                ptRange = toPortableTextRange(fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);
            }
            return ptRange;
        },
        getValue: ()=>fromSlateValue(editor.children, types.block.name, KEY_TO_VALUE_ELEMENT.get(editor)),
        isCollapsedSelection: ()=>!!editor.selection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed(editor.selection),
        isExpandedSelection: ()=>!!editor.selection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isExpanded(editor.selection),
        insertBreak: ()=>{
            editor.insertBreak(), editor.onChange();
        },
        getFragment: ()=>fromSlateValue(editor.getFragment(), types.block.name),
        isSelectionsOverlapping: (selectionA, selectionB)=>{
            const rangeA = toSlateRange(selectionA, editor), rangeB = toSlateRange(selectionB, editor);
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isRange(rangeA) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isRange(rangeB) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].includes(rangeA, rangeB);
        }
    };
}
function isAnnotationActive({ editor, annotation }) {
    if (!editor.selection || editor.selection.focus.path.length < 2) return !1;
    try {
        const spans = [
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                at: editor.selection,
                match: (node)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(node)
            })
        ];
        if (spans.length === 0 || spans.some(([span])=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(span) || !span.marks || span.marks?.length === 0)) return !1;
        const selectionMarkDefs = spans.reduce((accMarkDefs, [, path])=>{
            const [block] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, path, {
                depth: 1
            });
            return editor.isTextBlock(block) && block.markDefs ? [
                ...accMarkDefs,
                ...block.markDefs
            ] : accMarkDefs;
        }, []);
        return spans.every(([span])=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(span) ? span.marks?.map((markKey)=>selectionMarkDefs.find((def)=>def?._key === markKey)?._type)?.includes(annotation.name) : !1);
    } catch  {
        return !1;
    }
}
const addAnnotationActionImplementation = ({ context, action })=>{
    const editor = action.editor;
    if (!editor.selection || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed(editor.selection)) return;
    let paths, spanPath, markDefPath;
    const markDefPaths = [], selectedBlocks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
        at: editor.selection,
        match: (node)=>editor.isTextBlock(node),
        reverse: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isBackward(editor.selection)
    });
    for (const [block, blockPath] of selectedBlocks){
        if (block.children.length === 0 || block.children.length === 1 && block.children[0].text === "") continue;
        const annotationKey = context.keyGenerator(), markDefs = block.markDefs ?? [];
        markDefs.find((markDef)=>markDef._type === action.annotation.name && markDef._key === annotationKey) === void 0 && (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
            markDefs: [
                ...markDefs,
                {
                    _type: action.annotation.name,
                    _key: annotationKey,
                    ...action.annotation.value
                }
            ]
        }, {
            at: blockPath
        }), markDefPath = [
            {
                _key: block._key
            },
            "markDefs",
            {
                _key: annotationKey
            }
        ], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isBackward(editor.selection) ? markDefPaths.unshift(markDefPath) : markDefPaths.push(markDefPath)), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {}, {
            match: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText,
            split: !0
        });
        const children = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, blockPath);
        for (const [span, path] of children){
            if (!editor.isTextSpan(span) || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].includes(editor.selection, path)) continue;
            const marks = span.marks ?? [], existingSameTypeAnnotations = marks.filter((mark)=>markDefs.some((markDef)=>markDef._key === mark && markDef._type === action.annotation.name));
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                marks: [
                    ...marks.filter((mark)=>!existingSameTypeAnnotations.includes(mark)),
                    annotationKey
                ]
            }, {
                at: path
            }), spanPath = [
                {
                    _key: block._key
                },
                "children",
                {
                    _key: span._key
                }
            ];
        }
    }
    return markDefPath && spanPath && (paths = {
        markDefPath,
        markDefPaths,
        spanPath
    }), paths;
}, removeAnnotationActionImplementation = ({ action })=>{
    const editor = action.editor;
    if (debug$a("Removing annotation", action.annotation.name), !!editor.selection) if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed(editor.selection)) {
        const [block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, editor.selection, {
            depth: 1
        });
        if (!editor.isTextBlock(block)) return;
        const potentialAnnotations = (block.markDefs ?? []).filter((markDef)=>markDef._type === action.annotation.name), [selectedChild, selectedChildPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, editor.selection, {
            depth: 2
        });
        if (!editor.isTextSpan(selectedChild)) return;
        const annotationToRemove = selectedChild.marks?.find((mark)=>potentialAnnotations.some((markDef)=>markDef._key === mark));
        if (!annotationToRemove) return;
        const previousSpansWithSameAnnotation = [];
        for (const [child, childPath] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, blockPath, {
            reverse: !0
        }))if (editor.isTextSpan(child) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].isBefore(childPath, selectedChildPath)) if (child.marks?.includes(annotationToRemove)) previousSpansWithSameAnnotation.push([
            child,
            childPath
        ]);
        else break;
        const nextSpansWithSameAnnotation = [];
        for (const [child, childPath] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, blockPath))if (editor.isTextSpan(child) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].isAfter(childPath, selectedChildPath)) if (child.marks?.includes(annotationToRemove)) nextSpansWithSameAnnotation.push([
            child,
            childPath
        ]);
        else break;
        for (const [child, childPath] of [
            ...previousSpansWithSameAnnotation,
            [
                selectedChild,
                selectedChildPath
            ],
            ...nextSpansWithSameAnnotation
        ])__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
            marks: child.marks?.filter((mark)=>mark !== annotationToRemove)
        }, {
            at: childPath
        });
    } else {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {}, {
            match: (node)=>editor.isTextSpan(node),
            split: !0,
            hanging: !0
        });
        const blocks = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
            at: editor.selection,
            match: (node)=>editor.isTextBlock(node)
        });
        for (const [block, blockPath] of blocks){
            const children = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, blockPath);
            for (const [child, childPath] of children){
                if (!editor.isTextSpan(child) || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].includes(editor.selection, childPath)) continue;
                const markDefs = block.markDefs ?? [], marks = child.marks ?? [], marksWithoutAnnotation = marks.filter((mark)=>markDefs.find((markDef2)=>markDef2._key === mark)?._type !== action.annotation.name);
                marksWithoutAnnotation.length !== marks.length && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    marks: marksWithoutAnnotation
                }, {
                    at: childPath
                });
            }
        }
    }
}, blockSetBehaviorActionImplementation = ({ context, action })=>{
    const location = toSlateRange({
        anchor: {
            path: action.at,
            offset: 0
        },
        focus: {
            path: action.at,
            offset: 0
        }
    }, action.editor);
    if (!location) throw new Error(`Unable to convert ${JSON.stringify(action.at)} into a Slate Range`);
    const block = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(action.editor, location, {
        depth: 1
    })?.[0];
    if (!block) throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`);
    const parsedBlock = fromSlateValue([
        block
    ], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)).at(0);
    if (!parsedBlock) throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`);
    const { _type, ...filteredProps } = action.props, updatedBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlock"])({
        context,
        block: {
            ...parsedBlock,
            ...filteredProps
        },
        options: {
            refreshKeys: !1
        }
    });
    if (!updatedBlock) throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`);
    const slateBlock = toSlateValue([
        updatedBlock
    ], {
        schemaTypes: context.schema
    })?.at(0);
    if (!slateBlock) throw new Error("Unable to convert block to Slate value");
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(action.editor, slateBlock, {
        at: location
    });
}, blockUnsetBehaviorActionImplementation = ({ context, action })=>{
    const location = toSlateRange({
        anchor: {
            path: action.at,
            offset: 0
        },
        focus: {
            path: action.at,
            offset: 0
        }
    }, action.editor);
    if (!location) throw new Error(`Unable to convert ${JSON.stringify(action.at)} into a Slate Range`);
    const block = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(action.editor, location, {
        depth: 1
    })?.[0];
    if (!block) throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`);
    const parsedBlock = fromSlateValue([
        block
    ], context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)).at(0);
    if (!parsedBlock) throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(context.schema, parsedBlock)) {
        const propsToRemove = action.props.filter((prop)=>prop !== "_type"), updatedTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlock"])({
            context,
            block: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(parsedBlock, propsToRemove),
            options: {
                refreshKeys: !1
            }
        });
        if (!updatedTextBlock) throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`);
        const propsToSet = {};
        for (const prop of propsToRemove)prop in updatedTextBlock ? propsToSet[prop] = updatedTextBlock[prop] : propsToSet[prop] = void 0;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(action.editor, propsToSet, {
            at: location
        });
        return;
    }
    const updatedBlockObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlock"])({
        context,
        block: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(parsedBlock, action.props.filter((prop)=>prop !== "_type")),
        options: {
            refreshKeys: !1
        }
    });
    if (!updatedBlockObject) throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`);
    const { _type, _key, ...props } = updatedBlockObject;
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(action.editor, {
        _type,
        _key,
        value: props
    }, {
        at: location
    });
}, blurActionImplementation = ({ action })=>{
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].blur(action.editor);
}, decoratorAddActionImplementation = ({ context, action })=>{
    const editor = action.editor, mark = action.decorator, value = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), manualAnchor = action.offsets?.anchor ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetToSpanSelectionPoint"])({
        value,
        blockOffset: action.offsets.anchor,
        direction: "backward"
    }) : void 0, manualFocus = action.offsets?.focus ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetToSpanSelectionPoint"])({
        value,
        blockOffset: action.offsets.focus,
        direction: "forward"
    }) : void 0, manualSelection = manualAnchor && manualFocus ? {
        anchor: manualAnchor,
        focus: manualFocus
    } : void 0, selection = manualSelection ? toSlateRange(manualSelection, action.editor) ?? editor.selection : editor.selection;
    if (!selection) return;
    const editorSelection = toPortableTextRange(value, selection, context.schema), anchorOffset = editorSelection ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["selectionPointToBlockOffset"])({
        value,
        selectionPoint: editorSelection.anchor
    }) : void 0, focusOffset = editorSelection ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["selectionPointToBlockOffset"])({
        value,
        selectionPoint: editorSelection.focus
    }) : void 0;
    if (!anchorOffset || !focusOffset) throw new Error("Unable to find anchor or focus offset");
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isExpanded(selection)) {
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {}, {
            at: selection,
            match: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText,
            split: !0,
            hanging: !0
        });
        const newValue = fromSlateValue(editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), newSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetsToSelection"])({
            value: newValue,
            offsets: {
                anchor: anchorOffset,
                focus: focusOffset
            },
            backward: editorSelection?.backward
        }), trimmedSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTrimmedSelection"])({
            context: {
                activeDecorators: [],
                converters: [],
                keyGenerator: context.keyGenerator,
                readOnly: !1,
                schema: context.schema,
                selection: newSelection,
                value: newValue
            }
        });
        if (!trimmedSelection) throw new Error("Unable to find trimmed selection");
        const newRange = toSlateRange(trimmedSelection, editor);
        if (!newRange) throw new Error("Unable to find new selection");
        const splitTextNodes = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isRange(newRange) ? [
            ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
                at: newRange,
                match: (node)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(node)
            })
        ] : [];
        for (const [node, path] of splitTextNodes){
            const marks = [
                ...(Array.isArray(node.marks) ? node.marks : []).filter((eMark)=>eMark !== mark),
                mark
            ];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                marks
            }, {
                at: path,
                match: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText,
                split: !0,
                hanging: !0
            });
        }
    } else {
        if (!Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(editor, {
            at: selection,
            match: (node)=>editor.isTextSpan(node)
        }))?.at(0)) return;
        const [block, blockPath] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, selection, {
            depth: 1
        }), lonelyEmptySpan = editor.isTextBlock(block) && block.children.length === 1 && editor.isTextSpan(block.children[0]) && block.children[0].text === "" ? block.children[0] : void 0;
        if (lonelyEmptySpan) {
            const existingMarks = lonelyEmptySpan.marks ?? [], existingMarksWithoutDecorator = existingMarks.filter((existingMark)=>existingMark !== mark);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                marks: existingMarks.length === existingMarksWithoutDecorator.length ? [
                    ...existingMarks,
                    mark
                ] : existingMarksWithoutDecorator
            }, {
                at: blockPath,
                match: (node)=>editor.isTextSpan(node)
            });
        } else {
            const existingMarks = {
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {}
            }.marks || [], marks = {
                ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(editor) || {},
                marks: [
                    ...existingMarks,
                    mark
                ]
            };
            editor.marks = marks;
        }
    }
    if (editor.selection) {
        const selection2 = editor.selection;
        editor.selection = {
            ...selection2
        };
    }
}, deleteActionImplementation = ({ action })=>{
    const range = toSlateRange(action.selection, action.editor);
    if (!range) throw new Error(`Failed to get Slate Range for selection ${JSON.stringify(action.selection)}`);
    action.editor.delete({
        at: range
    });
}, deleteBackwardActionImplementation = ({ action })=>{
    action.editor.deleteBackward(action.unit);
}, deleteBlockActionImplementation = ({ action })=>{
    const range = toSlateRange({
        anchor: {
            path: action.at,
            offset: 0
        },
        focus: {
            path: action.at,
            offset: 0
        }
    }, action.editor);
    if (!range) {
        console.error("Unable to find Slate range from selection points");
        return;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(action.editor, {
        at: range
    });
}, deleteForwardActionImplementation = ({ action })=>{
    action.editor.deleteForward(action.unit);
}, deleteTextActionImplementation = ({ context, action })=>{
    const value = fromSlateValue(action.editor.children, context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(action.editor)), selection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetsToSelection"])({
        value,
        offsets: {
            anchor: action.anchor,
            focus: action.focus
        }
    });
    if (!selection) throw new Error("Unable to find selection from block offsets");
    const trimmedSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTrimmedSelection"])({
        context: {
            converters: [],
            schema: context.schema,
            keyGenerator: context.keyGenerator,
            activeDecorators: [],
            readOnly: !1,
            value,
            selection
        }
    });
    if (!trimmedSelection) throw new Error("Unable to find trimmed selection");
    const range = toSlateRange(trimmedSelection, action.editor);
    if (!range) throw new Error("Unable to find Slate range from trimmed selection");
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].delete(action.editor, {
        at: range
    });
}, effectActionImplementation = ({ action })=>{
    action.effect();
}, focusActionImplementation = ({ action })=>{
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].focus(action.editor);
}, insertInlineObjectActionImplementation = ({ context, action })=>{
    if (!context.schema.inlineObjects.some((inlineObject)=>inlineObject.name === action.inlineObject.name)) {
        console.error("Unable to insert unknown inline object");
        return;
    }
    if (!action.editor.selection) {
        console.error("Unable to insert inline object without selection");
        return;
    }
    const [focusTextBlock] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(action.editor, {
        at: action.editor.selection.focus.path,
        match: (node)=>action.editor.isTextBlock(node)
    })).at(0) ?? [
        void 0,
        void 0
    ];
    if (!focusTextBlock) {
        console.error("Unable to perform action without focus text block");
        return;
    }
    const child = toSlateValue([
        {
            _type: context.schema.block.name,
            _key: context.keyGenerator(),
            children: [
                {
                    _type: action.inlineObject.name,
                    _key: context.keyGenerator(),
                    ...action.inlineObject.value ?? {}
                }
            ]
        }
    ], {
        schemaTypes: context.schema
    }).at(0)?.children.at(0);
    if (!child) {
        console.error("Unable to insert inline object");
        return;
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(action.editor, child);
}, insertSpanActionImplementation = ({ context, action })=>{
    if (!action.editor.selection) {
        console.error("Unable to perform action without selection", action);
        return;
    }
    const [focusBlock, focusBlockPath] = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(action.editor, {
        at: action.editor.selection.focus.path,
        match: (node)=>action.editor.isTextBlock(node)
    }))[0] ?? [
        void 0,
        void 0
    ];
    if (!focusBlock || !focusBlockPath) {
        console.error("Unable to perform action without focus block", action);
        return;
    }
    const markDefs = focusBlock.markDefs ?? [], annotations = action.annotations ? action.annotations.map((annotation)=>({
            _type: annotation.name,
            _key: context.keyGenerator(),
            ...annotation.value
        })) : void 0;
    annotations && annotations.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(action.editor, {
        markDefs: [
            ...markDefs,
            ...annotations
        ]
    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(action.editor, {
        _type: "span",
        _key: context.keyGenerator(),
        text: action.text,
        marks: [
            ...annotations?.map((annotation)=>annotation._key) ?? [],
            ...action.decorators ?? []
        ]
    });
}, insertBlockActionImplementation = ({ context, action })=>{
    const parsedBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlock"])({
        block: action.block,
        context,
        options: {
            refreshKeys: !1
        }
    });
    if (!parsedBlock) throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`);
    const fragment = toSlateValue([
        parsedBlock
    ], {
        schemaTypes: context.schema
    })[0];
    if (!fragment) throw new Error(`Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`);
    insertBlock({
        block: fragment,
        placement: action.placement,
        select: action.select ?? "start",
        editor: action.editor,
        schema: context.schema
    });
};
function insertBlock({ block, placement, select, editor, schema }) {
    const [focusBlock, focusBlockPath] = getFocusBlock({
        editor
    });
    if (!editor.selection || !focusBlock || !focusBlockPath) {
        select !== "none" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].focus(editor);
        const [lastBlock, lastBlockPath] = getLastBlock({
            editor
        });
        if (placement === "before") __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
            block
        ], {
            at: [
                0
            ]
        }), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, [
            0
        ])) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, [
            0
        ]));
        else if (placement === "after") {
            const nextPath = lastBlockPath ? [
                lastBlockPath[0] + 1
            ] : [
                0
            ];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                block
            ], {
                at: nextPath,
                select: !1
            }), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, nextPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, nextPath));
        } else {
            if (lastBlock && isEqualToEmptyEditor([
                lastBlock
            ], schema)) {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
                    at: lastBlockPath
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                    block
                ], {
                    at: lastBlockPath,
                    select: !1
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(editor), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, lastBlockPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, lastBlockPath));
                return;
            }
            if (editor.isTextBlock(block) && lastBlock && editor.isTextBlock(lastBlock)) {
                const selectionBefore = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, lastBlockPath);
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertFragment(editor, [
                    block
                ], {
                    at: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, lastBlockPath)
                }), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, selectionBefore) : select === "none" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(editor);
                return;
            }
            const nextPath = lastBlockPath ? [
                lastBlockPath[0] + 1
            ] : [
                0
            ];
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                block
            ], {
                at: nextPath,
                select: !1
            }), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, nextPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, nextPath));
        }
    } else if (placement === "before") {
        const currentSelection = editor.selection;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
            block
        ], {
            at: focusBlockPath,
            select: !1
        });
        const adjustedSelection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].transform(currentSelection, {
            type: "move_node",
            path: focusBlockPath,
            newPath: [
                focusBlockPath[0] + 1
            ]
        });
        adjustedSelection ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, adjustedSelection) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, currentSelection), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, focusBlockPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, focusBlockPath));
    } else if (placement === "after") {
        const nextPath = [
            focusBlockPath[0] + 1
        ], currentSelection = editor.selection;
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
            block
        ], {
            at: nextPath,
            select: !1
        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, currentSelection), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, nextPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, nextPath));
    } else {
        const currentSelection = editor.selection, focusBlockStartPoint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, focusBlockPath);
        if (editor.isTextBlock(focusBlock) && editor.isTextBlock(block)) {
            if (select === "end") {
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertFragment(editor, [
                    block
                ], {
                    voids: !0
                });
                return;
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertFragment(editor, [
                block
            ], {
                at: currentSelection,
                voids: !0
            }), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].equals(currentSelection.anchor, focusBlockStartPoint) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, focusBlockPath)) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, currentSelection) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].equals(currentSelection.anchor, focusBlockStartPoint) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, currentSelection);
        } else if (editor.isTextBlock(focusBlock)) {
            const focusBlockStartPoint2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, focusBlockPath), focusBlockEndPoint = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, focusBlockPath);
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].equals(currentSelection.anchor, focusBlockStartPoint2)) __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                block
            ], {
                at: focusBlockPath,
                select: !1
            }), (select === "start" || select === "end") && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, focusBlockPath)), isEqualToEmptyEditor([
                focusBlock
            ], schema) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
                at: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].next(focusBlockPath)
            });
            else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Point"].equals(currentSelection.focus, focusBlockEndPoint)) {
                const nextPath = [
                    focusBlockPath[0] + 1
                ];
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                    block
                ], {
                    at: nextPath,
                    select: !1
                }), (select === "start" || select === "end") && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, nextPath));
            } else {
                const currentSelection2 = editor.selection, [focusChild] = getFocusChild({
                    editor
                });
                if (focusChild && editor.isTextSpan(focusChild)) __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertFragment(editor, [
                    block
                ], {
                    at: currentSelection2
                }), select === "start" || select === "end" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, [
                    focusBlockPath[0] + 1
                ]) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, currentSelection2);
                else {
                    const nextPath = [
                        focusBlockPath[0] + 1
                    ];
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                        block
                    ], {
                        at: nextPath,
                        select: !1
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, currentSelection2), select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, nextPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, nextPath));
                }
            }
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, [
                block
            ], {
                select: !1
            });
            const nextPath = [
                focusBlockPath[0] + 1
            ];
            select === "start" ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(editor, nextPath)) : select === "end" && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].end(editor, nextPath));
        }
    }
}
const insertTextActionImplementation = ({ action })=>{
    action.editor.insertText(action.text);
}, moveBlockActionImplementation = ({ action })=>{
    const at = [
        toSlatePath(action.at, action.editor)[0]
    ], to = [
        toSlatePath(action.to, action.editor)[0]
    ];
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].moveNodes(action.editor, {
        at,
        to,
        mode: "highest"
    });
}, moveBlockDownActionImplementation = ({ context, action })=>{
    const at = [
        toSlatePath(action.at, action.editor)[0]
    ], to = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].next(at)[0]
    ], selection = toPortableTextRange(action.editor.children, {
        anchor: {
            path: to,
            offset: 0
        },
        focus: {
            path: to,
            offset: 0
        }
    }, context.schema), destinationBlockKey = selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0;
    if (destinationBlockKey === void 0) {
        console.error("Could not find destination block key");
        return;
    }
    moveBlockActionImplementation({
        action: {
            at: action.at,
            to: [
                {
                    _key: destinationBlockKey
                }
            ],
            editor: action.editor
        }
    });
}, moveBlockUpActionImplementation = ({ context, action })=>{
    const at = [
        toSlatePath(action.at, action.editor)[0]
    ];
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].hasPrevious(at)) return;
    const to = [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].previous(at)[0]
    ], selection = toPortableTextRange(action.editor.children, {
        anchor: {
            path: to,
            offset: 0
        },
        focus: {
            path: to,
            offset: 0
        }
    }, context.schema), destinationBlockKey = selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(selection.focus.path[0]) ? selection.focus.path[0]._key : void 0;
    if (destinationBlockKey === void 0) {
        console.error("Could not find destination block key");
        return;
    }
    moveBlockActionImplementation({
        action: {
            at: action.at,
            to: [
                {
                    _key: destinationBlockKey
                }
            ],
            editor: action.editor
        }
    });
}, noopActionImplementation = ()=>{}, selectActionImplementation = ({ action })=>{
    const newSelection = toSlateRange(action.selection, action.editor);
    newSelection ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(action.editor, newSelection) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(action.editor);
}, debug$9 = debugWithName("behaviors:action"), behaviorActionImplementations = {
    "annotation.add": addAnnotationActionImplementation,
    "annotation.remove": removeAnnotationActionImplementation,
    "block.set": blockSetBehaviorActionImplementation,
    "block.unset": blockUnsetBehaviorActionImplementation,
    blur: blurActionImplementation,
    "decorator.add": decoratorAddActionImplementation,
    "decorator.remove": removeDecoratorActionImplementation,
    focus: focusActionImplementation,
    delete: deleteActionImplementation,
    "delete.backward": deleteBackwardActionImplementation,
    "delete.forward": deleteForwardActionImplementation,
    "delete.block": deleteBlockActionImplementation,
    "delete.text": deleteTextActionImplementation,
    "history.redo": historyRedoActionImplementation,
    "history.undo": historyUndoActionImplementation,
    "insert.block": insertBlockActionImplementation,
    "insert.break": insertBreakActionImplementation,
    "insert.inline object": insertInlineObjectActionImplementation,
    "insert.soft break": insertSoftBreakActionImplementation,
    "insert.span": insertSpanActionImplementation,
    "insert.text": insertTextActionImplementation,
    effect: effectActionImplementation,
    "move.block": moveBlockActionImplementation,
    "move.block down": moveBlockDownActionImplementation,
    "move.block up": moveBlockUpActionImplementation,
    noop: noopActionImplementation,
    select: selectActionImplementation
};
function performAction({ context, action }) {
    switch(debug$9(JSON.stringify((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$omit$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(action, [
        "editor"
    ]), null, 2)), action.type){
        case "annotation.add":
            {
                behaviorActionImplementations["annotation.add"]({
                    context,
                    action
                });
                break;
            }
        case "annotation.remove":
            {
                behaviorActionImplementations["annotation.remove"]({
                    context,
                    action
                });
                break;
            }
        case "block.set":
            {
                behaviorActionImplementations["block.set"]({
                    context,
                    action
                });
                break;
            }
        case "block.unset":
            {
                behaviorActionImplementations["block.unset"]({
                    context,
                    action
                });
                break;
            }
        case "blur":
            {
                behaviorActionImplementations.blur({
                    context,
                    action
                });
                break;
            }
        case "decorator.add":
            {
                behaviorActionImplementations["decorator.add"]({
                    context,
                    action
                });
                break;
            }
        case "decorator.remove":
            {
                behaviorActionImplementations["decorator.remove"]({
                    context,
                    action
                });
                break;
            }
        case "delete":
            {
                behaviorActionImplementations.delete({
                    context,
                    action
                });
                break;
            }
        case "delete.backward":
            {
                behaviorActionImplementations["delete.backward"]({
                    context,
                    action
                });
                break;
            }
        case "delete.block":
            {
                behaviorActionImplementations["delete.block"]({
                    context,
                    action
                });
                break;
            }
        case "delete.forward":
            {
                behaviorActionImplementations["delete.forward"]({
                    context,
                    action
                });
                break;
            }
        case "delete.text":
            {
                behaviorActionImplementations["delete.text"]({
                    context,
                    action
                });
                break;
            }
        case "effect":
            {
                behaviorActionImplementations.effect({
                    context,
                    action
                });
                break;
            }
        case "focus":
            {
                behaviorActionImplementations.focus({
                    context,
                    action
                });
                break;
            }
        case "history.redo":
            {
                behaviorActionImplementations["history.redo"]({
                    context,
                    action
                });
                break;
            }
        case "history.undo":
            {
                behaviorActionImplementations["history.undo"]({
                    context,
                    action
                });
                break;
            }
        case "insert.block":
            {
                behaviorActionImplementations["insert.block"]({
                    context,
                    action
                });
                break;
            }
        case "insert.inline object":
            {
                behaviorActionImplementations["insert.inline object"]({
                    context,
                    action
                });
                break;
            }
        case "insert.break":
            {
                behaviorActionImplementations["insert.break"]({
                    context,
                    action
                });
                break;
            }
        case "insert.soft break":
            {
                behaviorActionImplementations["insert.soft break"]({
                    context,
                    action
                });
                break;
            }
        case "insert.span":
            {
                behaviorActionImplementations["insert.span"]({
                    context,
                    action
                });
                break;
            }
        case "insert.text":
            {
                behaviorActionImplementations["insert.text"]({
                    context,
                    action
                });
                break;
            }
        case "move.block":
            {
                behaviorActionImplementations["move.block"]({
                    context,
                    action
                });
                break;
            }
        case "move.block down":
            {
                behaviorActionImplementations["move.block down"]({
                    context,
                    action
                });
                break;
            }
        case "move.block up":
            {
                behaviorActionImplementations["move.block up"]({
                    context,
                    action
                });
                break;
            }
        case "noop":
            break;
        default:
            {
                behaviorActionImplementations.select({
                    context,
                    action
                });
                break;
            }
    }
}
function createWithEventListeners(editorActor, subscriptions) {
    return function(editor) {
        if (editorActor.getSnapshot().context.maxBlocks !== void 0) return editor;
        subscriptions.push(()=>{
            const subscription = editorActor.on("*", (event)=>{
                switch(event.type){
                    // These events are not relevant for Behaviors
                    case "blurred":
                    case "done loading":
                    case "editable":
                    case "error":
                    case "focused":
                    case "invalid value":
                    case "loading":
                    case "mutation":
                    case "patch":
                    case "internal.patch":
                    case "patches":
                    case "read only":
                    case "ready":
                    case "selection":
                    case "value changed":
                    case "unset":
                        break;
                    case "custom.*":
                        editorActor.send({
                            type: "custom behavior event",
                            behaviorEvent: event.event,
                            editor
                        });
                        break;
                    case "insert.block object":
                        editorActor.send({
                            type: "behavior event",
                            behaviorEvent: {
                                type: "insert.block",
                                block: {
                                    _type: event.blockObject.name,
                                    ...event.blockObject.value ?? {}
                                },
                                placement: event.placement
                            },
                            editor
                        });
                        break;
                    default:
                        editorActor.send({
                            type: "behavior event",
                            behaviorEvent: event,
                            editor
                        });
                        break;
                }
            });
            return ()=>{
                subscription.unsubscribe();
            };
        });
        const { deleteBackward, deleteForward, insertBreak, insertText: insertText2, select } = editor;
        return editor.deleteBackward = (unit)=>{
            if (isApplyingBehaviorActions(editor)) {
                deleteBackward(unit);
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "delete.backward",
                    unit
                },
                editor
            });
        }, editor.deleteForward = (unit)=>{
            if (isApplyingBehaviorActions(editor)) {
                deleteForward(unit);
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "delete.forward",
                    unit
                },
                editor
            });
        }, editor.insertBreak = ()=>{
            if (isApplyingBehaviorActions(editor)) {
                insertBreak();
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "insert.break"
                },
                editor
            });
        }, editor.insertData = (dataTransfer)=>{
            if (isApplyingBehaviorActions(editor)) throw new Error("Unexpected call to .insertData(...)");
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "input.*",
                    originEvent: {
                        dataTransfer
                    }
                },
                editor
            });
        }, editor.insertSoftBreak = ()=>{
            if (isApplyingBehaviorActions(editor)) {
                insertSoftBreakActionImplementation({
                    context: {
                        keyGenerator: editorActor.getSnapshot().context.keyGenerator,
                        schema: editorActor.getSnapshot().context.schema
                    },
                    action: {
                        editor
                    }
                });
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "insert.soft break"
                },
                editor
            });
        }, editor.insertText = (text, options)=>{
            if (isApplyingBehaviorActions(editor)) {
                insertText2(text, options);
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "insert.text",
                    text
                },
                editor,
                defaultActionCallback: ()=>{
                    insertText2(text, options);
                }
            });
        }, editor.redo = ()=>{
            if (isApplyingBehaviorActions(editor)) {
                performAction({
                    context: {
                        keyGenerator: editorActor.getSnapshot().context.keyGenerator,
                        schema: editorActor.getSnapshot().context.schema
                    },
                    action: {
                        type: "history.redo",
                        editor
                    }
                });
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "history.redo"
                },
                editor
            });
        }, editor.select = (location)=>{
            if (isApplyingBehaviorActions(editor)) {
                select(location);
                return;
            }
            const range = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].range(editor, location);
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "select",
                    selection: toPortableTextRange(fromSlateValue(editor.children, editorActor.getSnapshot().context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), range, editorActor.getSnapshot().context.schema)
                },
                editor,
                defaultActionCallback: ()=>{
                    select(location);
                }
            });
        }, editor.setFragmentData = ()=>{
            console.warn("Unexpected call to .setFragmentData(...)");
        }, editor.undo = ()=>{
            if (isApplyingBehaviorActions(editor)) {
                performAction({
                    context: {
                        keyGenerator: editorActor.getSnapshot().context.keyGenerator,
                        schema: editorActor.getSnapshot().context.schema
                    },
                    action: {
                        type: "history.undo",
                        editor
                    }
                });
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "history.undo"
                },
                editor
            });
        }, editor;
    };
}
function createWithMaxBlocks(editorActor) {
    return function(editor) {
        const { apply: apply2 } = editor;
        return editor.apply = (operation)=>{
            if (editorActor.getSnapshot().matches({
                "edit mode": "read only"
            })) {
                apply2(operation);
                return;
            }
            if (isChangingRemotely(editor)) {
                apply2(operation);
                return;
            }
            if (isUndoing(editor) || isRedoing(editor)) {
                apply2(operation);
                return;
            }
            const rows = editorActor.getSnapshot().context.maxBlocks ?? -1;
            rows > 0 && editor.children.length >= rows && (operation.type === "insert_node" || operation.type === "split_node") && operation.path.length === 1 || apply2(operation);
        }, editor;
    };
}
function createWithObjectKeys(editorActor, schemaTypes) {
    return function(editor) {
        const { apply: apply2, normalizeNode } = editor;
        return editor.apply = (operation)=>{
            if (isChangingRemotely(editor)) {
                apply2(operation);
                return;
            }
            if (isUndoing(editor) || isRedoing(editor)) {
                apply2(operation);
                return;
            }
            if (operation.type === "split_node") {
                const existingKeys = [
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].descendants(editor)
                ].map(([node])=>node._key);
                apply2({
                    ...operation,
                    properties: {
                        ...operation.properties,
                        _key: operation.properties._key === void 0 || existingKeys.includes(operation.properties._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.properties._key
                    }
                });
                return;
            }
            if (operation.type === "insert_node" && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(operation.node)) {
                const existingKeys = [
                    ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].descendants(editor)
                ].map(([node])=>node._key);
                apply2({
                    ...operation,
                    node: {
                        ...operation.node,
                        _key: operation.node._key === void 0 || existingKeys.includes(operation.node._key) ? editorActor.getSnapshot().context.keyGenerator() : operation.node._key
                    }
                });
                return;
            }
            apply2(operation);
        }, editor.normalizeNode = (entry)=>{
            const [node, path] = entry;
            if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(node) && node._type === schemaTypes.block.name) {
                if (!node._key) {
                    editorActor.send({
                        type: "normalizing"
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        _key: editorActor.getSnapshot().context.keyGenerator()
                    }, {
                        at: path
                    }), editorActor.send({
                        type: "done normalizing"
                    });
                    return;
                }
                for (const [child, childPath] of __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Node"].children(editor, path))if (!child._key) {
                    editorActor.send({
                        type: "normalizing"
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        _key: editorActor.getSnapshot().context.keyGenerator()
                    }, {
                        at: childPath
                    }), editorActor.send({
                        type: "done normalizing"
                    });
                    return;
                }
            }
            normalizeNode(entry);
        }, editor;
    };
}
const debug$8 = debugWithName("applyPatches"), debugVerbose = debug$8.enabled && !0;
function createApplyPatch(schemaTypes) {
    return (editor, patch)=>{
        let changed = !1;
        debugVerbose && (debug$8(`

NEW PATCH =============================================================`), debug$8(JSON.stringify(patch, null, 2)));
        try {
            switch(patch.type){
                case "insert":
                    changed = insertPatch(editor, patch, schemaTypes);
                    break;
                case "unset":
                    changed = unsetPatch(editor, patch);
                    break;
                case "set":
                    changed = setPatch(editor, patch);
                    break;
                case "diffMatchPatch":
                    changed = diffMatchPatch(editor, patch);
                    break;
                default:
                    debug$8("Unhandled patch", patch.type);
            }
        } catch (err) {
            console.error(err);
        }
        return changed;
    };
}
function diffMatchPatch(editor, patch) {
    const { block, child, childPath } = findBlockAndChildFromPath(editor, patch.path);
    if (!block) return debug$8("Block not found"), !1;
    if (!child || !childPath) return debug$8("Child not found"), !1;
    if (!(block && editor.isTextBlock(block) && patch.path.length === 4 && patch.path[1] === "children" && patch.path[3] === "text") || !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(child)) return !1;
    const patches = parse(patch.value), [newValue] = apply(patches, child.text, {
        allowExceedingIndices: !0
    }), diff$1 = cleanupEfficiency(diff(child.text, newValue), 5);
    debugState(editor, "before");
    let offset = 0;
    for (const [op, text] of diff$1)op === DIFF_INSERT ? (editor.apply({
        type: "insert_text",
        path: childPath,
        offset,
        text
    }), offset += text.length) : op === DIFF_DELETE ? editor.apply({
        type: "remove_text",
        path: childPath,
        offset,
        text
    }) : op === DIFF_EQUAL && (offset += text.length);
    return debugState(editor, "after"), !0;
}
function insertPatch(editor, patch, schemaTypes) {
    const { block: targetBlock, child: targetChild, blockPath: targetBlockPath, childPath: targetChildPath } = findBlockAndChildFromPath(editor, patch.path);
    if (!targetBlock || !targetBlockPath) return debug$8("Block not found"), !1;
    if (patch.path.length > 1 && patch.path[1] !== "children") return debug$8("Ignoring patch targeting void value"), !1;
    if (patch.path.length === 1) {
        const { items: items2, position: position2 } = patch, blocksToInsert = toSlateValue(items2, {
            schemaTypes
        }, KEY_TO_SLATE_ELEMENT.get(editor)), targetBlockIndex = targetBlockPath[0], normalizedIdx2 = position2 === "after" ? targetBlockIndex + 1 : targetBlockIndex;
        return debug$8(`Inserting blocks at path [${normalizedIdx2}]`), debugState(editor, "before"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, blocksToInsert, {
            at: [
                normalizedIdx2
            ]
        }), debugState(editor, "after"), !0;
    }
    const { items, position } = patch;
    if (!targetChild || !targetChildPath) return debug$8("Child not found"), !1;
    const childrenToInsert = targetBlock && toSlateValue([
        {
            ...targetBlock,
            children: items
        }
    ], {
        schemaTypes
    }, KEY_TO_SLATE_ELEMENT.get(editor)), targetChildIndex = targetChildPath[1], normalizedIdx = position === "after" ? targetChildIndex + 1 : targetChildIndex, childInsertPath = [
        targetChildPath[0],
        normalizedIdx
    ];
    return debug$8(`Inserting children at path ${childInsertPath}`), debugState(editor, "before"), childrenToInsert && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(childrenToInsert[0]) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, childrenToInsert[0].children, {
        at: childInsertPath
    }), debugState(editor, "after"), !0;
}
function setPatch(editor, patch) {
    let value = patch.value;
    typeof patch.path[3] == "string" && (value = {}, value[patch.path[3]] = patch.value);
    const { block, blockPath, child, childPath } = findBlockAndChildFromPath(editor, patch.path);
    if (!block) return debug$8("Block not found"), !1;
    const isTextBlock2 = editor.isTextBlock(block);
    if (isTextBlock2 && patch.path.length > 1 && patch.path[1] !== "children") return debug$8("Ignoring setting void value"), !1;
    if (debugState(editor, "before"), isTextBlock2 && child && childPath) {
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(value) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(child)) {
            const newText = child.text;
            value.text !== newText && (debug$8("Setting text property"), editor.apply({
                type: "remove_text",
                path: childPath,
                offset: 0,
                text: newText
            }), editor.apply({
                type: "insert_text",
                path: childPath,
                offset: 0,
                text: value.text
            }), editor.onChange());
        } else debug$8("Setting non-text property"), editor.apply({
            type: "set_node",
            path: childPath,
            properties: {},
            newProperties: value
        });
        return !0;
    } else if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(block) && patch.path.length === 1 && blockPath) {
        debug$8("Setting block property");
        const { children, ...nextRest } = value, { children: prevChildren, ...prevRest } = block || {
            children: void 0
        };
        editor.apply({
            type: "set_node",
            path: blockPath,
            properties: {
                ...prevRest
            },
            newProperties: nextRest
        }), debug$8("Setting children"), block.children.forEach((c2, cIndex)=>{
            editor.apply({
                type: "remove_node",
                path: blockPath.concat(block.children.length - 1 - cIndex),
                node: c2
            });
        }), Array.isArray(children) && children.forEach((c2, cIndex)=>{
            editor.apply({
                type: "insert_node",
                path: blockPath.concat(cIndex),
                node: c2
            });
        });
    } else if (block && "value" in block) if (patch.path.length > 1 && patch.path[1] !== "children") {
        const newVal = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["applyAll"])(block.value, [
            {
                ...patch,
                path: patch.path.slice(1)
            }
        ]);
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
            ...block,
            value: newVal
        }, {
            at: blockPath
        });
    } else return !1;
    return debugState(editor, "after"), !0;
}
function unsetPatch(editor, patch) {
    if (patch.path.length === 0) {
        debug$8("Removing everything"), debugState(editor, "before");
        const previousSelection = editor.selection;
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(editor), editor.children.forEach((_child, i)=>{
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
                at: [
                    i
                ]
            });
        }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].insertNodes(editor, editor.pteCreateTextBlock({
            decorators: []
        })), previousSelection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(editor, {
            anchor: {
                path: [
                    0,
                    0
                ],
                offset: 0
            },
            focus: {
                path: [
                    0,
                    0
                ],
                offset: 0
            }
        }), editor.onChange(), debugState(editor, "after"), !0;
    }
    const { block, blockPath, child, childPath } = findBlockAndChildFromPath(editor, patch.path);
    if (patch.path.length === 1) {
        if (!block || !blockPath) return debug$8("Block not found"), !1;
        const blockIndex = blockPath[0];
        return debug$8(`Removing block at path [${blockIndex}]`), debugState(editor, "before"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
            at: [
                blockIndex
            ]
        }), debugState(editor, "after"), !0;
    }
    return editor.isTextBlock(block) && patch.path[1] === "children" && patch.path.length === 3 ? !child || !childPath ? (debug$8("Child not found"), !1) : (debug$8(`Unsetting child at path ${JSON.stringify(childPath)}`), debugState(editor, "before"), debugVerbose && debug$8(`Removing child at path ${JSON.stringify(childPath)}`), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].removeNodes(editor, {
        at: childPath
    }), debugState(editor, "after"), !0) : !1;
}
function isKeyedSegment(segment) {
    return typeof segment == "object" && "_key" in segment;
}
function debugState(editor, stateName) {
    debugVerbose && (debug$8(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2)), debug$8(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2)));
}
function findBlockFromPath(editor, path) {
    let blockIndex = -1;
    const block = editor.children.find((node, index)=>{
        const isMatch = isKeyedSegment(path[0]) ? node._key === path[0]._key : index === path[0];
        return isMatch && (blockIndex = index), isMatch;
    });
    return block ? {
        block,
        path: [
            blockIndex
        ]
    } : {};
}
function findBlockAndChildFromPath(editor, path) {
    const { block, path: blockPath } = findBlockFromPath(editor, path);
    if (!(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(block) && path[1] === "children")) return {
        block,
        blockPath,
        child: void 0,
        childPath: void 0
    };
    let childIndex = -1;
    const child = block.children.find((node, index)=>{
        const isMatch = isKeyedSegment(path[2]) ? node._key === path[2]._key : index === path[2];
        return isMatch && (childIndex = index), isMatch;
    });
    return child ? {
        block,
        child,
        blockPath,
        childPath: blockPath?.concat(childIndex)
    } : {
        block,
        blockPath,
        child: void 0,
        childPath: void 0
    };
}
const debug$7 = debugWithName("plugin:withPatches");
function createWithPatches({ editorActor, patchFunctions, schemaTypes, subscriptions }) {
    let previousChildren;
    const applyPatch = createApplyPatch(schemaTypes);
    return function(editor) {
        IS_PROCESSING_REMOTE_CHANGES.set(editor, !1), PATCHING.set(editor, !0), previousChildren = [
            ...editor.children
        ];
        const { apply: apply2 } = editor;
        let bufferedPatches = [];
        const handleBufferedRemotePatches = ()=>{
            if (bufferedPatches.length === 0) return;
            const patches = bufferedPatches;
            bufferedPatches = [];
            let changed = !1;
            withRemoteChanges(editor, ()=>{
                __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].withoutNormalizing(editor, ()=>{
                    withoutPatching(editor, ()=>{
                        withoutSaving(editor, ()=>{
                            patches.forEach((patch)=>{
                                debug$7.enabled && debug$7(`Handling remote patch ${JSON.stringify(patch)}`), changed = applyPatch(editor, patch);
                            });
                        });
                    });
                }), changed && (editor.normalize(), editor.onChange());
            });
        }, handlePatches = ({ patches })=>{
            const remotePatches = patches.filter((p)=>p.origin !== "local");
            remotePatches.length !== 0 && (bufferedPatches = bufferedPatches.concat(remotePatches), handleBufferedRemotePatches());
        };
        return subscriptions.push(()=>{
            debug$7("Subscribing to remote patches");
            const sub = editorActor.on("patches", handlePatches);
            return ()=>{
                debug$7("Unsubscribing to remote patches"), sub.unsubscribe();
            };
        }), editor.apply = (operation)=>{
            let patches = [];
            previousChildren = editor.children;
            const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes);
            apply2(operation);
            const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes);
            if (!isPatching(editor)) return editor;
            switch(editorWasEmpty && !editorIsEmpty && operation.type !== "set_selection" && patches.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["insert"])(previousChildren, "before", [
                0
            ])), operation.type){
                case "insert_text":
                    patches = [
                        ...patches,
                        ...patchFunctions.insertTextPatch(editor, operation, previousChildren)
                    ];
                    break;
                case "remove_text":
                    patches = [
                        ...patches,
                        ...patchFunctions.removeTextPatch(editor, operation, previousChildren)
                    ];
                    break;
                case "remove_node":
                    patches = [
                        ...patches,
                        ...patchFunctions.removeNodePatch(editor, operation, previousChildren)
                    ];
                    break;
                case "split_node":
                    patches = [
                        ...patches,
                        ...patchFunctions.splitNodePatch(editor, operation, previousChildren)
                    ];
                    break;
                case "insert_node":
                    patches = [
                        ...patches,
                        ...patchFunctions.insertNodePatch(editor, operation, previousChildren)
                    ];
                    break;
                case "set_node":
                    patches = [
                        ...patches,
                        ...patchFunctions.setNodePatch(editor, operation, previousChildren)
                    ];
                    break;
                case "merge_node":
                    patches = [
                        ...patches,
                        ...patchFunctions.mergeNodePatch(editor, operation, previousChildren)
                    ];
                    break;
                case "move_node":
                    patches = [
                        ...patches,
                        ...patchFunctions.moveNodePatch(editor, operation, previousChildren)
                    ];
                    break;
            }
            if (!editorWasEmpty && editorIsEmpty && [
                "merge_node",
                "set_node",
                "remove_text",
                "remove_node"
            ].includes(operation.type) && (patches = [
                ...patches,
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["unset"])([])
            ], editorActor.send({
                type: "notify.unset",
                previousValue: fromSlateValue(previousChildren, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))
            })), editorWasEmpty && patches.length > 0 && (patches = [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$patches$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["setIfMissing"])([], []),
                ...patches
            ]), patches.length > 0) for (const patch of patches)editorActor.send({
                type: "internal.patch",
                patch: {
                    ...patch,
                    origin: "local"
                },
                actionId: getCurrentActionId(editor),
                value: fromSlateValue(editor.children, schemaTypes.block.name, KEY_TO_VALUE_ELEMENT.get(editor))
            });
            return editor;
        }, editor;
    };
}
const debug$6 = debugWithName("plugin:withPlaceholderBlock");
function createWithPlaceholderBlock(editorActor) {
    return function(editor) {
        const { apply: apply2 } = editor;
        return editor.apply = (op)=>{
            if (editorActor.getSnapshot().matches({
                "edit mode": "read only"
            })) {
                apply2(op);
                return;
            }
            if (isChangingRemotely(editor)) {
                apply2(op);
                return;
            }
            if (isUndoing(editor) || isRedoing(editor)) {
                apply2(op);
                return;
            }
            if (op.type === "remove_node") {
                const node = op.node;
                if (op.path[0] === 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isVoid(editor, node)) {
                    const nextPath = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].next(op.path);
                    editor.children[nextPath[0]] || (debug$6("Adding placeholder block"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].insertNode(editor, editor.pteCreateTextBlock({
                        decorators: []
                    })));
                }
            }
            apply2(op);
        }, editor;
    };
}
const debug$5 = debugWithName("plugin:withPortableTextBlockStyle");
function createWithPortableTextBlockStyle(editorActor, types) {
    const defaultStyle = types.styles[0].value;
    return function(editor) {
        const { normalizeNode } = editor;
        return editor.normalizeNode = (nodeEntry)=>{
            const [, path] = nodeEntry;
            for (const op of editor.operations)if (op.type === "split_node" && op.path.length === 1 && editor.isTextBlock(op.properties) && op.properties.style !== defaultStyle && op.path[0] === path[0] && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].equals(path, op.path)) {
                const [child] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(editor, [
                    op.path[0] + 1,
                    0
                ]);
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(child) && child.text === "") {
                    debug$5(`Normalizing split node to ${defaultStyle} style`, op), editorActor.send({
                        type: "normalizing"
                    }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                        style: defaultStyle
                    }, {
                        at: [
                            op.path[0] + 1
                        ],
                        voids: !1
                    }), editorActor.send({
                        type: "done normalizing"
                    });
                    return;
                }
            }
            normalizeNode(nodeEntry);
        }, editor;
    };
}
debugWithName("plugin:withPortableTextSelections");
function createWithPortableTextSelections(editorActor, types) {
    let prevSelection = null;
    return function(editor) {
        const emitPortableTextSelection = ()=>{
            if (prevSelection !== editor.selection) {
                let ptRange = null;
                if (editor.selection) {
                    const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection);
                    if (existing) ptRange = existing;
                    else {
                        const value = editor.children;
                        ptRange = toPortableTextRange(value, editor.selection, types), SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange);
                    }
                }
                ptRange ? editorActor.send({
                    type: "notify.selection",
                    selection: ptRange
                }) : editorActor.send({
                    type: "notify.selection",
                    selection: null
                });
            }
            prevSelection = editor.selection;
        }, { onChange } = editor;
        return editor.onChange = ()=>{
            onChange(), editorActor.getSnapshot().matches({
                setup: "setting up"
            }) || emitPortableTextSelection();
        }, editor;
    };
}
const debug$4 = debugWithName("plugin:withSchemaTypes");
function createWithSchemaTypes({ editorActor, schemaTypes }) {
    return function(editor) {
        editor.isTextBlock = (value)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(value) && value._type === schemaTypes.block.name, editor.isTextSpan = (value)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(value) && value._type === schemaTypes.span.name, editor.isListBlock = (value)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextListBlock"])(value) && value._type === schemaTypes.block.name, editor.isVoid = (element)=>schemaTypes.block.name !== element._type && (schemaTypes.blockObjects.map((obj)=>obj.name).includes(element._type) || schemaTypes.inlineObjects.map((obj)=>obj.name).includes(element._type)), editor.isInline = (element)=>schemaTypes.inlineObjects.map((obj)=>obj.name).includes(element._type) && "__inline" in element && element.__inline === !0;
        const { normalizeNode } = editor;
        return editor.normalizeNode = (entry)=>{
            const [node, path] = entry;
            if (node._type === void 0 && path.length === 2) {
                debug$4("Setting span type on text node without a type");
                const span = node, key = span._key || editorActor.getSnapshot().context.keyGenerator();
                editorActor.send({
                    type: "normalizing"
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    ...span,
                    _type: schemaTypes.span.name,
                    _key: key
                }, {
                    at: path
                }), editorActor.send({
                    type: "done normalizing"
                });
                return;
            }
            if (node._key === void 0 && (path.length === 1 || path.length === 2)) {
                debug$4("Setting missing key on child node without a key");
                const key = editorActor.getSnapshot().context.keyGenerator();
                editorActor.send({
                    type: "normalizing"
                }), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].setNodes(editor, {
                    _key: key
                }, {
                    at: path
                }), editorActor.send({
                    type: "done normalizing"
                });
                return;
            }
            normalizeNode(entry);
        }, editor;
    };
}
function createWithUtils({ editorActor, schemaTypes }) {
    return function(editor) {
        return editor.pteCreateTextBlock = (options)=>toSlateValue([
                {
                    _type: schemaTypes.block.name,
                    _key: editorActor.getSnapshot().context.keyGenerator(),
                    style: schemaTypes.styles[0].value || "normal",
                    ...options.listItem ? {
                        listItem: options.listItem
                    } : {},
                    ...options.level ? {
                        level: options.level
                    } : {},
                    markDefs: [],
                    children: [
                        {
                            _type: "span",
                            _key: editorActor.getSnapshot().context.keyGenerator(),
                            text: "",
                            marks: options.decorators.filter((decorator)=>schemaTypes.decorators.find(({ value })=>value === decorator))
                        }
                    ]
                }
            ], {
                schemaTypes
            })[0], editor;
    };
}
const withPlugins = (editor, options)=>{
    const e = editor, { editorActor } = options, schemaTypes = editorActor.getSnapshot().context.schema, operationToPatches = createOperationToPatches(schemaTypes), withObjectKeys = createWithObjectKeys(editorActor, schemaTypes), withSchemaTypes = createWithSchemaTypes({
        editorActor,
        schemaTypes
    }), withPatches = createWithPatches({
        editorActor,
        patchFunctions: operationToPatches,
        schemaTypes,
        subscriptions: options.subscriptions
    }), withMaxBlocks = createWithMaxBlocks(editorActor), withUndoRedo = createWithUndoRedo({
        editorActor,
        blockSchemaType: schemaTypes.block,
        subscriptions: options.subscriptions
    }), withPortableTextMarkModel = createWithPortableTextMarkModel(editorActor, schemaTypes), withPortableTextBlockStyle = createWithPortableTextBlockStyle(editorActor, schemaTypes), withPlaceholderBlock = createWithPlaceholderBlock(editorActor), withUtils = createWithUtils({
        editorActor,
        schemaTypes
    }), withPortableTextSelections = createWithPortableTextSelections(editorActor, schemaTypes);
    return createWithEventListeners(editorActor, options.subscriptions)(withSchemaTypes(withObjectKeys(withPortableTextMarkModel(withPortableTextBlockStyle(withPlaceholderBlock(withUtils(withMaxBlocks(withUndoRedo(withPatches(withPortableTextSelections(e)))))))))));
}, debug$3 = debugWithName("component:PortableTextEditor:SlateContainer"), slateEditors = /* @__PURE__ */ new WeakMap();
function createSlateEditor(config) {
    const existingSlateEditor = slateEditors.get(config.editorActor);
    if (existingSlateEditor) return debug$3("Reusing existing Slate editor instance", config.editorActor.id), existingSlateEditor;
    debug$3("Creating new Slate editor instance", config.editorActor.id);
    const unsubscriptions = [], subscriptions = [], instance = withPlugins((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["withReact"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createEditor"])()), {
        editorActor: config.editorActor,
        subscriptions
    });
    KEY_TO_VALUE_ELEMENT.set(instance, {}), KEY_TO_SLATE_ELEMENT.set(instance, {});
    for (const subscription of subscriptions)unsubscriptions.push(subscription());
    const initialValue = [
        instance.pteCreateTextBlock({
            decorators: []
        })
    ], slateEditor = {
        instance,
        initialValue
    };
    return slateEditors.set(config.editorActor, slateEditor), slateEditor;
}
const keyIs = {
    lineBreak: (event)=>event.key === "Enter" && event.shiftKey
}, raiseInsertSoftBreak = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
    on: "keyboard.keydown",
    guard: ({ event })=>keyIs.lineBreak(event.originEvent),
    actions: [
        ()=>[
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                    type: "insert.soft break"
                })
            ]
    ]
}), internalAnnotationBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "annotation.toggle",
        guard: ({ snapshot, event })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveAnnotation"])(event.annotation.name)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "annotation.remove",
                        annotation: event.annotation
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "annotation.toggle",
        guard: ({ snapshot, event })=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveAnnotation"])(event.annotation.name)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "annotation.add",
                        annotation: event.annotation
                    })
                ]
        ]
    })
], internalDecoratorBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "decorator.toggle",
        guard: ({ snapshot, event })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveDecorator"])(event.decorator)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "decorator.remove",
                        decorator: event.decorator
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "decorator.toggle",
        guard: ({ snapshot, event })=>{
            const manualSelection = event.offsets ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetsToSelection"])({
                value: snapshot.context.value,
                offsets: event.offsets
            }) : null;
            return manualSelection ? !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveDecorator"])(event.decorator)({
                ...snapshot,
                context: {
                    ...snapshot.context,
                    selection: manualSelection
                }
            }) : !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveDecorator"])(event.decorator)(snapshot);
        },
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        ...event,
                        type: "decorator.add"
                    })
                ]
        ]
    })
], internalInsertBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.blocks",
        guard: ({ event })=>event.placement === "before",
        actions: [
            ({ event })=>event.blocks.map((block, index)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.block",
                        block,
                        placement: index === 0 ? "before" : "after",
                        select: "end"
                    }))
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.blocks",
        guard: ({ event })=>event.placement === "after",
        actions: [
            ({ event })=>event.blocks.map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.block",
                        block,
                        placement: "after",
                        select: "end"
                    }))
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.blocks",
        guard: ({ snapshot, event })=>!(event.placement !== "auto" || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot)),
        actions: [
            ({ event })=>event.blocks.length === 1 ? [
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.block",
                        block: event.blocks[0],
                        placement: "auto",
                        select: "end"
                    })
                ] : event.blocks.flatMap((block, index)=>index === 0 ? [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.break"
                        }),
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "select.previous block",
                            select: "end"
                        }),
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.block",
                            block,
                            placement: "auto",
                            select: "end"
                        })
                    ] : index === event.blocks.length - 1 ? [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "select.next block",
                            select: "start"
                        }),
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.block",
                            block,
                            placement: "auto",
                            select: "end"
                        })
                    ] : [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.block",
                            block,
                            placement: "after",
                            select: "end"
                        })
                    ])
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.blocks",
        guard: ({ event })=>event.placement === "auto",
        actions: [
            ({ event })=>event.blocks.map((block, index)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.block",
                        block,
                        placement: index === 0 ? "auto" : "after",
                        select: "end"
                    }))
        ]
    })
], internalListItemBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "list item.add",
        guard: ({ snapshot })=>({
                selectedTextBlocks: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedTextBlocks"])(snapshot)
            }),
        actions: [
            ({ event }, { selectedTextBlocks })=>selectedTextBlocks.map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "block.set",
                        at: block.path,
                        props: {
                            level: 1,
                            listItem: event.listItem
                        }
                    }))
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "list item.remove",
        guard: ({ snapshot })=>({
                selectedTextBlocks: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedTextBlocks"])(snapshot)
            }),
        actions: [
            (_, { selectedTextBlocks })=>selectedTextBlocks.map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "block.unset",
                        at: block.path,
                        props: [
                            "level",
                            "listItem"
                        ]
                    }))
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "list item.toggle",
        guard: ({ snapshot, event })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveListItem"])(event.listItem)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "list item.remove",
                        listItem: event.listItem
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "list item.toggle",
        guard: ({ snapshot, event })=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveListItem"])(event.listItem)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "list item.add",
                        listItem: event.listItem
                    })
                ]
        ]
    })
], internalSelectBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "select.previous block",
        guard: ({ snapshot, event })=>{
            const previousBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousBlock"])(snapshot);
            if (!previousBlock) return !1;
            const point = event.select === "end" ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(previousBlock) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(previousBlock);
            return {
                selection: {
                    anchor: point,
                    focus: point
                }
            };
        },
        actions: [
            (_, { selection })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "select",
                        selection
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "select.next block",
        guard: ({ snapshot, event })=>{
            const nextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getNextBlock"])(snapshot);
            if (!nextBlock) return !1;
            const point = event.select === "end" ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(nextBlock) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(nextBlock);
            return {
                selection: {
                    anchor: point,
                    focus: point
                }
            };
        },
        actions: [
            (_, { selection })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "select",
                        selection
                    })
                ]
        ]
    })
], internalStyleBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "style.add",
        guard: ({ snapshot })=>({
                selectedTextBlocks: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedTextBlocks"])(snapshot)
            }),
        actions: [
            ({ event }, { selectedTextBlocks })=>selectedTextBlocks.map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "block.set",
                        at: block.path,
                        props: {
                            style: event.style
                        }
                    }))
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "style.remove",
        guard: ({ snapshot })=>({
                selectedTextBlocks: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedTextBlocks"])(snapshot)
            }),
        actions: [
            (_, { selectedTextBlocks })=>selectedTextBlocks.map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "block.unset",
                        at: block.path,
                        props: [
                            "style"
                        ]
                    }))
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "style.toggle",
        guard: ({ snapshot, event })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveStyle"])(event.style)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "style.remove",
                        style: event.style
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "style.toggle",
        guard: ({ snapshot, event })=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isActiveStyle"])(event.style)(snapshot),
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "style.add",
                        style: event.style
                    })
                ]
        ]
    })
], raiseDeserializationSuccessOrFailure = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
    on: "deserialize",
    guard: ({ snapshot, event })=>{
        const deserializeEvents = snapshot.context.converters.flatMap((converter)=>{
            const data = event.originEvent.originEvent.dataTransfer.getData(converter.mimeType);
            return data ? [
                converter.deserialize({
                    snapshot,
                    event: {
                        type: "deserialize",
                        data
                    }
                })
            ] : [];
        });
        return deserializeEvents.find((deserializeEvent)=>deserializeEvent.type === "deserialization.success") || {
            type: "deserialization.failure",
            mimeType: "*/*",
            reason: deserializeEvents.map((deserializeEvent)=>deserializeEvent.type === "deserialization.failure" ? deserializeEvent.reason : "").join(", ")
        };
    },
    actions: [
        ({ event }, deserializeEvent)=>[
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                    ...deserializeEvent,
                    originEvent: event.originEvent
                })
            ]
    ]
}), raiseSerializationSuccessOrFailure = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
    on: "serialize",
    guard: ({ snapshot, event })=>{
        if (snapshot.context.converters.length === 0) return !1;
        const serializeEvents = snapshot.context.converters.map((converter)=>converter.serialize({
                snapshot,
                event: {
                    ...event,
                    originEvent: event.originEvent.type
                }
            }));
        return serializeEvents.length === 0 ? !1 : serializeEvents;
    },
    actions: [
        ({ event }, serializeEvents)=>serializeEvents.map((serializeEvent)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                    ...serializeEvent,
                    originEvent: event.originEvent
                }))
    ]
}), defaultBehaviors = [
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.copy",
        guard: ({ snapshot })=>{
            const focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot);
            return focusSpan && selectionCollapsed;
        },
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.copy",
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "serialize",
                        originEvent: event
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.cut",
        guard: ({ snapshot })=>{
            const focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot);
            return focusSpan && selectionCollapsed;
        },
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.cut",
        guard: ({ snapshot })=>snapshot.context.selection ? {
                selection: snapshot.context.selection
            } : !1,
        actions: [
            ({ event }, { selection })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "serialize",
                        originEvent: event
                    }),
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "delete",
                        selection
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "drag.dragstart",
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "serialize",
                        originEvent: event
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "serialization.success",
        actions: [
            ({ event })=>[
                    {
                        type: "effect",
                        effect: ()=>{
                            event.originEvent.originEvent.dataTransfer.setData(event.mimeType, event.data);
                        }
                    }
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "serialization.failure",
        actions: [
            ({ event })=>[
                    {
                        type: "effect",
                        effect: ()=>{
                            console.warn(`Serialization of ${event.mimeType} failed with reason "${event.reason}"`);
                        }
                    }
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "drag.drop",
        guard: ({ snapshot, event })=>{
            const dragOrigin = snapshot.beta.internalDrag?.origin, dropPosition = event.position.selection;
            return dragOrigin ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isOverlappingSelection"])(dropPosition)({
                ...snapshot,
                context: {
                    ...snapshot.context,
                    selection: dragOrigin.selection
                }
            }) : !1;
        },
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "drag.drop",
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "select",
                        selection: event.position.selection
                    }),
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "deserialize",
                        originEvent: event
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "deserialization.success",
        guard: ({ snapshot, event })=>{
            if (event.originEvent.type !== "drag.drop" || snapshot.beta.internalDrag === void 0) return !1;
            const dragOrigin = snapshot.beta.internalDrag.origin, dropPosition = event.originEvent.position.selection, droppingOnDragOrigin = dragOrigin ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isOverlappingSelection"])(dropPosition)({
                ...snapshot,
                context: {
                    ...snapshot.context,
                    selection: dragOrigin.selection
                }
            }) : !1, draggingEntireBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectingEntireBlocks"])({
                context: {
                    ...snapshot.context,
                    selection: dragOrigin.selection
                }
            }), draggedBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])({
                context: {
                    ...snapshot.context,
                    selection: dragOrigin.selection
                }
            });
            return droppingOnDragOrigin ? !1 : {
                draggingEntireBlocks,
                draggedBlocks,
                dragOrigin,
                originEvent: event.originEvent
            };
        },
        actions: [
            ({ event }, { draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent })=>[
                    ...draggingEntireBlocks ? draggedBlocks.map((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "delete.block",
                            at: block.path
                        })) : [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "delete",
                            selection: dragOrigin.selection
                        })
                    ],
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.blocks",
                        blocks: event.data,
                        placement: draggingEntireBlocks ? originEvent.position.block === "start" ? "before" : originEvent.position.block === "end" ? "after" : "auto" : "auto"
                    })
                ]
        ]
    }),
    /**
   * If we are pasting text/plain into a text block then we can probably
   * assume that the intended behavior is that the pasted text inherits
   * formatting from the text it's pasted into.
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "deserialization.success",
        guard: ({ snapshot, event })=>{
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot) && event.mimeType === "text/plain" && event.originEvent.type === "clipboard.paste") {
                const activeDecorators = snapshot.context.activeDecorators;
                return {
                    activeAnnotations: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getActiveAnnotations"])(snapshot),
                    activeDecorators,
                    textRuns: event.data.flatMap((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(snapshot.context.schema, block) ? [
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTextBlockText"])(block)
                        ] : [])
                };
            }
            return !1;
        },
        actions: [
            (_, { activeAnnotations, activeDecorators, textRuns })=>textRuns.flatMap((textRun, index)=>index !== textRuns.length - 1 ? [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.span",
                            text: textRun,
                            decorators: activeDecorators,
                            annotations: activeAnnotations.map(({ _key, _type, ...value })=>({
                                    name: _type,
                                    value
                                }))
                        }),
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.break"
                        })
                    ] : [
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                            type: "insert.span",
                            text: textRun,
                            decorators: activeDecorators,
                            annotations: activeAnnotations.map(({ _key, _type, ...value })=>({
                                    name: _type,
                                    value
                                }))
                        })
                    ])
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "deserialization.success",
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.blocks",
                        blocks: event.data,
                        placement: "auto"
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "deserialization.failure",
        actions: [
            ({ event })=>[
                    {
                        type: "effect",
                        effect: ()=>{
                            console.warn(`Deserialization of ${event.mimeType} failed with reason "${event.reason}"`);
                        }
                    }
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.paste",
        guard: ({ snapshot })=>snapshot.context.selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionExpanded"])(snapshot) ? {
                selection: snapshot.context.selection
            } : !1,
        actions: [
            ({ event }, { selection })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "delete",
                        selection
                    }),
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "deserialize",
                        originEvent: event
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.paste",
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "deserialize",
                        originEvent: event
                    })
                ]
        ]
    }),
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "input.*",
        actions: [
            ({ event })=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "deserialize",
                        originEvent: event
                    })
                ]
        ]
    }),
    ...internalAnnotationBehaviors,
    ...internalDecoratorBehaviors,
    ...internalInsertBehaviors,
    ...internalListItemBehaviors,
    ...internalStyleBehaviors,
    ...internalSelectBehaviors,
    raiseDeserializationSuccessOrFailure,
    raiseSerializationSuccessOrFailure,
    raiseInsertSoftBreak
];
function isKeyboardBehaviorEvent(event) {
    return event.type.startsWith("keyboard.");
}
function isInternalBehaviorEvent(event) {
    return event.type === "deserialize" || event.type.startsWith("deserialization.") || event.type === "insert.blocks" || event.type.startsWith("list item.") || event.type === "serialize" || event.type.startsWith("serialization.") || event.type === "select.next block" || event.type === "select.previous block" || event.type.startsWith("style.");
}
function isNativeBehaviorEvent(event) {
    return isClipboardBehaviorEvent(event) || isDragBehaviorEvent(event) || isInputBehaviorEvent(event) || isKeyboardBehaviorEvent(event) || isMouseBehaviorEvent(event);
}
function isClipboardBehaviorEvent(event) {
    return event.type.startsWith("clipboard.");
}
function isDragBehaviorEvent(event) {
    return event.type.startsWith("drag.");
}
function isInputBehaviorEvent(event) {
    return event.type.startsWith("input.");
}
function isMouseBehaviorEvent(event) {
    return event.type.startsWith("mouse.");
}
function isCustomBehaviorEvent(event) {
    return event.type.startsWith("custom.");
}
const debug$2 = debugWithName("behaviors:event");
function eventCategory(event) {
    return isNativeBehaviorEvent(event) ? "native" : isInternalBehaviorEvent(event) ? "internal" : isCustomBehaviorEvent(event) ? "custom" : "synthetic";
}
function performEvent({ behaviors, event, editor, keyGenerator, schema, getSnapshot, nativeEvent, defaultActionCallback }) {
    debug$2(`(${eventCategory(event)})`, JSON.stringify(event, null, 2));
    const defaultAction = isCustomBehaviorEvent(event) || isNativeBehaviorEvent(event) || isInternalBehaviorEvent(event) ? void 0 : {
        ...event,
        editor
    }, eventBehaviors = behaviors.filter((behavior)=>{
        if (behavior.on === "*") return !0;
        const [listenedNamespace] = behavior.on.includes("*") && behavior.on.includes(".") ? behavior.on.split(".") : [
            void 0
        ], [eventNamespace] = event.type.includes(".") ? event.type.split(".") : [
            void 0
        ];
        return listenedNamespace !== void 0 && eventNamespace !== void 0 && listenedNamespace === eventNamespace || listenedNamespace !== void 0 && eventNamespace === void 0 && listenedNamespace === event.type ? !0 : behavior.on === event.type;
    });
    if (eventBehaviors.length === 0) {
        if (defaultActionCallback) {
            withApplyingBehaviorActions(editor, ()=>{
                try {
                    defaultActionCallback();
                } catch (error) {
                    console.error(new Error(`Performing action "${event.type}" failed due to: ${error.message}`));
                }
            });
            return;
        }
        if (!defaultAction) return;
        withApplyingBehaviorActions(editor, ()=>{
            try {
                performAction({
                    context: {
                        keyGenerator,
                        schema
                    },
                    action: defaultAction
                });
            } catch (error) {
                console.error(new Error(`Performing action "${defaultAction.type}" as a result of "${event.type}" failed due to: ${error.message}`));
            }
        }), editor.onChange();
        return;
    }
    const editorSnapshot = getSnapshot();
    let behaviorOverwritten = !1;
    for (const eventBehavior of eventBehaviors){
        const shouldRun = eventBehavior.guard === void 0 || eventBehavior.guard({
            context: editorSnapshot.context,
            snapshot: editorSnapshot,
            event
        });
        if (!shouldRun) continue;
        const actionSets = eventBehavior.actions.map((actionSet)=>actionSet({
                context: editorSnapshot.context,
                snapshot: editorSnapshot,
                event
            }, shouldRun));
        for (const actionSet of actionSets)actionSet.length !== 0 && (behaviorOverwritten = behaviorOverwritten || actionSet.some((action)=>action.type !== "effect"), withApplyingBehaviorActionSet(editor, ()=>{
            for (const action of actionSet){
                if (action.type === "raise") {
                    performEvent({
                        behaviors,
                        event: action.event,
                        editor,
                        keyGenerator,
                        schema,
                        getSnapshot,
                        defaultActionCallback: void 0,
                        nativeEvent: void 0
                    });
                    continue;
                }
                const internalAction = {
                    ...action,
                    editor
                };
                try {
                    performAction({
                        context: {
                            keyGenerator,
                            schema
                        },
                        action: internalAction
                    });
                } catch (error) {
                    console.error(new Error(`Performing action "${internalAction.type}" as a result of "${event.type}" failed due to: ${error.message}`));
                    break;
                }
            }
        }), editor.onChange());
        if (behaviorOverwritten) {
            nativeEvent?.preventDefault();
            break;
        }
    }
    if (!behaviorOverwritten) {
        if (defaultActionCallback) {
            withApplyingBehaviorActions(editor, ()=>{
                try {
                    defaultActionCallback();
                } catch (error) {
                    console.error(new Error(`Performing "${event.type}" failed due to: ${error.message}`));
                }
            });
            return;
        }
        if (!defaultAction) return;
        withApplyingBehaviorActions(editor, ()=>{
            try {
                performAction({
                    context: {
                        keyGenerator,
                        schema
                    },
                    action: defaultAction
                });
            } catch (error) {
                console.error(new Error(`Performing action "${defaultAction.type}" as a result of "${event.type}" failed due to: ${error.message}`));
            }
        }), editor.onChange();
    }
}
function getActiveDecorators({ schema, slateEditorInstance }) {
    const decorators = schema.decorators.map((decorator)=>decorator.value);
    return (({
        ...__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].marks(slateEditorInstance) ?? {}
    }).marks ?? []).filter((mark)=>decorators.includes(mark));
}
function createEditorSnapshot({ converters, editor, keyGenerator, readOnly, schema, hasTag, internalDrag }) {
    const value = fromSlateValue(editor.children, schema.block.name, KEY_TO_VALUE_ELEMENT.get(editor)), selection = toPortableTextRange(value, editor.selection, schema);
    return {
        context: {
            activeDecorators: getActiveDecorators({
                schema,
                slateEditorInstance: editor
            }),
            converters,
            keyGenerator,
            readOnly,
            schema,
            selection,
            value
        },
        beta: {
            hasTag,
            internalDrag
        }
    };
}
const editorMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    types: {
        context: {},
        events: {},
        emitted: {},
        input: {},
        tags: {}
    },
    actions: {
        "add behavior to context": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            behaviors: ({ context, event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "add behavior"), /* @__PURE__ */ new Set([
                    ...context.behaviors,
                    event.behavior
                ]))
        }),
        "remove behavior from context": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            behaviors: ({ context, event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "remove behavior"), context.behaviors.delete(event.behavior), /* @__PURE__ */ new Set([
                    ...context.behaviors
                ]))
        }),
        "assign behaviors": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            behaviors: ({ event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "update behaviors"), /* @__PURE__ */ new Set([
                    ...event.behaviors
                ]))
        }),
        "assign schema": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            schema: ({ event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "update schema"), event.schema)
        }),
        "emit patch event": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__b__as__enqueueActions$3e$__["enqueueActions"])(({ event, enqueue })=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "internal.patch"), enqueue.emit(event), enqueue.emit({
                type: "patch",
                patch: event.patch
            });
        }),
        "emit mutation event": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, "mutation"), event)),
        "emit read only": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
            type: "read only"
        }),
        "emit editable": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
            type: "editable"
        }),
        "defer event": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            pendingEvents: ({ context, event })=>((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, [
                    "internal.patch",
                    "mutation"
                ]), [
                    ...context.pendingEvents,
                    event
                ])
        }),
        "emit pending events": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__b__as__enqueueActions$3e$__["enqueueActions"])(({ context, enqueue })=>{
            for (const event of context.pendingEvents)event.type === "internal.patch" ? (enqueue.emit(event), enqueue.emit({
                type: "patch",
                patch: event.patch
            })) : enqueue.emit(event);
        }),
        "emit ready": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
            type: "ready"
        }),
        "clear pending events": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
            pendingEvents: []
        }),
        "handle behavior event": ({ context, event, self })=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["assertEvent"])(event, [
                "behavior event",
                "custom behavior event"
            ]), performEvent({
                behaviors: [
                    ...context.behaviors.values(),
                    ...defaultBehaviors
                ],
                event: event.behaviorEvent,
                editor: event.editor,
                keyGenerator: context.keyGenerator,
                schema: context.schema,
                getSnapshot: ()=>createEditorSnapshot({
                        converters: [
                            ...context.converters
                        ],
                        editor: event.editor,
                        keyGenerator: context.keyGenerator,
                        readOnly: self.getSnapshot().matches({
                            "edit mode": "read only"
                        }),
                        schema: context.schema,
                        hasTag: (tag)=>self.getSnapshot().hasTag(tag),
                        internalDrag: context.internalDrag
                    }),
                nativeEvent: event.nativeEvent,
                defaultActionCallback: event.type === "behavior event" ? event.defaultActionCallback : void 0
            });
        }
    }
}).createMachine({
    id: "editor",
    context: ({ input })=>({
            behaviors: /* @__PURE__ */ new Set([
                ...input.behaviors ?? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["coreBehaviors"]
            ]),
            converters: new Set(input.converters ?? []),
            keyGenerator: input.keyGenerator,
            pendingEvents: [],
            schema: input.schema,
            selection: null,
            initialReadOnly: input.readOnly ?? !1,
            maxBlocks: input.maxBlocks,
            value: input.value
        }),
    on: {
        "notify.blurred": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                    ...event,
                    type: "blurred"
                }))
        },
        "notify.done loading": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
                type: "done loading"
            })
        },
        "notify.error": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                    ...event,
                    type: "error"
                }))
        },
        "notify.invalid value": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                    ...event,
                    type: "invalid value"
                }))
        },
        "notify.focused": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                    ...event,
                    type: "focused"
                }))
        },
        "notify.selection": {
            actions: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                    selection: ({ event })=>event.selection
                }),
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                        ...event,
                        type: "selection"
                    }))
            ]
        },
        "notify.unset": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                    ...event,
                    type: "unset"
                }))
        },
        "notify.loading": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])({
                type: "loading"
            })
        },
        "notify.value changed": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                    ...event,
                    type: "value changed"
                }))
        },
        "add behavior": {
            actions: "add behavior to context"
        },
        "remove behavior": {
            actions: "remove behavior from context"
        },
        patches: {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
        },
        "update behaviors": {
            actions: "assign behaviors"
        },
        "update key generator": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                keyGenerator: ({ event })=>event.keyGenerator
            })
        },
        "update schema": {
            actions: "assign schema"
        },
        "update value": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                value: ({ event })=>event.value
            })
        },
        "update maxBlocks": {
            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                maxBlocks: ({ event })=>event.maxBlocks
            })
        }
    },
    type: "parallel",
    states: {
        "edit mode": {
            initial: "read only",
            states: {
                "read only": {
                    initial: "determine initial edit mode",
                    on: {
                        "behavior event": {
                            actions: "handle behavior event",
                            guard: ({ event })=>event.behaviorEvent.type === "clipboard.copy" || event.behaviorEvent.type === "serialize" || event.behaviorEvent.type === "serialization.failure" || event.behaviorEvent.type === "serialization.success" || event.behaviorEvent.type === "select"
                        }
                    },
                    states: {
                        "determine initial edit mode": {
                            on: {
                                "done syncing initial value": [
                                    {
                                        target: "#editor.edit mode.read only.read only",
                                        guard: ({ context })=>context.initialReadOnly
                                    },
                                    {
                                        target: "#editor.edit mode.editable"
                                    }
                                ]
                            }
                        },
                        "read only": {
                            on: {
                                "update readOnly": {
                                    guard: ({ event })=>!event.readOnly,
                                    target: "#editor.edit mode.editable",
                                    actions: [
                                        "emit editable"
                                    ]
                                }
                            }
                        }
                    }
                },
                editable: {
                    on: {
                        "update readOnly": {
                            guard: ({ event })=>event.readOnly,
                            target: "#editor.edit mode.read only.read only",
                            actions: [
                                "emit read only"
                            ]
                        },
                        "behavior event": {
                            actions: "handle behavior event"
                        },
                        "custom behavior event": {
                            actions: "handle behavior event"
                        },
                        "annotation.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "block.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        blur: {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "custom.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>({
                                    type: "custom.*",
                                    event
                                }))
                        },
                        "decorator.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "delete.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        focus: {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "history.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "insert.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "list item.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "move.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        select: {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "select.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "style.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        },
                        "text block.*": {
                            actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__e__as__emit$3e$__["emit"])(({ event })=>event)
                        }
                    },
                    initial: "idle",
                    states: {
                        idle: {
                            on: {
                                dragstart: {
                                    actions: [
                                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                                            internalDrag: ({ event })=>({
                                                    ghost: event.ghost,
                                                    origin: event.origin
                                                })
                                        })
                                    ],
                                    target: "dragging internally"
                                }
                            }
                        },
                        "dragging internally": {
                            exit: [
                                ({ context })=>{
                                    if (context.internalDrag?.ghost) try {
                                        context.internalDrag.ghost.parentNode?.removeChild(context.internalDrag.ghost);
                                    } catch (error) {
                                        console.error(new Error(`Removing the internal drag ghost failed due to: ${error.message}`));
                                    }
                                },
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                                    internalDrag: void 0
                                })
                            ],
                            tags: [
                                "dragging internally"
                            ],
                            on: {
                                dragend: {
                                    target: "idle"
                                },
                                drop: {
                                    target: "idle"
                                }
                            }
                        }
                    }
                }
            }
        },
        setup: {
            initial: "setting up",
            states: {
                "setting up": {
                    exit: [
                        "emit ready"
                    ],
                    on: {
                        "internal.patch": {
                            actions: "defer event"
                        },
                        mutation: {
                            actions: "defer event"
                        },
                        "done syncing initial value": {
                            target: "pristine"
                        }
                    }
                },
                pristine: {
                    initial: "idle",
                    states: {
                        idle: {
                            on: {
                                normalizing: {
                                    target: "normalizing"
                                },
                                "internal.patch": {
                                    actions: "defer event",
                                    target: "#editor.setup.dirty"
                                },
                                mutation: {
                                    actions: "defer event",
                                    target: "#editor.setup.dirty"
                                }
                            }
                        },
                        normalizing: {
                            on: {
                                "done normalizing": {
                                    target: "idle"
                                },
                                "internal.patch": {
                                    actions: "defer event"
                                },
                                mutation: {
                                    actions: "defer event"
                                }
                            }
                        }
                    }
                },
                dirty: {
                    entry: [
                        "emit pending events",
                        "clear pending events"
                    ],
                    on: {
                        "internal.patch": {
                            actions: "emit patch event"
                        },
                        mutation: {
                            actions: "emit mutation event"
                        }
                    }
                }
            }
        }
    }
});
function getValue({ editorActorSnapshot, slateEditorInstance }) {
    return fromSlateValue(slateEditorInstance.children, editorActorSnapshot.context.schema.block.name, KEY_TO_VALUE_ELEMENT.get(slateEditorInstance));
}
function defaultCompare(a, b) {
    return a === b;
}
function useEditorSelector(editor, selector, t0) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(3), compare = t0 === void 0 ? defaultCompare : t0;
    let t1;
    return $[0] !== editor || $[1] !== selector ? (t1 = (editorActorSnapshot)=>{
        const snapshot = getEditorSnapshot({
            editorActorSnapshot,
            slateEditorInstance: editor._internal.slateEditor.instance
        });
        return selector(snapshot);
    }, $[0] = editor, $[1] = selector, $[2] = t1) : t1 = $[2], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useSelector"])(editor._internal.editorActor, t1, compare);
}
function getEditorSnapshot({ editorActorSnapshot, slateEditorInstance }) {
    return {
        context: {
            converters: [
                ...editorActorSnapshot.context.converters
            ],
            activeDecorators: getActiveDecorators({
                schema: editorActorSnapshot.context.schema,
                slateEditorInstance
            }),
            keyGenerator: editorActorSnapshot.context.keyGenerator,
            readOnly: editorActorSnapshot.matches({
                "edit mode": "read only"
            }),
            schema: editorActorSnapshot.context.schema,
            selection: editorActorSnapshot.context.selection,
            value: getValue({
                editorActorSnapshot,
                slateEditorInstance
            })
        },
        beta: {
            hasTag: (tag)=>editorActorSnapshot.hasTag(tag),
            internalDrag: editorActorSnapshot.context.internalDrag
        }
    };
}
function createInternalEditor(config) {
    const editorActor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$raise$2d$1db27a82$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__A__as__createActor$3e$__["createActor"])(editorMachine, {
        input: editorConfigToMachineInput(config)
    });
    return editorActor.start(), createInternalEditorFromActor(editorActor);
}
function useCreateInternalEditor(config) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(6);
    let t0;
    $[0] !== config ? (t0 = editorConfigToMachineInput(config), $[0] = config, $[1] = t0) : t0 = $[1];
    let t1;
    $[2] !== t0 ? (t1 = {
        input: t0
    }, $[2] = t0, $[3] = t1) : t1 = $[3];
    const editorActor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useActorRef"])(editorMachine, t1);
    let t2, t3;
    return $[4] !== editorActor ? (t3 = createInternalEditorFromActor(editorActor), $[4] = editorActor, $[5] = t3) : t3 = $[5], t2 = t3, t2;
}
function editorConfigToMachineInput(config) {
    return {
        behaviors: config.behaviors,
        converters: coreConverters,
        keyGenerator: config.keyGenerator ?? defaultKeyGenerator,
        maxBlocks: config.maxBlocks,
        readOnly: config.readOnly,
        schema: config.schemaDefinition ? compileSchemaDefinition(config.schemaDefinition) : createEditorSchema(config.schema.hasOwnProperty("jsonType") ? config.schema : compileType(config.schema)),
        value: config.initialValue
    };
}
function createInternalEditorFromActor(editorActor) {
    const slateEditor = createSlateEditor({
        editorActor
    }), editable = createEditableAPI(slateEditor.instance, editorActor);
    return {
        getSnapshot: ()=>getEditorSnapshot({
                editorActorSnapshot: editorActor.getSnapshot(),
                slateEditorInstance: slateEditor.instance
            }),
        registerBehavior: (config)=>(editorActor.send({
                type: "add behavior",
                behavior: config.behavior
            }), ()=>{
                editorActor.send({
                    type: "remove behavior",
                    behavior: config.behavior
                });
            }),
        send: (event)=>{
            editorActor.send(event);
        },
        on: (event, listener)=>editorActor.on(event, (event2)=>{
                switch(event2.type){
                    case "blurred":
                    case "done loading":
                    case "editable":
                    case "error":
                    case "focused":
                    case "invalid value":
                    case "loading":
                    case "mutation":
                    case "patch":
                    case "read only":
                    case "ready":
                    case "selection":
                    case "value changed":
                        listener(event2);
                        break;
                }
            }),
        _internal: {
            editable,
            editorActor,
            slateEditor
        }
    };
}
const PortableTextEditorSelectionContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createContext"])(null), usePortableTextEditorSelection = ()=>{
    const selection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"])(PortableTextEditorSelectionContext);
    if (selection === void 0) throw new Error("The `usePortableTextEditorSelection` hook must be used inside the <PortableTextEditor> component's context.");
    return selection;
}, debug$1 = debugWithName("component:PortableTextEditor:SelectionProvider");
function PortableTextEditorSelectionProvider(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(6), [selection, setSelection] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null);
    let t0, t1;
    $[0] !== props.editorActor ? (t0 = ()=>{
        debug$1("Subscribing to selection changes");
        const subscription = props.editorActor.on("selection", (event)=>{
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["startTransition"])(()=>{
                setSelection(event.selection);
            });
        });
        return ()=>{
            debug$1("Unsubscribing to selection changes"), subscription.unsubscribe();
        };
    }, t1 = [
        props.editorActor
    ], $[0] = props.editorActor, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t0, t1);
    let t2;
    return $[3] !== props.children || $[4] !== selection ? (t2 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(PortableTextEditorSelectionContext.Provider, {
        value: selection,
        children: props.children
    }), $[3] = props.children, $[4] = selection, $[5] = t2) : t2 = $[5], t2;
}
const debug = debugWithName("component:PortableTextEditor");
class PortableTextEditor extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Component"] {
    static displayName = "PortableTextEditor";
    /**
   * An observable of all the editor changes.
   */ change$ = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$rxjs$2f$dist$2f$cjs$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Subject"]();
    /**
   * A lookup table for all the relevant schema types for this portable text type.
   */ /**
   * The editor instance
   */ /*
   * The editor API (currently implemented with Slate).
   */ constructor(props){
        super(props), props.editor ? this.editor = props.editor : this.editor = createInternalEditor({
            keyGenerator: props.keyGenerator ?? defaultKeyGenerator,
            schema: props.schemaType,
            initialValue: props.value,
            maxBlocks: props.maxBlocks === void 0 ? void 0 : Number.parseInt(props.maxBlocks.toString(), 10),
            readOnly: props.readOnly
        }), this.schemaTypes = this.editor._internal.editorActor.getSnapshot().context.schema, this.editable = this.editor._internal.editable;
    }
    componentDidUpdate(prevProps) {
        !this.props.editor && !prevProps.editor && this.props.schemaType !== prevProps.schemaType && (this.schemaTypes = createEditorSchema(this.props.schemaType.hasOwnProperty("jsonType") ? this.props.schemaType : compileType(this.props.schemaType)), this.editor._internal.editorActor.send({
            type: "update schema",
            schema: this.schemaTypes
        })), !this.props.editor && !prevProps.editor && (this.props.readOnly !== prevProps.readOnly && this.editor._internal.editorActor.send({
            type: "update readOnly",
            readOnly: this.props.readOnly ?? !1
        }), this.props.maxBlocks !== prevProps.maxBlocks && this.editor._internal.editorActor.send({
            type: "update maxBlocks",
            maxBlocks: this.props.maxBlocks === void 0 ? void 0 : Number.parseInt(this.props.maxBlocks.toString(), 10)
        }), this.props.value !== prevProps.value && this.editor._internal.editorActor.send({
            type: "update value",
            value: this.props.value
        }), this.props.editorRef !== prevProps.editorRef && this.props.editorRef && (this.props.editorRef.current = this));
    }
    setEditable = (editable)=>{
        this.editor._internal.editable = {
            ...this.editor._internal.editable,
            ...editable
        };
    };
    render() {
        const legacyPatches = this.props.editor ? void 0 : this.props.incomingPatches$ ?? this.props.patches$;
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
            children: [
                legacyPatches ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(RoutePatchesObservableToEditorActor, {
                    editorActor: this.editor._internal.editorActor,
                    patches$: legacyPatches
                }) : null,
                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(RouteEventsToChanges, {
                    editorActor: this.editor._internal.editorActor,
                    onChange: (change)=>{
                        this.props.editor || this.props.onChange(change), this.change$.next(change);
                    }
                }),
                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Synchronizer, {
                    editorActor: this.editor._internal.editorActor,
                    slateEditor: this.editor._internal.slateEditor.instance
                }),
                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(EditorActorContext.Provider, {
                    value: this.editor._internal.editorActor,
                    children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Slate"], {
                        editor: this.editor._internal.slateEditor.instance,
                        initialValue: this.editor._internal.slateEditor.initialValue,
                        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(PortableTextEditorContext.Provider, {
                            value: this,
                            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(PortableTextEditorSelectionProvider, {
                                editorActor: this.editor._internal.editorActor,
                                children: this.props.children
                            })
                        })
                    })
                })
            ]
        });
    }
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)
   * ```
   */ static activeAnnotations = (editor)=>editor && editor.editable ? editor.editable.activeAnnotations() : [];
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))
   * ```
   */ static isAnnotationActive = (editor, annotationType)=>editor && editor.editable ? editor.editable.isAnnotationActive(annotationType) : !1;
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'annotation.add',
   *  annotation: {
   *    name: '...',
   *    value: {...},
   *  }
   * })
   * ```
   */ static addAnnotation = (editor, type, value)=>editor.editable?.addAnnotation(type, value);
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'blur',
   * })
   * ```
   */ static blur = (editor)=>{
        debug("Host blurred"), editor.editable?.blur();
    };
    static delete = (editor, selection, options)=>editor.editable?.delete(selection, options);
    static findDOMNode = (editor, element)=>editor.editable?.findDOMNode(element);
    static findByPath = (editor, path)=>editor.editable?.findByPath(path) || [];
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'focus',
   * })
   * ```
   */ static focus = (editor)=>{
        debug("Host requesting focus"), editor.editable?.focus();
    };
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)
   * ```
   */ static focusBlock = (editor)=>editor.editable?.focusBlock();
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)
   * ```
   */ static focusChild = (editor)=>editor.editable?.focusChild();
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const selection = useEditorSelector(editor, selectors.getSelection)
   * ```
   */ static getSelection = (editor)=>editor.editable ? editor.editable.getSelection() : null;
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const value = useEditorSelector(editor, selectors.getValue)
   * ```
   */ static getValue = (editor)=>editor.editable?.getValue();
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))
   * ```
   */ static hasBlockStyle = (editor, blockStyle)=>editor.editable?.hasBlockStyle(blockStyle);
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))
   * ```
   */ static hasListStyle = (editor, listStyle)=>editor.editable?.hasListStyle(listStyle);
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)
   * ```
   */ static isCollapsedSelection = (editor)=>editor.editable?.isCollapsedSelection();
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)
   * ```
   */ static isExpandedSelection = (editor)=>editor.editable?.isExpandedSelection();
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))
   * ```
   */ static isMarkActive = (editor, mark)=>editor.editable?.isMarkActive(mark);
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'insert.span',
   *  text: '...',
   *  annotations: [{name: '...', value: {...}}],
   *  decorators: ['...'],
   * })
   * editor.send({
   *  type: 'insert.inline object',
   *  inlineObject: {
   *    name: '...',
   *    value: {...},
   *  },
   * })
   * ```
   */ static insertChild = (editor, type, value)=>(debug("Host inserting child"), editor.editable?.insertChild(type, value));
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'insert.block object',
   *  blockObject: {
   *    name: '...',
   *    value: {...},
   *  },
   *  placement: 'auto' | 'after' | 'before',
   * })
   * ```
   */ static insertBlock = (editor, type, value)=>editor.editable?.insertBlock(type, value);
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'insert.break',
   * })
   * ```
   */ static insertBreak = (editor)=>editor.editable?.insertBreak();
    static isVoid = (editor, element)=>editor.editable?.isVoid(element);
    static isObjectPath = (_editor, path)=>{
        if (!path || !Array.isArray(path)) return !1;
        const isChildObjectEditPath = path.length > 3 && path[1] === "children";
        return path.length > 1 && path[1] !== "children" || isChildObjectEditPath;
    };
    static marks = (editor)=>editor.editable?.marks();
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'select',
   *  selection: {...},
   * })
   * ```
   */ static select = (editor, selection)=>{
        debug("Host setting selection", selection), editor.editable?.select(selection);
    };
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'annotation.remove',
   *  annotation: {
   *    name: '...',
   *  },
   * })
   * ```
   */ static removeAnnotation = (editor, type)=>editor.editable?.removeAnnotation(type);
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'style.toggle',
   *  style: '...',
   * })
   * ```
   */ static toggleBlockStyle = (editor, blockStyle)=>(debug("Host is toggling block style"), editor.editable?.toggleBlockStyle(blockStyle));
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'list item.toggle',
   *  listItem: '...',
   * })
   * ```
   */ static toggleList = (editor, listStyle)=>editor.editable?.toggleList(listStyle);
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *  type: 'decorator.toggle',
   *  decorator: '...',
   * })
   * ```
   */ static toggleMark = (editor, mark)=>{
        debug("Host toggling mark", mark), editor.editable?.toggleMark(mark);
    };
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)
   * ```
   */ static getFragment = (editor)=>editor.editable?.getFragment();
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *   type: 'history.undo',
   * })
   * ```
   */ static undo = (editor)=>{
        debug("Host undoing"), editor.editable?.undo();
    };
    /**
   * @deprecated
   * Use `editor.send(...)` instead
   *
   * ```
   * const editor = useEditor()
   * editor.send({
   *   type: 'history.redo',
   * })
   * ```
   */ static redo = (editor)=>{
        debug("Host redoing"), editor.editable?.redo();
    };
    /**
   * @deprecated
   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/
   *
   * ```
   * import * as selectors from '@portabletext/editor/selectors'
   * const editor = useEditor()
   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))
   * ```
   */ static isSelectionsOverlapping = (editor, selectionA, selectionB)=>editor.editable?.isSelectionsOverlapping(selectionA, selectionB);
}
function RoutePatchesObservableToEditorActor(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(4);
    let t0, t1;
    return $[0] !== props.editorActor || $[1] !== props.patches$ ? (t0 = ()=>{
        const subscription = props.patches$.subscribe((payload)=>{
            props.editorActor.send({
                type: "patches",
                ...payload
            });
        });
        return ()=>{
            subscription.unsubscribe();
        };
    }, t1 = [
        props.editorActor,
        props.patches$
    ], $[0] = props.editorActor, $[1] = props.patches$, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t0, t1), null;
}
function RouteEventsToChanges(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(7);
    let t0;
    $[0] !== props ? (t0 = (change)=>props.onChange(change), $[0] = props, $[1] = t0) : t0 = $[1];
    const handleChange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$effect$2d$event$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffectEvent"])(t0);
    let t1;
    $[2] !== handleChange || $[3] !== props.editorActor ? (t1 = ()=>{
        debug("Subscribing to editor changes");
        const sub = props.editorActor.on("*", (event)=>{
            bb5: switch(event.type){
                case "blurred":
                    {
                        handleChange({
                            type: "blur",
                            event: event.event
                        });
                        break bb5;
                    }
                case "patch":
                    {
                        handleChange(event);
                        break bb5;
                    }
                case "loading":
                    {
                        handleChange({
                            type: "loading",
                            isLoading: !0
                        });
                        break bb5;
                    }
                case "done loading":
                    {
                        handleChange({
                            type: "loading",
                            isLoading: !1
                        });
                        break bb5;
                    }
                case "focused":
                    {
                        handleChange({
                            type: "focus",
                            event: event.event
                        });
                        break bb5;
                    }
                case "value changed":
                    {
                        handleChange({
                            type: "value",
                            value: event.value
                        });
                        break bb5;
                    }
                case "invalid value":
                    {
                        handleChange({
                            type: "invalidValue",
                            resolution: event.resolution,
                            value: event.value
                        });
                        break bb5;
                    }
                case "error":
                    {
                        handleChange({
                            ...event,
                            level: "warning"
                        });
                        break bb5;
                    }
                case "mutation":
                    {
                        handleChange(event);
                        break bb5;
                    }
                case "ready":
                    {
                        handleChange(event);
                        break bb5;
                    }
                case "selection":
                    {
                        handleChange(event);
                        break bb5;
                    }
                case "unset":
                    handleChange(event);
            }
        });
        return ()=>{
            debug("Unsubscribing to changes"), sub.unsubscribe();
        };
    }, $[2] = handleChange, $[3] = props.editorActor, $[4] = t1) : t1 = $[4];
    let t2;
    return $[5] !== props.editorActor ? (t2 = [
        props.editorActor
    ], $[5] = props.editorActor, $[6] = t2) : t2 = $[6], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t1, t2), null;
}
const EditorContext = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].createContext(void 0);
function EditorProvider(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(28), internalEditor = useCreateInternalEditor(props.initialConfig), editorActor = internalEditor._internal.editorActor, slateEditor = internalEditor._internal.slateEditor;
    let t0, t1;
    $[0] !== internalEditor ? (t1 = new PortableTextEditor({
        editor: internalEditor
    }), $[0] = internalEditor, $[1] = t1) : t1 = $[1], t0 = t1;
    const portableTextEditor = t0;
    let t2;
    $[2] !== portableTextEditor.change$ ? (t2 = (change)=>{
        portableTextEditor.change$.next(change);
    }, $[2] = portableTextEditor.change$, $[3] = t2) : t2 = $[3];
    let t3;
    $[4] !== editorActor || $[5] !== t2 ? (t3 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(RouteEventsToChanges, {
        editorActor,
        onChange: t2
    }), $[4] = editorActor, $[5] = t2, $[6] = t3) : t3 = $[6];
    let t4;
    $[7] !== editorActor || $[8] !== slateEditor.instance ? (t4 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Synchronizer, {
        editorActor,
        slateEditor: slateEditor.instance
    }), $[7] = editorActor, $[8] = slateEditor.instance, $[9] = t4) : t4 = $[9];
    let t5;
    $[10] !== editorActor || $[11] !== props.children ? (t5 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(PortableTextEditorSelectionProvider, {
        editorActor,
        children: props.children
    }), $[10] = editorActor, $[11] = props.children, $[12] = t5) : t5 = $[12];
    let t6;
    $[13] !== portableTextEditor || $[14] !== t5 ? (t6 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(PortableTextEditorContext.Provider, {
        value: portableTextEditor,
        children: t5
    }), $[13] = portableTextEditor, $[14] = t5, $[15] = t6) : t6 = $[15];
    let t7;
    $[16] !== slateEditor.initialValue || $[17] !== slateEditor.instance || $[18] !== t6 ? (t7 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Slate"], {
        editor: slateEditor.instance,
        initialValue: slateEditor.initialValue,
        children: t6
    }), $[16] = slateEditor.initialValue, $[17] = slateEditor.instance, $[18] = t6, $[19] = t7) : t7 = $[19];
    let t8;
    $[20] !== editorActor || $[21] !== t7 ? (t8 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(EditorActorContext.Provider, {
        value: editorActor,
        children: t7
    }), $[20] = editorActor, $[21] = t7, $[22] = t8) : t8 = $[22];
    let t9;
    return $[23] !== internalEditor || $[24] !== t3 || $[25] !== t4 || $[26] !== t8 ? (t9 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(EditorContext.Provider, {
        value: internalEditor,
        children: [
            t3,
            t4,
            t8
        ]
    }), $[23] = internalEditor, $[24] = t3, $[25] = t4, $[26] = t8, $[27] = t9) : t9 = $[27], t9;
}
function useEditor() {
    const editor = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].useContext(EditorContext);
    if (!editor) throw new Error("No Editor set. Use EditorProvider to set one.");
    return editor;
}
;
 //# sourceMappingURL=editor-provider.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-focus-inline-object.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getFocusInlineObject": (()=>getFocusInlineObject)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
;
;
const getFocusInlineObject = (snapshot)=>{
    const focusChild = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusChild"])(snapshot);
    return focusChild && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextSpan"])(focusChild.node) ? {
        node: focusChild.node,
        path: focusChild.path
    } : void 0;
};
;
 //# sourceMappingURL=selector.get-focus-inline-object.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getSelectionEndPoint": (()=>getSelectionEndPoint),
    "isSelectionCollapsed": (()=>isSelectionCollapsed)
});
function getSelectionEndPoint(selection) {
    return selection ? selection.backward ? selection.anchor : selection.focus : null;
}
function isSelectionCollapsed(selection) {
    return selection ? selection.anchor.path.join() === selection.focus.path.join() && selection.anchor.offset === selection.focus.offset : !1;
}
;
 //# sourceMappingURL=util.is-selection-collapsed.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/index.js [app-ssr] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "EditorEventListener": (()=>EditorEventListener),
    "PortableTextEditable": (()=>PortableTextEditable)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@xstate/react/dist/xstate-react.development.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$noop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/noop.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/slate/dist/index.es.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/node_modules/slate-react/dist/index.es.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$get$2d$focus$2d$inline$2d$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-focus-inline-object.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/slate-dom/dist/index.es.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$is$2d$selection$2d$collapsed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.is-selection-collapsed.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-selecting-entire-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/uniq.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$effect$2d$event$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/use-effect-event/dist/index.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function getCompoundClientRect(nodes) {
    if (nodes.length === 0) return new DOMRect(0, 0, 0, 0);
    const elements = nodes.filter((node)=>node instanceof Element), firstRect = elements.at(0)?.getBoundingClientRect();
    if (!firstRect) return new DOMRect(0, 0, 0, 0);
    let left = firstRect.left, top = firstRect.top, right = firstRect.right, bottom = firstRect.bottom;
    for(let i = 1; i < elements.length; i++){
        const rect = elements[i].getBoundingClientRect();
        left = Math.min(left, rect.left), top = Math.min(top, rect.top), right = Math.max(right, rect.right), bottom = Math.max(bottom, rect.bottom);
    }
    return new DOMRect(left, top, right - left, bottom - top);
}
function getDragSelection({ eventSelection, snapshot }) {
    let dragSelection = eventSelection;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$get$2d$focus$2d$inline$2d$object$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusInlineObject"])({
        context: {
            ...snapshot.context,
            selection: eventSelection
        }
    })) return dragSelection;
    const draggingCollapsedSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])({
        context: {
            ...snapshot.context,
            selection: eventSelection
        }
    }), draggedTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])({
        context: {
            ...snapshot.context,
            selection: eventSelection
        }
    }), draggedSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])({
        context: {
            ...snapshot.context,
            selection: eventSelection
        }
    });
    draggingCollapsedSelection && draggedTextBlock && draggedSpan && (dragSelection = {
        anchor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(draggedTextBlock),
        focus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(draggedTextBlock)
    });
    const selectedBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])(snapshot);
    if (snapshot.context.selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionExpanded"])(snapshot) && selectedBlocks.length > 1) {
        const selectionStartBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionStartBlock"])(snapshot), selectionEndBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionEndBlock"])(snapshot);
        if (!selectionStartBlock || !selectionEndBlock) return dragSelection;
        const selectionStartPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])(selectionStartBlock), selectionEndPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])(selectionEndBlock);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isOverlappingSelection"])(eventSelection)({
            ...snapshot,
            context: {
                ...snapshot.context,
                selection: {
                    anchor: selectionStartPoint,
                    focus: selectionEndPoint
                }
            }
        }) && (dragSelection = {
            anchor: selectionStartPoint,
            focus: selectionEndPoint
        });
    }
    return dragSelection;
}
function getEventPosition({ schema, slateEditor, event }) {
    const node = getEventNode({
        slateEditor,
        event
    });
    if (!node) return;
    const block = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getNodeBlock"])({
        editor: slateEditor,
        schema,
        node
    }), positionBlock = getEventPositionBlock({
        node,
        slateEditor,
        event
    }), selection = getEventSelection({
        schema,
        slateEditor,
        event
    });
    if (block && positionBlock && !selection && !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(node)) return {
        block: positionBlock,
        isEditor: !1,
        selection: {
            anchor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            }),
            focus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            })
        }
    };
    if (!positionBlock || !selection) return;
    const focusBlockPath = selection.focus.path.at(0), focusBlockKey = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(focusBlockPath) ? focusBlockPath._key : void 0;
    if (focusBlockKey) return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$is$2d$selection$2d$collapsed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(selection) && block && focusBlockKey !== block._key ? {
        block: positionBlock,
        isEditor: !1,
        selection: {
            anchor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            }),
            focus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockEndPoint"])({
                node: block,
                path: [
                    {
                        _key: block._key
                    }
                ]
            })
        }
    } : {
        block: positionBlock,
        isEditor: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(node),
        selection
    };
}
function getEventNode({ slateEditor, event }) {
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].hasTarget(slateEditor, event.target) ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toSlateNode(slateEditor, event.target) : void 0;
}
function getEventPositionBlock({ node, slateEditor, event }) {
    const [firstBlock] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFirstBlock"])({
        editor: slateEditor
    });
    if (!firstBlock) return;
    const firstBlockRect = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toDOMNode(slateEditor, firstBlock).getBoundingClientRect();
    if (event.pageY < firstBlockRect.top) return "start";
    const [lastBlock] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getLastBlock"])({
        editor: slateEditor
    });
    if (!lastBlock) return;
    const lastBlockRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toDOMNode(slateEditor, lastBlock).getBoundingClientRect();
    if (event.pageY > lastBlockRef.bottom) return "end";
    const elementRect = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toDOMNode(slateEditor, node).getBoundingClientRect(), top = elementRect.top, height = elementRect.height;
    return Math.abs(top - event.pageY) < height / 2 ? "start" : "end";
}
function getEventSelection({ schema, slateEditor, event }) {
    const range = getSlateRangeFromEvent(slateEditor, event);
    return range ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toPortableTextRange"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromSlateValue"])(slateEditor.children, schema.block.name), range, schema) : null;
}
function getSlateRangeFromEvent(editor, event) {
    if (!event.target || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isDOMNode"])(event.target)) return;
    const window2 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].getWindow(editor);
    let domRange;
    if (window2.document.caretPositionFromPoint !== void 0) {
        const position = window2.document.caretPositionFromPoint(event.clientX, event.clientY);
        if (position) try {
            domRange = window2.document.createRange(), domRange.setStart(position.offsetNode, position.offset), domRange.setEnd(position.offsetNode, position.offset);
        } catch  {}
    } else if (window2.document.caretRangeFromPoint !== void 0) domRange = window2.document.caretRangeFromPoint(event.clientX, event.clientY) ?? void 0;
    else {
        console.warn("Neither caretPositionFromPoint nor caretRangeFromPoint is supported");
        return;
    }
    if (!domRange) return;
    let range;
    try {
        range = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toSlateRange(editor, domRange, {
            exactMatch: !1,
            // It can still throw even with this option set to true
            suppressThrow: !1
        });
    } catch  {}
    return range;
}
function normalizePoint(point, value) {
    if (!point || !value) return null;
    const newPath = [];
    let newOffset = point.offset || 0;
    const blockKey = typeof point.path[0] == "object" && "_key" in point.path[0] && point.path[0]._key, childKey = typeof point.path[2] == "object" && "_key" in point.path[2] && point.path[2]._key, block = value.find((blk)=>blk._key === blockKey);
    if (block) newPath.push({
        _key: block._key
    });
    else return null;
    if (block && point.path[1] === "children") {
        if (!block.children || Array.isArray(block.children) && block.children.length === 0) return null;
        const child = Array.isArray(block.children) && block.children.find((cld)=>cld._key === childKey);
        if (child) newPath.push("children"), newPath.push({
            _key: child._key
        }), newOffset = child.text && child.text.length >= point.offset ? point.offset : child.text && child.text.length || 0;
        else return null;
    }
    return {
        path: newPath,
        offset: newOffset
    };
}
function normalizeSelection(selection, value) {
    if (!selection || !value || value.length === 0) return null;
    let newAnchor = null, newFocus = null;
    const { anchor, focus } = selection;
    return anchor && value.find((blk)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
            _key: blk._key
        }, anchor.path[0])) && (newAnchor = normalizePoint(anchor, value)), focus && value.find((blk)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
            _key: blk._key
        }, focus.path[0])) && (newFocus = normalizePoint(focus, value)), newAnchor && newFocus ? {
        anchor: newAnchor,
        focus: newFocus,
        backward: selection.backward
    } : null;
}
function getSelectionDomNodes({ slateEditor, snapshot }) {
    if (!snapshot.context.selection) return {
        blockNodes: [],
        childNodes: []
    };
    const range = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toSlateRange"])(snapshot.context.selection, slateEditor);
    if (!range) return {
        blockNodes: [],
        childNodes: []
    };
    const blockEntries = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(slateEditor, {
        at: range,
        mode: "highest",
        match: (n)=>!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(n)
    })), childEntries = Array.from(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].nodes(slateEditor, {
        at: range,
        mode: "lowest",
        match: (n)=>!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].isEditor(n) && slateEditor.isTextSpan(n) || !slateEditor.isBlock(n)
    }));
    return {
        blockNodes: blockEntries.map(([blockNode])=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toDOMNode(slateEditor, blockNode)),
        childNodes: childEntries.map(([childNode])=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2d$dom$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["DOMEditor"].toDOMNode(slateEditor, childNode))
    };
}
function DefaultBlockObject(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(4);
    let t0;
    $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
        userSelect: "none"
    }, $[0] = t0) : t0 = $[0];
    let t1;
    return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])("div", {
        style: t0,
        children: [
            "[",
            props.value._type,
            ": ",
            props.value._key,
            "]"
        ]
    }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;
}
function DefaultInlineObject(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(4);
    let t0;
    $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
        userSelect: "none"
    }, $[0] = t0) : t0 = $[0];
    let t1;
    return $[1] !== props.value._key || $[2] !== props.value._type ? (t1 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])("span", {
        style: t0,
        children: [
            "[",
            props.value._type,
            ": ",
            props.value._key,
            "]"
        ]
    }), $[1] = props.value._key, $[2] = props.value._type, $[3] = t1) : t1 = $[3], t1;
}
function DropIndicator() {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(1);
    let t0;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("div", {
        contentEditable: !1,
        className: "pt-drop-indicator",
        style: {
            position: "absolute",
            width: "100%",
            height: 1,
            borderBottom: "1px solid currentColor",
            zIndex: 5
        },
        children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {})
    }), $[0] = t0) : t0 = $[0], t0;
}
(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["debugWithName"])("components:Element");
const EMPTY_ANNOTATIONS = [], inlineBlockStyle = {
    display: "inline-block"
}, Element$1 = ({ attributes, children, element, schemaTypes, readOnly, renderBlock, renderChild, renderListItem, renderStyle, spellCheck })=>{
    const editorActor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EditorActorContext"]), slateEditor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useSlateStatic"])(), selected = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useSelected"])(), blockRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null), inlineBlockObjectRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null), focused = selected && slateEditor.selection && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed(slateEditor.selection) || !1, [dragPositionBlock, setDragPositionBlock] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const behavior = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
            on: "drag.dragover",
            guard: ({ snapshot, event })=>{
                const dropFocusBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlock"])({
                    context: {
                        ...snapshot.context,
                        selection: event.position.selection
                    }
                });
                if (!dropFocusBlock || dropFocusBlock.node._key !== element._key) return !1;
                const dragOrigin = snapshot.beta.internalDrag?.origin;
                return !dragOrigin || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectedBlocks"])({
                    context: {
                        ...snapshot.context,
                        selection: dragOrigin.selection
                    }
                }).some((draggedBlock)=>draggedBlock.node._key === element._key) ? !1 : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectingEntireBlocks"])({
                    context: {
                        ...snapshot.context,
                        selection: dragOrigin.selection
                    }
                });
            },
            actions: [
                ({ event: event_0 })=>[
                        {
                            type: "effect",
                            effect: ()=>{
                                setDragPositionBlock(event_0.position.block);
                            }
                        },
                        {
                            type: "noop"
                        }
                    ]
            ]
        });
        return editorActor.send({
            type: "add behavior",
            behavior
        }), ()=>{
            editorActor.send({
                type: "remove behavior",
                behavior
            });
        };
    }, [
        editorActor,
        element._key
    ]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const behavior_0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
            on: "drag.*",
            guard: ({ event: event_1 })=>event_1.type !== "drag.dragover",
            actions: [
                ()=>[
                        {
                            type: "effect",
                            effect: ()=>{
                                setDragPositionBlock(void 0);
                            }
                        }
                    ]
            ]
        });
        return editorActor.send({
            type: "add behavior",
            behavior: behavior_0
        }), ()=>{
            editorActor.send({
                type: "remove behavior",
                behavior: behavior_0
            });
        };
    }, [
        editorActor
    ]);
    const value = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromSlateValue"])([
            element
        ], schemaTypes.block.name, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KEY_TO_VALUE_ELEMENT"].get(slateEditor))[0], [
        slateEditor,
        element,
        schemaTypes.block.name
    ]);
    let renderedBlock = children, className;
    const blockPath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>[
            {
                _key: element._key
            }
        ], [
        element
    ]);
    if (typeof element._type != "string") throw new Error("Expected element to have a _type property");
    if (typeof element._key != "string") throw new Error("Expected element to have a _key property");
    if (slateEditor.isInline(element)) {
        const path = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].findPath(slateEditor, element), [block] = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].node(slateEditor, path, {
            depth: 1
        }), schemaType = schemaTypes.inlineObjects.find((_type)=>_type.name === element._type);
        if (!schemaType) throw new Error("Could not find type for inline block element");
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Element"].isElement(block)) {
            const elmPath = [
                {
                    _key: block._key
                },
                "children",
                {
                    _key: element._key
                }
            ];
            return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])("span", {
                ...attributes,
                children: [
                    children,
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])("span", {
                        draggable: !readOnly,
                        className: "pt-inline-object",
                        "data-testid": "pt-inline-object",
                        ref: inlineBlockObjectRef,
                        style: inlineBlockStyle,
                        contentEditable: !1,
                        children: [
                            renderChild && renderChild({
                                annotations: EMPTY_ANNOTATIONS,
                                // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.
                                children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DefaultInlineObject, {
                                    value
                                }),
                                editorElementRef: inlineBlockObjectRef,
                                focused,
                                path: elmPath,
                                schemaType,
                                selected,
                                type: schemaType,
                                value
                            }),
                            !renderChild && /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DefaultInlineObject, {
                                value
                            })
                        ]
                    }, element._key)
                ]
            });
        }
        throw new Error("Block not found!");
    }
    if (element._type === schemaTypes.block.name) {
        className = "pt-block pt-text-block";
        const isListItem = "listItem" in element, style = "style" in element && element.style || "normal";
        className = `pt-block pt-text-block pt-text-block-style-${style}`;
        const blockStyleType = schemaTypes.styles.find((item)=>item.value === style);
        renderStyle && blockStyleType && (renderedBlock = renderStyle({
            block: element,
            children,
            focused,
            selected,
            value: style,
            path: blockPath,
            schemaType: blockStyleType,
            editorElementRef: blockRef
        }));
        let level;
        if (isListItem && (typeof element.level == "number" && (level = element.level), className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`), slateEditor.isListBlock(value) && isListItem && element.listItem) {
            const listType = schemaTypes.lists.find((item_0)=>item_0.value === element.listItem);
            renderListItem && listType && (renderedBlock = renderListItem({
                block: value,
                children: renderedBlock,
                focused,
                selected,
                value: element.listItem,
                path: blockPath,
                schemaType: listType,
                level: value.level || 1,
                editorElementRef: blockRef
            }));
        }
        const renderProps = Object.defineProperty({
            children: renderedBlock,
            editorElementRef: blockRef,
            focused,
            level,
            listItem: isListItem ? element.listItem : void 0,
            path: blockPath,
            selected,
            style,
            schemaType: schemaTypes.block,
            value
        }, "type", {
            enumerable: !1,
            get () {
                return console.warn("Property 'type' is deprecated, use 'schemaType' instead."), schemaTypes.block;
            }
        }), propsOrDefaultRendered = renderBlock ? renderBlock(renderProps) : children;
        return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])("div", {
            ...attributes,
            className,
            spellCheck,
            children: [
                dragPositionBlock === "start" ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DropIndicator, {}) : null,
                /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("div", {
                    ref: blockRef,
                    children: propsOrDefaultRendered
                }),
                dragPositionBlock === "end" ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DropIndicator, {}) : null
            ]
        }, element._key);
    }
    const schemaType_0 = schemaTypes.blockObjects.find((_type_0)=>_type_0.name === element._type);
    if (!schemaType_0) throw new Error(`Could not find schema type for block element of _type ${element._type}`);
    className = "pt-block pt-object-block";
    const block_0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromSlateValue"])([
        element
    ], schemaTypes.block.name, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["KEY_TO_VALUE_ELEMENT"].get(slateEditor))[0];
    let renderedBlockFromProps;
    if (renderBlock) {
        const _props = Object.defineProperty({
            children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DefaultBlockObject, {
                value
            }),
            editorElementRef: blockRef,
            focused,
            path: blockPath,
            schemaType: schemaType_0,
            selected,
            value: block_0
        }, "type", {
            enumerable: !1,
            get () {
                return console.warn("Property 'type' is deprecated, use 'schemaType' instead."), schemaType_0;
            }
        });
        renderedBlockFromProps = renderBlock(_props);
    }
    return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])("div", {
        ...attributes,
        className,
        children: [
            dragPositionBlock === "start" ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DropIndicator, {}) : null,
            children,
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("div", {
                ref: blockRef,
                contentEditable: !1,
                draggable: !readOnly,
                children: renderedBlockFromProps || /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DefaultBlockObject, {
                    value
                })
            }),
            dragPositionBlock === "end" ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DropIndicator, {}) : null
        ]
    }, element._key);
};
Element$1.displayName = "Element";
const debug$2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["debugWithName"])("components:Leaf"), EMPTY_MARKS = [], Leaf = (props)=>{
    const { editorActor, attributes, children, leaf, schemaTypes, renderChild, renderDecorator, renderAnnotation } = props, spanRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null), portableTextEditor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["usePortableTextEditor"])(), blockSelected = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useSelected"])(), [focused, setFocused] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(!1), [selected, setSelected] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(!1), block = children.props.parent, path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>block ? [
            {
                _key: block?._key
            },
            "children",
            {
                _key: leaf._key
            }
        ] : [], [
        block,
        leaf._key
    ]), decoratorValues = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>schemaTypes.decorators.map((dec)=>dec.value), [
        schemaTypes.decorators
    ]), marks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$uniq$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])((leaf.marks || EMPTY_MARKS).filter((mark)=>decoratorValues.includes(mark))), [
        decoratorValues,
        leaf.marks
    ]), annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS, annotations = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>annotationMarks.map((mark_0)=>!decoratorValues.includes(mark_0) && block?.markDefs?.find((def)=>def._key === mark_0)).filter(Boolean), [
        annotationMarks,
        block,
        decoratorValues
    ]), shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if (!shouldTrackSelectionAndFocus) {
            setFocused(!1);
            return;
        }
        const sel = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].getSelection(portableTextEditor);
        sel && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(sel.focus.path, path) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].isCollapsedSelection(portableTextEditor) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["startTransition"])(()=>{
            setFocused(!0);
        });
    }, [
        shouldTrackSelectionAndFocus,
        path,
        portableTextEditor
    ]);
    const setSelectedFromRange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(()=>{
        if (!shouldTrackSelectionAndFocus) return;
        debug$2("Setting selection and focus from range");
        const winSelection = window.getSelection();
        if (!winSelection) {
            setSelected(!1);
            return;
        }
        if (winSelection && winSelection.rangeCount > 0) {
            const range = winSelection.getRangeAt(0);
            spanRef.current && range.intersectsNode(spanRef.current) ? setSelected(!0) : setSelected(!1);
        } else setSelected(!1);
    }, [
        shouldTrackSelectionAndFocus
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if (!shouldTrackSelectionAndFocus) return;
        const onBlur = editorActor.on("blur", ()=>{
            setFocused(!1), setSelected(!1);
        }), onFocus = editorActor.on("focus", ()=>{
            const sel_0 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].getSelection(portableTextEditor);
            sel_0 && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(sel_0.focus.path, path) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].isCollapsedSelection(portableTextEditor) && setFocused(!0), setSelectedFromRange();
        }), onSelection = editorActor.on("selection", (event)=>{
            event.selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(event.selection.focus.path, path) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].isCollapsedSelection(portableTextEditor) ? setFocused(!0) : setFocused(!1), setSelectedFromRange();
        });
        return ()=>{
            onBlur.unsubscribe(), onFocus.unsubscribe(), onSelection.unsubscribe();
        };
    }, [
        editorActor,
        path,
        portableTextEditor,
        setSelectedFromRange,
        shouldTrackSelectionAndFocus
    ]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>setSelectedFromRange(), [
        setSelectedFromRange
    ]);
    const content = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>{
        let returnedChildren = children;
        if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Text"].isText(leaf) && leaf._type === schemaTypes.span.name && (marks.forEach((mark_1)=>{
            const schemaType = schemaTypes.decorators.find((dec_0)=>dec_0.value === mark_1);
            if (schemaType && renderDecorator) {
                const _props = Object.defineProperty({
                    children: returnedChildren,
                    editorElementRef: spanRef,
                    focused,
                    path,
                    selected,
                    schemaType,
                    value: mark_1
                }, "type", {
                    enumerable: !1,
                    get () {
                        return console.warn("Property 'type' is deprecated, use 'schemaType' instead."), schemaType;
                    }
                });
                returnedChildren = renderDecorator(_props);
            }
        }), block && annotations.length > 0 && annotations.forEach((annotation)=>{
            const schemaType_0 = schemaTypes.annotations.find((t)=>t.name === annotation._type);
            if (schemaType_0) if (renderAnnotation) {
                const _props_0 = Object.defineProperty({
                    block,
                    children: returnedChildren,
                    editorElementRef: spanRef,
                    focused,
                    path,
                    selected,
                    schemaType: schemaType_0,
                    value: annotation
                }, "type", {
                    enumerable: !1,
                    get () {
                        return console.warn("Property 'type' is deprecated, use 'schemaType' instead."), schemaType_0;
                    }
                });
                returnedChildren = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
                    ref: spanRef,
                    children: renderAnnotation(_props_0)
                });
            } else returnedChildren = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
                ref: spanRef,
                children: returnedChildren
            });
        }), block && renderChild)) {
            const child = block.children.find((_child)=>_child._key === leaf._key);
            if (child) {
                const _props_1 = Object.defineProperty({
                    annotations,
                    children: /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
                        children: returnedChildren
                    }),
                    editorElementRef: spanRef,
                    focused,
                    path,
                    schemaType: schemaTypes.span,
                    selected,
                    value: child
                }, "type", {
                    enumerable: !1,
                    get () {
                        return console.warn("Property 'type' is deprecated, use 'schemaType' instead."), schemaTypes.span;
                    }
                });
                returnedChildren = renderChild(_props_1);
            }
        }
        return returnedChildren;
    }, [
        annotations,
        block,
        children,
        focused,
        leaf,
        marks,
        path,
        renderAnnotation,
        renderChild,
        renderDecorator,
        schemaTypes.annotations,
        schemaTypes.decorators,
        schemaTypes.span,
        selected
    ]);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
            ...attributes,
            ref: spanRef,
            children: content
        }, leaf._key), [
        leaf,
        attributes,
        content
    ]);
};
Leaf.displayName = "Leaf";
const debug$1 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["debugWithName"])("plugin:withHotKeys");
function createWithHotkeys(editorActor, portableTextEditor, hotkeysFromOptions) {
    const reservedHotkeys = [
        "enter",
        "tab",
        "shift",
        "delete",
        "end"
    ], activeHotkeys = hotkeysFromOptions ?? {};
    return function(editor) {
        return editor.pteWithHotKeys = (event)=>{
            Object.keys(activeHotkeys).forEach((cat)=>{
                if (cat === "marks") for(const hotkey in activeHotkeys[cat]){
                    if (reservedHotkeys.includes(hotkey)) throw new Error(`The hotkey ${hotkey} is reserved!`);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHotkey"])(hotkey, event.nativeEvent)) {
                        event.preventDefault();
                        const possibleMark = activeHotkeys[cat];
                        if (possibleMark) {
                            const mark = possibleMark[hotkey];
                            debug$1(`HotKey ${hotkey} to toggle ${mark}`), editorActor.send({
                                type: "behavior event",
                                behaviorEvent: {
                                    type: "decorator.toggle",
                                    decorator: mark
                                },
                                editor
                            });
                        }
                    }
                }
                if (cat === "custom") for(const hotkey in activeHotkeys[cat]){
                    if (reservedHotkeys.includes(hotkey)) throw new Error(`The hotkey ${hotkey} is reserved!`);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isHotkey"])(hotkey, event.nativeEvent)) {
                        const possibleCommand = activeHotkeys[cat];
                        if (possibleCommand) {
                            const command = possibleCommand[hotkey];
                            command(event, portableTextEditor);
                        }
                    }
                }
            });
        }, editor;
    };
}
function withSyncRangeDecorations({ editorActor, slateEditor, syncRangeDecorations }) {
    const originalApply = slateEditor.apply;
    return slateEditor.apply = (op)=>{
        originalApply(op), !editorActor.getSnapshot().matches({
            "edit mode": "read only"
        }) && op.type !== "set_selection" && syncRangeDecorations(op);
    }, ()=>{
        slateEditor.apply = originalApply;
    };
}
const debug = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["debugWithName"])("component:Editable"), PLACEHOLDER_STYLE = {
    position: "absolute",
    userSelect: "none",
    pointerEvents: "none",
    left: 0,
    right: 0
}, PortableTextEditable = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["forwardRef"])(function(props, forwardedRef) {
    const { hotkeys, onBlur, onFocus, onBeforeInput, onPaste, onCopy, onCut, onClick, onDragStart, onDrag, onDragEnd, onDragEnter, onDragOver, onDrop, onDragLeave, rangeDecorations, renderAnnotation, renderBlock, renderChild, renderDecorator, renderListItem, renderPlaceholder, renderStyle, selection: propsSelection, scrollSelectionIntoView, spellCheck, ...restProps } = props, portableTextEditor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["usePortableTextEditor"])(), ref = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(null), [editableElement, setEditableElement] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(null), [hasInvalidValue, setHasInvalidValue] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(!1), [rangeDecorationState, setRangeDecorationsState] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])([]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useImperativeHandle"])(forwardedRef, ()=>ref.current);
    const rangeDecorationsRef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useRef"])(rangeDecorations), editorActor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["EditorActorContext"]), readOnly = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useSelector"])(editorActor, (s)=>s.matches({
            "edit mode": "read only"
        })), schemaTypes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useSelector"])(editorActor, (s_0)=>s_0.context.schema), slateEditor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["useSlate"])(), blockTypeName = schemaTypes.block.name;
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>{
        if (readOnly) return debug("Editable is in read only mode"), slateEditor;
        const withHotKeys = createWithHotkeys(editorActor, portableTextEditor, hotkeys);
        return debug("Editable is in edit mode"), withHotKeys(slateEditor);
    }, [
        editorActor,
        hotkeys,
        portableTextEditor,
        readOnly,
        slateEditor
    ]);
    const renderElement = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((eProps)=>/* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Element$1, {
            ...eProps,
            readOnly,
            renderBlock,
            renderChild,
            renderListItem,
            renderStyle,
            schemaTypes,
            spellCheck
        }), [
        schemaTypes,
        spellCheck,
        readOnly,
        renderBlock,
        renderChild,
        renderListItem,
        renderStyle
    ]), renderLeaf = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((lProps)=>{
        if (lProps.leaf._type === "span") {
            let rendered = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(Leaf, {
                ...lProps,
                editorActor,
                schemaTypes,
                renderAnnotation,
                renderChild,
                renderDecorator,
                readOnly
            });
            if (renderPlaceholder && lProps.leaf.placeholder && lProps.text.text === "") return /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
                children: [
                    /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])("span", {
                        style: PLACEHOLDER_STYLE,
                        contentEditable: !1,
                        children: renderPlaceholder()
                    }),
                    rendered
                ]
            });
            const decoration = lProps.leaf.rangeDecoration;
            return decoration && (rendered = decoration.component({
                children: rendered
            })), rendered;
        }
        return lProps.children;
    }, [
        editorActor,
        readOnly,
        renderAnnotation,
        renderChild,
        renderDecorator,
        renderPlaceholder,
        schemaTypes
    ]), restoreSelectionFromProps = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(()=>{
        if (propsSelection) {
            debug(`Selection from props ${JSON.stringify(propsSelection)}`);
            const normalizedSelection = normalizeSelection(propsSelection, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromSlateValue"])(slateEditor.children, blockTypeName));
            if (normalizedSelection !== null) {
                debug(`Normalized selection from props ${JSON.stringify(normalizedSelection)}`);
                const slateRange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toSlateRange"])(normalizedSelection, slateEditor);
                slateRange && (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(slateEditor, slateRange), slateEditor.operations.some((o)=>o.type === "set_selection") || editorActor.send({
                    type: "notify.selection",
                    selection: normalizedSelection
                }), slateEditor.onChange());
            }
        }
    }, [
        blockTypeName,
        editorActor,
        propsSelection,
        slateEditor
    ]), syncRangeDecorations = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((operation)=>{
        if (rangeDecorations && rangeDecorations.length > 0) {
            const newSlateRanges = [];
            if (rangeDecorations.forEach((rangeDecorationItem)=>{
                const slateRange_0 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toSlateRange"])(rangeDecorationItem.selection, slateEditor);
                if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isRange(slateRange_0)) {
                    rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({
                        newSelection: null,
                        rangeDecoration: rangeDecorationItem,
                        origin: "local"
                    });
                    return;
                }
                let newRange;
                if (operation && (newRange = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["moveRangeByOperation"])(slateRange_0, operation), newRange && newRange !== slateRange_0 || newRange === null && slateRange_0)) {
                    const value = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].getValue(portableTextEditor), newRangeSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toPortableTextRange"])(value, newRange, schemaTypes);
                    rangeDecorationItem.onMoved && rangeDecorationItem.onMoved({
                        newSelection: newRangeSelection,
                        rangeDecoration: rangeDecorationItem,
                        origin: "local"
                    });
                }
                newRange !== null && newSlateRanges.push({
                    ...newRange || slateRange_0,
                    rangeDecoration: rangeDecorationItem
                });
            }), newSlateRanges.length > 0) {
                setRangeDecorationsState(newSlateRanges);
                return;
            }
        }
        setRangeDecorationsState((rangeDecorationState_0)=>rangeDecorationState_0.length > 0 ? [] : rangeDecorationState_0);
    }, [
        portableTextEditor,
        rangeDecorations,
        schemaTypes,
        slateEditor
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const onReady = editorActor.on("ready", ()=>{
            syncRangeDecorations(), restoreSelectionFromProps();
        }), onInvalidValue = editorActor.on("invalid value", ()=>{
            setHasInvalidValue(!0);
        }), onValueChanged = editorActor.on("value changed", ()=>{
            setHasInvalidValue(!1);
        });
        return ()=>{
            onReady.unsubscribe(), onInvalidValue.unsubscribe(), onValueChanged.unsubscribe();
        };
    }, [
        editorActor,
        restoreSelectionFromProps,
        syncRangeDecorations
    ]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        propsSelection && !hasInvalidValue && restoreSelectionFromProps();
    }, [
        hasInvalidValue,
        propsSelection,
        restoreSelectionFromProps
    ]);
    const [syncedRangeDecorations, setSyncedRangeDecorations] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useState"])(!1);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        syncedRangeDecorations || (setSyncedRangeDecorations(!0), syncRangeDecorations());
    }, [
        syncRangeDecorations,
        syncedRangeDecorations
    ]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])(rangeDecorations, rangeDecorationsRef.current) || syncRangeDecorations(), rangeDecorationsRef.current = rangeDecorations;
    }, [
        rangeDecorations,
        syncRangeDecorations
    ]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const teardown = withSyncRangeDecorations({
            editorActor,
            slateEditor,
            syncRangeDecorations
        });
        return ()=>teardown();
    }, [
        editorActor,
        slateEditor,
        syncRangeDecorations
    ]);
    const handleCopy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event)=>{
        if (onCopy) onCopy(event) !== void 0 && event.preventDefault();
        else if (event.nativeEvent.clipboardData) {
            event.stopPropagation(), event.preventDefault();
            const selection = editorActor.getSnapshot().context.selection, position = selection ? {
                selection
            } : void 0;
            if (!position) {
                console.warn("Could not find position for copy event");
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "clipboard.copy",
                    originEvent: {
                        dataTransfer: event.nativeEvent.clipboardData
                    },
                    position
                },
                editor: slateEditor,
                nativeEvent: event
            });
        }
    }, [
        onCopy,
        editorActor,
        slateEditor
    ]), handleCut = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_0)=>{
        if (onCut) onCut(event_0) !== void 0 && event_0.preventDefault();
        else if (event_0.nativeEvent.clipboardData) {
            event_0.stopPropagation(), event_0.preventDefault();
            const selection_0 = editorActor.getSnapshot().context.selection, position_0 = selection_0 ? {
                selection: selection_0
            } : void 0;
            if (!position_0) {
                console.warn("Could not find position for cut event");
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "clipboard.cut",
                    originEvent: {
                        dataTransfer: event_0.nativeEvent.clipboardData
                    },
                    position: position_0
                },
                editor: slateEditor,
                nativeEvent: event_0
            });
        }
    }, [
        onCut,
        editorActor,
        slateEditor
    ]), handlePaste = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_1)=>{
        const value_0 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].getValue(portableTextEditor), path = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["toPortableTextRange"])(value_0, slateEditor.selection, schemaTypes)?.focus.path || [], onPasteResult = onPaste?.({
            event: event_1,
            value: value_0,
            path,
            schemaTypes
        });
        if (onPasteResult || !slateEditor.selection) event_1.preventDefault(), editorActor.send({
            type: "notify.loading"
        }), Promise.resolve(onPasteResult).then((result_1)=>{
            if (debug("Custom paste function from client resolved", result_1), !result_1 || !result_1.insert) {
                debug("No result from custom paste handler, pasting normally");
                const selection_1 = editorActor.getSnapshot().context.selection, position_1 = selection_1 ? {
                    selection: selection_1
                } : void 0;
                if (!position_1) {
                    console.warn("Could not find position for paste event");
                    return;
                }
                editorActor.send({
                    type: "behavior event",
                    behaviorEvent: {
                        type: "clipboard.paste",
                        originEvent: {
                            dataTransfer: event_1.clipboardData
                        },
                        position: position_1
                    },
                    editor: slateEditor,
                    nativeEvent: event_1
                });
            } else result_1.insert ? editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "insert.blocks",
                    blocks: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlocks"])({
                        context: {
                            keyGenerator: editorActor.getSnapshot().context.keyGenerator,
                            schema: editorActor.getSnapshot().context.schema
                        },
                        blocks: result_1.insert,
                        options: {
                            refreshKeys: !0
                        }
                    }),
                    placement: "auto"
                },
                editor: slateEditor
            }) : console.warn("Your onPaste function returned something unexpected:", result_1);
        }).catch((error)=>(console.warn(error), error)).finally(()=>{
            editorActor.send({
                type: "notify.done loading"
            });
        });
        else if (event_1.nativeEvent.clipboardData) {
            event_1.preventDefault(), event_1.stopPropagation();
            const selection_2 = editorActor.getSnapshot().context.selection, position_2 = selection_2 ? {
                selection: selection_2
            } : void 0;
            if (!position_2) {
                console.warn("Could not find position for paste event");
                return;
            }
            editorActor.send({
                type: "behavior event",
                behaviorEvent: {
                    type: "clipboard.paste",
                    originEvent: {
                        dataTransfer: event_1.nativeEvent.clipboardData
                    },
                    position: position_2
                },
                editor: slateEditor,
                nativeEvent: event_1
            });
        }
        debug("No result from custom paste handler, pasting normally");
    }, [
        editorActor,
        onPaste,
        portableTextEditor,
        schemaTypes,
        slateEditor
    ]), handleOnFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_2)=>{
        if (onFocus && onFocus(event_2), !event_2.isDefaultPrevented()) {
            const selection_3 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].getSelection(portableTextEditor);
            selection_3 === null && (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(slateEditor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Editor"].start(slateEditor, [])), slateEditor.onChange()), editorActor.send({
                type: "notify.focused",
                event: event_2
            });
            const newSelection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["PortableTextEditor"].getSelection(portableTextEditor);
            selection_3 === newSelection && editorActor.send({
                type: "notify.selection",
                selection: selection_3
            });
        }
    }, [
        editorActor,
        onFocus,
        portableTextEditor,
        slateEditor
    ]), handleClick = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_3)=>{
        if (onClick && onClick(event_3), event_3.isDefaultPrevented() || event_3.isPropagationStopped()) return;
        const position_3 = getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_3.nativeEvent
        });
        if (!position_3) {
            console.warn("Could not find EventPosition for MouseEvent");
            return;
        }
        editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "mouse.click",
                position: position_3
            },
            editor: slateEditor,
            nativeEvent: event_3
        });
    }, [
        onClick,
        editorActor,
        slateEditor
    ]), handleOnBlur = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_4)=>{
        onBlur && onBlur(event_4), event_4.isPropagationStopped() || editorActor.send({
            type: "notify.blurred",
            event: event_4
        });
    }, [
        editorActor,
        onBlur
    ]), handleOnBeforeInput = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_5)=>{
        onBeforeInput && onBeforeInput(event_5);
    }, [
        onBeforeInput
    ]), validateSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(()=>{
        if (!slateEditor.selection) return;
        const root = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].findDocumentOrShadowRoot(slateEditor), { activeElement } = root;
        if (ref.current !== activeElement) return;
        const domSelection = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].getWindow(slateEditor).getSelection();
        if (!domSelection || domSelection.rangeCount === 0) return;
        const existingDOMRange = domSelection.getRangeAt(0);
        try {
            const newDOMRange = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].toDOMRange(slateEditor, slateEditor.selection);
            (newDOMRange.startOffset !== existingDOMRange.startOffset || newDOMRange.endOffset !== existingDOMRange.endOffset) && (debug("DOM range out of sync, validating selection"), domSelection?.removeAllRanges(), domSelection.addRange(newDOMRange));
        } catch  {
            debug("Could not resolve selection, selecting top document"), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].deselect(slateEditor), slateEditor.children.length > 0 && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Transforms"].select(slateEditor, [
                0,
                0
            ]), slateEditor.onChange();
        }
    }, [
        ref,
        slateEditor
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        if (editableElement) {
            const mutationObserver = new MutationObserver(validateSelection);
            return mutationObserver.observe(editableElement, {
                attributeOldValue: !1,
                attributes: !1,
                characterData: !1,
                childList: !0,
                subtree: !0
            }), ()=>{
                mutationObserver.disconnect();
            };
        }
    }, [
        validateSelection,
        editableElement
    ]);
    const handleKeyDown = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_6)=>{
        props.onKeyDown && props.onKeyDown(event_6), event_6.isDefaultPrevented() || slateEditor.pteWithHotKeys(event_6), event_6.isDefaultPrevented() || editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "keyboard.keydown",
                originEvent: {
                    key: event_6.key,
                    code: event_6.code,
                    altKey: event_6.altKey,
                    ctrlKey: event_6.ctrlKey,
                    metaKey: event_6.metaKey,
                    shiftKey: event_6.shiftKey
                }
            },
            editor: slateEditor,
            nativeEvent: event_6
        });
    }, [
        props,
        editorActor,
        slateEditor
    ]), handleKeyUp = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_7)=>{
        props.onKeyUp && props.onKeyUp(event_7), event_7.isDefaultPrevented() || editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "keyboard.keyup",
                originEvent: {
                    key: event_7.key,
                    code: event_7.code,
                    altKey: event_7.altKey,
                    ctrlKey: event_7.ctrlKey,
                    metaKey: event_7.metaKey,
                    shiftKey: event_7.shiftKey
                }
            },
            editor: slateEditor,
            nativeEvent: event_7
        });
    }, [
        props,
        editorActor,
        slateEditor
    ]), scrollSelectionIntoViewToSlate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useMemo"])(()=>{
        if (scrollSelectionIntoView !== void 0) return scrollSelectionIntoView === null ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$noop$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"] : (_editor, domRange)=>{
            scrollSelectionIntoView(portableTextEditor, domRange);
        };
    }, [
        portableTextEditor,
        scrollSelectionIntoView
    ]), decorate = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])(([, path_0])=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isEqualToEmptyEditor"])(slateEditor.children, schemaTypes)) return [
            {
                anchor: {
                    path: [
                        0,
                        0
                    ],
                    offset: 0
                },
                focus: {
                    path: [
                        0,
                        0
                    ],
                    offset: 0
                },
                placeholder: !0
            }
        ];
        if (path_0.length === 0) return [];
        const result_2 = rangeDecorationState.filter((item)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].isCollapsed(item) ? path_0.length !== 2 ? !1 : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].equals(item.focus.path, path_0) && __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Path"].equals(item.anchor.path, path_0) : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].intersection(item, {
                anchor: {
                    path: path_0,
                    offset: 0
                },
                focus: {
                    path: path_0,
                    offset: 0
                }
            }) || __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$slate$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Range"].includes(item, path_0));
        return result_2.length > 0 ? result_2 : [];
    }, [
        slateEditor,
        schemaTypes,
        rangeDecorationState
    ]);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        ref.current = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].toDOMNode(slateEditor, slateEditor), setEditableElement(ref.current);
    }, [
        slateEditor,
        ref
    ]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(()=>{
        const window_0 = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["ReactEditor"].getWindow(slateEditor), onDragEnd_0 = ()=>{
            editorActor.send({
                type: "dragend"
            });
        }, onDrop_0 = ()=>{
            editorActor.send({
                type: "drop"
            });
        };
        return window_0.document.addEventListener("dragend", onDragEnd_0), window_0.document.addEventListener("drop", onDrop_0), ()=>{
            window_0.document.removeEventListener("dragend", onDragEnd_0), window_0.document.removeEventListener("drop", onDrop_0);
        };
    }, [
        slateEditor,
        editorActor
    ]);
    const handleDragStart = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_8)=>{
        if (onDragStart?.(event_8), event_8.isDefaultPrevented() || event_8.isPropagationStopped()) return;
        const position_4 = getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_8.nativeEvent
        });
        if (!position_4) {
            console.warn("Could not find position for dragstart event");
            return;
        }
        const snapshot = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getEditorSnapshot"])({
            editorActorSnapshot: editorActor.getSnapshot(),
            slateEditorInstance: slateEditor
        }), dragSelection = getDragSelection({
            eventSelection: position_4.selection,
            snapshot
        }), selectingEntireBlocks = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$selecting$2d$entire$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectingEntireBlocks"])({
            context: {
                ...snapshot.context,
                selection: dragSelection
            }
        }), dragGhost = document.createElement("div"), draggedDomNodes = getSelectionDomNodes({
            snapshot: {
                context: {
                    ...snapshot.context,
                    selection: dragSelection
                }
            },
            slateEditor
        });
        if (selectingEntireBlocks) {
            const clonedBlockNodes = draggedDomNodes.blockNodes.map((node)=>node.cloneNode(!0));
            for (const block of clonedBlockNodes)block instanceof HTMLElement && (block.style.position = "relative"), dragGhost.appendChild(block);
            const customGhost = dragGhost.querySelector("[data-pt-drag-ghost-element]");
            if (customGhost && dragGhost.replaceChildren(customGhost), dragGhost.setAttribute("data-dragged", ""), dragGhost.style.position = "absolute", dragGhost.style.left = "-99999px", dragGhost.style.boxSizing = "border-box", document.body.appendChild(dragGhost), customGhost) {
                const customGhostRect = customGhost.getBoundingClientRect(), x = event_8.clientX - customGhostRect.left, y = event_8.clientY - customGhostRect.top;
                dragGhost.style.width = `${customGhostRect.width}px`, dragGhost.style.height = `${customGhostRect.height}px`, event_8.dataTransfer.setDragImage(dragGhost, x, y);
            } else {
                const blocksDomRect = getCompoundClientRect(draggedDomNodes.blockNodes), x_0 = event_8.clientX - blocksDomRect.left, y_0 = event_8.clientY - blocksDomRect.top;
                dragGhost.style.width = `${blocksDomRect.width}px`, dragGhost.style.height = `${blocksDomRect.height}px`, event_8.dataTransfer.setDragImage(dragGhost, x_0, y_0);
            }
        } else {
            const clonedChildNodes = draggedDomNodes.childNodes.map((node_0)=>node_0.cloneNode(!0));
            for (const child of clonedChildNodes)dragGhost.appendChild(child);
            dragGhost.style.position = "absolute", dragGhost.style.left = "-99999px", dragGhost.style.boxSizing = "border-box", document.body.appendChild(dragGhost);
            const childrenDomRect = getCompoundClientRect(draggedDomNodes.childNodes), x_1 = event_8.clientX - childrenDomRect.left, y_1 = event_8.clientY - childrenDomRect.top;
            dragGhost.style.width = `${childrenDomRect.width}px`, dragGhost.style.height = `${childrenDomRect.height}px`, event_8.dataTransfer.setDragImage(dragGhost, x_1, y_1);
        }
        return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "select",
                selection: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$is$2d$selection$2d$collapsed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(dragSelection) ? dragSelection : {
                    anchor: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$is$2d$selection$2d$collapsed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionEndPoint"])(dragSelection),
                    focus: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$is$2d$selection$2d$collapsed$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionEndPoint"])(dragSelection),
                    backward: !1
                }
            },
            editor: slateEditor
        }), editorActor.send({
            type: "dragstart",
            origin: {
                selection: dragSelection
            },
            ghost: dragGhost
        }), editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.dragstart",
                originEvent: {
                    dataTransfer: event_8.dataTransfer
                },
                position: {
                    selection: dragSelection
                }
            },
            editor: slateEditor
        }), !0;
    }, [
        onDragStart,
        editorActor,
        slateEditor
    ]), handleDrag = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_9)=>{
        if (onDrag?.(event_9), !(event_9.isDefaultPrevented() || event_9.isPropagationStopped() || !getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_9.nativeEvent
        }))) return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.drag",
                originEvent: {
                    dataTransfer: event_9.dataTransfer
                }
            },
            editor: slateEditor
        }), !0;
    }, [
        onDrag,
        editorActor,
        slateEditor
    ]), handleDragEnd = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_10)=>{
        if (onDragEnd?.(event_10), !(event_10.isDefaultPrevented() || event_10.isPropagationStopped())) return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.dragend",
                originEvent: {
                    dataTransfer: event_10.dataTransfer
                }
            },
            editor: slateEditor
        }), !0;
    }, [
        onDragEnd,
        editorActor,
        slateEditor
    ]), handleDragEnter = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_11)=>{
        if (onDragEnter?.(event_11), event_11.isDefaultPrevented() || event_11.isPropagationStopped()) return;
        const position_6 = getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_11.nativeEvent
        });
        if (position_6) return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.dragenter",
                originEvent: {
                    dataTransfer: event_11.dataTransfer
                },
                position: position_6
            },
            editor: slateEditor
        }), !0;
    }, [
        onDragEnter,
        editorActor,
        slateEditor
    ]), handleDragOver = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_12)=>{
        if (onDragOver?.(event_12), event_12.isDefaultPrevented() || event_12.isPropagationStopped()) return;
        const position_7 = getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_12.nativeEvent
        });
        if (position_7) return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.dragover",
                originEvent: {
                    dataTransfer: event_12.dataTransfer
                },
                position: position_7
            },
            editor: slateEditor,
            nativeEvent: event_12
        }), !0;
    }, [
        onDragOver,
        editorActor,
        slateEditor
    ]), handleDrop = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_13)=>{
        if (onDrop?.(event_13), event_13.isDefaultPrevented() || event_13.isPropagationStopped()) return;
        const position_8 = getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_13.nativeEvent
        });
        if (!position_8) {
            console.warn("Could not find position for drop event");
            return;
        }
        return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.drop",
                originEvent: {
                    dataTransfer: event_13.dataTransfer
                },
                position: position_8
            },
            editor: slateEditor,
            nativeEvent: event_13
        }), !0;
    }, [
        onDrop,
        editorActor,
        slateEditor
    ]), handleDragLeave = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useCallback"])((event_14)=>{
        if (onDragLeave?.(event_14), !(event_14.isDefaultPrevented() || event_14.isPropagationStopped() || !getEventPosition({
            schema: editorActor.getSnapshot().context.schema,
            slateEditor,
            event: event_14.nativeEvent
        }))) return editorActor.send({
            type: "behavior event",
            behaviorEvent: {
                type: "drag.dragleave",
                originEvent: {
                    dataTransfer: event_14.dataTransfer
                }
            },
            editor: slateEditor
        }), !0;
    }, [
        onDragLeave,
        editorActor,
        slateEditor
    ]);
    return portableTextEditor ? hasInvalidValue ? null : /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$slate$2d$react$2f$dist$2f$index$2e$es$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["Editable"], {
        ...restProps,
        autoFocus: !1,
        className: restProps.className || "pt-editable",
        decorate,
        onBlur: handleOnBlur,
        onCopy: handleCopy,
        onCut: handleCut,
        onClick: handleClick,
        onDOMBeforeInput: handleOnBeforeInput,
        onDragStart: handleDragStart,
        onDrag: handleDrag,
        onDragEnd: handleDragEnd,
        onDragEnter: handleDragEnter,
        onDragOver: handleDragOver,
        onDrop: handleDrop,
        onDragLeave: handleDragLeave,
        onFocus: handleOnFocus,
        onKeyDown: handleKeyDown,
        onKeyUp: handleKeyUp,
        onPaste: handlePaste,
        readOnly,
        renderPlaceholder: void 0,
        renderElement,
        renderLeaf,
        scrollSelectionIntoView: scrollSelectionIntoViewToSlate
    }) : null;
});
PortableTextEditable.displayName = "ForwardRef(PortableTextEditable)";
function EditorEventListener(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(5), editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEditor"])(), on = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$effect$2d$event$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffectEvent"])(props.on);
    let t0;
    $[0] !== editor || $[1] !== on ? (t0 = ()=>{
        const subscription = editor.on("*", on);
        return ()=>{
            subscription.unsubscribe();
        };
    }, $[0] = editor, $[1] = on, $[2] = t0) : t0 = $[2];
    let t1;
    return $[3] !== editor ? (t1 = [
        editor
    ], $[3] = editor, $[4] = t1) : t1 = $[4], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t0, t1), null;
}
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js [app-ssr] (ecmascript) <export defaultKeyGenerator as keyGenerator>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "keyGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defaultKeyGenerator"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js [app-ssr] (ecmascript)");
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getBlockTextBefore": (()=>getBlockTextBefore)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
;
;
const getBlockTextBefore = (snapshot)=>{
    if (!snapshot.context.selection) return "";
    const point = (snapshot.context.selection.backward ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["reverseSelection"])(snapshot.context.selection) : snapshot.context.selection).anchor, key = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isKeyedSegment"])(point.path[0]) ? point.path[0]._key : void 0, block = key ? snapshot.context.value.find((block2)=>block2._key === key) : void 0;
    if (!block) return "";
    const startOfBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockStartPoint"])({
        node: block,
        path: [
            {
                _key: block._key
            }
        ]
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionText"])({
        context: {
            ...snapshot.context,
            selection: {
                anchor: startOfBlock,
                focus: point
            }
        }
    });
};
;
 //# sourceMappingURL=selector.get-text-before.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMarkdownBehaviors": (()=>createMarkdownBehaviors)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@sanity/types/lib/index.mjs [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$get$2d$text$2d$before$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js [app-ssr] (ecmascript)");
;
;
;
;
;
function createMarkdownBehaviors(config) {
    const automaticBlockquoteOnSpace = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.text",
        guard: ({ snapshot, event })=>{
            if (event.text !== " ") return !1;
            const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
            if (!selectionCollapsed || !focusTextBlock || !focusSpan) return !1;
            const previousInlineObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousInlineObject"])(snapshot), blockOffset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
                value: snapshot.context.value,
                selectionPoint: {
                    path: [
                        {
                            _key: focusTextBlock.node._key
                        },
                        "children",
                        {
                            _key: focusSpan.node._key
                        }
                    ],
                    offset: snapshot.context.selection?.focus.offset ?? 0
                }
            });
            if (previousInlineObject || !blockOffset) return !1;
            const blockText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTextBlockText"])(focusTextBlock.node), caretAtTheEndOfQuote = blockOffset.offset === 1, looksLikeMarkdownQuote = /^>/.test(blockText), blockquoteStyle = config.blockquoteStyle?.(snapshot.context);
            return caretAtTheEndOfQuote && looksLikeMarkdownQuote && blockquoteStyle !== void 0 ? {
                focusTextBlock,
                style: blockquoteStyle
            } : !1;
        },
        actions: [
            ()=>[
                    {
                        type: "insert.text",
                        text: " "
                    }
                ],
            (_, { focusTextBlock, style })=>[
                    {
                        type: "block.unset",
                        props: [
                            "listItem",
                            "level"
                        ],
                        at: focusTextBlock.path
                    },
                    {
                        type: "block.set",
                        props: {
                            style
                        },
                        at: focusTextBlock.path
                    },
                    {
                        type: "delete.text",
                        anchor: {
                            path: focusTextBlock.path,
                            offset: 0
                        },
                        focus: {
                            path: focusTextBlock.path,
                            offset: 2
                        }
                    }
                ]
        ]
    }), automaticHr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.text",
        guard: ({ snapshot, event })=>{
            const hrCharacter = event.text === "-" ? "-" : event.text === "*" ? "*" : event.text === "_" ? "_" : void 0;
            if (hrCharacter === void 0) return !1;
            const hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot);
            if (!hrObject || !focusBlock || !selectionCollapsed) return !1;
            const previousInlineObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousInlineObject"])(snapshot), textBefore = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$get$2d$text$2d$before$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockTextBefore"])(snapshot), hrBlockOffsets = {
                anchor: {
                    path: focusBlock.path,
                    offset: 0
                },
                focus: {
                    path: focusBlock.path,
                    offset: 3
                }
            };
            return !previousInlineObject && textBefore === `${hrCharacter}${hrCharacter}` ? {
                hrObject,
                focusBlock,
                hrCharacter,
                hrBlockOffsets
            } : !1;
        },
        actions: [
            (_, { hrCharacter })=>[
                    {
                        type: "insert.text",
                        text: hrCharacter
                    }
                ],
            (_, { hrObject, hrBlockOffsets })=>[
                    {
                        type: "insert.block",
                        placement: "before",
                        block: {
                            _type: hrObject.name,
                            ...hrObject.value ?? {}
                        }
                    },
                    {
                        type: "delete.text",
                        ...hrBlockOffsets
                    }
                ]
        ]
    }), automaticHrOnPaste = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "clipboard.paste",
        guard: ({ snapshot, event })=>{
            const text = event.originEvent.dataTransfer.getData("text/plain"), hrRegExp = /^(---)$|(___)$|(\*\*\*)$/gm, hrCharacters = text.match(hrRegExp)?.[0], hrObject = config.horizontalRuleObject?.(snapshot.context), focusBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusBlock"])(snapshot);
            return !hrCharacters || !hrObject || !focusBlock ? !1 : {
                hrCharacters,
                hrObject,
                focusBlock
            };
        },
        actions: [
            (_, { hrCharacters })=>[
                    {
                        type: "insert.text",
                        text: hrCharacters
                    }
                ],
            ({ snapshot }, { hrObject, focusBlock })=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$sanity$2f$types$2f$lib$2f$index$2e$mjs__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isPortableTextTextBlock"])(focusBlock.node) ? [
                    {
                        type: "insert.block",
                        block: {
                            _type: snapshot.context.schema.block.name,
                            children: focusBlock.node.children
                        },
                        placement: "after"
                    },
                    {
                        type: "insert.block",
                        block: {
                            _type: hrObject.name,
                            ...hrObject.value ?? {}
                        },
                        placement: "after"
                    },
                    {
                        type: "delete.block",
                        at: focusBlock.path
                    }
                ] : [
                    {
                        type: "insert.block",
                        block: {
                            _type: hrObject.name,
                            ...hrObject.value ?? {}
                        },
                        placement: "after"
                    }
                ]
        ]
    }), automaticHeadingOnSpace = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.text",
        guard: ({ snapshot, event })=>{
            if (event.text !== " ") return !1;
            const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
            if (!selectionCollapsed || !focusTextBlock || !focusSpan) return !1;
            const blockOffset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
                value: snapshot.context.value,
                selectionPoint: {
                    path: [
                        {
                            _key: focusTextBlock.node._key
                        },
                        "children",
                        {
                            _key: focusSpan.node._key
                        }
                    ],
                    offset: snapshot.context.selection?.focus.offset ?? 0
                }
            });
            if (!blockOffset) return !1;
            const previousInlineObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousInlineObject"])(snapshot), blockText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTextBlockText"])(focusTextBlock.node), markdownHeadingSearch = /^#+/.exec(blockText), level = markdownHeadingSearch ? markdownHeadingSearch[0].length : void 0, caretAtTheEndOfHeading = blockOffset.offset === level;
            if (previousInlineObject || !caretAtTheEndOfHeading) return !1;
            const style = level !== void 0 ? config.headingStyle?.({
                schema: snapshot.context.schema,
                level
            }) : void 0;
            return level !== void 0 && style !== void 0 ? {
                focusTextBlock,
                style,
                level
            } : !1;
        },
        actions: [
            ({ event })=>[
                    event
                ],
            (_, { focusTextBlock, style, level })=>[
                    {
                        type: "block.unset",
                        props: [
                            "listItem",
                            "level"
                        ],
                        at: focusTextBlock.path
                    },
                    {
                        type: "block.set",
                        props: {
                            style
                        },
                        at: focusTextBlock.path
                    },
                    {
                        type: "delete.text",
                        anchor: {
                            path: focusTextBlock.path,
                            offset: 0
                        },
                        focus: {
                            path: focusTextBlock.path,
                            offset: level + 1
                        }
                    }
                ]
        ]
    }), clearStyleOnBackspace = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "delete.backward",
        guard: ({ snapshot })=>{
            const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
            if (!selectionCollapsed || !focusTextBlock || !focusSpan) return !1;
            const atTheBeginningOfBLock = focusTextBlock.node.children[0]._key === focusSpan.node._key && snapshot.context.selection?.focus.offset === 0, defaultStyle = config.defaultStyle?.(snapshot.context);
            return atTheBeginningOfBLock && defaultStyle && focusTextBlock.node.style !== defaultStyle ? {
                defaultStyle,
                focusTextBlock
            } : !1;
        },
        actions: [
            (_, { defaultStyle, focusTextBlock })=>[
                    {
                        type: "block.set",
                        props: {
                            style: defaultStyle
                        },
                        at: focusTextBlock.path
                    }
                ]
        ]
    }), automaticListOnSpace = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.text",
        guard: ({ snapshot, event })=>{
            if (event.text !== " ") return !1;
            const selectionCollapsed = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionCollapsed"])(snapshot), focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), focusSpan = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusSpan"])(snapshot);
            if (!selectionCollapsed || !focusTextBlock || !focusSpan) return !1;
            const previousInlineObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousInlineObject"])(snapshot), blockOffset = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
                value: snapshot.context.value,
                selectionPoint: {
                    path: [
                        {
                            _key: focusTextBlock.node._key
                        },
                        "children",
                        {
                            _key: focusSpan.node._key
                        }
                    ],
                    offset: snapshot.context.selection?.focus.offset ?? 0
                }
            });
            if (previousInlineObject || !blockOffset) return !1;
            const blockText = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getTextBlockText"])(focusTextBlock.node), defaultStyle = config.defaultStyle?.(snapshot.context), looksLikeUnorderedList = /^(-|\*)/.test(blockText), unorderedListStyle = config.unorderedListStyle?.(snapshot.context), caretAtTheEndOfUnorderedList = blockOffset.offset === 1;
            if (defaultStyle && caretAtTheEndOfUnorderedList && looksLikeUnorderedList && unorderedListStyle !== void 0) return {
                focusTextBlock,
                listItem: unorderedListStyle,
                listItemLength: 1,
                style: defaultStyle
            };
            const looksLikeOrderedList = /^1\./.test(blockText), orderedListStyle = config.orderedListStyle?.(snapshot.context), caretAtTheEndOfOrderedList = blockOffset.offset === 2;
            return defaultStyle && caretAtTheEndOfOrderedList && looksLikeOrderedList && orderedListStyle !== void 0 ? {
                focusTextBlock,
                listItem: orderedListStyle,
                listItemLength: 2,
                style: defaultStyle
            } : !1;
        },
        actions: [
            ({ event })=>[
                    event
                ],
            (_, { focusTextBlock, style, listItem, listItemLength })=>[
                    {
                        type: "block.set",
                        props: {
                            listItem,
                            level: 1,
                            style
                        },
                        at: focusTextBlock.path
                    },
                    {
                        type: "delete.text",
                        anchor: {
                            path: focusTextBlock.path,
                            offset: 0
                        },
                        focus: {
                            path: focusTextBlock.path,
                            offset: listItemLength + 1
                        }
                    }
                ]
        ]
    });
    return [
        automaticBlockquoteOnSpace,
        automaticHeadingOnSpace,
        automaticHr,
        automaticHrOnPaste,
        clearStyleOnBackspace,
        automaticListOnSpace
    ];
}
;
 //# sourceMappingURL=behavior.markdown.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isTextBlock": (()=>isTextBlock),
    "mergeTextBlocks": (()=>mergeTextBlocks)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/parse-blocks.js [app-ssr] (ecmascript)");
;
function isTextBlock(context, block) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTypedObject"])(block) && block._type === context.schema.block.name;
}
function mergeTextBlocks({ context, targetBlock, incomingBlock }) {
    const parsedIncomingBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$parse$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["parseBlock"])({
        context,
        block: incomingBlock,
        options: {
            refreshKeys: !0
        }
    });
    return !parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock) ? targetBlock : {
        ...targetBlock,
        children: [
            ...targetBlock.children,
            ...parsedIncomingBlock.children
        ],
        markDefs: [
            ...targetBlock.markDefs ?? [],
            ...parsedIncomingBlock.markDefs ?? []
        ]
    };
}
;
 //# sourceMappingURL=util.merge-text-blocks.js.map
}}),
"[project]/node_modules/@portabletext/editor/lib/plugins/index.js [app-ssr] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BehaviorPlugin": (()=>BehaviorPlugin),
    "CoreBehaviorsPlugin": (()=>CoreBehaviorsPlugin),
    "DecoratorShortcutPlugin": (()=>DecoratorShortcutPlugin),
    "EditorRefPlugin": (()=>EditorRefPlugin),
    "EventListenerPlugin": (()=>EventListenerPlugin),
    "MarkdownPlugin": (()=>MarkdownPlugin),
    "OneLinePlugin": (()=>OneLinePlugin)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/node_modules/react-compiler-runtime/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/editor-provider.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.core.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@xstate/react/dist/xstate-react.development.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/lodash/isEqual.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/xstate.development.esm.js [app-ssr] (ecmascript) <locals>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/xstate/actors/dist/xstate-actors.development.esm.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__ = __turbopack_context__.i("[project]/node_modules/xstate/dist/log-0acd9069.development.esm.js [app-ssr] (ecmascript) <export a as assign>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.is-overlapping-selection.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.slice-blocks.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.selection-point-to-block-offset.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$get$2d$text$2d$before$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/selector.get-text-before.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$effect$2d$event$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/use-effect-event/dist/index.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$markdown$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/behavior.markdown.js [app-ssr] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$merge$2d$text$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@portabletext/editor/lib/_chunks-es/util.merge-text-blocks.js [app-ssr] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function BehaviorPlugin(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(4), editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEditor"])();
    let t0, t1;
    return $[0] !== editor || $[1] !== props.behaviors ? (t0 = ()=>{
        const unregisterBehaviors = props.behaviors.map((behavior)=>editor.registerBehavior({
                behavior
            }));
        return ()=>{
            unregisterBehaviors.forEach(_temp);
        };
    }, t1 = [
        editor,
        props.behaviors
    ], $[0] = editor, $[1] = props.behaviors, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t0, t1), null;
}
function _temp(unregister) {
    return unregister();
}
function CoreBehaviorsPlugin() {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(1);
    let t0;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(BehaviorPlugin, {
        behaviors: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["coreBehaviors"]
    }), $[0] = t0) : t0 = $[0], t0;
}
function createPairRegex(char, amount) {
    const prePrefix = `(?<!\\${char})`, prefix = `\\${char}`.repeat(Math.max(amount, 1)), postPrefix = "(?!\\s)", content = `([^${char}\\n]+?)`, preSuffix = "(?<!\\s)", suffix = `\\${char}`.repeat(Math.max(amount, 1)), postSuffix = `(?!\\${char})`;
    return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`;
}
function createDecoratorPairBehavior(config) {
    config.pair.amount < 1 && console.warn("The amount of characters in the pair should be greater than 0");
    const pairRegex = createPairRegex(config.pair.char, config.pair.amount), regEx = new RegExp(`(${pairRegex})$`);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.text",
        guard: ({ snapshot, event })=>{
            if (config.pair.amount < 1) return !1;
            const decorator = config.decorator({
                schema: snapshot.context.schema
            });
            if (decorator === void 0) return !1;
            const focusTextBlock = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot), selectionStartPoint = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getSelectionStartPoint"])(snapshot), selectionStartOffset = selectionStartPoint ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
                value: snapshot.context.value,
                selectionPoint: selectionStartPoint
            }) : void 0;
            if (!focusTextBlock || !selectionStartOffset) return !1;
            const newText = `${(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$get$2d$text$2d$before$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getBlockTextBefore"])(snapshot)}${event.text}`, textToDecorate = newText.match(regEx)?.at(0);
            if (textToDecorate === void 0) return !1;
            const prefixOffsets = {
                anchor: {
                    path: focusTextBlock.path,
                    // Example: "foo **bar**".length - "**bar**".length = 4
                    offset: newText.length - textToDecorate.length
                },
                focus: {
                    path: focusTextBlock.path,
                    // Example: "foo **bar**".length - "**bar**".length + "*".length * 2 = 6
                    offset: newText.length - textToDecorate.length + config.pair.char.length * config.pair.amount
                }
            }, suffixOffsets = {
                anchor: {
                    path: focusTextBlock.path,
                    // Example: "foo **bar*|" (10) + "*".length - 2 = 9
                    offset: selectionStartOffset.offset + event.text.length - config.pair.char.length * config.pair.amount
                },
                focus: {
                    path: focusTextBlock.path,
                    // Example: "foo **bar*|" (10) + "*".length = 11
                    offset: selectionStartOffset.offset + event.text.length
                }
            };
            if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {
                const prefixSelection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["blockOffsetsToSelection"])({
                    value: snapshot.context.value,
                    offsets: prefixOffsets
                }), inlineObjectBeforePrefixFocus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousInlineObject"])({
                    context: {
                        ...snapshot.context,
                        selection: prefixSelection ? {
                            anchor: prefixSelection.focus,
                            focus: prefixSelection.focus
                        } : null
                    }
                }), inlineObjectBeforePrefixFocusOffset = inlineObjectBeforePrefixFocus ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["childSelectionPointToBlockOffset"])({
                    value: snapshot.context.value,
                    selectionPoint: {
                        path: inlineObjectBeforePrefixFocus.path,
                        offset: 0
                    }
                }) : void 0;
                if (inlineObjectBeforePrefixFocusOffset && inlineObjectBeforePrefixFocusOffset.offset > prefixOffsets.anchor.offset && inlineObjectBeforePrefixFocusOffset.offset < prefixOffsets.focus.offset) return !1;
            }
            if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {
                const previousInlineObject = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getPreviousInlineObject"])(snapshot), previousInlineObjectOffset = previousInlineObject ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$selection$2d$point$2d$to$2d$block$2d$offset$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["childSelectionPointToBlockOffset"])({
                    value: snapshot.context.value,
                    selectionPoint: {
                        path: previousInlineObject.path,
                        offset: 0
                    }
                }) : void 0;
                if (previousInlineObjectOffset && previousInlineObjectOffset.offset > suffixOffsets.anchor.offset && previousInlineObjectOffset.offset < suffixOffsets.focus.offset) return !1;
            }
            return {
                prefixOffsets,
                suffixOffsets,
                decorator
            };
        },
        actions: [
            // Insert the text as usual in its own undo step
            ({ event })=>[
                    event
                ],
            (_, { prefixOffsets, suffixOffsets, decorator })=>[
                    // Decorate the text between the prefix and suffix
                    {
                        type: "decorator.add",
                        decorator,
                        offsets: {
                            anchor: prefixOffsets.focus,
                            focus: suffixOffsets.anchor
                        }
                    },
                    // Delete the suffix
                    {
                        type: "delete.text",
                        ...suffixOffsets
                    },
                    // Delete the prefix
                    {
                        type: "delete.text",
                        ...prefixOffsets
                    },
                    // Toggle the decorator off so the next inserted text isn't emphasized
                    {
                        type: "decorator.remove",
                        decorator
                    },
                    {
                        type: "effect",
                        effect: ()=>{
                            config.onDecorate({
                                ...suffixOffsets.anchor,
                                offset: suffixOffsets.anchor.offset - (prefixOffsets.focus.offset - prefixOffsets.anchor.offset)
                            });
                        }
                    }
                ]
        ]
    });
}
function DecoratorShortcutPlugin(config) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(4), editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEditor"])();
    let t0;
    return $[0] !== config.decorator || $[1] !== config.pair || $[2] !== editor ? (t0 = {
        input: {
            editor,
            decorator: config.decorator,
            pair: config.pair
        }
    }, $[0] = config.decorator, $[1] = config.pair, $[2] = editor, $[3] = t0) : t0 = $[3], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$xstate$2f$react$2f$dist$2f$xstate$2d$react$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useActorRef"])(decoratorPairMachine, t0), null;
}
const emphasisListener = ({ sendBack, input })=>input.editor.registerBehavior({
        behavior: createDecoratorPairBehavior({
            decorator: input.decorator,
            pair: input.pair,
            onDecorate: (offset)=>{
                sendBack({
                    type: "emphasis.add",
                    blockOffset: offset
                });
            }
        })
    }), selectionListenerCallback = ({ sendBack, input })=>input.editor.registerBehavior({
        behavior: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
            on: "select",
            guard: ({ snapshot, event })=>{
                if (!event.selection) return {
                    blockOffsets: void 0
                };
                const anchor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
                    value: snapshot.context.value,
                    selectionPoint: event.selection.anchor
                }), focus = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$slice$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["spanSelectionPointToBlockOffset"])({
                    value: snapshot.context.value,
                    selectionPoint: event.selection.focus
                });
                return !anchor || !focus ? {
                    blockOffsets: void 0
                } : {
                    blockOffsets: {
                        anchor,
                        focus
                    }
                };
            },
            actions: [
                (_, { blockOffsets })=>[
                        {
                            type: "effect",
                            effect: ()=>{
                                sendBack({
                                    type: "selection",
                                    blockOffsets
                                });
                            }
                        }
                    ]
            ]
        })
    }), deleteBackwardListenerCallback = ({ sendBack, input })=>input.editor.registerBehavior({
        behavior: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
            on: "delete.backward",
            actions: [
                ()=>[
                        {
                            type: "history.undo"
                        },
                        {
                            type: "effect",
                            effect: ()=>{
                                sendBack({
                                    type: "delete.backward"
                                });
                            }
                        }
                    ]
            ]
        })
    }), decoratorPairMachine = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$xstate$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$locals$3e$__["setup"])({
    types: {
        context: {},
        input: {},
        events: {}
    },
    actors: {
        "emphasis listener": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromCallback"])(emphasisListener),
        "delete.backward listener": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromCallback"])(deleteBackwardListenerCallback),
        "selection listener": (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$actors$2f$dist$2f$xstate$2d$actors$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["fromCallback"])(selectionListenerCallback)
    }
}).createMachine({
    id: "decorator pair",
    context: ({ input })=>({
            decorator: input.decorator,
            editor: input.editor,
            pair: input.pair
        }),
    initial: "idle",
    states: {
        idle: {
            invoke: [
                {
                    src: "emphasis listener",
                    input: ({ context })=>({
                            decorator: context.decorator,
                            editor: context.editor,
                            pair: context.pair
                        })
                }
            ],
            on: {
                "emphasis.add": {
                    target: "emphasis added",
                    actions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                        offsetAfterEmphasis: ({ event })=>event.blockOffset
                    })
                }
            }
        },
        "emphasis added": {
            exit: [
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$xstate$2f$dist$2f$log$2d$0acd9069$2e$development$2e$esm$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__$3c$export__a__as__assign$3e$__["assign"])({
                    offsetAfterEmphasis: void 0
                })
            ],
            invoke: [
                {
                    src: "selection listener",
                    input: ({ context })=>({
                            editor: context.editor
                        })
                },
                {
                    src: "delete.backward listener",
                    input: ({ context })=>({
                            editor: context.editor
                        })
                }
            ],
            on: {
                selection: {
                    target: "idle",
                    guard: ({ context, event })=>!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$lodash$2f$isEqual$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"])({
                            anchor: context.offsetAfterEmphasis,
                            focus: context.offsetAfterEmphasis
                        }, event.blockOffsets)
                },
                "delete.backward": {
                    target: "idle"
                }
            }
        }
    }
}), EditorRefPlugin = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].forwardRef((_, ref)=>{
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(2), editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEditor"])(), portableTextEditorRef = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].useRef(editor);
    let t0, t1;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = ()=>portableTextEditorRef.current, t1 = [], $[0] = t0, $[1] = t1) : (t0 = $[0], t1 = $[1]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["default"].useImperativeHandle(ref, t0, t1), null;
});
EditorRefPlugin.displayName = "EditorRefPlugin";
function EventListenerPlugin(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(5), editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEditor"])(), on = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$use$2d$effect$2d$event$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffectEvent"])(props.on);
    let t0;
    $[0] !== editor || $[1] !== on ? (t0 = ()=>{
        const subscription = editor.on("*", on);
        return ()=>{
            subscription.unsubscribe();
        };
    }, $[0] = editor, $[1] = on, $[2] = t0) : t0 = $[2];
    let t1;
    return $[3] !== editor ? (t1 = [
        editor
    ], $[3] = editor, $[4] = t1) : t1 = $[4], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t0, t1), null;
}
function MarkdownPlugin(props) {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(17), editor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$editor$2d$provider$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEditor"])();
    let t0, t1;
    $[0] !== editor || $[1] !== props.config ? (t0 = ()=>{
        const unregisterBehaviors = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$markdown$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["createMarkdownBehaviors"])(props.config).map((behavior)=>editor.registerBehavior({
                behavior
            }));
        return ()=>{
            for (const unregisterBehavior of unregisterBehaviors)unregisterBehavior();
        };
    }, t1 = [
        editor,
        props.config
    ], $[0] = editor, $[1] = props.config, $[2] = t0, $[3] = t1) : (t0 = $[2], t1 = $[3]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["useEffect"])(t0, t1);
    let t2;
    $[4] !== props.config.boldDecorator ? (t2 = props.config.boldDecorator ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DecoratorShortcutPlugin, {
                decorator: props.config.boldDecorator,
                pair: {
                    char: "*",
                    amount: 2
                }
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DecoratorShortcutPlugin, {
                decorator: props.config.boldDecorator,
                pair: {
                    char: "_",
                    amount: 2
                }
            })
        ]
    }) : null, $[4] = props.config.boldDecorator, $[5] = t2) : t2 = $[5];
    let t3;
    $[6] !== props.config.codeDecorator ? (t3 = props.config.codeDecorator ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DecoratorShortcutPlugin, {
        decorator: props.config.codeDecorator,
        pair: {
            char: "`",
            amount: 1
        }
    }) : null, $[6] = props.config.codeDecorator, $[7] = t3) : t3 = $[7];
    let t4;
    $[8] !== props.config.italicDecorator ? (t4 = props.config.italicDecorator ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
        children: [
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DecoratorShortcutPlugin, {
                decorator: props.config.italicDecorator,
                pair: {
                    char: "*",
                    amount: 1
                }
            }),
            /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DecoratorShortcutPlugin, {
                decorator: props.config.italicDecorator,
                pair: {
                    char: "_",
                    amount: 1
                }
            })
        ]
    }) : null, $[8] = props.config.italicDecorator, $[9] = t4) : t4 = $[9];
    let t5;
    $[10] !== props.config.strikeThroughDecorator ? (t5 = props.config.strikeThroughDecorator ? /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(DecoratorShortcutPlugin, {
        decorator: props.config.strikeThroughDecorator,
        pair: {
            char: "~",
            amount: 2
        }
    }) : null, $[10] = props.config.strikeThroughDecorator, $[11] = t5) : t5 = $[11];
    let t6;
    return $[12] !== t2 || $[13] !== t3 || $[14] !== t4 || $[15] !== t5 ? (t6 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsxs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["Fragment"], {
        children: [
            t2,
            t3,
            t4,
            t5
        ]
    }), $[12] = t2, $[13] = t3, $[14] = t4, $[15] = t5, $[16] = t6) : t6 = $[16], t6;
}
const oneLineBehaviors = [
    /**
   * Hitting Enter on an expanded selection should just delete that selection
   * without causing a line break.
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.break",
        guard: ({ snapshot })=>snapshot.context.selection && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isSelectionExpanded"])(snapshot) ? {
                selection: snapshot.context.selection
            } : !1,
        actions: [
            (_, { selection })=>[
                    {
                        type: "delete",
                        selection
                    }
                ]
        ]
    }),
    /**
   * All other cases of `insert.break` should be aborted.
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.break",
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }),
    /**
   * `insert.block` `before` or `after` is not allowed in a one-line editor.
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.block",
        guard: ({ event })=>event.placement === "before" || event.placement === "after",
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }),
    /**
   * An ordinary `insert.block` is acceptable if it's a text block. In that
   * case it will get merged into the existing text block.
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.block",
        guard: ({ snapshot, event })=>!(!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$selector$2e$is$2d$overlapping$2d$selection$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["getFocusTextBlock"])(snapshot) || !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$merge$2d$text$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(snapshot.context, event.block)),
        actions: [
            ({ event })=>[
                    {
                        type: "insert.block",
                        block: event.block,
                        placement: "auto",
                        select: "end"
                    }
                ]
        ]
    }),
    /**
   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all
   * end up with a falsy guard.
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.block",
        actions: [
            ()=>[
                    {
                        type: "noop"
                    }
                ]
        ]
    }),
    /**
   * If multiple blocks are inserted, then the non-text blocks are filtered out
   * and the text blocks are merged into one block
   */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["defineBehavior"])({
        on: "insert.blocks",
        guard: ({ snapshot, event })=>event.blocks.filter((block)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$merge$2d$text$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["isTextBlock"])(snapshot.context, block)).reduce((targetBlock, incomingBlock)=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$util$2e$merge$2d$text$2d$blocks$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["mergeTextBlocks"])({
                    context: snapshot.context,
                    targetBlock,
                    incomingBlock
                })),
        actions: [
            // `insert.block` is raised so the Behavior above can handle the
            // insertion
            (_, block)=>[
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$lib$2f$_chunks$2d$es$2f$behavior$2e$core$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["raise"])({
                        type: "insert.block",
                        block,
                        placement: "auto"
                    })
                ]
        ]
    })
];
function OneLinePlugin() {
    const $ = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$portabletext$2f$editor$2f$node_modules$2f$react$2d$compiler$2d$runtime$2f$dist$2f$index$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["c"])(1);
    let t0;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$server$2f$route$2d$modules$2f$app$2d$page$2f$vendored$2f$ssr$2f$react$2d$jsx$2d$runtime$2e$js__$5b$app$2d$ssr$5d$__$28$ecmascript$29$__["jsx"])(BehaviorPlugin, {
        behaviors: oneLineBehaviors
    }), $[0] = t0) : t0 = $[0], t0;
}
;
 //# sourceMappingURL=index.js.map
}}),

};

//# sourceMappingURL=node_modules_%40portabletext_editor_lib_5fde536c._.js.map