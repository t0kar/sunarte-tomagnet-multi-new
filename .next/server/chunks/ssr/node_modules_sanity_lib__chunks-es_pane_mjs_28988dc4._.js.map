{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"pane.mjs","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/i18n/index.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/DocTitle.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.styles.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneItem/PaneItemPreview.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneRouter/BackLink.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/usePaneLayout.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneRouter/ChildLink.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneRouter/ParameterizedLink.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneRouter/ReferenceChildLink.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneRouter/usePaneRouter.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/confirmDeleteDialog/ReferencePreviewLink.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialogBody.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/confirmDeleteDialog/useReferringDocuments.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/confirmDeleteDialog/ConfirmDeleteDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/confirmDeleteDialog/index.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/Delay.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneDivider.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/Pane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneContent.styles.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/usePane.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneContent.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/util/toLowerCaseNoSpaces.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneMenuButtonItem.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneContextMenuButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneFooter.styles.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneFooter.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneHeader.styles.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneHeaderActionButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneLayout.styles.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/helpers/_calcPaneResize.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/helpers/_getDOMPath.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/helpers/_sortElements.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/paneLayoutController.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/pane/PaneLayout.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/menuNodes.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/IntentButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneHeaderActions/InsufficientPermissionsMessageTooltip.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneHeaderActions/PaneHeaderCreateButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneHeaderActions/PaneHeaderActions.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/MissingSchemaType.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneItem/PaneItem.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/RenderActionCollectionState.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/RenderBadgeCollectionState.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/hooks/useCreatePathSyncChannel.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/hooks/useDiffViewRouter.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/types/diffViewMode.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/hooks/useDiffViewState.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/hooks/useScrollMirror.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/versionMode/components/VersionModeHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/components/DialogLayout.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/document-layout/pickDocumentLayoutComponent.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/hooks/usePathSyncChannel.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/components/Scroller.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/components/DiffViewPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/components/EditReferenceLinkComponent.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/components/DiffView.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/diffView/plugin/DiffViewDocumentLayout.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/error/ErrorPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/loading/getWaitMessages.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/loading/LoadingPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/useDocumentPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/comments/CommentsWrapper.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/hooks/useFilteredReleases.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/hooks/useDocumentIdStack.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/useStructureTool.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentInspectorMenuItemsResolver.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/useDocumentTitle.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentOperationResults.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/paneItem/helpers.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentInspector/DocumentInspectorHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentInspector/DocumentInspectorPanel.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/useStructureToolSetting.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectDialog/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectDialog/helpers.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectDialog/InspectDialog.styles.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectDialog/Search.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectDialog/InspectDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/Banner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DeletedDocumentBanners.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DeprecatedDocumentTypeBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/requestPermissionDialog/RequestPermissionDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/requestPermissionDialog/useRoleRequestsStatus.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/InsufficientPermissionBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ReferenceChangedBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/useConditionalToast.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/AddToReleaseBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ArchivedReleaseDocumentBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/CreateLinkedBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/__telemetry__/DraftLiveEditBanner.telemetry.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/DraftLiveEditBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/OpenReleaseToEditBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/ScheduledReleaseBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/banners/UnpublishedDocumentBanner.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/FormHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/documentViews/FormView.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTabs.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentHeaderTitle.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentPanelSubHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/DocumentPanel.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/ConfirmDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/ModalDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/dialogs/PopoverDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/ActionStateDialog.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/ActionMenuButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/DeleteAction.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/DiscardChangesAction.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/DuplicateAction.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/HistoryRestoreAction.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/__telemetry__/documentActions.telemetry.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/PublishAction.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentActions/UnpublishAction.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusBarActions.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/header/perspective/DocumentPerspectiveList.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/documentPanel/header/DocumentPanelHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/components/spacerButton/SpacerButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/DocumentBadges.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/helpers.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/expandableTimelineItemButton.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/timeline.styled.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/timelineI18n.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/userAvatarStack.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/timelineItem.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/utils.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/timeline.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/TimelineError.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/timelineMenu.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/AnimatedStatusIcon.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusPulse/DocumentStatusPulse.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusLine.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/RevisionStatusLine.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/useResizeObserver.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/statusBar/DocumentStatusBar.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/keyboardShortcuts/DocumentActionShortcuts.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/menuItems.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayoutError.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayoutFooter.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/document-layout/DocumentLayout.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/document-layout/useDocumentLayoutComponent.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/__telemetry__/documentPanes.telemetry.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/getInitialValueTemplateOpts.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/useDocumentPaneInitialValue.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/useDocumentPaneInspector.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/usePreviewUrl.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentPaneProvider.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentEventsPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentPaneLegacyTimeline.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentPaneProviderWrapper.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/useResetHistoryParams.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/DocumentPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/constants.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/DocumentListPaneContent.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/helpers.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/util/getExtendedProjection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/listenSearchQuery.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/useDocumentList.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/DocumentListPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/PaneHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListSelect.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListProvider.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/SheetListCell.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetColumns.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/ColumnsControl.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListFilter.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListHeader.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPaginator.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetListStore.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/useDocumentSheetList.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/sheetList/DocumentSheetListPane.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/documentList/PaneContainer.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/SerializeError.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/Sort.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/MenuItem.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/MenuItemGroup.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/util/validateId.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/util/getStructureNodeId.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/Component.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/util/resolveTypeForDocument.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/views/View.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/views/ComponentView.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/views/FormView.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/views/index.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/Document.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/InitialValueTemplateItem.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/Intent.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/Layout.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/GenericList.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/DocumentList.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/List.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/ListItem.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/DocumentListItem.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/DocumentTypeList.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/documentTypeListItems.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureBuilder/createStructureBuilder.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/documentBadges/LiveEditBadge.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/getIntentState.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/changes/ChangesInspector.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/events/EventTimelineItem.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/events/PublishedEventMenu.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/events/EventsTimeline.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/timeline/events/EventsTimelineMenu.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/changes/EventsInspector.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/changes/EventsSelector.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/changes/HistorySelector.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/changes/ChangesTabs.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/changes/index.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/validation/getPathTitles.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/validation/ValidationInspector.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/panes/document/inspectors/validation/index.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/router.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/structureTool.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/structure/StructureToolProvider.tsx"],"sourcesContent":["import {defineLocaleResourceBundle} from 'sanity'\n\n/**\n * The locale namespace for the structure tool\n *\n * @public\n */\nexport const structureLocaleNamespace = 'structure' as const\n\n/**\n * The default locale bundle for the structure tool, which is US English.\n *\n * @internal\n */\nexport const structureUsEnglishLocaleBundle = defineLocaleResourceBundle({\n  locale: 'en-US',\n  namespace: structureLocaleNamespace,\n  resources: () => import('./resources'),\n})\n\n/**\n * The locale resource keys for the structure tool.\n *\n * @alpha\n * @hidden\n */\nexport type {StructureLocaleResourceKeys} from './resources'\n","import {type SanityDocumentLike} from '@sanity/types'\nimport {unstable_useValuePreview as useValuePreview, useSchema, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface DocTitleProps {\n  document: SanityDocumentLike\n}\n\nexport function DocTitle(props: DocTitleProps) {\n  const {document: documentValue} = props\n  const schema = useSchema()\n  const schemaType = schema.get(documentValue._type)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const {error, value} = useValuePreview({\n    schemaType: schemaType!,\n    value: documentValue,\n  })\n\n  if (!schemaType) {\n    return <code>{t('doc-title.unknown-schema-type.text', {schemaType: documentValue._type})}</code>\n  }\n\n  if (error) {\n    return <>{t('doc-title.error.text', {errorMessage: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>{t('doc-title.fallback.text')}</span>\n      )}\n    </>\n  )\n}\n","import {InfoOutlineIcon} from '@sanity/icons'\nimport {Box, Flex, Inline, rem, Text} from '@sanity/ui'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\nexport const ChevronWrapper = styled(Box)`\n  margin-left: auto;\n`\n\nexport const CrossDatasetReferencesDetails = styled.details`\n  flex: none;\n\n  &[open] ${ChevronWrapper} {\n    transform: rotate(180deg);\n  }\n`\n\nexport const CrossDatasetReferencesSummary = styled.summary`\n  list-style: none;\n\n  &::-webkit-details-marker {\n    display: none;\n  }\n`\n\nexport const Table = styled.table`\n  width: 100%;\n  text-align: left;\n  padding: 0 ${({theme}) => rem(theme.sanity.space[2])};\n  border-collapse: collapse;\n\n  th {\n    padding: ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  td {\n    padding: 0 ${({theme}) => rem(theme.sanity.space[1])};\n  }\n\n  tr > *:last-child {\n    text-align: right;\n  }\n`\n\nexport const DocumentIdFlex = styled(Flex)`\n  min-height: 33px;\n`\n\nexport const OtherReferenceCount = (props: {totalCount: number; references: unknown[]}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const difference = props.totalCount - props.references.length\n\n  if (!difference) return null\n\n  return (\n    <Box padding={2}>\n      <Inline space={2}>\n        <Text size={1} muted>\n          {t('confirm-delete-dialog.other-reference-count.title', {count: difference})}\n        </Text>\n\n        <Tooltip\n          portal\n          placement=\"top\"\n          content={t('confirm-delete-dialog.other-reference-count.tooltip')}\n        >\n          <Text size={1} muted>\n            <InfoOutlineIcon />\n          </Text>\n        </Tooltip>\n      </Inline>\n    </Box>\n  )\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {Flex} from '@sanity/ui'\nimport {type ComponentType, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPresence,\n  DocumentPreviewPresence,\n  type DocumentPreviewStore,\n  DocumentStatus,\n  DocumentStatusIndicator,\n  type GeneralPreviewLayoutKey,\n  getPreviewStateObservable,\n  getPreviewValueWithFallback,\n  SanityDefaultPreview,\n  useDocumentVersionInfo,\n  usePerspective,\n} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../ui-components'\n\nexport interface PaneItemPreviewProps {\n  documentPreviewStore: DocumentPreviewStore\n  icon: ComponentType | false\n  layout: GeneralPreviewLayoutKey\n  presence?: DocumentPresence[]\n  schemaType: SchemaType\n  value: SanityDocument\n}\n\n/**\n * Preview component for _documents_ rendered in structure panes.\n *\n * Note that non-document previews are not handled by this component,\n * despite being pane items! Non-document previews bypass this entirely\n * and are rendered by `<SanityDefaultPreview>`.\n */\nexport function PaneItemPreview(props: PaneItemPreviewProps) {\n  const {icon, layout, presence, schemaType, value} = props\n\n  const versionsInfo = useDocumentVersionInfo(value._id)\n\n  const {perspectiveStack} = usePerspective()\n  const previewStateObservable = useMemo(() => {\n    return getPreviewStateObservable(\n      props.documentPreviewStore,\n      schemaType,\n      value._id,\n      perspectiveStack,\n    )\n  }, [props.documentPreviewStore, schemaType, value._id, perspectiveStack])\n\n  const {\n    snapshot,\n    original,\n    isLoading: previewIsLoading,\n  } = useObservable(previewStateObservable, {\n    snapshot: null,\n    isLoading: true,\n    original: null,\n  })\n\n  const isLoading = previewIsLoading\n\n  const status = isLoading ? null : (\n    <TooltipDelayGroupProvider>\n      <Flex align=\"center\" gap={3}>\n        {presence && presence.length > 0 && <DocumentPreviewPresence presence={presence} />}\n        <DocumentStatusIndicator\n          draft={versionsInfo.draft}\n          published={versionsInfo.published}\n          versions={versionsInfo.versions}\n        />\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n\n  const tooltip = (\n    <DocumentStatus\n      draft={versionsInfo.draft}\n      published={versionsInfo.published}\n      versions={versionsInfo.versions}\n    />\n  )\n\n  return (\n    <SanityDefaultPreview\n      {...getPreviewValueWithFallback({snapshot, original, fallback: value})}\n      isPlaceholder={isLoading}\n      icon={icon}\n      layout={layout}\n      status={status}\n      tooltip={tooltip}\n    />\n  )\n}\n","import {type ComponentType, type ForwardedRef, forwardRef, useContext, useMemo} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type BackLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const BackLink = forwardRef(function BackLink(\n  props: BackLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n  const panes = useMemo(() => routerPanesState.slice(0, groupIndex), [groupIndex, routerPanesState])\n  const state = useMemo(() => ({panes}), [panes])\n\n  return <StateLink {...props} ref={ref} state={state} />\n}) as ComponentType<BackLinkProps>\n","import {useContext} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePaneLayout(): PaneLayoutContextValue {\n  const pane = useContext(PaneLayoutContext)\n\n  if (!pane) {\n    throw new Error('PaneLayout: missing context value')\n  }\n\n  return pane\n}\n","import {type ForwardedRef, forwardRef, useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\nimport {type ChildLinkProps} from './types'\n\n/**\n * @internal\n */\nexport const ChildLink = forwardRef(function ChildLink(\n  props: ChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {childId, childPayload, childParameters, ...rest} = props\n  const {routerPanesState, groupIndex} = useContext(PaneRouterContext)\n\n  return (\n    <StateLink\n      {...rest}\n      ref={ref}\n      state={{\n        panes: [\n          ...routerPanesState.slice(0, groupIndex + 1),\n          [{id: childId, params: childParameters, payload: childPayload}],\n        ],\n      }}\n    />\n  )\n})\n","import {type ForwardedRef, forwardRef, type ReactNode, useContext, useMemo} from 'react'\nimport {useUnique} from 'sanity'\nimport {PaneRouterContext} from 'sanity/_singletons'\nimport {StateLink} from 'sanity/router'\n\ninterface ParameterizedLinkProps {\n  params?: Record<string, string>\n  payload?: unknown\n  children?: ReactNode\n}\n\n/**\n * @internal\n */\nexport const ParameterizedLink = forwardRef(function ParameterizedLink(\n  props: ParameterizedLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {routerPanesState: currentPanes, groupIndex, siblingIndex} = useContext(PaneRouterContext)\n  const {params, payload, ...rest} = props\n  const nextParams = useUnique(params)\n  const nextPayload = useUnique(payload)\n\n  const nextState = useMemo(() => {\n    const currentGroup = currentPanes[groupIndex]\n    const currentSibling = currentGroup[siblingIndex]\n\n    const nextSibling = {\n      ...currentSibling,\n      params: nextParams ?? currentSibling.params,\n      payload: nextPayload ?? currentSibling.payload,\n    }\n\n    const nextGroup = [\n      ...currentGroup.slice(0, siblingIndex),\n      nextSibling,\n      ...currentGroup.slice(siblingIndex + 1),\n    ]\n\n    const nextPanes = [\n      ...currentPanes.slice(0, groupIndex),\n      nextGroup,\n      ...currentPanes.slice(groupIndex + 1),\n    ]\n\n    return {panes: nextPanes}\n  }, [currentPanes, groupIndex, nextParams, nextPayload, siblingIndex])\n\n  return <StateLink ref={ref} {...rest} state={nextState} />\n})\n","import {toString as pathToString} from '@sanity/util/paths'\nimport {type ForwardedRef, forwardRef} from 'react'\n\nimport {ChildLink} from './ChildLink'\nimport {type ReferenceChildLinkProps} from './types'\n\nexport const ReferenceChildLink = forwardRef(function ReferenceChildLink(\n  {documentId, documentType, parentRefPath, children, template, ...rest}: ReferenceChildLinkProps,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  return (\n    <ChildLink\n      {...rest}\n      ref={ref}\n      childId={documentId}\n      childPayload={template?.params}\n      childParameters={{\n        type: documentType,\n        parentRefPath: pathToString(parentRefPath),\n        ...(template && {template: template?.id}),\n      }}\n    >\n      {children}\n    </ChildLink>\n  )\n})\n","import {useContext} from 'react'\nimport {PaneRouterContext} from 'sanity/_singletons'\n\nimport {type PaneRouterContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta\n */\nexport function usePaneRouter(): PaneRouterContextValue {\n  return useContext(PaneRouterContext)\n}\n","import {type SanityDocument, type SchemaType} from '@sanity/types'\nimport {type ReactNode, useCallback} from 'react'\nimport {\n  type FIXME,\n  getPublishedId,\n  PreviewCard,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n} from 'sanity'\n\nimport {PaneItemPreview} from '../paneItem/PaneItemPreview'\nimport {usePaneRouter} from '../paneRouter'\n\nconst EMPTY_ARRAY: [] = []\n\ninterface ReferencePreviewLinkProps {\n  onClick?: () => void\n  type: SchemaType & {icon?: any}\n  value: SanityDocument\n}\n\nexport function ReferencePreviewLink(props: ReferencePreviewLinkProps) {\n  const {onClick, type, value} = props\n  const publishedId = getPublishedId(value?._id)\n  const documentPresence = useDocumentPresence(publishedId)\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ReferenceChildLink} = usePaneRouter()\n\n  const Link = useCallback(\n    function LinkComponent(linkProps: {children: ReactNode}) {\n      return (\n        <ReferenceChildLink\n          documentId={value?._id}\n          documentType={type?.name}\n          parentRefPath={EMPTY_ARRAY}\n          {...linkProps}\n        />\n      )\n    },\n    [ReferenceChildLink, type?.name, value?._id],\n  )\n\n  return (\n    <PreviewCard __unstable_focusRing as={Link as FIXME} data-as=\"a\" onClick={onClick} radius={2}>\n      <PaneItemPreview\n        documentPreviewStore={documentPreviewStore}\n        icon={type?.icon}\n        layout=\"compact\"\n        presence={documentPresence?.length > 0 ? documentPresence : EMPTY_ARRAY}\n        schemaType={type}\n        value={value}\n      />\n    </PreviewCard>\n  )\n}\n","import {\n  ChevronDownIcon,\n  CopyIcon,\n  DocumentsIcon,\n  UnknownIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {Box, Card, Flex, Stack, Text, useToast} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {SanityDefaultPreview, Translate, useSchema, useTranslation} from 'sanity'\n\nimport {Button} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {\n  ChevronWrapper,\n  CrossDatasetReferencesDetails,\n  CrossDatasetReferencesSummary,\n  DocumentIdFlex,\n  OtherReferenceCount,\n  Table,\n} from './ConfirmDeleteDialogBody.styles'\nimport {ReferencePreviewLink} from './ReferencePreviewLink'\nimport {type ReferringDocuments} from './useReferringDocuments'\n\ntype DeletionConfirmationDialogBodyProps = Required<ReferringDocuments> & {\n  documentTitle: React.ReactNode\n  action: 'unpublish' | 'delete'\n  onReferenceLinkClick?: () => void\n}\n\n/**\n * The inner part of the `ConfirmDeleteDialog`. This is ran when both the\n * `crossDatasetReferences` and `internalReferences` are loaded.\n */\nexport function ConfirmDeleteDialogBody({\n  crossDatasetReferences,\n  internalReferences,\n  documentTitle,\n  totalCount,\n  action,\n  datasetNames,\n  hasUnknownDatasetNames,\n  onReferenceLinkClick,\n}: DeletionConfirmationDialogBodyProps) {\n  const schema = useSchema()\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const renderPreviewItem = useCallback(\n    (item: any) => {\n      const type = schema.get(item._type)\n      if (type) {\n        return <ReferencePreviewLink type={type} value={item} onClick={onReferenceLinkClick} />\n      }\n\n      return (\n        // Padding added to match the ReferencePreviewLink styling\n        <Box padding={2}>\n          <SanityDefaultPreview\n            icon={UnknownIcon}\n            title={t('confirm-delete-dialog.preview-item.preview-unavailable.title')}\n            subtitle={t('confirm-delete-dialog.preview-item.preview-unavailable.subtitle', {\n              documentId: item._id,\n            })}\n            layout=\"default\"\n          />\n        </Box>\n      )\n    },\n    [schema, t, onReferenceLinkClick],\n  )\n\n  if (internalReferences?.totalCount === 0 && crossDatasetReferences?.totalCount === 0) {\n    return (\n      <Text as=\"p\" size={1}>\n        <Translate\n          t={t}\n          i18nKey=\"confirm-delete-dialog.confirmation.text\"\n          context={action}\n          components={{DocumentTitle: () => <strong>{documentTitle}</strong>}}\n        />\n      </Text>\n    )\n  }\n\n  // We do some extra checks to handle cases where you have unavailable dataset\n  // name(s) due to permissions, both alone and in combination with known datasets\n\n  // This normalizes one or more undefined dataset names to the catch-all `unavailable`\n  const normalizedDatasetNames = [\n    ...datasetNames,\n    ...(hasUnknownDatasetNames ? ['unavailable'] : []),\n  ]\n\n  const datasetSubtitle = t('confirm-delete-dialog.cdr-summary.subtitle', {\n    count: normalizedDatasetNames.length,\n    datasets: normalizedDatasetNames.join(', '),\n    context: hasUnknownDatasetNames && normalizedDatasetNames.length ? 'unavailable' : '',\n  })\n\n  return (\n    <Flex direction=\"column\" gap={4}>\n      <Card padding={3} radius={2} tone=\"caution\" flex=\"none\">\n        <Flex>\n          <Text aria-hidden=\"true\" size={1}>\n            <WarningOutlineIcon />\n          </Text>\n          <Box flex={1} marginLeft={3}>\n            <Text size={1}>\n              <Translate\n                i18nKey=\"confirm-delete-dialog.referring-document-count.text\"\n                components={{DocumentTitle: () => documentTitle}}\n                t={t}\n                values={{count: totalCount}}\n              />\n            </Text>\n          </Box>\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referring-documents-descriptor.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n      <Card radius={2} shadow={1} flex=\"auto\" padding={2}>\n        <Flex direction=\"column\">\n          {internalReferences.totalCount > 0 && (\n            <Stack as=\"ul\" marginBottom={2} space={2} data-testid=\"internal-references\">\n              {internalReferences?.references.map((item) => (\n                <Box as=\"li\" key={item._id}>\n                  {renderPreviewItem(item)}\n                </Box>\n              ))}\n\n              {internalReferences.totalCount > internalReferences.references.length && (\n                <Box as=\"li\" padding={3}>\n                  <OtherReferenceCount {...internalReferences} />\n                </Box>\n              )}\n            </Stack>\n          )}\n\n          {crossDatasetReferences.totalCount > 0 && (\n            <CrossDatasetReferencesDetails\n              data-testid=\"cross-dataset-references\"\n              style={{\n                // only add the border if needed\n                borderTop:\n                  internalReferences.totalCount > 0\n                    ? '1px solid var(--card-shadow-outline-color)'\n                    : undefined,\n              }}\n            >\n              <CrossDatasetReferencesSummary>\n                <Card\n                  as=\"a\"\n                  marginTop={internalReferences.totalCount > 0 ? 2 : 0}\n                  radius={2}\n                  shadow={1}\n                  paddingY={1}\n                >\n                  <Flex align=\"center\" gap={3} paddingX={3} paddingY={1}>\n                    <Text size={1}>\n                      <DocumentsIcon />\n                    </Text>\n                    <Stack space={2}>\n                      <Text textOverflow=\"ellipsis\" size={1}>\n                        {t('confirm-delete-dialog.cdr-summary.title', {\n                          count: normalizedDatasetNames.length,\n                          documentCount: t('confirm-delete-dialog.cdr-summary.document-count', {\n                            count: crossDatasetReferences.totalCount,\n                          }),\n                        })}\n                      </Text>\n                      <Text title={datasetSubtitle} textOverflow=\"ellipsis\" size={1} muted>\n                        {datasetSubtitle}\n                      </Text>\n                    </Stack>\n                    <ChevronWrapper>\n                      <Text muted size={1}>\n                        <ChevronDownIcon />\n                      </Text>\n                    </ChevronWrapper>\n                  </Flex>\n                </Card>\n              </CrossDatasetReferencesSummary>\n\n              <Box overflow=\"auto\" paddingTop={2}>\n                <Table>\n                  <thead>\n                    <tr>\n                      <th>\n                        <Text muted size={1} style={{minWidth: '5rem'}} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.project-id.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.dataset.label')}\n                        </Text>\n                      </th>\n                      <th>\n                        <Text muted size={1} weight=\"medium\">\n                          {t('confirm-delete-dialog.cdr-table.document-id.label')}\n                        </Text>\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {crossDatasetReferences.references\n                      .filter((reference): reference is Required<typeof reference> => {\n                        return 'projectId' in reference\n                      })\n                      .map(({projectId, datasetName, documentId}, index) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <tr key={`${documentId}-${index}`}>\n                          <td>\n                            <Text size={1}>{projectId}</Text>\n                          </td>\n                          <td>\n                            <Text size={1}>{datasetName || 'unavailable'}</Text>\n                          </td>\n                          <td>\n                            <DocumentIdFlex align=\"center\" gap={2} justify=\"flex-end\">\n                              <Text textOverflow=\"ellipsis\" size={1}>\n                                {documentId || 'unavailable'}\n                              </Text>\n                              {documentId && (\n                                <Button\n                                  mode=\"bleed\"\n                                  icon={CopyIcon}\n                                  tooltipProps={{\n                                    content: t(\n                                      'confirm-delete-dialog.cdr-table.copy-id-button.tooltip',\n                                    ),\n                                  }}\n                                  // eslint-disable-next-line react/jsx-no-bind\n                                  onClick={() => {\n                                    navigator.clipboard.writeText(documentId).catch(() => {\n                                      toast.push({\n                                        status: 'error',\n                                        title: t(\n                                          'confirm-delete-dialog.cdr-table.id-copied-toast.title-failed',\n                                        ),\n                                      })\n                                    })\n                                  }}\n                                />\n                              )}\n                            </DocumentIdFlex>\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </Table>\n\n                <OtherReferenceCount {...crossDatasetReferences} />\n              </Box>\n            </CrossDatasetReferencesDetails>\n          )}\n        </Flex>\n      </Card>\n      <Box flex=\"none\">\n        <Text size={1}>\n          <Translate\n            i18nKey=\"confirm-delete-dialog.referential-integrity-disclaimer.text\"\n            t={t}\n            context={action}\n            components={{DocumentTitle: () => documentTitle}}\n          />\n        </Text>\n      </Box>\n    </Flex>\n  )\n}\n","import {type ClientError, type SanityClient} from '@sanity/client'\nimport {useMemo} from 'react'\nimport {EMPTY, fromEvent, type Observable, of, timer} from 'rxjs'\nimport {\n  catchError,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n} from 'rxjs/operators'\nimport {\n  type AvailabilityResponse,\n  createHookFromObservableFactory,\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  type DocumentStore,\n  getDraftId,\n  getPublishedId,\n  useClient,\n  useDocumentStore,\n} from 'sanity'\n\n// this is used in place of `instanceof` so the matching can be more robust and\n// won't have any issues with dual packages etc\n// https://nodejs.org/api/packages.html#dual-package-hazard\nfunction isClientError(e: unknown): e is ClientError {\n  if (typeof e !== 'object') return false\n  if (!e) return false\n  return 'statusCode' in e && 'response' in e\n}\n\nconst POLL_INTERVAL = 5000\n\n// only fetches when the document is visible\nlet visiblePoll$: Observable<number>\nconst getVisiblePoll$ = () => {\n  if (!visiblePoll$) {\n    visiblePoll$ = fromEvent(document, 'visibilitychange').pipe(\n      // add empty emission to have this fire on creation\n      startWith(null),\n      map(() => document.visibilityState === 'visible'),\n      distinctUntilChanged(),\n      switchMap((visible) =>\n        visible\n          ? // using timer instead of interval since timer will emit on creation\n            timer(0, POLL_INTERVAL)\n          : EMPTY,\n      ),\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n  }\n  return visiblePoll$\n}\n\nexport type ReferringDocuments = {\n  isLoading: boolean\n  totalCount: number\n  projectIds: string[]\n  datasetNames: string[]\n  hasUnknownDatasetNames: boolean\n  internalReferences?: {\n    totalCount: number\n    references: Array<{_id: string; _type: string}>\n  }\n  crossDatasetReferences?: {\n    totalCount: number\n    references: Array<{\n      /**\n       * The project ID of the document that is currently referencing the subject\n       * document. Unlike `documentId` and `datasetName`, this should always be\n       * defined.\n       */\n      projectId: string\n      /**\n       * The ID of the document that is currently referencing the subject\n       * document. This will be omitted if there is no access to the current\n       * project and dataset pair (e.g. if no `sanity-project-token` were\n       * configured)\n       */\n      documentId?: string\n      /**\n       * The dataset name that is currently referencing the subject document.\n       * This will be omitted if there is no access to the current project and\n       * dataset pair (e.g. if no `sanity-project-token` were configured)\n       */\n      datasetName?: string\n    }>\n  }\n}\n\nfunction getDocumentExistence(\n  documentId: string,\n  {versionedClient}: {versionedClient: SanityClient},\n): Observable<string | undefined> {\n  const draftId = getDraftId(documentId)\n  const publishedId = getPublishedId(documentId)\n  const requestOptions = {\n    uri: versionedClient.getDataUrl('doc', `${draftId},${publishedId}`),\n    json: true,\n    query: {excludeContent: 'true'},\n    tag: 'use-referring-documents.document-existence',\n  }\n  return versionedClient.observable.request<AvailabilityResponse>(requestOptions).pipe(\n    map(({omitted}) => {\n      const nonExistant = omitted.filter((doc) => doc.reason === 'existence')\n      if (nonExistant.length === 2) {\n        // None of the documents exist\n        return undefined\n      }\n\n      if (nonExistant.length === 0) {\n        // Both exist, so use the published one\n        return publishedId\n      }\n\n      // If the draft does not exist, use the published ID, and vice versa\n      return nonExistant.some((doc) => doc.id === draftId) ? publishedId : draftId\n    }),\n  )\n}\n\n/**\n * fetches the cross-dataset references using the client observable.request\n * method (for that requests can be automatically cancelled)\n */\nfunction fetchCrossDatasetReferences(\n  documentId: string,\n  context: {versionedClient: SanityClient},\n): Observable<ReferringDocuments['crossDatasetReferences']> {\n  const {versionedClient} = context\n\n  return getVisiblePoll$().pipe(\n    switchMap(() => getDocumentExistence(documentId, context)),\n    switchMap((checkDocumentId) => {\n      if (!checkDocumentId) {\n        return of({totalCount: 0, references: []})\n      }\n\n      const currentDataset = versionedClient.config().dataset\n\n      return versionedClient.observable\n        .request({\n          url: `/data/references/${currentDataset}/documents/${checkDocumentId}/to?excludeInternalReferences=true&excludePaths=true`,\n          tag: 'use-referring-documents.external',\n        })\n        .pipe(\n          catchError((e) => {\n            // it's possible that referencing document doesn't exist yet so the\n            // API will return a 404. In those cases, we want to catch and return\n            // a response with no references\n            if (isClientError(e) && e.statusCode === 404) {\n              return of({totalCount: 0, references: []})\n            }\n\n            throw e\n          }),\n        )\n    }),\n  )\n}\n\nconst useInternalReferences = createHookFromObservableFactory(\n  ([documentId, documentStore]: [string, DocumentStore]) => {\n    const referencesClause = '*[references($documentId)][0...100]{_id,_type}'\n    const totalClause = 'count(*[references($documentId)])'\n    const fetchQuery = `{\"references\":${referencesClause},\"totalCount\":${totalClause}}`\n    const listenQuery = '*[references($documentId)]'\n\n    return documentStore.listenQuery(\n      {fetch: fetchQuery, listen: listenQuery},\n      {documentId},\n      {tag: 'use-referring-documents', transitions: ['appear', 'disappear'], throttleTime: 5000},\n    ) as Observable<ReferringDocuments['internalReferences']>\n  },\n)\n\nconst useCrossDatasetReferences = createHookFromObservableFactory(\n  ([documentId, versionedClient]: [string, SanityClient]) => {\n    // (documentId: string, versionedClient: SanityClient) => {\n    return getVisiblePoll$().pipe(\n      switchMap(() =>\n        fetchCrossDatasetReferences(documentId, {\n          versionedClient,\n        }),\n      ),\n    )\n  },\n)\n\nexport function useReferringDocuments(documentId: string): ReferringDocuments {\n  const versionedClient = useClient(DEFAULT_STUDIO_CLIENT_OPTIONS)\n\n  const documentStore = useDocumentStore()\n  const publishedId = getPublishedId(documentId)\n\n  const [internalReferences, isInternalReferencesLoading] = useInternalReferences(\n    useMemo(() => [publishedId, documentStore], [documentStore, publishedId]),\n  )\n\n  const [crossDatasetReferences, isCrossDatasetReferencesLoading] = useCrossDatasetReferences(\n    useMemo(() => [publishedId, versionedClient], [publishedId, versionedClient]),\n  )\n\n  const projectIds = useMemo(() => {\n    return Array.from(\n      new Set(\n        crossDatasetReferences?.references\n          .map((crossDatasetReference) => crossDatasetReference.projectId)\n          .filter(Boolean),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const datasetNames = useMemo(() => {\n    return Array.from(\n      new Set<string>(\n        crossDatasetReferences?.references\n          // .filter((name) => typeof name === 'string')\n          .map((crossDatasetReference) => crossDatasetReference?.datasetName || '')\n          .filter((datasetName) => Boolean(datasetName) && datasetName !== ''),\n      ),\n    ).sort()\n  }, [crossDatasetReferences?.references])\n\n  const hasUnknownDatasetNames = useMemo(() => {\n    return Boolean(\n      crossDatasetReferences?.references.some(\n        (crossDatasetReference) => typeof crossDatasetReference.datasetName !== 'string',\n      ),\n    )\n  }, [crossDatasetReferences?.references])\n\n  return {\n    totalCount: (internalReferences?.totalCount || 0) + (crossDatasetReferences?.totalCount || 0),\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n    internalReferences,\n    crossDatasetReferences,\n    isLoading: isInternalReferencesLoading || isCrossDatasetReferencesLoading,\n  }\n}\n","import {Box, Flex} from '@sanity/ui'\nimport {useId, useMemo} from 'react'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DocTitle} from '../DocTitle'\nimport {ConfirmDeleteDialogBody} from './ConfirmDeleteDialogBody'\nimport {useReferringDocuments} from './useReferringDocuments'\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface ConfirmDeleteDialogProps {\n  /**\n   * Incoming document ID used to find other referencing documents. This\n   * field respects draft IDs (e.g. if you pass in a published ID when one\n   * doesn't exist the document title may not show up).\n   */\n  id: string\n  /**\n   * The schema typename of the incoming document\n   */\n  type: string\n  /**\n   * The name of the action being done. (e.g. the `'unpublish'` action requires\n   * the same document deletion confirmation).\n   */\n  action?: 'delete' | 'unpublish'\n  onCancel: () => void\n  onConfirm: () => void\n}\n\n/**\n * A confirmation dialog used to prevent unwanted document deletes. Loads all\n * the referencing internal and cross-data references prior to showing the\n * delete button.\n *\n * @internal\n */\nexport function ConfirmDeleteDialog({\n  id,\n  type,\n  action = 'delete',\n  onCancel,\n  onConfirm,\n}: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const dialogId = `deletion-confirmation-${useId()}`\n  const {\n    internalReferences,\n    crossDatasetReferences,\n    isLoading,\n    totalCount,\n    projectIds,\n    datasetNames,\n    hasUnknownDatasetNames,\n  } = useReferringDocuments(id)\n  const documentTitle = <DocTitle document={useMemo(() => ({_id: id, _type: type}), [id, type])} />\n  const showConfirmButton = !isLoading\n\n  return (\n    <Dialog\n      width={1}\n      id={dialogId}\n      header={t('confirm-delete-dialog.header.text', {context: action})}\n      footer={{\n        cancelButton: {\n          onClick: onCancel,\n          text: t('confirm-delete-dialog.cancel-button.text'),\n        },\n        confirmButton: showConfirmButton\n          ? {\n              text:\n                totalCount > 0\n                  ? t('confirm-delete-dialog.confirm-anyway-button.text', {context: action})\n                  : t('confirm-delete-dialog.confirm-button.text', {context: action}),\n              onClick: onConfirm,\n            }\n          : undefined,\n      }}\n      onClose={onCancel}\n      onClickOutside={onCancel}\n    >\n      <DialogBody>\n        {crossDatasetReferences && internalReferences && !isLoading ? (\n          <ConfirmDeleteDialogBody\n            crossDatasetReferences={crossDatasetReferences}\n            internalReferences={internalReferences}\n            documentTitle={documentTitle}\n            isLoading={isLoading}\n            totalCount={totalCount}\n            action={action}\n            projectIds={projectIds}\n            datasetNames={datasetNames}\n            hasUnknownDatasetNames={hasUnknownDatasetNames}\n            onReferenceLinkClick={onCancel}\n          />\n        ) : (\n          <LoadingContainer data-testid=\"loading-container\">\n            <LoadingBlock showText title={t('confirm-delete-dialog.loading.text')} />\n          </LoadingContainer>\n        )}\n      </DialogBody>\n    </Dialog>\n  )\n}\n","import {Box, Text} from '@sanity/ui'\nimport {type ComponentProps, useCallback, useId, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Dialog, ErrorBoundary} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {ConfirmDeleteDialog, type ConfirmDeleteDialogProps} from './ConfirmDeleteDialog'\n\nexport type {ConfirmDeleteDialogProps}\n\ntype ArgType<T> = T extends (arg: infer U) => unknown ? U : never\ntype ErrorInfo = ArgType<ComponentProps<typeof ErrorBoundary>['onCatch']>\n\n/** @internal */\nfunction ConfirmDeleteDialogContainer(props: ConfirmDeleteDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const id = useId()\n  const [error, setError] = useState<ErrorInfo | null>(null)\n  const handleRetry = useCallback(() => setError(null), [])\n\n  return error ? (\n    <Dialog\n      id={`dialog-error-${id}`}\n      data-testid=\"confirm-delete-error-dialog\"\n      header={t('confirm-delete-dialog.error.title.text')}\n      footer={{\n        confirmButton: {\n          text: t('confirm-delete-dialog.error.retry-button.text'),\n          onClick: handleRetry,\n          tone: 'default',\n        },\n      }}\n      onClose={props.onCancel}\n    >\n      <Box padding={4}>\n        <Text size={1}>{t('confirm-delete-dialog.error.message.text')}</Text>\n      </Box>\n    </Dialog>\n  ) : (\n    <ErrorBoundary onCatch={setError}>\n      <ConfirmDeleteDialog {...props} />\n    </ErrorBoundary>\n  )\n}\n\nexport {ConfirmDeleteDialogContainer as ConfirmDeleteDialog}\n","import {useEffect, useState} from 'react'\n\nexport function Delay({\n  children,\n  ms = 0,\n}: {\n  children?: React.JSX.Element | (() => React.JSX.Element)\n  ms?: number\n}): React.JSX.Element {\n  const [ready, setReady] = useState(ms <= 0)\n\n  useEffect(() => {\n    if (ms <= 0) {\n      return undefined\n    }\n\n    const timeoutId = setTimeout(() => setReady(true), ms)\n\n    return () => {\n      clearTimeout(timeoutId)\n    }\n  }, [ms])\n\n  if (!ready || !children) {\n    return <></>\n  }\n\n  return typeof children === 'function' ? children() : children\n}\n","/**\n * @internal\n */\nexport const PANE_DEBUG = false\n\n/**\n * @internal\n */\nexport const PANE_COLLAPSED_WIDTH = 51\n\n/**\n * @internal\n */\nexport const PANE_DEFAULT_MIN_WIDTH = PANE_COLLAPSED_WIDTH * 4\n","import {Layer} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {styled} from 'styled-components'\n\nimport {usePaneLayout} from './usePaneLayout'\n\nconst Root = styled(Layer)`\n  position: relative;\n  width: 1px;\n  min-width: 1px;\n\n  &:before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    background-color: var(--card-border-color);\n  }\n\n  &:not([data-disabled]) {\n    cursor: ew-resize;\n    width: 9px;\n    min-width: 9px;\n    margin: 0 -4px;\n\n    &:before {\n      left: 4px;\n    }\n\n    &:after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 9px;\n      bottom: 0;\n      background-color: var(--card-border-color);\n      opacity: 0;\n      transition: opacity 150ms;\n    }\n\n    &[data-dragging]:after,\n    &:hover:after {\n      opacity: 0.2;\n    }\n  }\n`\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneDivider({\n  disabled,\n  element,\n}: {\n  disabled?: boolean\n  element: HTMLElement | null\n}) {\n  const {resize} = usePaneLayout()\n  const [dragging, setDragging] = useState(false)\n\n  const handleMouseDown = useCallback(\n    (event: any) => {\n      if (!element) return\n\n      setDragging(true)\n\n      event.preventDefault()\n\n      const startX = event.pageX\n\n      resize('start', element, 0)\n\n      const handleMouseMove = (e: MouseEvent) => {\n        e.preventDefault()\n\n        const deltaX = e.pageX - startX\n\n        resize('move', element, deltaX)\n      }\n\n      const handleMouseUp = (e: MouseEvent) => {\n        e.preventDefault()\n\n        setDragging(false)\n\n        window.removeEventListener('mousemove', handleMouseMove)\n        window.removeEventListener('mouseup', handleMouseUp)\n\n        resize('end', element, 0)\n      }\n\n      window.addEventListener('mousemove', handleMouseMove)\n      window.addEventListener('mouseup', handleMouseUp)\n    },\n    [element, resize],\n  )\n\n  return (\n    <Root\n      data-disabled={disabled ? '' : undefined}\n      data-dragging={dragging ? '' : undefined}\n      onMouseDown={handleMouseDown}\n    />\n  )\n}\n","import {BoundaryElementProvider, Card, type CardProps, Code, Flex} from '@sanity/ui'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type HTMLProps,\n  type ReactNode,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {IsLastPaneProvider, LegacyLayerProvider} from 'sanity'\nimport {PaneContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {PANE_COLLAPSED_WIDTH, PANE_DEBUG, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {PaneDivider} from './PaneDivider'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneProps {\n  children?: ReactNode\n  currentMinWidth?: number\n  currentMaxWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  maxWidth?: number\n  selected?: boolean\n}\n\nconst Root = styled(Card)`\n  outline: none;\n\n  // NOTE: This will render a border to the right side of each pane\n  // without taking up physical space.\n  box-shadow: 1px 0 0 var(--card-border-color);\n`\n\n/**\n * @hidden\n * @internal\n */\n// eslint-disable-next-line complexity\nexport const Pane = forwardRef(function Pane(\n  props: PaneProps &\n    Omit<CardProps, 'as' | 'overflow'> &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'hidden' | 'id' | 'style'>,\n  forwardedRef: ForwardedRef<HTMLDivElement>,\n) {\n  const {\n    children,\n    currentMinWidth: currentMinWidthProp,\n    currentMaxWidth: currentMaxWidthProp,\n    flex: flexProp = 1,\n    id,\n    minWidth: minWidthProp,\n    maxWidth: maxWidthProp,\n    selected = false,\n    ...restProps\n  } = props\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const {\n    collapse,\n    collapsed: layoutCollapsed,\n    expand,\n    expandedElement,\n    mount,\n    panes,\n  } = usePaneLayout()\n  const pane = panes.find((p) => p.element === rootElement)\n  const paneIndex = pane && panes.indexOf(pane)\n  const nextPane = typeof paneIndex === 'number' ? panes[paneIndex + 1] : undefined\n  const isLast = paneIndex === panes.length - 1\n  const expanded = expandedElement === rootElement\n  const collapsed = layoutCollapsed ? false : pane?.collapsed || false\n  const nextCollapsed = nextPane?.collapsed || false\n  const ref = useRef<HTMLDivElement | null>(null)\n  const flex = pane?.flex ?? flexProp\n  const currentMinWidth = pane?.currentMinWidth ?? currentMinWidthProp\n  const currentMaxWidth = pane?.currentMaxWidth ?? currentMaxWidthProp\n\n  // Forward ref to parent\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(forwardedRef, () => ref.current)\n\n  const setRef = useCallback((refValue: HTMLDivElement | null) => {\n    setRootElement(refValue)\n    ref.current = refValue\n  }, [])\n\n  useLayoutEffect(() => {\n    if (!rootElement) return undefined\n    return mount(rootElement, {\n      currentMinWidth: currentMinWidthProp,\n      currentMaxWidth: currentMaxWidthProp,\n      flex: flexProp,\n      id,\n      minWidth: minWidthProp,\n      maxWidth: maxWidthProp,\n    })\n  }, [\n    currentMinWidthProp,\n    currentMaxWidthProp,\n    flexProp,\n    id,\n    minWidthProp,\n    maxWidthProp,\n    mount,\n    rootElement,\n  ])\n\n  const handleCollapse = useCallback(() => {\n    if (!rootElement) return\n    collapse(rootElement)\n  }, [collapse, rootElement])\n\n  const handleExpand = useCallback(() => {\n    if (!rootElement) return\n    expand(rootElement)\n  }, [expand, rootElement])\n\n  const contextValue = useMemo(\n    () => ({\n      collapse: handleCollapse,\n      collapsed: layoutCollapsed ? false : collapsed,\n      expand: handleExpand,\n      index: paneIndex,\n      isLast,\n      rootElement,\n    }),\n    [collapsed, handleCollapse, handleExpand, isLast, layoutCollapsed, paneIndex, rootElement],\n  )\n\n  const minWidth = useMemo(() => {\n    if (layoutCollapsed) {\n      return undefined\n    }\n\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (currentMinWidth === 0) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    if (isLast) {\n      return minWidthProp || PANE_DEFAULT_MIN_WIDTH\n    }\n\n    return currentMinWidth || minWidthProp || PANE_DEFAULT_MIN_WIDTH\n  }, [collapsed, currentMinWidth, isLast, layoutCollapsed, minWidthProp])\n\n  const maxWidth = useMemo(() => {\n    if (collapsed) return PANE_COLLAPSED_WIDTH\n\n    if (layoutCollapsed && isLast) {\n      return undefined\n    }\n\n    if (isLast) {\n      if (maxWidthProp) {\n        return currentMaxWidth ?? maxWidthProp\n      }\n\n      return undefined\n    }\n\n    return currentMaxWidth ?? maxWidthProp\n  }, [collapsed, currentMaxWidth, isLast, layoutCollapsed, maxWidthProp])\n\n  const hidden = layoutCollapsed && !isLast\n\n  const divider = useMemo(\n    () =>\n      !isLast &&\n      !layoutCollapsed && (\n        <LegacyLayerProvider zOffset=\"paneResizer\">\n          <PaneDivider disabled={collapsed || nextCollapsed} element={rootElement} />\n        </LegacyLayerProvider>\n      ),\n    [collapsed, isLast, layoutCollapsed, nextCollapsed, rootElement],\n  )\n\n  const style = useMemo(\n    () => ({\n      flex,\n      minWidth,\n      maxWidth: maxWidth === Infinity ? undefined : maxWidth,\n    }),\n    [flex, minWidth, maxWidth],\n  )\n\n  return (\n    <>\n      <LegacyLayerProvider zOffset=\"pane\">\n        <PaneContext.Provider value={contextValue}>\n          <IsLastPaneProvider isLastPane={isLast}>\n            <Root\n              data-testid=\"pane\"\n              data-ui=\"Pane\"\n              tone=\"inherit\"\n              hidden={hidden}\n              id={id}\n              overflow={layoutCollapsed ? undefined : 'hidden'}\n              {...restProps}\n              data-pane-collapsed={collapsed ? '' : undefined}\n              data-pane-index={paneIndex}\n              data-pane-selected={selected ? '' : undefined}\n              ref={setRef}\n              style={style}\n            >\n              {PANE_DEBUG && (\n                <Card padding={4} tone={expanded ? 'primary' : 'caution'}>\n                  <Code size={1}>\n                    {[\n                      `#${paneIndex}`,\n                      `collapsed=${collapsed}`,\n                      `currentMinWidth=${currentMinWidth}`,\n                      `currentMaxWidth=${currentMaxWidth}`,\n                      `flex=${flex}`,\n                      `minWidth=${minWidth}`,\n                      `maxWidth=${maxWidth}`,\n                    ].join('\\n')}\n                  </Code>\n                </Card>\n              )}\n\n              <BoundaryElementProvider element={rootElement}>\n                {!hidden && (\n                  <Flex direction=\"column\" height=\"fill\">\n                    {children}\n                  </Flex>\n                )}\n              </BoundaryElementProvider>\n            </Root>\n          </IsLastPaneProvider>\n        </PaneContext.Provider>\n      </LegacyLayerProvider>\n\n      {divider}\n    </>\n  )\n})\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  position: relative;\n  outline: none;\n`\n\nRoot.displayName = 'PaneContent__root'\n","import {useContext} from 'react'\nimport {PaneContext} from 'sanity/_singletons'\n\nimport {type PaneContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function usePane(): PaneContextValue {\n  const pane = useContext(PaneContext)\n\n  if (!pane) {\n    throw new Error('Pane: missing context value')\n  }\n\n  return pane\n}\n","import {type BoxOverflow} from '@sanity/ui'\nimport {type ElementType, type ForwardedRef, forwardRef, type HTMLProps} from 'react'\n\nimport {Root} from './PaneContent.styles'\nimport {usePane} from './usePane'\nimport {usePaneLayout} from './usePaneLayout'\n\ninterface PaneContentProps {\n  as?: ElementType | keyof React.JSX.IntrinsicElements\n  overflow?: BoxOverflow\n  padding?: number | number[]\n}\n\n/**\n * @hidden\n * @internal\n */\nexport const PaneContent = forwardRef(function PaneContent(\n  props: PaneContentProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {as, children, overflow, padding, ...restProps} = props\n  const {collapsed} = usePane()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  return (\n    <Root\n      data-testid=\"pane-content\"\n      forwardedAs={as}\n      {...restProps}\n      flex={1}\n      hidden={collapsed}\n      overflow={layoutCollapsed ? undefined : overflow}\n      padding={padding}\n      ref={ref}\n      tone=\"inherit\"\n    >\n      {children}\n    </Root>\n  )\n})\n","/**\n * Remove the spaces and lower case the string\n *\n * @param str - string to remove the spaces and lower case\n * @returns str with no spaces and lower case\n */\nexport function toLowerCaseNoSpaces(str: string | undefined): string {\n  if (!str) return ''\n  return str.toLocaleLowerCase().replaceAll(' ', '')\n}\n","import {CheckmarkIcon} from '@sanity/icons'\nimport {MenuDivider, Text} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {TooltipOfDisabled, useGetI18nText, useI18nText} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {MenuGroup, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {toLowerCaseNoSpaces} from '../../util/toLowerCaseNoSpaces'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\nconst MENU_GROUP_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'left-start',\n  portal: true,\n}\n\nexport function PaneMenuButtonItem(props: {\n  disabled?: boolean\n  isAfterGroup: boolean\n  node: _PaneMenuNode\n}) {\n  const {disabled, isAfterGroup, node} = props\n  const getI18nText = useGetI18nText('i18n' in node ? node : undefined)\n\n  if (node.type === 'divider') {\n    return <MenuDivider />\n  }\n\n  const {title} = getI18nText(node)\n\n  if (node.type === 'group') {\n    if (node.children.length === 0) {\n      return null\n    }\n\n    if (node.expanded) {\n      return (\n        <>\n          {isAfterGroup && <MenuDivider />}\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </>\n      )\n    }\n\n    return (\n      <>\n        {isAfterGroup && <MenuDivider />}\n        <MenuGroup\n          disabled={disabled}\n          icon={node.icon}\n          popover={MENU_GROUP_POPOVER_PROPS}\n          text={title}\n        >\n          {node.children.map((child, childIndex) => (\n            <PaneMenuButtonItem\n              disabled={disabled || Boolean(node.disabled)}\n              isAfterGroup={node.children[childIndex - 1]?.type === 'group'}\n              key={child.key}\n              node={child}\n            />\n          ))}\n        </MenuGroup>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {isAfterGroup && <MenuDivider />}\n      <PaneContextMenuItemResolver disabled={disabled} node={node} />\n    </>\n  )\n}\n\nfunction PaneContextMenuItemResolver(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {node} = props\n\n  if (node.intent) {\n    return <PaneContextIntentMenuItem {...props} intent={node.intent} />\n  }\n\n  return <PaneContextMenuItem {...props} />\n}\n\nfunction PaneContextMenuItem(props: {disabled?: boolean; node: _PaneMenuItem}) {\n  const {disabled, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        icon={node.icon}\n        iconRight={node.iconRight || (node.selected && CheckmarkIcon)}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClick={node.onAction}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n        data-testid={`action-${toLowerCaseNoSpaces(node.title)}`}\n      />\n    </TooltipOfDisabled>\n  )\n}\n\nfunction PaneContextIntentMenuItem(props: {\n  disabled?: boolean\n  intent: Intent\n  node: _PaneMenuItem\n}) {\n  const {disabled, intent, node} = props\n  const tooltipContent = typeof node.disabled === 'object' && (\n    <Text size={1}>{node.disabled.reason}</Text>\n  )\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {title} = useI18nText(node)\n\n  return (\n    <TooltipOfDisabled content={tooltipContent} placement=\"left\">\n      <MenuItem\n        as=\"a\"\n        disabled={disabled || Boolean(node.disabled)}\n        hotkeys={node.hotkey?.split('+')}\n        href={intentLink.href}\n        icon={node.icon}\n        iconRight={node.selected ? CheckmarkIcon : undefined}\n        onClick={handleClick}\n        pressed={node.selected}\n        text={title}\n        tone={node.tone}\n      />\n    </TooltipOfDisabled>\n  )\n}\n","import {Menu, MenuDivider} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {ContextMenuButton} from 'sanity'\n\nimport {MenuButton, type PopoverProps} from '../../../ui-components'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuItem, type _PaneMenuNode} from './types'\n\ninterface PaneContextMenuButtonProps {\n  nodes: _PaneMenuNode[]\n  actionsNodes?: ReactNode\n}\n\nconst CONTEXT_MENU_POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nfunction nodesHasTone(nodes: _PaneMenuNode[], tone: NonNullable<_PaneMenuItem['tone']>): boolean {\n  return nodes.some((node) => {\n    return (\n      (node.type === 'item' && node.tone === tone) ||\n      (node.type === 'group' && nodesHasTone(node.children, tone))\n    )\n  })\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneContextMenuButton(props: PaneContextMenuButtonProps) {\n  const {nodes, actionsNodes} = props\n  const id = useId()\n\n  const hasCritical = nodesHasTone(nodes, 'critical')\n  const hasCaution = nodesHasTone(nodes, 'caution')\n\n  return (\n    <MenuButton\n      button={\n        <ContextMenuButton\n          // eslint-disable-next-line no-nested-ternary\n          tone={hasCritical ? 'critical' : hasCaution ? 'caution' : undefined}\n          data-testid=\"pane-context-menu-button\"\n        />\n      }\n      id={id}\n      menu={\n        <Menu>\n          {actionsNodes && (\n            <>\n              {actionsNodes}\n              <MenuDivider />\n            </>\n          )}\n          {nodes.map((node, nodeIndex) => {\n            const isAfterGroup = nodes[nodeIndex - 1]?.type === 'group'\n            return <PaneMenuButtonItem isAfterGroup={isAfterGroup} key={node.key} node={node} />\n          })}\n        </Menu>\n      }\n      popover={CONTEXT_MENU_POPOVER_PROPS}\n    />\n  )\n}\n","import {Card, Layer} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Layer)`\n  position: sticky;\n  bottom: 0;\n`\n\nexport const RootCard = styled(Card)`\n  padding-bottom: env(safe-area-inset-bottom);\n`\n","import {Box} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Root, RootCard} from './PaneFooter.styles'\nimport {usePane} from './usePane'\n\ninterface PaneFooterProps {\n  children?: ReactNode\n  padding?: number | number[]\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneFooter = forwardRef(function PaneFooter(\n  props: PaneFooterProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {children, padding} = props\n  const {collapsed} = usePane()\n\n  return (\n    <LegacyLayerProvider zOffset=\"paneFooter\">\n      <Root data-testid=\"pane-footer\" hidden={collapsed} ref={ref}>\n        <RootCard tone=\"inherit\">\n          <Box padding={padding}>{children}</Box>\n        </RootCard>\n      </Root>\n    </LegacyLayerProvider>\n  )\n})\n","import {Card, Flex, Layer, Text, TextSkeleton, type Theme} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {css, styled} from 'styled-components'\n\ninterface RootProps {\n  $border?: boolean\n}\n\nexport const Root = styled(Layer)<RootProps>(({$border}) => {\n  return css`\n    line-height: 0;\n    position: sticky;\n    top: 0;\n\n    &:not([data-collapsed]):after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: -1px;\n      border-bottom: 1px solid ${$border ? 'var(--card-border-color)' : 'transparent'};\n      opacity: 1;\n    }\n  `\n})\n\nexport const Layout = styled(Flex)`\n  transform-origin: calc(51px / 2);\n\n  [data-collapsed] > div > & {\n    transform: rotate(90deg);\n  }\n`\n\nexport const TitleCard = styled(Card)(({theme}: {theme: Theme}) => {\n  const {fg, bg} = theme.sanity.color.card.enabled\n\n  // Disable color updates on hover\n  return css`\n    background-color: ${bg};\n\n    [data-ui='Text'] {\n      color: ${fg};\n    }\n  `\n})\n\nexport const TitleTextSkeleton = styled(TextSkeleton)`\n  width: 66%;\n  max-width: 175px;\n`\n\nexport const TitleText = styled(Text)`\n  cursor: default;\n  outline: none;\n`\n","import {Box, Card, Flex, LayerProvider, useElementRect} from '@sanity/ui'\nimport {type ForwardedRef, forwardRef, type ReactNode, useCallback, useMemo} from 'react'\nimport {LegacyLayerProvider} from 'sanity'\n\nimport {Layout, Root, TitleCard, TitleText, TitleTextSkeleton} from './PaneHeader.styles'\nimport {usePane} from './usePane'\n\nexport type TabsType = 'default' | 'dropdown'\n\n/**\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneHeaderProps {\n  actions?: ReactNode\n  backButton?: ReactNode\n  border?: boolean\n  contentAfter?: ReactNode\n  loading?: boolean\n  subActions?: ReactNode\n  tabIndex?: number\n  tabs?: ReactNode\n  title: ReactNode\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport const PaneHeader = forwardRef(function PaneHeader(\n  props: PaneHeaderProps,\n  ref: ForwardedRef<HTMLDivElement>,\n) {\n  const {actions, backButton, border, contentAfter, loading, subActions, tabs, tabIndex, title} =\n    props\n  const {collapse, collapsed, expand, rootElement: paneElement} = usePane()\n  const paneRect = useElementRect(paneElement || null)\n\n  const layoutStyle = useMemo(\n    () => ({\n      width: collapsed ? paneRect?.height || window.innerHeight : undefined,\n    }),\n    [collapsed, paneRect],\n  )\n\n  const handleTitleClick = useCallback(() => {\n    if (collapsed) return\n    collapse()\n  }, [collapse, collapsed])\n\n  const handleLayoutClick = useCallback(() => {\n    if (!collapsed) return\n    expand()\n  }, [collapsed, expand])\n\n  const showTabsOrSubActions = Boolean(!collapsed && (tabs || subActions))\n\n  return (\n    <LayerProvider zOffset={100}>\n      <Root\n        $border={border}\n        data-collapsed={collapsed ? '' : undefined}\n        data-testid=\"pane-header\"\n        ref={ref}\n      >\n        <LegacyLayerProvider zOffset=\"paneHeader\">\n          <Card data-collapsed={collapsed ? '' : undefined} tone=\"inherit\">\n            <Layout\n              gap={3}\n              onClick={handleLayoutClick}\n              padding={3}\n              sizing=\"border\"\n              style={layoutStyle}\n            >\n              {backButton && <Box flex=\"none\">{backButton}</Box>}\n\n              <TitleCard\n                __unstable_focusRing\n                flex={1}\n                onClick={handleTitleClick}\n                paddingLeft={backButton ? 1 : 2}\n                padding={2}\n                tabIndex={tabIndex}\n              >\n                {loading && (\n                  <Box>\n                    <TitleTextSkeleton animated radius={1} size={1} />\n                  </Box>\n                )}\n                {!loading && (\n                  <TitleText size={1} textOverflow=\"ellipsis\" weight=\"semibold\">\n                    {title}\n                  </TitleText>\n                )}\n              </TitleCard>\n\n              {actions && (\n                <Box hidden={collapsed}>\n                  <LegacyLayerProvider zOffset=\"paneHeader\">{actions}</LegacyLayerProvider>\n                </Box>\n              )}\n              {showTabsOrSubActions && (\n                <Flex align=\"center\" hidden={collapsed} overflow=\"auto\">\n                  <Box flex={1} marginRight={subActions ? 3 : 0}>\n                    {tabs}\n                  </Box>\n\n                  {subActions && subActions}\n                </Flex>\n              )}\n            </Layout>\n\n            {!collapsed && contentAfter && contentAfter}\n          </Card>\n        </LegacyLayerProvider>\n      </Root>\n    </LayerProvider>\n  )\n})\n","import {UnknownIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type MouseEvent, useCallback, useId} from 'react'\nimport {StatusButton, useI18nText, useTranslation} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\n\nimport {Button, MenuButton} from '../../../ui-components'\nimport {type Intent} from '../../structureBuilder'\nimport {PaneMenuButtonItem} from './PaneMenuButtonItem'\nimport {type _PaneMenuGroup, type _PaneMenuItem} from './types'\n\nfunction getDisabledReason(node: _PaneMenuItem) {\n  if (!node.disabled) {\n    return {disabledReason: undefined, ariaLabel: undefined, isDisabled: false}\n  }\n\n  /**\n   * This component supports receiving a `reason: string | react.ReactNode`.\n   * We are casting it as string, to avoid the ts error, as content will be rendered into the tooltip which only accepts string, but it won't crash if it's a ReactNode.\n   * For the aria label, we want to check if it's actually a string, to avoid generating an aria-label with the value `[object Object]`.\n   */\n  const disabledReason =\n    typeof node.disabled === 'object' ? (node.disabled.reason as string) : undefined\n  const ariaLabel =\n    typeof node.disabled === 'object' && typeof node.disabled?.reason === 'string'\n      ? node.disabled.reason\n      : 'This is disabled'\n\n  return {disabledReason, ariaLabel, isDisabled: Boolean(node.disabled)}\n}\nexport interface PaneHeaderActionButtonProps {\n  node: _PaneMenuItem | _PaneMenuGroup\n}\n\nexport function PaneHeaderActionButton(props: PaneHeaderActionButtonProps) {\n  const {node} = props\n\n  if (node.type === 'item') {\n    return <PaneHeaderMenuItemActionButton node={node} />\n  }\n\n  if (node.type === 'group') {\n    return <PaneHeaderMenuGroupActionButton node={node} />\n  }\n\n  console.warn('unknown menu node (expected `type: \"item\" | \"group\"`):', node)\n\n  return null\n}\n\nexport interface PaneHeaderMenuItemActionButtonProps {\n  node: _PaneMenuItem\n}\n\nexport function PaneHeaderMenuItemActionButton(props: PaneHeaderMenuItemActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n  const {t} = useTranslation()\n\n  if (node.intent) {\n    return <PaneHeaderActionIntentButton {...props} intent={node.intent} />\n  }\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      disabled={isDisabled}\n      icon={node.icon}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClick={node.onAction}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : title,\n      }}\n    />\n  )\n}\n\nfunction PaneHeaderActionIntentButton(props: {intent: Intent; node: _PaneMenuItem}) {\n  const {intent, node} = props\n  const intentLink = useIntentLink({intent: intent.type, params: intent.params})\n  const {t} = useTranslation()\n\n  const handleClick = useCallback(\n    (event: MouseEvent<HTMLButtonElement>) => {\n      intentLink.onClick(event)\n      node.onAction()\n    },\n    [intentLink, node],\n  )\n\n  const {disabledReason, ariaLabel, isDisabled} = getDisabledReason(node)\n\n  return (\n    <StatusButton\n      forwardedAs=\"a\"\n      disabled={isDisabled}\n      href={intentLink.href}\n      icon={node.icon}\n      onClick={handleClick}\n      selected={node.selected}\n      tone={node.tone}\n      aria-label={ariaLabel || node.title || t('status-button.aria-label')}\n      tooltipProps={{\n        hotkeys: !isDisabled && node.hotkey ? node.hotkey.split('+') : undefined,\n        content: isDisabled ? disabledReason : node.title,\n        placement: 'bottom',\n        portal: true,\n      }}\n    />\n  )\n}\n\nexport interface PaneHeaderMenuGroupActionButtonProps {\n  node: _PaneMenuGroup\n}\n\nfunction PaneHeaderMenuGroupActionButton(props: PaneHeaderMenuGroupActionButtonProps) {\n  const {node} = props\n  const {title} = useI18nText(node)\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          disabled={!!node.disabled}\n          icon={node.icon ?? UnknownIcon}\n          label={title}\n          mode=\"bleed\"\n          tooltipProps={{content: node.title, portal: true}}\n        />\n      }\n      id={useId()}\n      menu={\n        <Menu>\n          {node.children.map((child, idx) => {\n            return (\n              <PaneMenuButtonItem\n                disabled={Boolean(node.disabled)}\n                isAfterGroup={node.children[idx - 1]?.type === 'group'}\n                key={child.key}\n                node={child}\n              />\n            )\n          })}\n        </Menu>\n      }\n    />\n  )\n}\n","import {Card} from '@sanity/ui'\nimport {styled} from 'styled-components'\n\nexport const Root = styled(Card)`\n  transition: opacity 200ms;\n  position: relative;\n  z-index: 1;\n  padding-left: env(safe-area-inset-left);\n  padding-right: env(safe-area-inset-right);\n  opacity: 0;\n\n  &:not([hidden]) {\n    display: flex;\n  }\n\n  &:not([data-collapsed]) {\n    overflow: auto;\n  }\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n\n  &[data-resizing] {\n    pointer-events: none;\n  }\n`\n","import {PANE_DEFAULT_MIN_WIDTH} from '../constants'\nimport {type PaneConfigOpts, type PaneResizeCache} from '../types'\n\nexport function _calcPaneResize(\n  cache: PaneResizeCache,\n  left: PaneConfigOpts,\n  right: PaneConfigOpts,\n  deltaX: number,\n): {leftFlex: number; leftW: number; rightFlex: number; rightW: number} {\n  const sum = {\n    flex: cache.left.flex + cache.right.flex,\n    width: cache.left.width + cache.right.width,\n  }\n\n  const leftMinWidth = left.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n  const rightMinWidth = right.minWidth ?? PANE_DEFAULT_MIN_WIDTH\n\n  const leftMaxWidth = Math.min(left.maxWidth || Infinity, sum.width - rightMinWidth)\n  const rightMaxWidth = Math.min(right.maxWidth || Infinity, sum.width - leftMinWidth)\n\n  // Get min. delta X\n  let minDeltaX = leftMinWidth - cache.left.width\n  const rightMinDeltaX = cache.right.width - rightMaxWidth\n  if (minDeltaX < rightMinDeltaX) {\n    minDeltaX = rightMinDeltaX\n  }\n\n  // Get max. delta X\n  let maxDeltaX = cache.right.width - rightMinWidth\n  const leftMaxDeltaX = leftMaxWidth - cache.left.width\n  if (maxDeltaX > leftMaxDeltaX) {\n    maxDeltaX = leftMaxDeltaX\n  }\n\n  const _deltaX = Math.min(Math.max(deltaX, minDeltaX), maxDeltaX)\n\n  const leftW = cache.left.width + _deltaX\n  const rightW = cache.right.width - _deltaX\n\n  const leftFlex = (leftW / sum.width) * sum.flex\n  const rightFlex = (rightW / sum.width) * sum.flex\n\n  return {leftFlex, leftW, rightFlex, rightW}\n}\n","/**\n * @internal\n */\nexport function _getDOMPath(rootElement: HTMLElement, el: HTMLElement): number[] {\n  const path: number[] = []\n\n  let e = el\n\n  while (e !== rootElement) {\n    const parentElement = e.parentElement\n\n    if (!parentElement) return path\n\n    const children = Array.from(parentElement.childNodes)\n    const index = children.indexOf(e)\n\n    path.unshift(index)\n\n    if (parentElement === rootElement) {\n      return path\n    }\n\n    e = parentElement\n  }\n\n  return path\n}\n","import {_getDOMPath} from './_getDOMPath'\n\nconst EMPTY_PATH: number[] = []\n\n/**\n * @internal\n */\nexport function _sortElements(rootElement: HTMLElement, elements: HTMLElement[]): void {\n  // Create a map containing the DOM path of each pane element.\n  // The DOM path is relative to the `rootElement`, and is used in the next step for sorting.\n  const map = new WeakMap<HTMLElement, number[]>()\n\n  for (const element of elements) {\n    map.set(element, _getDOMPath(rootElement, element))\n  }\n\n  const _sortByElementPath = (a: HTMLElement, b: HTMLElement) => {\n    const _a = map.get(a) || EMPTY_PATH\n    const _b = map.get(b) || EMPTY_PATH\n\n    const len = Math.max(_a.length, _b.length)\n\n    // Loop until there are different indexes\n    for (let i = 0; i < len; i += 1) {\n      const aIndex = _a[i] || -1\n      const bIndex = _b[i] || -1\n\n      if (aIndex !== bIndex) {\n        return aIndex - bIndex\n      }\n    }\n\n    return 0\n  }\n\n  elements.sort(_sortByElementPath)\n}\n","import {PANE_COLLAPSED_WIDTH, PANE_DEFAULT_MIN_WIDTH} from './constants'\nimport {_calcPaneResize, _sortElements} from './helpers'\nimport {\n  type PaneConfigOpts,\n  type PaneData,\n  type PaneResizeCache,\n  type PaneResizeData,\n} from './types'\n\nexport interface PaneLayoutState {\n  expandedElement: HTMLElement | null\n  panes: PaneData[]\n  resizing: boolean\n}\n\nexport type PaneLayoutStateObserver = (state: PaneLayoutState) => void\n\nexport interface PaneLayoutController {\n  collapse: (element: HTMLElement) => void\n  expand: (element: HTMLElement) => void\n  mount: (element: HTMLElement, options: PaneConfigOpts) => () => void\n  resize: (type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) => void\n  setRootElement: (nextRootElement: HTMLElement | null) => void\n  setRootWidth: (nextRootWidth: number) => void\n  subscribe: (observer: PaneLayoutStateObserver) => () => void\n}\n\nexport function createPaneLayoutController(): PaneLayoutController {\n  const observers: PaneLayoutStateObserver[] = []\n  const elements: HTMLElement[] = []\n  const optionsMap = new WeakMap<HTMLElement, PaneConfigOpts & {original: PaneConfigOpts}>()\n  const userCollapsedElementSet = new Set<HTMLElement>()\n  const cache: Partial<PaneResizeCache> = {}\n\n  // Mutable internal state\n  let rootElement: HTMLElement | null = null\n  let rootWidth = 0\n  let expandedElement: HTMLElement | null = null\n  let resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n  let resizing = false\n\n  function collapse(element: HTMLElement) {\n    userCollapsedElementSet.add(element)\n\n    if (expandedElement === element) {\n      expandedElement = null\n    }\n\n    _notifyObservers()\n  }\n\n  function expand(element: HTMLElement) {\n    userCollapsedElementSet.delete(element)\n\n    expandedElement = element\n\n    _notifyObservers()\n  }\n\n  function mount(element: HTMLElement, options: PaneConfigOpts) {\n    optionsMap.set(element, {...options, original: options})\n\n    elements.push(element)\n\n    if (rootElement) {\n      _sortElements(rootElement, elements)\n    }\n\n    expand(element)\n\n    return () => {\n      const idx = elements.indexOf(element)\n\n      if (idx > -1) {\n        elements.splice(idx, 1)\n      }\n\n      optionsMap.delete(element)\n\n      _notifyObservers()\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  function resize(type: 'start' | 'move' | 'end', leftElement: HTMLElement, deltaX: number) {\n    const leftIndex = elements.indexOf(leftElement)\n    const leftOptions = optionsMap.get(leftElement)\n\n    if (!leftOptions) return\n\n    const rightElement = elements[leftIndex + 1]\n    const rightOptions = optionsMap.get(rightElement)\n\n    if (!rightOptions) return\n\n    if (type === 'start') {\n      resizing = true\n\n      cache.left = {\n        element: leftElement,\n        flex: leftOptions.flex || 1,\n        width: leftElement.offsetWidth,\n      }\n\n      cache.right = {\n        element: rightElement,\n        flex: rightOptions.flex || 1,\n        width: rightElement.offsetWidth,\n      }\n\n      _notifyObservers()\n    }\n\n    if (type === 'move' && cache.left && cache.right) {\n      resizeDataMap = new Map<HTMLElement, PaneResizeData>()\n\n      const {leftW, rightW, leftFlex, rightFlex} = _calcPaneResize(\n        cache as PaneResizeCache,\n        leftOptions,\n        rightOptions,\n        deltaX,\n      )\n\n      // update resize cache\n      resizeDataMap.set(leftElement, {flex: leftFlex, width: leftW})\n      resizeDataMap.set(rightElement, {flex: rightFlex, width: rightW})\n\n      _notifyObservers()\n    }\n\n    if (type === 'end') {\n      resizing = false\n\n      const leftResizeData = resizeDataMap.get(leftElement)\n      const rightResizeData = resizeDataMap.get(rightElement)\n\n      // Update left options\n      optionsMap.set(leftElement, {\n        ...leftOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: leftResizeData?.flex ?? leftOptions.flex,\n      })\n\n      // Update right options\n      optionsMap.set(rightElement, {\n        ...rightOptions,\n        currentMinWidth: 0,\n        currentMaxWidth: leftOptions.maxWidth ?? Infinity,\n        flex: rightResizeData?.flex ?? rightOptions.flex,\n      })\n\n      // Reset resize data map\n      resizeDataMap = new Map()\n\n      // Reset cache\n      delete cache.left\n      delete cache.right\n\n      _notifyObservers()\n    }\n  }\n\n  function setRootElement(nextRootElement: HTMLElement | null) {\n    rootElement = nextRootElement\n  }\n\n  function setRootWidth(nextRootWidth: number) {\n    rootWidth = nextRootWidth\n    _notifyObservers()\n  }\n\n  function subscribe(observer: PaneLayoutStateObserver) {\n    observers.push(observer)\n\n    return () => {\n      const idx = observers.push(observer)\n\n      if (idx > -1) {\n        observers.splice(idx, 1)\n      }\n    }\n  }\n\n  return {collapse, expand, mount, resize, setRootElement, setRootWidth, subscribe}\n\n  // eslint-disable-next-line complexity\n  function _notifyObservers() {\n    if (!rootWidth) return\n\n    // Create a reversed array of pane elements, so we can loop over them backwards.\n    // Place the expanded element first (so it has the least chance of being collapsed).\n    const _elements: HTMLElement[] = []\n    for (const element of elements) {\n      if (element !== expandedElement) {\n        _elements.unshift(element)\n      }\n    }\n    if (expandedElement) {\n      _elements.unshift(expandedElement)\n    }\n\n    const dataMap = new WeakMap<HTMLElement, PaneData>()\n    const len = _elements.length\n    const lastElement = _elements[0]\n    const collapsedWidth = (len - 1) * PANE_COLLAPSED_WIDTH\n\n    let remaingWidth = rootWidth - collapsedWidth\n\n    for (const element of _elements) {\n      const options = optionsMap.get(element)\n\n      if (!options) {\n        continue\n      }\n\n      const minWidth = options.currentMinWidth || options.minWidth || PANE_DEFAULT_MIN_WIDTH\n      const isLast = element === lastElement\n\n      // A pane is collapsed if:\n      // - it’s explictly collapsed by the user\n      const userCollapsed = userCollapsedElementSet.has(element)\n      // - it’s minimum width is larger than the remaining width\n      const sizeCollapsed = minWidth > remaingWidth\n      // - if the element is not the last (expanded pane)\n      const collapsed = isLast ? false : userCollapsed || sizeCollapsed\n\n      const resizeData = resizeDataMap.get(element)\n\n      // Collect pane data\n      dataMap.set(element, {\n        element: element,\n        collapsed: collapsed,\n        currentMinWidth: resizeData?.width ?? options.currentMinWidth,\n        currentMaxWidth: resizeData?.width ?? options.currentMaxWidth,\n        flex: resizeData?.flex ?? options.flex ?? 1,\n      })\n\n      // Update remaining width\n      if (collapsed) {\n        remaingWidth -= PANE_COLLAPSED_WIDTH\n      } else {\n        remaingWidth -= minWidth - PANE_COLLAPSED_WIDTH\n      }\n    }\n\n    const panes: PaneData[] = []\n\n    for (const element of elements) {\n      const data = dataMap.get(element)\n\n      if (data) panes.push(data)\n    }\n\n    for (const observer of observers) {\n      observer({\n        expandedElement: expandedElement || elements[elements.length - 1] || null,\n        panes,\n        resizing,\n      })\n    }\n  }\n}\n","import {type CardProps, useElementRect} from '@sanity/ui'\nimport {type HTMLProps, useEffect, useMemo, useState} from 'react'\nimport {PaneLayoutContext} from 'sanity/_singletons'\n\nimport {Root} from './PaneLayout.styles'\nimport {createPaneLayoutController, type PaneLayoutState} from './paneLayoutController'\nimport {type PaneLayoutContextValue} from './types'\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport interface PaneLayoutProps {\n  minWidth?: number\n  onCollapse?: () => void\n  onExpand?: () => void\n}\n\n/**\n *\n * @hidden\n * @beta This API will change. DO NOT USE IN PRODUCTION.\n */\nexport function PaneLayout(\n  props: PaneLayoutProps &\n    CardProps &\n    Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref' | 'wrap'>,\n) {\n  const {children, minWidth, onCollapse, onExpand, ...restProps} = props\n  const [controller] = useState(() => createPaneLayoutController())\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const rootRect = useElementRect(rootElement)\n  const width = rootRect?.width || 0\n  const collapsed = width === undefined || !minWidth ? undefined : width < minWidth\n  const [state, setState] = useState<PaneLayoutState>({\n    expandedElement: null,\n    panes: [],\n    resizing: false,\n  })\n\n  // Set root element\n  useEffect(() => controller.setRootElement(rootElement), [controller, rootElement])\n\n  // Set root size\n  useEffect(() => controller.setRootWidth(width), [controller, width])\n\n  // Subscribe to state changes\n  useEffect(() => controller.subscribe(setState), [controller])\n\n  // Call the `onCollapse` and `onExpand` callbacks as the `collapsed` boolean changes\n  useEffect(() => {\n    if (collapsed === undefined) return\n    if (collapsed && onCollapse) onCollapse()\n    if (!collapsed && onExpand) onExpand()\n  }, [collapsed, onCollapse, onExpand])\n\n  // This is the context value that gives each pane the information they need\n  const paneLayout: PaneLayoutContextValue = useMemo(\n    () => ({\n      collapse: controller.collapse,\n      collapsed,\n      expand: controller.expand,\n      expandedElement: state.expandedElement,\n      mount: controller.mount,\n      panes: state.panes,\n      resize: controller.resize,\n      resizing: state.resizing,\n    }),\n    [collapsed, controller, state.expandedElement, state.panes, state.resizing],\n  )\n\n  return (\n    <PaneLayoutContext.Provider value={paneLayout}>\n      <Root\n        data-ui=\"PaneLayout\"\n        {...restProps}\n        data-collapsed={collapsed ? '' : undefined}\n        // The `data-resizing` attribute is used to improve cursor behavior\n        data-resizing={state.resizing ? '' : undefined}\n        // The `data-mounted` attribute is used to fade in the layout and prevent flash of\n        // non-collapsed panes\n        data-mounted={width ? '' : undefined}\n        ref={setRootElement}\n      >\n        {children}\n      </Root>\n    </PaneLayoutContext.Provider>\n  )\n}\n","/* eslint-disable camelcase */\n\nimport {negate} from 'lodash'\n\nimport {type _PaneMenuGroup, type _PaneMenuItem, type _PaneMenuNode} from './components/pane/types'\nimport {type DocumentFieldMenuActionNode, type PaneMenuItem, type PaneMenuItemGroup} from './types'\n\nexport function isMenuNodeButton(node: _PaneMenuNode): node is _PaneMenuItem | _PaneMenuGroup {\n  return (node.type === 'item' || node.type === 'group') && node.renderAsButton\n}\n\nexport const isNotMenuNodeButton = negate(isMenuNodeButton)\n\nexport function resolveMenuNodes(params: {\n  actionHandler: (item: PaneMenuItem) => void\n  fieldActions?: DocumentFieldMenuActionNode[]\n  menuItems: PaneMenuItem[]\n  menuItemGroups: PaneMenuItemGroup[]\n}): _PaneMenuNode[] {\n  const {fieldActions = [], menuItems, menuItemGroups} = params\n\n  const nodes: _PaneMenuNode[] = []\n\n  let keyOffset = 0\n\n  for (let i = 0; i < fieldActions.length; i += 1) {\n    const a = fieldActions[i]\n\n    nodes.push(mapFieldActionToPaneMenuNode(a, `${i}-${a.type}`))\n  }\n\n  keyOffset += nodes.length\n\n  const groups: _PaneMenuGroup[] = []\n\n  for (const itemGroup of menuItemGroups) {\n    const group = groups.find((g) => g.key === itemGroup.id)\n\n    if (!group) {\n      groups.push({\n        type: 'group',\n        key: itemGroup.id,\n\n        children: [],\n        expanded: true,\n        renderAsButton: false,\n        title: itemGroup.title,\n        i18n: itemGroup.i18n,\n      })\n    }\n  }\n\n  const ungroupedItems: _PaneMenuItem[] = []\n\n  for (let i = 0; i < menuItems.length; i += 1) {\n    const item = menuItems[i]\n\n    let group = item.group && groups.find((g) => g.key === item.group)\n\n    if (item.group && !group) {\n      group = {\n        type: 'group',\n        key: item.group,\n\n        expanded: true,\n        icon: item.icon,\n        title: item.group,\n        children: [],\n        renderAsButton: false,\n      }\n      groups.push(group)\n    }\n\n    if (group) {\n      group.children.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    } else {\n      ungroupedItems.push({\n        type: 'item',\n        key: `${keyOffset + i}-item`,\n\n        hotkey: item.shortcut,\n        icon: item.icon,\n        intent: item.intent,\n        onAction: () => params.actionHandler(item),\n        renderAsButton: item.showAsAction ?? false,\n        selected: item.selected,\n        title: item.title,\n        i18n: item.i18n,\n        tone: item.tone,\n      })\n    }\n  }\n\n  return [...ungroupedItems, ...groups, ...nodes]\n}\n\nfunction mapFieldActionToPaneMenuNode(a: DocumentFieldMenuActionNode, key: string): _PaneMenuNode {\n  if (a.type === 'divider') {\n    return {\n      type: 'divider',\n      key,\n    }\n  }\n\n  if (a.type === 'group') {\n    return {\n      type: 'group',\n      key,\n\n      children: a.children.map((child, childIdx) =>\n        mapFieldActionToPaneMenuNode(child, `${key}-${childIdx}-${child.type}`),\n      ),\n      disabled: a.disabled,\n      expanded: a.expanded ?? true,\n      icon: a.icon,\n      title: a.title,\n      i18n: a.i18n,\n      renderAsButton: a.renderAsButton ?? false,\n    }\n  }\n\n  return {\n    type: 'item',\n    key,\n    intent: a.intent,\n    disabled: a.disabled,\n    icon: a.icon,\n    iconRight: a.iconRight,\n    onAction: a.onAction,\n    renderAsButton: a.renderAsButton ?? false,\n    selected: a.selected,\n    title: a.title,\n    i18n: a.i18n,\n    tone: a.tone,\n  }\n}\n","import {type ComponentProps, type ForwardedRef, forwardRef, type ReactNode, useMemo} from 'react'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, type ButtonProps} from '../../ui-components'\nimport {type PaneMenuItem} from '../types'\n\ntype RouterIntent = NonNullable<PaneMenuItem['intent']>\n\nexport const IntentButton = forwardRef(function IntentButton(\n  props: {\n    intent: RouterIntent\n  } & ButtonProps &\n    Omit<ComponentProps<typeof Button>, 'as' | 'href' | 'type'>,\n  ref: ForwardedRef<HTMLAnchorElement>,\n) {\n  const {intent, ...restProps} = props\n\n  const Link = useMemo(\n    () =>\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      forwardRef(function Link(\n        linkProps: {children: ReactNode},\n        linkRef: ForwardedRef<HTMLAnchorElement>,\n      ) {\n        return (\n          <IntentLink\n            {...linkProps}\n            intent={intent.type}\n            params={intent.params}\n            ref={linkRef}\n            searchParams={intent.searchParams}\n          />\n        )\n      }),\n    [intent],\n  )\n\n  return props.disabled ? (\n    <Button {...restProps} as=\"a\" role=\"link\" aria-disabled=\"true\" />\n  ) : (\n    <Button {...restProps} as={Link} data-as=\"a\" ref={ref as ForwardedRef<HTMLButtonElement>} />\n  )\n})\n","import {type ComponentProps, type ReactNode} from 'react'\nimport {InsufficientPermissionsMessage, useCurrentUser, useTranslation} from 'sanity'\n\nimport {Tooltip} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\n\ninterface InsufficientPermissionsMessageTooltipProps {\n  reveal: boolean\n  /**\n   * delegates to `InsufficientPermissionsMessage`'s `context` prop\n   * @see InsufficientPermissionsMessage\n   */\n  context: ComponentProps<typeof InsufficientPermissionsMessage>['context']\n  loading: boolean\n  children: ReactNode\n}\n\nexport function InsufficientPermissionsMessageTooltip({\n  reveal,\n  context,\n  loading,\n  children,\n}: InsufficientPermissionsMessageTooltipProps) {\n  const currentUser = useCurrentUser()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!reveal) {\n    return <>{children}</>\n  }\n\n  return (\n    <Tooltip\n      content={\n        loading ? (\n          t('insufficient-permissions-message-tooltip.loading-text')\n        ) : (\n          <InsufficientPermissionsMessage context={context} currentUser={currentUser} />\n        )\n      }\n      portal\n    >\n      {/* this wrapping div is to allow mouse events */}\n      {/* while the child element is disabled */}\n      <div>{children}</div>\n    </Tooltip>\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {Menu} from '@sanity/ui'\nimport {type ComponentProps, type ForwardedRef, forwardRef, useMemo} from 'react'\nimport {\n  type InitialValueTemplateItem,\n  isPublishedPerspective,\n  type ReleaseId,\n  type Template,\n  type TemplatePermissionsResult,\n  useGetI18nText,\n  useIsReleaseActive,\n  usePerspective,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\n\nimport {Button, MenuButton, MenuItem, type PopoverProps} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {IntentButton} from '../IntentButton'\nimport {InsufficientPermissionsMessageTooltip} from './InsufficientPermissionsMessageTooltip'\n\nexport type PaneHeaderIntentProps = ComponentProps<typeof IntentButton>['intent']\n\nconst POPOVER_PROPS: PopoverProps = {\n  constrainSize: true,\n  placement: 'bottom',\n  portal: true,\n}\n\nconst getIntent = (\n  templates: Template[],\n  item: InitialValueTemplateItem,\n  version?: ReleaseId,\n): PaneHeaderIntentProps | null => {\n  const typeName = templates.find((t) => t.id === item.templateId)?.schemaType\n  if (!typeName) return null\n\n  const baseParams = {\n    template: item.templateId,\n    type: typeName,\n    version,\n    id: item.initialDocumentId,\n  }\n\n  return {\n    type: 'create',\n    params: item.parameters ? [baseParams, item.parameters] : baseParams,\n    searchParams: version ? [['perspective', version]] : undefined,\n  }\n}\n\ninterface PaneHeaderCreateButtonProps {\n  templateItems: InitialValueTemplateItem[]\n}\n\nexport function PaneHeaderCreateButton({templateItems}: PaneHeaderCreateButtonProps) {\n  const templates = useTemplates()\n  const {selectedReleaseId, selectedPerspective} = usePerspective()\n  const isReleaseActive = useIsReleaseActive()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n  const getI18nText = useGetI18nText([...templateItems, ...templates])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n\n  const nothingGranted = useMemo(() => {\n    return (\n      !isTemplatePermissionsLoading &&\n      templatePermissions?.every((permission) => !permission.granted)\n    )\n  }, [isTemplatePermissionsLoading, templatePermissions])\n\n  const permissionsById = useMemo(() => {\n    if (!templatePermissions) return {}\n    return templatePermissions.reduce<Record<string, TemplatePermissionsResult | undefined>>(\n      (acc, permission) => {\n        acc[permission.id] = permission\n        return acc\n      },\n      {},\n    )\n  }, [templatePermissions])\n\n  if (nothingGranted) {\n    return (\n      <InsufficientPermissionsMessageTooltip\n        context=\"create-document-type\"\n        reveal\n        loading={isTemplatePermissionsLoading}\n      >\n        <Button\n          aria-label={t('pane-header.disabled-created-button.aria-label')}\n          icon={AddIcon}\n          data-testid=\"action-intent-button\"\n          disabled\n          mode=\"bleed\"\n          // This button handles the tooltip in a special way, won't reuse the forced tooltip.\n          tooltipProps={null}\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  const disabledByPerspectiveTooltipProps = {\n    content: tCore(\n      isPublishedPerspective(selectedPerspective)\n        ? 'new-document.disabled-published.tooltip'\n        : 'new-document.disabled-release.tooltip',\n    ),\n  }\n\n  if (templateItems.length === 1) {\n    const firstItem = templateItems[0]\n    const permissions = permissionsById[firstItem.id]\n    const disabled = !permissions?.granted || !isReleaseActive\n    const intent = getIntent(templates, firstItem, selectedReleaseId)\n    if (!intent) return null\n\n    return (\n      <InsufficientPermissionsMessageTooltip\n        reveal={disabled}\n        loading={isTemplatePermissionsLoading}\n        context=\"create-document-type\"\n      >\n        <IntentButton\n          aria-label={getI18nText(firstItem).title}\n          icon={firstItem.icon || AddIcon}\n          intent={intent}\n          mode=\"bleed\"\n          disabled={disabled}\n          data-testid=\"action-intent-button\"\n          tooltipProps={\n            disabled\n              ? disabledByPerspectiveTooltipProps\n              : {content: t('pane-header.create-new-button.tooltip')}\n          }\n        />\n      </InsufficientPermissionsMessageTooltip>\n    )\n  }\n\n  return (\n    <MenuButton\n      button={\n        <Button\n          icon={AddIcon}\n          mode=\"bleed\"\n          disabled={!isReleaseActive}\n          data-testid=\"multi-action-intent-button\"\n          tooltipProps={\n            isReleaseActive\n              ? {content: t('pane-header.create-new-button.tooltip')}\n              : disabledByPerspectiveTooltipProps\n          }\n        />\n      }\n      id=\"create-menu\"\n      menu={\n        <Menu>\n          {templateItems.map((item, itemIndex) => {\n            const permissions = permissionsById[item.id]\n            const disabled = !permissions?.granted\n            const intent = getIntent(templates, item, selectedReleaseId)\n            const template = templates.find((i) => i.id === item.templateId)\n            if (!template || !intent) return null\n\n            const Link = forwardRef((linkProps, linkRef: ForwardedRef<never>) =>\n              disabled ? (\n                <button type=\"button\" disabled {...linkProps} ref={linkRef} />\n              ) : (\n                <IntentLink\n                  {...linkProps}\n                  intent={intent.type}\n                  params={intent.params}\n                  searchParams={intent.searchParams}\n                  ref={linkRef}\n                />\n              ),\n            )\n\n            Link.displayName = 'Link'\n\n            const {title} = getI18nText({\n              ...item,\n              // replace the title with the template title\n              title: item.title || getI18nText(template).title,\n            })\n\n            return (\n              <InsufficientPermissionsMessageTooltip\n                context=\"create-document-type\"\n                key={item.id}\n                reveal={disabled}\n                loading={isTemplatePermissionsLoading}\n              >\n                <MenuItem\n                  as={Link}\n                  data-as={disabled ? 'button' : 'a'}\n                  text={title}\n                  aria-label={\n                    disabled ? t('pane-header.disabled-created-button.aria-label') : title\n                  }\n                  disabled={disabled}\n                  data-testid={`action-intent-button-${itemIndex}`}\n                />\n              </InsufficientPermissionsMessageTooltip>\n            )\n          })}\n        </Menu>\n      }\n      popover={POPOVER_PROPS}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {uniqBy} from 'lodash'\nimport {memo, useCallback, useMemo} from 'react'\nimport {EMPTY_ARRAY, EMPTY_OBJECT, type InitialValueTemplateItem, useTemplates} from 'sanity'\n\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../menuNodes'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {PaneContextMenuButton} from '../pane/PaneContextMenuButton'\nimport {PaneHeaderActionButton} from '../pane/PaneHeaderActionButton'\nimport {PaneHeaderCreateButton} from './PaneHeaderCreateButton'\n\nfunction isNonNullable<T>(value: T): value is NonNullable<T> {\n  return value !== null && value !== undefined\n}\n\n/**\n * hashes an object to a string where the order of the keys don't matter\n */\nconst hashObject = (value: unknown) => {\n  const sortObject = (v: unknown): unknown => {\n    if (typeof v !== 'object' || !v) return v\n    if (Array.isArray(v)) return v.map(sortObject)\n    return Object.entries(v).sort(([keyA], [keyB]) => keyA.localeCompare(keyB, 'en'))\n  }\n\n  const normalize = (v: unknown) => JSON.parse(JSON.stringify(v))\n\n  return JSON.stringify(sortObject(normalize(value)))\n}\n\ninterface PaneHeaderActionsProps {\n  initialValueTemplateItems?: InitialValueTemplateItem[]\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n}\n\nexport const PaneHeaderActions = memo(function PaneHeaderActions(props: PaneHeaderActionsProps) {\n  const {\n    initialValueTemplateItems: initialValueTemplateItemsFromStructure = EMPTY_ARRAY,\n    menuItems = EMPTY_ARRAY,\n    menuItemGroups = EMPTY_ARRAY,\n    actionHandlers = EMPTY_OBJECT as Record<string, StructureToolPaneActionHandler>,\n  } = props\n\n  const templates = useTemplates()\n\n  const handleAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (typeof item.action === 'string' && !(item.action in actionHandlers)) {\n        console.warn('No handler for action:', item.action)\n        return false\n      }\n\n      const handler =\n        // eslint-disable-next-line no-nested-ternary\n        typeof item.action === 'function'\n          ? item.action\n          : typeof item.action === 'string'\n            ? actionHandlers[item.action]\n            : null\n\n      if (handler) {\n        handler(item.params as Record<string, string>)\n        return true\n      }\n\n      return false\n    },\n    [actionHandlers],\n  )\n\n  const menuNodes = useMemo(\n    () =>\n      resolveMenuNodes({\n        actionHandler: handleAction,\n        menuItemGroups,\n        menuItems: menuItems\n          // remove items with `create` intents because those will get combined\n          // into one action button (see `initialValueTemplateItemFromMenuItems`)\n          .filter((item) => item.intent?.type !== 'create'),\n      }),\n    [handleAction, menuItemGroups, menuItems],\n  )\n\n  const actionNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n  const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n\n  const initialValueTemplateItemFromMenuItems = useMemo(() => {\n    return menuItems\n      .map((item, menuItemIndex) => {\n        if (item.intent?.type !== 'create') return null\n\n        const {params} = item.intent\n        if (!params) return null\n\n        const intentParams = Array.isArray(params) ? params[0] : params\n        const templateParams = Array.isArray(params) ? params[1] : undefined\n\n        // fallback to the schema type name as the template ID.\n        // by default, the initial template values are populated from every\n        // document type in the schema\n        const templateId = intentParams.template || intentParams.type\n        if (!templateId) return null\n\n        // eslint-disable-next-line max-nested-callbacks\n        const template = templates.find((t) => t.id === templateId)\n        // the template doesn't exist then the action might be disabled\n        if (!template) return null\n\n        const initialDocumentId = intentParams.id\n\n        return {\n          item,\n          template,\n          templateParams,\n          menuItemIndex,\n          initialDocumentId,\n        }\n      })\n      .filter(isNonNullable)\n      .map(({initialDocumentId, item, template, menuItemIndex, templateParams}) => {\n        const initialValueTemplateItem: InitialValueTemplateItem = {\n          id: `menuItem${menuItemIndex}`,\n          initialDocumentId,\n          templateId: template.id,\n          type: 'initialValueTemplateItem',\n          title: item.title || template.title,\n          i18n: item.i18n || template.i18n,\n          icon: item.icon as InitialValueTemplateItem['icon'],\n          description: template.description,\n          parameters: templateParams,\n          schemaType: template.schemaType,\n        }\n\n        return initialValueTemplateItem\n      })\n  }, [menuItems, templates])\n\n  const combinedInitialValueTemplates = useMemo(() => {\n    // this de-dupes create actions\n    return uniqBy(\n      [...initialValueTemplateItemFromMenuItems, ...initialValueTemplateItemsFromStructure],\n      (item) => hashObject([item.initialDocumentId, item.templateId, item.parameters]),\n    )\n  }, [initialValueTemplateItemFromMenuItems, initialValueTemplateItemsFromStructure])\n\n  return (\n    <Flex gap={1}>\n      {combinedInitialValueTemplates.length > 0 && (\n        <PaneHeaderCreateButton templateItems={combinedInitialValueTemplates} />\n      )}\n\n      {actionNodes.map((node) => (\n        <PaneHeaderActionButton key={node.key} node={node} />\n      ))}\n\n      {contextMenuNodes.length > 0 && <PaneContextMenuButton nodes={contextMenuNodes} />}\n    </Flex>\n  )\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {type GeneralPreviewLayoutKey, SanityDefaultPreview, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport interface MissingSchemaTypeProps {\n  layout?: GeneralPreviewLayoutKey\n  value: SanityDocument\n}\n\nexport function MissingSchemaType(props: MissingSchemaTypeProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {layout, value} = props\n\n  return (\n    <SanityDefaultPreview\n      title={\n        <em>\n          <Translate\n            t={t}\n            i18nKey=\"pane-item.missing-schema-type.title\"\n            components={{Code: 'code'}}\n            values={{documentType: value._type}}\n          />\n        </em>\n      }\n      subtitle={\n        <Translate\n          t={t}\n          i18nKey=\"pane-item.missing-schema-type.subtitle\"\n          components={{Code: 'code'}}\n          values={{documentId: value._id}}\n        />\n      }\n      // eslint-disable-next-line react/jsx-no-bind\n      media={() => <WarningOutlineIcon />}\n      layout={layout}\n    />\n  )\n}\n","import {ChevronRightIcon, DocumentIcon, FolderIcon} from '@sanity/icons'\nimport {\n  isSanityDocument,\n  type PreviewValue,\n  type SanityDocument,\n  type SchemaType,\n} from '@sanity/types'\nimport {Box, type CardProps, Text} from '@sanity/ui'\nimport {\n  type ComponentType,\n  type MouseEvent,\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  type FIXME,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  PreviewCard,\n  SanityDefaultPreview,\n  useDocumentPresence,\n  useDocumentPreviewStore,\n  useEditState,\n  useSchema,\n} from 'sanity'\n\nimport {MissingSchemaType} from '../MissingSchemaType'\nimport {usePaneRouter} from '../paneRouter'\nimport {PaneItemPreview} from './PaneItemPreview'\n\ninterface PaneItemProps {\n  id: string\n  layout?: GeneralPreviewLayoutKey\n  icon?: ComponentType<any> | false\n  pressed?: boolean\n  selected?: boolean\n  title?: string\n  value?: PreviewValue | SanityDocument\n  schemaType?: SchemaType\n  margin?: CardProps['margin']\n  marginBottom?: CardProps['marginBottom']\n  marginTop?: CardProps['marginTop']\n}\n\n/**\n * Return `false` if we explicitly disable the icon.\n * Otherwise return the passed icon or the schema type icon as a backup.\n */\nexport function getIconWithFallback(\n  icon: ComponentType<any> | false | undefined,\n  schemaType: SchemaType | undefined,\n  defaultIcon: ComponentType<any>,\n): ComponentType<any> | false {\n  if (icon === false) {\n    return false\n  }\n\n  return icon || (schemaType && schemaType.icon) || defaultIcon || false\n}\n\nexport function PaneItem(props: PaneItemProps) {\n  const {\n    icon,\n    id,\n    layout = 'default',\n    pressed,\n    schemaType,\n    selected,\n    title,\n    value,\n    margin,\n    marginBottom,\n    marginTop,\n  } = props\n  const schema = useSchema()\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {ChildLink} = usePaneRouter()\n  const documentPresence = useDocumentPresence(id)\n  const hasSchemaType = Boolean(schemaType && schemaType.name && schema.get(schemaType.name))\n  const [clicked, setClicked] = useState<boolean>(false)\n\n  const preview = useMemo(() => {\n    if (value && isSanityDocument(value)) {\n      if (!schemaType || !hasSchemaType) {\n        return <MissingSchemaType value={value} />\n      }\n\n      return (\n        <PaneItemPreview\n          documentPreviewStore={documentPreviewStore}\n          icon={getIconWithFallback(icon, schemaType, DocumentIcon)}\n          layout={layout}\n          schemaType={schemaType}\n          value={value}\n          presence={documentPresence}\n        />\n      )\n    }\n\n    // Always render non-document values as compact previews\n    return (\n      <SanityDefaultPreview\n        status={\n          <Box style={{opacity: 0.5}}>\n            <Text muted size={1}>\n              <ChevronRightIcon />\n            </Text>\n          </Box>\n        }\n        icon={getIconWithFallback(icon, schemaType, FolderIcon)}\n        layout=\"compact\"\n        title={title}\n      />\n    )\n  }, [\n    documentPreviewStore,\n    hasSchemaType,\n    icon,\n    layout,\n    schemaType,\n    title,\n    value,\n    documentPresence,\n  ])\n\n  const handleClick = useCallback((e: MouseEvent<HTMLElement>) => {\n    if (e.metaKey) {\n      setClicked(false)\n      return\n    }\n\n    setClicked(true)\n  }, [])\n\n  // Reset `clicked` state when `selected` prop changes\n  useEffect(() => setClicked(false), [selected])\n\n  // Preloads the edit state on hover, using concurrent rendering with `startTransition` so preloads can be interrupted and not block rendering\n  const [preloading, setPreload] = useState(false)\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const handleMouseEnter = useCallback(() => {\n    timeoutRef.current = setTimeout(() => startTransition(() => setPreload(true)), 400)\n  }, [])\n  const handleMouseLeave = useCallback(() => {\n    if (timeoutRef.current) clearTimeout(timeoutRef.current)\n    startTransition(() => setPreload(false))\n  }, [])\n\n  return (\n    <PreviewCard\n      data-testid={`pane-item-${title}`}\n      __unstable_focusRing\n      as={ChildLink as FIXME}\n      // @ts-expect-error - `childId` is a valid prop on `ChildLink`\n      childId={id}\n      data-as=\"a\"\n      margin={margin}\n      marginBottom={marginBottom}\n      marginTop={marginTop}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      pressed={pressed}\n      radius={2}\n      selected={selected || clicked}\n      sizing=\"border\"\n      tabIndex={-1}\n      tone=\"inherit\"\n    >\n      {preview}\n      {preloading && schemaType?.name && value && isSanityDocument(value) && (\n        <PreloadDocumentPane documentId={id} documentType={schemaType.name} />\n      )}\n    </PreviewCard>\n  )\n}\n\nfunction PreloadDocumentPane(props: {documentId: string; documentType: string}) {\n  const {documentId, documentType} = props\n  // Preload the edit state for the document, and keep it alive until mouse leave\n  useEditState(getPublishedId(documentId), documentType)\n\n  return null\n}\nPreloadDocumentPane.displayName = 'PreloadDocumentPane'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentActionDescription,\n  type DocumentActionGroup,\n  type DocumentActionProps,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Action<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderActionCollectionProps {\n  actions: Action<DocumentActionProps, DocumentActionDescription>[]\n  actionProps: Omit<DocumentActionProps, 'onComplete'>\n  children: (props: {states: DocumentActionDescription[]}) => ReactNode\n  onActionComplete?: () => void\n  group?: DocumentActionGroup\n}\n\n/** @internal */\nexport const RenderActionCollectionState = memo((props: RenderActionCollectionProps) => {\n  const {actions, children, actionProps, onActionComplete, group} = props\n\n  return (\n    <GetHookCollectionState<Omit<DocumentActionProps, 'onComplete'>, DocumentActionDescription>\n      onReset={onActionComplete}\n      hooks={actions}\n      args={actionProps}\n      group={group}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderActionCollectionState.displayName = 'Memo(RenderActionCollectionState)'\n","import {memo, type ReactNode} from 'react'\nimport {\n  type DocumentBadgeDescription,\n  type DocumentBadgeProps,\n  type EditStateFor,\n  GetHookCollectionState,\n} from 'sanity'\n\n/** @internal */\nexport interface Badge<Args, Description> {\n  (args: Args): Description | null\n}\n\n/** @internal */\nexport interface RenderBadgeCollectionProps {\n  badges: Badge<DocumentBadgeProps, DocumentBadgeDescription>[]\n  badgeProps: EditStateFor\n  children: (props: {states: DocumentBadgeDescription[]}) => ReactNode\n}\n\n/** @internal */\nexport const RenderBadgeCollectionState = memo((props: RenderBadgeCollectionProps) => {\n  const {badges, children, badgeProps} = props\n\n  return (\n    <GetHookCollectionState<EditStateFor, DocumentBadgeDescription>\n      hooks={badges}\n      args={badgeProps}\n    >\n      {children}\n    </GetHookCollectionState>\n  )\n})\nRenderBadgeCollectionState.displayName = 'Memo(RenderBadgeCollectionState)'\n","import {useMemo} from 'react'\nimport {Subject} from 'rxjs'\n\nimport {type PathSyncChannel, type PathSyncState} from '../types/pathSyncChannel'\n\n/**\n * @internal\n */\nexport function useCreatePathSyncChannel(): PathSyncChannel {\n  return useMemo(() => new Subject<PathSyncState>(), [])\n}\n","/**\n * @internal\n */\nexport const DIFF_VIEW_SEARCH_PARAMETER = 'diffView'\n\n/**\n * @internal\n */\nexport const DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER = 'previousDocument'\n\n/**\n * @internal\n */\nexport const DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER = 'nextDocument'\n\n/**\n * @internal\n */\nexport const DIFF_SEARCH_PARAM_DELIMITER = ','\n","import {fromPairs, toPairs} from 'lodash'\nimport {useCallback} from 'react'\nimport {useRouter} from 'sanity/router'\n\nimport {\n  DIFF_SEARCH_PARAM_DELIMITER,\n  DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER,\n  DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER,\n  DIFF_VIEW_SEARCH_PARAMETER,\n} from '../constants'\nimport {type DiffViewMode} from '../types/diffViewMode'\n\ntype NavigateDiffView = (\n  options: {\n    mode?: DiffViewMode\n  } & Partial<\n    Record<\n      'previousDocument' | 'nextDocument',\n      {\n        type: string\n        id: string\n      }\n    >\n  >,\n) => void\n\nexport interface DiffViewRouter {\n  navigateDiffView: NavigateDiffView\n  exitDiffView: () => void\n}\n\n/**\n * @internal\n */\nexport function useDiffViewRouter(): DiffViewRouter {\n  const {navigate, state: routerState} = useRouter()\n\n  const navigateDiffView = useCallback<NavigateDiffView>(\n    ({mode, previousDocument, nextDocument}) => {\n      const next = {\n        ...fromPairs(routerState._searchParams),\n        ...(mode\n          ? {\n              [DIFF_VIEW_SEARCH_PARAMETER]: mode,\n            }\n          : {}),\n        ...(previousDocument\n          ? {\n              [DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER]: [\n                previousDocument.type,\n                previousDocument.id,\n              ].join(DIFF_SEARCH_PARAM_DELIMITER),\n            }\n          : {}),\n        ...(nextDocument\n          ? {\n              [DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER]: [nextDocument.type, nextDocument.id].join(\n                DIFF_SEARCH_PARAM_DELIMITER,\n              ),\n            }\n          : {}),\n      }\n\n      navigate({\n        ...routerState,\n        _searchParams: toPairs(next),\n      })\n    },\n    [navigate, routerState],\n  )\n\n  const exitDiffView = useCallback(() => {\n    navigate({\n      ...routerState,\n      _searchParams: (routerState._searchParams ?? []).filter(\n        ([key]) =>\n          ![\n            DIFF_VIEW_SEARCH_PARAMETER,\n            DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER,\n            DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER,\n          ].includes(key),\n      ),\n    })\n  }, [navigate, routerState])\n\n  return {\n    navigateDiffView,\n    exitDiffView,\n  }\n}\n","/**\n * @internal\n */\nexport const diffViewModes = ['version'] as const\n\n/**\n * @internal\n */\nexport type DiffViewMode = (typeof diffViewModes)[number]\n","import {useEffect, useMemo} from 'react'\nimport {useRouter} from 'sanity/router'\n\nimport {\n  DIFF_SEARCH_PARAM_DELIMITER,\n  DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER,\n  DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER,\n  DIFF_VIEW_SEARCH_PARAMETER,\n} from '../constants'\nimport {type DiffViewMode, diffViewModes} from '../types/diffViewMode'\n\nfunction isDiffViewMode(maybeDiffViewMode: unknown): maybeDiffViewMode is DiffViewMode {\n  return diffViewModes.includes(maybeDiffViewMode as DiffViewMode)\n}\n\ntype DiffViewState =\n  | {\n      isActive: true\n      state: 'ready'\n      mode: DiffViewMode\n      documents: Record<\n        'previous' | 'next',\n        {\n          type: string\n          id: string\n        }\n      >\n    }\n  | {\n      isActive: true\n      state: 'error'\n      mode: DiffViewMode\n      documents?: never\n    }\n  | {\n      isActive: false\n      state?: never\n      mode?: never\n      documents?: never\n    }\n\nexport function useDiffViewState({\n  onParamsError,\n}: {\n  onParamsError?: (errors: DiffViewStateErrorWithInput[]) => void\n} = {}): DiffViewState {\n  const {state: routerState} = useRouter()\n  const searchParams = new URLSearchParams(routerState._searchParams)\n  const previousDocument = searchParams.get(DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER)\n  const nextDocument = searchParams.get(DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER)\n  const mode = searchParams.get(DIFF_VIEW_SEARCH_PARAMETER)\n  const anyParamSet = [previousDocument, nextDocument, mode].some((param) => param !== null)\n\n  const params = useMemo(\n    () =>\n      parseParams({\n        previousDocument: previousDocument ?? '',\n        nextDocument: nextDocument ?? '',\n        mode: mode ?? '',\n      }),\n    [mode, nextDocument, previousDocument],\n  )\n\n  useEffect(() => {\n    if (params.result === 'error' && anyParamSet) {\n      onParamsError?.(params.errors)\n    }\n  }, [anyParamSet, onParamsError, params])\n\n  if (params.result === 'error') {\n    return {\n      isActive: false,\n    }\n  }\n\n  return {\n    state: 'ready',\n    isActive: true,\n    ...params.params,\n  }\n}\n\ntype DiffViewStateError =\n  | 'invalidModeParam'\n  | 'invalidPreviousDocumentParam'\n  | 'invalidNextDocumentParam'\n\ntype DiffViewStateErrorWithInput = [error: DiffViewStateError, input: unknown]\n\ninterface ParamsSuccess {\n  result: 'success'\n  params: Pick<DiffViewState & {state: 'ready'}, 'mode' | 'documents'>\n}\n\ninterface ParamsError {\n  result: 'error'\n  errors: DiffViewStateErrorWithInput[]\n}\n\nfunction parseParams({\n  previousDocument,\n  nextDocument,\n  mode,\n}: {\n  previousDocument: string\n  nextDocument: string\n  mode: string\n}): ParamsSuccess | ParamsError {\n  const errors: DiffViewStateErrorWithInput[] = []\n\n  const [previousDocumentType, previousDocumentId] = previousDocument\n    .split(DIFF_SEARCH_PARAM_DELIMITER)\n    .filter(Boolean)\n\n  const [nextDocumentType, nextDocumentId] = nextDocument\n    .split(DIFF_SEARCH_PARAM_DELIMITER)\n    .filter(Boolean)\n\n  if (!isDiffViewMode(mode)) {\n    errors.push(['invalidModeParam', mode])\n  }\n\n  if (typeof previousDocumentType === 'undefined' || typeof previousDocumentId === 'undefined') {\n    errors.push(['invalidPreviousDocumentParam', previousDocument])\n  }\n\n  if (typeof nextDocumentType === 'undefined' || typeof nextDocumentId === 'undefined') {\n    errors.push(['invalidNextDocumentParam', nextDocument])\n  }\n\n  if (errors.length !== 0) {\n    return {\n      result: 'error',\n      errors,\n    }\n  }\n\n  return {\n    result: 'success',\n    params: {\n      mode,\n      documents: {\n        previous: {\n          type: previousDocumentType,\n          id: previousDocumentId,\n        },\n        next: {\n          type: nextDocumentType,\n          id: nextDocumentId,\n        },\n      },\n    },\n  } as ParamsSuccess\n}\n","import {useEffect} from 'react'\nimport ScrollMirror from 'scrollmirror'\n\n/**\n * Use the ScrollMirror library to synchronise the scroll position for an array of elements.\n *\n * @internal\n */\nexport function useScrollMirror(elements: (HTMLElement | null)[]): void {\n  useEffect(() => {\n    const existentElements = elements.filter((element) => element !== null)\n\n    if (existentElements.length === 0) {\n      return undefined\n    }\n\n    const scrollMirror = new ScrollMirror(existentElements)\n    return () => scrollMirror.destroy()\n  }, [elements])\n}\n","import {CloseIcon, LockIcon, TransferIcon} from '@sanity/icons'\nimport {\n  Box,\n  // eslint-disable-next-line no-restricted-imports -- we need more control over how the `Button` component is rendered\n  Button,\n  type ButtonTone,\n  Flex,\n  Menu,\n  // eslint-disable-next-line no-restricted-imports -- the `VersionModeHeader` component needs more control over how the `MenuItem` component is rendered\n  MenuItem,\n  Stack,\n  Text,\n} from '@sanity/ui'\nimport {type TFunction} from 'i18next'\nimport {type ComponentProps, type ComponentType, useCallback, useMemo} from 'react'\nimport {\n  type DocumentLayoutProps,\n  formatRelativeLocalePublishDate,\n  getDraftId,\n  getPublishedId,\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  getVersionId,\n  isDraftId,\n  isPublishedId,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  ReleaseAvatar,\n  type ReleaseDocument,\n  useActiveReleases,\n  useDocumentVersions,\n  useEditState,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {MenuButton} from '../../../../ui-components/menuButton/MenuButton'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useDiffViewRouter} from '../../hooks/useDiffViewRouter'\nimport {useDiffViewState} from '../../hooks/useDiffViewState'\n\nconst VersionModeHeaderLayout = styled.header`\n  display: grid;\n  grid-area: header;\n  grid-template-columns: 1fr min-content 1fr;\n  border-block-end: 1px solid var(--card-border-color);\n`\n\nconst VersionModeHeaderLayoutSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n\n/**\n * The header component that is rendered when diff view is being used to compare versions of a\n * document.\n *\n * @internal\n */\nexport const VersionModeHeader: ComponentType<\n  {state: 'pending' | 'ready' | 'error'} & Pick<DocumentLayoutProps, 'documentId'>\n> = ({documentId, state}) => {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {data: documentVersions} = useDocumentVersions({documentId})\n  const {exitDiffView, navigateDiffView} = useDiffViewRouter()\n  const {documents} = useDiffViewState()\n  const activeReleases = useActiveReleases()\n  const releasesIds = documentVersions.flatMap((id) => getVersionFromId(id) ?? [])\n\n  const releases = useMemo(() => {\n    return activeReleases.data.filter((release) => {\n      const releaseId = getReleaseIdFromReleaseDocumentId(release._id)\n      return typeof releaseId !== 'undefined' && releasesIds.includes(releaseId)\n    })\n  }, [activeReleases.data, releasesIds])\n\n  const onSelectPreviousRelease = useCallback(\n    (selectedDocumentId: string): void => {\n      if (typeof documents?.previous !== 'undefined') {\n        navigateDiffView({\n          previousDocument: {\n            ...documents.previous,\n            id: selectedDocumentId,\n          },\n        })\n      }\n    },\n    [documents?.previous, navigateDiffView],\n  )\n\n  const onSelectNextRelease = useCallback(\n    (selectedDocumentId: string): void => {\n      if (typeof documents?.next !== 'undefined') {\n        navigateDiffView({\n          nextDocument: {\n            ...documents.next,\n            id: selectedDocumentId,\n          },\n        })\n      }\n    },\n    [documents?.next, navigateDiffView],\n  )\n\n  return (\n    <VersionModeHeaderLayout>\n      <VersionModeHeaderLayoutSection>\n        <Box padding={4}>\n          <Text as=\"h1\" size={1} muted>\n            {t('compare-versions.title')}\n          </Text>\n        </Box>\n        {typeof documents?.previous !== 'undefined' && (\n          <VersionMenu\n            releases={releases}\n            onSelectRelease={onSelectPreviousRelease}\n            role=\"previous\"\n            documentId={documentId}\n            state={state}\n            document={documents.previous}\n          />\n        )}\n      </VersionModeHeaderLayoutSection>\n      <Flex align=\"center\" paddingX={3}>\n        <Text size={1}>\n          <TransferIcon />\n        </Text>\n      </Flex>\n      <VersionModeHeaderLayoutSection>\n        {typeof documents?.next !== 'undefined' && (\n          <VersionMenu\n            releases={releases}\n            onSelectRelease={onSelectNextRelease}\n            role=\"next\"\n            documentId={documentId}\n            state={state}\n            document={documents.next}\n          />\n        )}\n        <Box\n          padding={3}\n          style={{\n            justifySelf: 'end',\n          }}\n        >\n          <Button icon={CloseIcon} mode=\"bleed\" onClick={exitDiffView} padding={2} />\n        </Box>\n      </VersionModeHeaderLayoutSection>\n    </VersionModeHeaderLayout>\n  )\n}\n\ninterface VersionMenuProps {\n  state: 'pending' | 'ready' | 'error'\n  releases: ReleaseDocument[]\n  role: 'previous' | 'next'\n  onSelectRelease: (releaseId: string) => void\n  documentId: string\n  document: {\n    type: string\n    id: string\n  }\n}\n\nconst VersionMenu: ComponentType<VersionMenuProps> = ({\n  releases = [],\n  onSelectRelease,\n  role,\n  documentId,\n  document,\n}) => {\n  const {published, draft} = useEditState(getPublishedId(document.id), document.type)\n  const selected = useMemo(() => findRelease(document.id, releases), [document.id, releases])\n  const {t: tStructure} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n\n  return (\n    <MenuButton\n      id={role}\n      button={\n        <Button\n          type=\"button\"\n          mode=\"bleed\"\n          padding={2}\n          paddingRight={3}\n          radius=\"full\"\n          selected\n          {...getMenuButtonProps({selected, tCore, tStructure})}\n        />\n      }\n      menu={\n        <Menu>\n          {published && (\n            <VersionMenuItem\n              type=\"published\"\n              onSelect={onSelectRelease}\n              isSelected={selected === 'published'}\n              documentId={documentId}\n            />\n          )}\n          {draft && (\n            <VersionMenuItem\n              type=\"draft\"\n              onSelect={onSelectRelease}\n              isSelected={selected === 'draft'}\n              documentId={documentId}\n            />\n          )}\n          {releases.map((release) => (\n            <VersionMenuItem\n              key={release._id}\n              release={release}\n              onSelect={onSelectRelease}\n              isSelected={typeof selected !== 'string' && selected?._id === release._id}\n              documentId={documentId}\n            />\n          ))}\n        </Menu>\n      }\n    />\n  )\n}\n\ntype VersionMenuItemProps = {\n  onSelect: (releaseId: string) => void\n  isSelected?: boolean\n  documentId: string\n} & (\n  | {\n      release: ReleaseDocument\n      type?: never\n    }\n  | {\n      type: 'published' | 'draft'\n      release?: never\n    }\n)\n\nconst VersionMenuItem: ComponentType<VersionMenuItemProps> = ({\n  type,\n  release,\n  onSelect,\n  isSelected,\n  documentId,\n}) => {\n  const {t: tCore} = useTranslation()\n  const {t: tStructure} = useTranslation(structureLocaleNamespace)\n\n  const onClick = useCallback(() => {\n    if (type === 'draft') {\n      onSelect(getDraftId(documentId))\n      return\n    }\n\n    if (type === 'published') {\n      onSelect(getPublishedId(documentId))\n      return\n    }\n\n    if (typeof release?._id !== 'undefined') {\n      onSelect(getVersionId(documentId, getReleaseIdFromReleaseDocumentId(release._id)))\n    }\n  }, [type, onSelect, documentId, release?._id])\n\n  if (type) {\n    const tone: ButtonTone = type === 'published' ? 'positive' : 'caution'\n\n    return (\n      <MenuItem padding={1} paddingRight={3} onClick={onClick} pressed={isSelected}>\n        <Flex gap={1}>\n          <ReleaseAvatar padding={2} tone={tone} />\n          <Box paddingY={2}>\n            <Text size={1} weight=\"medium\">\n              {tStructure(['compare-versions.status', type].join('.'))}\n            </Text>\n          </Box>\n        </Flex>\n      </MenuItem>\n    )\n  }\n\n  const tone: ButtonTone = release ? getReleaseTone(release) : 'neutral'\n\n  return (\n    <MenuItem padding={1} paddingRight={3} onClick={onClick} pressed={isSelected}>\n      <Flex gap={1}>\n        <ReleaseAvatar padding={2} tone={tone} />\n        <Stack flex={1} paddingY={2} paddingRight={2} space={2}>\n          <Text size={1} weight=\"medium\">\n            {release.metadata.title || tCore('release.placeholder-untitled-release')}\n          </Text>\n          {['asap', 'undecided'].includes(release.metadata.releaseType) && (\n            <Text muted size={1}>\n              {tCore(`release.type.${release.metadata.releaseType}`)}\n            </Text>\n          )}\n          {release.metadata.releaseType === 'scheduled' && (\n            <Text muted size={1}>\n              {formatRelativeLocalePublishDate(release)}\n            </Text>\n          )}\n        </Stack>\n        <Flex flex=\"none\">\n          {isReleaseScheduledOrScheduling(release) && (\n            <Box padding={2}>\n              <Text size={1}>\n                <LockIcon />\n              </Text>\n            </Box>\n          )}\n        </Flex>\n      </Flex>\n    </MenuItem>\n  )\n}\n\nfunction getMenuButtonProps({\n  selected,\n  tCore,\n  tStructure,\n}: {\n  selected?: ReleaseDocument | 'published' | 'draft'\n  tCore: TFunction\n  tStructure: TFunction\n}): Pick<ComponentProps<typeof Button>, 'text' | 'tone' | 'icon' | 'iconRight' | 'disabled'> {\n  if (typeof selected === 'undefined') {\n    return {\n      text: tCore('common.loading'),\n      tone: 'neutral',\n      disabled: true,\n    }\n  }\n\n  if (isReleaseDocument(selected)) {\n    const tone: ButtonTone = selected ? getReleaseTone(selected) : 'neutral'\n\n    return {\n      text: selected?.metadata.title || tCore('release.placeholder-untitled-release'),\n      icon: <ReleaseAvatar padding={1} tone={tone} />,\n      iconRight: selected && isReleaseScheduledOrScheduling(selected) ? <LockIcon /> : undefined,\n      tone,\n    }\n  }\n\n  const tone: ButtonTone = selected === 'published' ? 'positive' : 'caution'\n\n  return {\n    text: tStructure(['compare-versions.status', selected].join('.')),\n    icon: <ReleaseAvatar padding={1} tone={tone} />,\n    tone,\n  }\n}\n\n/**\n * If the provided document id represents a version, find and return the corresponding release\n * document. Otherwise, return a string literal signifying whether the document id represents a\n * published or draft document.\n */\nfunction findRelease(\n  documentId: string,\n  releases: ReleaseDocument[],\n): ReleaseDocument | 'published' | 'draft' | undefined {\n  if (isPublishedId(documentId)) {\n    return 'published'\n  }\n\n  if (isDraftId(documentId)) {\n    return 'draft'\n  }\n\n  return releases.find(\n    ({_id}) => getReleaseIdFromReleaseDocumentId(_id) === getVersionFromId(documentId),\n  )\n}\n","import {styled} from 'styled-components'\n\nexport const DialogLayout = styled.div`\n  --offset-block: 40px;\n  display: grid;\n  height: calc(100vh - var(--offset-block));\n  min-height: 0;\n  overflow: hidden;\n  grid-template-areas:\n    'header header'\n    'previous-document next-document';\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: min-content minmax(0, 1fr);\n`\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, type PluginOptions} from 'sanity'\n\n/**\n * Pick the document layout component when composing the component middleware chain.\n */\nexport function pickDocumentLayoutComponent(plugin: PluginOptions) {\n  return plugin.document?.components?.unstable_layout as ComponentType<\n    Omit<DocumentLayoutProps, 'renderDefault'>\n  >\n}\n","import {type Path} from '@sanity/types'\nimport {useCallback, useMemo} from 'react'\nimport deepEquals from 'react-fast-compare'\nimport {distinctUntilChanged, filter, map, type Observable} from 'rxjs'\n\nimport {type PathSyncChannelProps, type PathSyncState} from '../types/pathSyncChannel'\n\ntype Push = (state: PathSyncState) => void\n\n/**\n * Synchronise the open path between multiple document panes.\n *\n * @internal\n */\nexport function usePathSyncChannel({syncChannel, id}: PathSyncChannelProps): {\n  push: Push\n  path: Observable<Path>\n} {\n  const push = useCallback<Push>(\n    (state) => syncChannel.next({...state, source: id}),\n    [id, syncChannel],\n  )\n\n  const path = useMemo(\n    () =>\n      syncChannel.pipe(\n        distinctUntilChanged<PathSyncState>((previous, next) =>\n          deepEquals(previous.path, next.path),\n        ),\n        filter(({source}) => source !== id),\n        map((state) => state.path),\n      ),\n    [id, syncChannel],\n  )\n\n  return {\n    path,\n    push,\n  }\n}\n","import {styled} from 'styled-components'\n\nexport const Scroller = styled.div`\n  position: relative;\n  height: 100%;\n  overflow: auto;\n  scroll-behavior: smooth;\n  scrollbar-width: var(--scrollbar-width);\n  overscroll-behavior: contain;\n  will-change: scroll-position;\n`\n","import {type Path, type SanityDocument} from '@sanity/types'\nimport {\n  BoundaryElementProvider,\n  Card,\n  Container as UiContainer,\n  DialogProvider,\n  PortalProvider,\n} from '@sanity/ui'\nimport {noop} from 'lodash'\nimport {\n  type ComponentType,\n  type CSSProperties,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport {\n  ChangeIndicatorsTracker,\n  createPatchChannel,\n  FormBuilder,\n  getPublishedId,\n  getVersionFromId,\n  isDraftId,\n  isPublishedId,\n  isVersionId,\n  LoadingBlock,\n  useDocumentForm,\n  useEditState,\n  useMiddlewareComponents,\n  VirtualizerScrollInstanceProvider,\n} from 'sanity'\nimport {CommentsEnabledContext, ConnectorContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {pickDocumentLayoutComponent} from '../../panes/document/document-layout/pickDocumentLayoutComponent'\nimport {usePathSyncChannel} from '../hooks/usePathSyncChannel'\nimport {type PathSyncChannel} from '../types/pathSyncChannel'\nimport {Scroller} from './Scroller'\n\nconst DiffViewPaneLayout = styled(Card)`\n  position: relative;\n  grid-area: var(--grid-area);\n`\n\nconst Container = styled(UiContainer)`\n  width: auto;\n`\n\ninterface DiffViewPaneProps {\n  documentType: string\n  documentId: string\n  role: 'previous' | 'next'\n  scrollElement: HTMLElement | null\n  syncChannel: PathSyncChannel\n  compareDocument: {\n    type: string\n    id: string\n  }\n}\n\nexport const DiffViewPane = forwardRef<HTMLDivElement, DiffViewPaneProps>(function DiffViewPane(\n  {role, documentType, documentId, scrollElement, syncChannel, compareDocument},\n  ref,\n) {\n  const containerElement = useRef<HTMLDivElement | null>(null)\n  const [portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [boundaryElement, setBoundaryElement] = useState<HTMLDivElement | null>(null)\n\n  const DocumentLayout = useMiddlewareComponents({\n    pick: pickDocumentLayoutComponent,\n    defaultComponent: useCallback(\n      () => (\n        <DiffViewDocument\n          compareDocument={compareDocument}\n          documentId={documentId}\n          documentType={documentType}\n          role={role}\n          scrollElement={scrollElement}\n          syncChannel={syncChannel}\n        />\n      ),\n      [compareDocument, documentId, documentType, role, scrollElement, syncChannel],\n    ),\n  })\n\n  return (\n    <ConnectorContext.Provider\n      value={{\n        // Render the change indicators inertly, because the diff view modal does not currently\n        // provide a way to display document inspectors.\n        isInteractive: false,\n        onOpenReviewChanges: noop,\n        onSetFocus: noop,\n        isReviewChangesOpen: false,\n      }}\n    >\n      <ChangeIndicatorsTracker>\n        <VirtualizerScrollInstanceProvider\n          scrollElement={scrollElement}\n          containerElement={containerElement}\n        >\n          <BoundaryElementProvider element={boundaryElement}>\n            <DiffViewPaneLayout\n              ref={setBoundaryElement}\n              style={\n                {\n                  '--grid-area': `${role}-document`,\n                } as CSSProperties\n              }\n              borderLeft={role === 'next'}\n            >\n              <Scroller\n                ref={ref}\n                style={\n                  {\n                    // The scroll position is synchronised between panes. This style hides the\n                    // scrollbar for all panes except the one displaying the next document.\n                    '--scrollbar-width': role !== 'next' && 'none',\n                  } as CSSProperties\n                }\n              >\n                <PortalProvider element={portalElement}>\n                  <DialogProvider position=\"absolute\">\n                    <Container ref={containerElement} padding={4} width={1}>\n                      <DocumentLayout documentId={documentId} documentType={documentType} />\n                    </Container>\n                  </DialogProvider>\n                </PortalProvider>\n              </Scroller>\n              <div data-testid=\"diffView-document-panel-portal\" ref={setPortalElement} />\n            </DiffViewPaneLayout>\n          </BoundaryElementProvider>\n        </VirtualizerScrollInstanceProvider>\n      </ChangeIndicatorsTracker>\n    </ConnectorContext.Provider>\n  )\n})\n\nconst DiffViewDocument: ComponentType<DiffViewPaneProps> = ({\n  role,\n  documentType,\n  documentId,\n  syncChannel,\n  compareDocument,\n}) => {\n  const compareValue = useCompareValue({compareDocument})\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const {\n    formState,\n    onChange,\n    onFocus,\n    onBlur,\n    onSetActiveFieldGroup,\n    onSetCollapsedFieldSet,\n    onSetCollapsedPath,\n    collapsedFieldSets,\n    ready,\n    collapsedPaths,\n    schemaType,\n    value,\n    onProgrammaticFocus,\n    ...documentForm\n  } = useDocumentForm({\n    documentId: getPublishedId(documentId),\n    documentType,\n    selectedPerspectiveName: perspectiveName(documentId),\n    releaseId: getVersionFromId(documentId),\n    comparisonValue: compareValue,\n  })\n\n  const isLoading = formState === null || !ready\n\n  const pathSyncChannel = usePathSyncChannel({\n    id: role,\n    syncChannel,\n  })\n\n  const onPathOpen = useCallback(\n    (path: Path) => {\n      documentForm.onPathOpen(path)\n      pathSyncChannel.push({source: role, path})\n    },\n    [documentForm, pathSyncChannel, role],\n  )\n\n  useEffect(() => {\n    const subscription = pathSyncChannel.path.subscribe(onProgrammaticFocus)\n    return () => subscription.unsubscribe()\n  }, [onProgrammaticFocus, pathSyncChannel.path])\n\n  return isLoading ? (\n    <LoadingBlock showText />\n  ) : (\n    <CommentsEnabledContext.Provider\n      value={{\n        enabled: false,\n        mode: null,\n      }}\n    >\n      <FormBuilder\n        // eslint-disable-next-line camelcase\n        __internal_patchChannel={patchChannel}\n        id={`diffView-pane-${role}`}\n        onChange={onChange}\n        onPathFocus={onFocus}\n        onPathOpen={onPathOpen}\n        onPathBlur={onBlur}\n        onFieldGroupSelect={onSetActiveFieldGroup}\n        onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n        onSetPathCollapsed={onSetCollapsedPath}\n        collapsedPaths={collapsedPaths}\n        collapsedFieldSets={collapsedFieldSets}\n        focusPath={formState.focusPath}\n        changed={formState.changed}\n        focused={formState.focused}\n        groups={formState.groups}\n        validation={formState.validation}\n        members={formState.members}\n        presence={formState.presence}\n        schemaType={schemaType}\n        value={value}\n      />\n    </CommentsEnabledContext.Provider>\n  )\n}\n\nfunction perspectiveName(documentId: string): string | undefined {\n  if (isVersionId(documentId)) {\n    return getVersionFromId(documentId)\n  }\n\n  if (isPublishedId(documentId)) {\n    return 'published'\n  }\n\n  return undefined\n}\n\ntype UseCompareValueOptions = Pick<DiffViewPaneProps, 'compareDocument'>\n\n/**\n * Fetch the contents of `compareDocument` for comparison with another version of the document.\n */\nfunction useCompareValue({compareDocument}: UseCompareValueOptions): SanityDocument | undefined {\n  const compareDocumentEditState = useEditState(\n    getPublishedId(compareDocument.id),\n    compareDocument.type,\n    'low',\n    getVersionFromId(compareDocument.id),\n  )\n\n  return useMemo(() => {\n    if (isVersionId(compareDocument.id)) {\n      return compareDocumentEditState.version ?? undefined\n    }\n\n    if (isDraftId(compareDocument.id)) {\n      return compareDocumentEditState.draft ?? undefined\n    }\n\n    if (isPublishedId(compareDocument.id)) {\n      return compareDocumentEditState.published ?? undefined\n    }\n\n    return undefined\n  }, [\n    compareDocument.id,\n    compareDocumentEditState.draft,\n    compareDocumentEditState.published,\n    compareDocumentEditState.version,\n  ])\n}\n","import {type ReferenceInputOptions} from 'sanity'\nimport {useIntentLink} from 'sanity/router'\nimport {styled} from 'styled-components'\n\nconst Link = styled.a`\n  flex: 1;\n  text-decoration: none;\n  color: inherit;\n`\n\nexport const EditReferenceLinkComponent: ReferenceInputOptions['EditReferenceLinkComponent'] = ({\n  children,\n  documentId: _documentId,\n  documentType,\n}) => {\n  const {href} = useIntentLink({\n    intent: 'edit',\n    params: {\n      id: _documentId,\n      type: documentType,\n    },\n  })\n\n  return (\n    <Link href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      {children}\n    </Link>\n  )\n}\n","import {type ComponentType, useContext, useMemo, useState} from 'react'\nimport {type DocumentLayoutProps} from 'sanity'\nimport {ReferenceInputOptionsContext} from 'sanity/_singletons'\n\nimport {Dialog} from '../../../ui-components/dialog/Dialog'\nimport {useCreatePathSyncChannel} from '../hooks/useCreatePathSyncChannel'\nimport {useDiffViewRouter} from '../hooks/useDiffViewRouter'\nimport {useDiffViewState} from '../hooks/useDiffViewState'\nimport {useScrollMirror} from '../hooks/useScrollMirror'\nimport {VersionModeHeader} from '../versionMode/components/VersionModeHeader'\nimport {DialogLayout} from './DialogLayout'\nimport {DiffViewPane} from './DiffViewPane'\nimport {EditReferenceLinkComponent} from './EditReferenceLinkComponent'\n\nexport const DiffView: ComponentType<Pick<DocumentLayoutProps, 'documentId'>> = ({documentId}) => {\n  const {documents, state, mode} = useDiffViewState()\n  const {exitDiffView} = useDiffViewRouter()\n  const syncChannel = useCreatePathSyncChannel()\n  const [previousPaneElement, setPreviousPaneElement] = useState<HTMLElement | null>(null)\n  const [nextPaneElement, setNextPaneElement] = useState<HTMLElement | null>(null)\n  const referenceInputOptionsContext = useContext(ReferenceInputOptionsContext)\n\n  const diffViewReferenceInputOptionsContext = useMemo(\n    () => ({\n      ...referenceInputOptionsContext,\n      disableNew: true,\n      EditReferenceLinkComponent,\n    }),\n    [referenceInputOptionsContext],\n  )\n\n  useScrollMirror([previousPaneElement, nextPaneElement])\n\n  return (\n    <ReferenceInputOptionsContext.Provider value={diffViewReferenceInputOptionsContext}>\n      <Dialog\n        id=\"diffView\"\n        width=\"auto\"\n        onClose={exitDiffView}\n        padding={false}\n        __unstable_hideCloseButton\n      >\n        <DialogLayout>\n          {mode === 'version' && <VersionModeHeader documentId={documentId} state={state} />}\n          {state === 'ready' && (\n            <>\n              <DiffViewPane\n                documentType={documents.previous.type}\n                documentId={documents.previous.id}\n                role=\"previous\"\n                ref={setPreviousPaneElement}\n                scrollElement={previousPaneElement}\n                syncChannel={syncChannel}\n                compareDocument={documents.previous}\n              />\n              <DiffViewPane\n                documentType={documents.next.type}\n                documentId={documents.next.id}\n                role=\"next\"\n                ref={setNextPaneElement}\n                scrollElement={nextPaneElement}\n                syncChannel={syncChannel}\n                // The previous document's edit state is used to calculate the diff inroduced by the next document.\n                compareDocument={documents.previous}\n              />\n            </>\n          )}\n        </DialogLayout>\n      </Dialog>\n    </ReferenceInputOptionsContext.Provider>\n  )\n}\n","import {useToast} from '@sanity/ui'\nimport {type ComponentType, type PropsWithChildren} from 'react'\nimport {type DocumentLayoutProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {DiffView} from '../components/DiffView'\nimport {useDiffViewState} from '../hooks/useDiffViewState'\n\nexport const DiffViewDocumentLayout: ComponentType<\n  PropsWithChildren<Pick<DocumentLayoutProps, 'documentId' | 'documentType'>>\n> = ({children, documentId}) => {\n  const toast = useToast()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isActive} = useDiffViewState({\n    onParamsError: (errors) => {\n      toast.push({\n        id: 'diffViewParamsParsingError',\n        status: 'error',\n        title: t('compare-version.error.invalidParams.title'),\n        description: (\n          <ul>\n            {errors.map(([error, input]) => (\n              <li key={error}>\n                {t(`compare-version.error.${error}`, {\n                  input,\n                })}\n              </li>\n            ))}\n          </ul>\n        ),\n      })\n    },\n  })\n\n  return (\n    <>\n      {children}\n      {isActive && <DiffView documentId={documentId} />}\n    </>\n  )\n}\n","import {Box, type CardTone} from '@sanity/ui'\n\nimport {Pane, PaneContent, PaneHeader} from '../../components/pane'\n\n/**\n * @internal\n */\nexport function ErrorPane(props: {\n  children?: React.ReactNode\n  currentMinWidth?: number\n  flex?: number\n  minWidth?: number\n  paneKey: string\n  title?: React.ReactNode\n  tone?: CardTone\n}) {\n  const {\n    children,\n    currentMinWidth,\n    flex,\n    minWidth,\n    paneKey,\n    title = 'Error',\n    tone = 'critical',\n  } = props\n\n  return (\n    <Pane\n      currentMinWidth={currentMinWidth}\n      flex={flex}\n      id={paneKey}\n      minWidth={minWidth}\n      tone={tone}\n    >\n      <PaneHeader title={title} />\n      <PaneContent overflow=\"auto\">\n        <Box paddingX={4} paddingY={5}>\n          {children}\n        </Box>\n      </PaneContent>\n    </Pane>\n  )\n}\n","import {merge, type Observable, of} from 'rxjs'\nimport {delay, mapTo} from 'rxjs/operators'\nimport {isDev} from 'sanity'\n\n/**\n * @internal\n */\nexport type WaitMessage = {messageKey: string} | {message: string}\n\n/**\n * @internal\n */\nexport function getWaitMessages(path: string[]): Observable<WaitMessage> {\n  const thresholds: (WaitMessage & {ms: number})[] = [\n    {ms: 300, messageKey: 'panes.resolving.default-message'},\n    {ms: 5000, messageKey: 'panes.resolving.slow-resolve-message'},\n  ]\n\n  if (isDev) {\n    const message = [\n      'Check console for errors?',\n      'Is your observable/promise resolving?',\n      path.length > 0 ? `Structure path: ${path.join(' ➝ ')}` : '',\n    ]\n\n    thresholds.push({\n      ms: 10000,\n      message: message.join('\\n'),\n    })\n  }\n\n  const src = of(null)\n\n  return merge(\n    ...thresholds.map((threshold) =>\n      src.pipe(\n        mapTo(\n          'messageKey' in threshold\n            ? {messageKey: threshold.messageKey}\n            : {message: threshold.message},\n        ),\n        delay(threshold.ms),\n      ),\n    ),\n  )\n}\n","import {_raf2, type CardTone, Flex} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useState} from 'react'\nimport {type Observable} from 'rxjs'\nimport {LoadingBlock, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay} from '../../components/Delay'\nimport {Pane, PaneContent} from '../../components/pane'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {getWaitMessages, type WaitMessage} from './getWaitMessages'\n\ninterface LoadingPaneProps {\n  delay?: number\n  flex?: number\n  message?: string | ((p: string[]) => string | Observable<WaitMessage>)\n  minWidth?: number\n  paneKey: string\n  path?: string\n  selected?: boolean\n  title?: string\n  tone?: CardTone\n}\n\nconst DELAY = false\nconst DEFAULT_MESSAGE_KEY = 'panes.resolving.default-message'\n\nconst Content = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n\n  &[data-mounted] {\n    opacity: 1;\n  }\n`\n\n/**\n * @internal\n */\nexport const LoadingPane = memo((props: LoadingPaneProps) => {\n  const {\n    delay = 300,\n    flex,\n    message: messageProp = getWaitMessages,\n    minWidth,\n    paneKey,\n    path,\n    selected,\n    title,\n    tone,\n  } = props\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const resolvedMessage = useMemo(() => {\n    if (typeof messageProp === 'function') {\n      return messageProp(path ? path.split(';') : [])\n    }\n\n    return messageProp\n  }, [messageProp, path])\n\n  const [currentMessage, setCurrentMessage] = useState<string | null>(() => {\n    if (typeof resolvedMessage === 'string') return resolvedMessage\n    return t(DEFAULT_MESSAGE_KEY)\n  })\n\n  useEffect(() => {\n    if (typeof resolvedMessage !== 'object') return undefined\n    if (typeof resolvedMessage.subscribe !== 'function') return undefined\n\n    const sub = resolvedMessage.subscribe((message) => {\n      setCurrentMessage('messageKey' in message ? t(message.messageKey) : message.message)\n    })\n\n    return () => sub.unsubscribe()\n  }, [resolvedMessage, t])\n\n  const [contentElement, setContentElement] = useState<HTMLDivElement | null>(null)\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    if (!contentElement) return undefined\n    return _raf2(() => setMounted(true))\n  }, [contentElement])\n\n  const content = (\n    <Content\n      align=\"center\"\n      data-mounted={mounted ? '' : undefined}\n      direction=\"column\"\n      height=\"fill\"\n      justify=\"center\"\n      ref={setContentElement}\n    >\n      <LoadingBlock showText title={title || currentMessage} />\n    </Content>\n  )\n\n  return (\n    <Pane flex={flex} id={paneKey} minWidth={minWidth} selected={selected} tone={tone}>\n      <PaneContent>{DELAY ? <Delay ms={delay}>{content}</Delay> : content}</PaneContent>\n    </Pane>\n  )\n})\n\nLoadingPane.displayName = 'Memo(LoadingPane)'\n","import {useContext} from 'react'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\n\n/** @internal */\nexport function useDocumentPane(): DocumentPaneContextValue {\n  const documentPane = useContext(DocumentPaneContext)\n\n  if (!documentPane) {\n    throw new Error('DocumentPane: missing context value')\n  }\n\n  return documentPane\n}\n","import {useCallback, useLayoutEffect, useRef} from 'react'\nimport {\n  COMMENTS_INSPECTOR_NAME,\n  CommentsEnabledProvider,\n  CommentsProvider,\n  useCommentsEnabled,\n  usePerspective,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface CommentsWrapperProps {\n  children: React.ReactNode\n  documentId: string\n  documentType: string\n}\n\n/**\n * @internal\n * A wrapper that conditionally wraps the document layout in a comments provider\n * if the feature is enabled for the project and the current document.\n */\nexport function CommentsWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  return (\n    <CommentsEnabledProvider documentId={documentId} documentType={documentType}>\n      <CommentsProviderWrapper documentId={documentId} documentType={documentType}>\n        {children}\n      </CommentsProviderWrapper>\n    </CommentsEnabledProvider>\n  )\n}\n\nfunction CommentsProviderWrapper(props: CommentsWrapperProps) {\n  const {children, documentId, documentType} = props\n\n  const {enabled} = useCommentsEnabled()\n  const {connectionState, onPathOpen, inspector, openInspector} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const {params, setParams, createPathWithParams} = usePaneRouter()\n\n  const selectedCommentId = params?.comment\n  const paramsRef = useRef(params)\n\n  useLayoutEffect(() => {\n    paramsRef.current = params\n  }, [params])\n\n  const getCommentLink = useCallback(\n    (commentId: string) => {\n      // Generate a path based on the current pane params.\n      // We force a value for `inspect` to ensure that this is included in URLs when comments\n      // are created outside of the inspector context (i.e. directly on the field)\n      // @todo: consider filtering pane router params and culling all non-active RHS panes prior to generating this link\n      const path = createPathWithParams({\n        ...paramsRef.current,\n        comment: commentId,\n        inspect: COMMENTS_INSPECTOR_NAME,\n      })\n      return `${window.location.origin}${path}`\n    },\n    [createPathWithParams],\n  )\n\n  const handleClearSelectedComment = useCallback(() => {\n    setParams({...paramsRef.current, comment: undefined})\n  }, [setParams])\n\n  const handleOpenCommentsInspector = useCallback(() => {\n    if (inspector?.name === COMMENTS_INSPECTOR_NAME) return\n\n    openInspector(COMMENTS_INSPECTOR_NAME)\n  }, [inspector?.name, openInspector])\n\n  // If comments are not enabled, render the default document layout\n  if (!enabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <CommentsProvider\n      documentId={documentId}\n      documentType={documentType}\n      getCommentLink={getCommentLink}\n      isCommentsOpen={inspector?.name === COMMENTS_INSPECTOR_NAME}\n      isConnecting={connectionState === 'connecting'}\n      onClearSelectedComment={handleClearSelectedComment}\n      onCommentsOpen={handleOpenCommentsInspector}\n      onPathOpen={onPathOpen}\n      selectedCommentId={selectedCommentId}\n      sortOrder=\"desc\"\n      type=\"field\"\n      releaseId={selectedReleaseId}\n    >\n      {children}\n    </CommentsProvider>\n  )\n}\n","import {useMemo} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getVersionFromId,\n  type ReleaseDocument,\n  useActiveReleases,\n  useArchivedReleases,\n  useDocumentVersions,\n  usePerspective,\n} from 'sanity'\n\nimport {usePaneRouter} from '../components/paneRouter/usePaneRouter'\nimport {type DocumentPaneContextValue} from '../panes/document/DocumentPaneContext'\n\ntype FilterReleases = {\n  notCurrentReleases: ReleaseDocument[]\n  currentReleases: ReleaseDocument[]\n  inCreation: ReleaseDocument | null\n}\n\n/**\n * @internal\n */\nexport function useFilteredReleases({\n  displayed,\n  documentId,\n}: Pick<DocumentPaneContextValue, 'displayed' | 'documentId'>): FilterReleases {\n  const {selectedReleaseId} = usePerspective()\n  const {data: releases} = useActiveReleases()\n  const {data: archivedReleases} = useArchivedReleases()\n  const {data: documentVersions} = useDocumentVersions({documentId})\n  const isCreatingDocument = displayed && !displayed._createdAt\n  const {params} = usePaneRouter()\n\n  return useMemo(() => {\n    if (!documentVersions) return {notCurrentReleases: [], currentReleases: [], inCreation: null}\n    // Gets the releases ids from the document versions, it means, the releases that the document belongs to\n    const releasesIds = documentVersions.map((id) => getVersionFromId(id))\n    const activeReleases = releases.reduce(\n      (acc: FilterReleases, release) => {\n        const versionDocExists = releasesIds.includes(\n          getReleaseIdFromReleaseDocumentId(release._id),\n        )\n        const releaseId = getReleaseIdFromReleaseDocumentId(release._id)\n        const isCreatingThisVersion =\n          isCreatingDocument &&\n          releaseId === getVersionFromId(displayed._id || '') &&\n          releaseId === selectedReleaseId\n\n        if (isCreatingThisVersion) {\n          acc.inCreation = release\n        } else if (versionDocExists) {\n          acc.currentReleases.push(release)\n        } else {\n          acc.notCurrentReleases.push(release)\n        }\n        return acc\n      },\n      {notCurrentReleases: [], currentReleases: [], inCreation: null},\n    )\n\n    // without historyVersion, version is not in an archived release\n    if (!params?.historyVersion) return activeReleases\n\n    const archivedRelease = archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n\n    // only for explicitly archived releases; published releases use published perspective\n    if (archivedRelease?.state === 'archived') {\n      activeReleases.currentReleases.push(archivedRelease)\n    }\n\n    return activeReleases\n  }, [\n    archivedReleases,\n    isCreatingDocument,\n    displayed?._id,\n    documentVersions,\n    params?.historyVersion,\n    releases,\n    selectedReleaseId,\n  ])\n}\n","import {useMemo} from 'react'\nimport {getReleaseIdFromReleaseDocumentId, getVersionId} from 'sanity'\n\nimport {type DocumentPaneContextValue} from '../panes/document/DocumentPaneContext'\nimport {useFilteredReleases} from './useFilteredReleases'\n\n/**\n * @internal\n */\nexport interface DocumentIdStack {\n  /**\n   * The position of the displayed document within the stack.\n   */\n  position: number\n  /**\n   * The id of the previous document in the stack.\n   */\n  previousId?: string\n  /**\n   * The id of the next document in the stack.\n   */\n  nextId?: string\n  /**\n   * An array of document ids comprising the stack the displayed document is a member of, ordered per\n   * release layering.\n   */\n  stack: string[]\n}\n\n/**\n * Get a stack of document ids representing existing versions of the provided document with release\n * layering applied.\n *\n * @internal\n */\nexport function useDocumentIdStack({\n  displayed,\n  documentId,\n  editState,\n}: Pick<DocumentPaneContextValue, 'displayed' | 'documentId' | 'editState'>): DocumentIdStack {\n  const filteredReleases = useFilteredReleases({displayed, documentId})\n  const systemStack = [editState?.published?._id, editState?.draft?._id]\n\n  const releaseStack = filteredReleases.currentReleases.map(\n    (release) =>\n      editState?.id && getVersionId(editState.id, getReleaseIdFromReleaseDocumentId(release._id)),\n  )\n\n  const stack = systemStack.concat(releaseStack).filter((id) => typeof id === 'string')\n\n  const position = useMemo(\n    () => stack.findIndex((id) => id === displayed?._id),\n    [displayed?._id, stack],\n  )\n\n  const previousId = useMemo(() => stack[position - 1] ?? undefined, [position, stack])\n  const nextId = useMemo(() => stack[position + 1] ?? undefined, [position, stack])\n\n  return {\n    position,\n    previousId,\n    nextId,\n    stack,\n  }\n}\n","import {useContext} from 'react'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {type StructureToolContextValue} from './types'\n\n/** @internal */\nexport function useStructureTool(): StructureToolContextValue {\n  const structureTool = useContext(StructureToolContext)\n  if (!structureTool) throw new Error(`StructureTool: missing context value`)\n\n  return structureTool\n}\n","import {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItemGroup} from '../../types'\n\nexport const DOCUMENT_PANEL_MIN_WIDTH = 320\nexport const DOCUMENT_PANEL_INITIAL_MIN_WIDTH = 600\n\nexport const DOCUMENT_INSPECTOR_MIN_WIDTH = 320\nexport const DOCUMENT_INSPECTOR_MAX_WIDTH = 540\n\nexport const EMPTY_PARAMS: NonNullable<PaneRouterContextValue['params']> = {}\n\nexport const INSPECT_ACTION_PREFIX = 'inspect:'\n\nexport const DEFAULT_MENU_ITEM_GROUPS: PaneMenuItemGroup[] = [{id: 'inspectors'}, {id: 'links'}]\n\n// inspectors\nexport const HISTORY_INSPECTOR_NAME = 'sanity/structure/history'\nexport const VALIDATION_INSPECTOR_NAME = 'sanity/structure/validation'\n","import {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, useUnique} from 'sanity'\n\ninterface DocumentInspectorMenuItemsResolverProps {\n  documentId: string\n  documentType: string\n  inspectors: DocumentInspector[]\n  onMenuItems: (items: DocumentInspectorMenuItem[]) => void\n}\n\n// The menu item in a document inspector are resolved in a React hook (`useMenuItem`).\n// This means that the menu item needs to be resolved in a React component (in accordance with the rules of hooks).\n// In this component, we map over the configured inspectors and render a `InspectorMenuItem` for each.\n// The `InspectorMenuItem` will resolve the menu item in a React hook and call the `setMenuItem` callback\n// with the resolved menu item and the index of the inspector.\n// Finally, we call the `onMenuItems` callback with the resolved menu items.\nexport function DocumentInspectorMenuItemsResolver(props: DocumentInspectorMenuItemsResolverProps) {\n  const {documentId, documentType, inspectors, onMenuItems} = props\n\n  const len = inspectors.length\n  const [menuItems, setMenuItems] = useState<DocumentInspectorMenuItem[]>(() =>\n    Array.from(new Array(len)),\n  )\n\n  useEffect(() => {\n    if (menuItems.length !== len) {\n      const newFieldActions = Array.from(new Array(len))\n\n      for (let i = 0; i < len; i++) {\n        newFieldActions[i] = menuItems[i]\n      }\n\n      setMenuItems(newFieldActions)\n    }\n  }, [len, menuItems])\n\n  const setMenuItem = useCallback((index: number, node: DocumentInspectorMenuItem) => {\n    setMenuItems((prev) => {\n      const next = [...prev]\n      next[index] = node\n      return next\n    })\n  }, [])\n\n  useEffect(() => {\n    onMenuItems(menuItems.filter(Boolean))\n  }, [menuItems, onMenuItems])\n\n  const InspectorMenuItems = useMemo(() => {\n    return inspectors.map((inspector, index) => {\n      return inspector.useMenuItem\n        ? ([\n            defineInspectorMenuItemComponent({\n              documentId,\n              documentType,\n              index,\n              setMenuItem,\n              useMenuItem: inspector.useMenuItem,\n            }),\n            inspector.name,\n          ] as const)\n        : ([() => null, ''] as const)\n    })\n  }, [documentId, documentType, inspectors, setMenuItem])\n\n  return (\n    <>\n      {InspectorMenuItems.map(([InspectorMenuItem, key]) => key && <InspectorMenuItem key={key} />)}\n    </>\n  )\n}\nDocumentInspectorMenuItemsResolver.displayName = 'DocumentInspectorMenuItemsResolver'\n\nfunction defineInspectorMenuItemComponent({\n  documentId,\n  documentType,\n  index,\n  setMenuItem,\n  useMenuItem,\n}: {\n  documentId: string\n  documentType: string\n  index: number\n  setMenuItem: (index: number, node: DocumentInspectorMenuItem) => void\n  useMenuItem: NonNullable<DocumentInspector['useMenuItem']>\n}) {\n  return memo(function InspectorMenuItem() {\n    const menuItem = useMenuItem({\n      documentId,\n      documentType,\n    })\n    const node = useUnique(menuItem)\n\n    useEffect(() => {\n      setMenuItem(index, node)\n    }, [node])\n\n    return null\n  })\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\n\n/**\n * useDocumentTitle hook return type.\n *\n * @beta\n * @hidden\n */\ninterface UseDocumentTitle {\n  error?: string\n  title?: string\n}\n\n/**\n * React hook that returns the document title for the current document in the document pane.\n *\n * @beta\n * @hidden\n *\n * @returns The document title or error. See {@link UseDocumentTitle}\n */\nexport function useDocumentTitle(): UseDocumentTitle {\n  const {connectionState, schemaType, title, displayed} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const subscribed = Boolean(displayed)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: displayed,\n  })\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return {error: undefined, title: undefined}\n  }\n\n  if (title) {\n    return {error: undefined, title}\n  }\n\n  if (!displayed) {\n    return {\n      error: undefined,\n      title: t('panes.document-header-title.new.text', {\n        schemaType: schemaType?.title || schemaType?.name,\n      }),\n    }\n  }\n\n  if (error) {\n    return {\n      error: t('panes.document-list-pane.error.text', {error: error.message}),\n      title: undefined,\n    }\n  }\n\n  return {error: undefined, title: value?.title}\n}\n","import {useToast} from '@sanity/ui'\nimport {memo, useEffect, useMemo, useRef} from 'react'\nimport {Translate, useDocumentOperationEvent, useTranslation} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {useDocumentPane} from './useDocumentPane'\nimport {useDocumentTitle} from './useDocumentTitle'\n\nconst IGNORE_OPS = ['patch', 'commit']\n\nexport const DocumentOperationResults = memo(function DocumentOperationResults() {\n  const {push: pushToast} = useToast()\n  const {documentId, documentType, value: documentPaneValue} = useDocumentPane()\n  const documentTitleInfo = useDocumentTitle()\n  const titleError = documentTitleInfo.error\n  const event: any = useDocumentOperationEvent(documentId, documentType)\n  const prevEvent = useRef(event)\n  const paneRouter = usePaneRouter()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => {\n    // If title isn't set from document preview, use the title from the document pane value\n    if (\n      !documentTitleInfo.title &&\n      !titleError &&\n      !IGNORE_OPS.includes(event?.op) &&\n      typeof documentPaneValue.title === 'string' &&\n      event?.type === 'success'\n    ) {\n      return documentPaneValue.title\n    }\n    return documentTitleInfo.title\n  }, [documentTitleInfo.title, titleError, event, documentPaneValue.title])\n  //Truncate the document title and add \"...\" if it is over 25 characters\n  const documentTitleBase = title || t('panes.document-operation-results.operation-undefined-title')\n  const documentTitle =\n    documentTitleBase.length > 25 ? `${documentTitleBase.slice(0, 25)}...` : documentTitleBase\n\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    let cleanupId: number | undefined\n\n    if (event.type === 'error') {\n      pushToast({\n        closable: true,\n        duration: 30000, // 30s\n        status: 'error',\n        title: t('panes.document-operation-results.operation-error', {context: event.op}),\n        description: (\n          <details>\n            <summary>{t('panes.document-operation-results.error.summary.title')}</summary>\n            {event.error.message}\n          </details>\n        ),\n      })\n    }\n\n    if (event.type === 'success' && !IGNORE_OPS.includes(event.op)) {\n      pushToast({\n        closable: true,\n        status: 'success',\n        title: (\n          <Translate\n            context={event.op}\n            i18nKey=\"panes.document-operation-results.operation-success\"\n            t={t}\n            values={{\n              op: event.op,\n              title: documentTitle,\n            }}\n            components={{\n              Strong: 'strong',\n            }}\n          />\n        ),\n      })\n    }\n\n    /**\n     * If the document was deleted successfully, close the pane.\n     */\n    if (event.type === 'success' && event.op === 'delete') {\n      // Wait until next tick to allow deletion toasts to appear first\n      cleanupId = setTimeout(() => paneRouter.closeCurrentAndAfter(), 0) as any as number\n    }\n\n    prevEvent.current = event\n\n    // eslint-disable-next-line consistent-return\n    return () => clearTimeout(cleanupId)\n  }, [event, paneRouter, pushToast, t, documentTitle])\n\n  return null\n})\n","import {WarningOutlineIcon} from '@sanity/icons'\nimport {type PreviewValue, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {assignWith} from 'lodash'\nimport {type ReactNode} from 'react'\nimport {combineLatest, type Observable, of} from 'rxjs'\nimport {map, startWith} from 'rxjs/operators'\nimport {type DocumentPreviewStore, getDraftId, getPublishedId} from 'sanity'\n\nimport {type PaneItemPreviewState} from './types'\n\nexport const isLiveEditEnabled = (schemaType: SchemaType) => schemaType.liveEdit === true\n\nexport const getMissingDocumentFallback = (item: SanityDocument) => ({\n  title: <em>{item.title ? String(item.title) : 'Missing document'}</em>,\n  subtitle: <em>{item.title ? `Missing document ID: ${item._id}` : `Document ID: ${item._id}`}</em>,\n  media: () => <WarningOutlineIcon />,\n})\n\nexport const getValueWithFallback = ({\n  value,\n  draft,\n  published,\n}: {\n  value: SanityDocument\n  draft?: Partial<SanityDocument> | PreviewValue | null\n  published?: Partial<SanityDocument> | PreviewValue | null\n}) => {\n  const snapshot = draft || published\n\n  if (!snapshot) {\n    return getMissingDocumentFallback(value)\n  }\n\n  return assignWith({}, snapshot, value, (objValue, srcValue) => {\n    return typeof srcValue === 'undefined' ? objValue : srcValue\n  })\n}\n\nexport function getPreviewStateObservable(\n  documentPreviewStore: DocumentPreviewStore,\n  schemaType: SchemaType,\n  documentId: string,\n  title: ReactNode,\n): Observable<PaneItemPreviewState> {\n  const draft$ = isLiveEditEnabled(schemaType)\n    ? of({snapshot: null})\n    : documentPreviewStore.observeForPreview(\n        {_type: 'reference', _ref: getDraftId(documentId)},\n        schemaType,\n      )\n\n  const published$ = documentPreviewStore.observeForPreview(\n    {_type: 'reference', _ref: getPublishedId(documentId)},\n    schemaType,\n  )\n\n  return combineLatest([draft$, published$]).pipe(\n    map(([draft, published]) => ({\n      draft: draft.snapshot ? {title, ...(draft.snapshot || {})} : null,\n      isLoading: false,\n      published: published.snapshot ? {title, ...(published.snapshot || {})} : null,\n    })),\n    startWith({draft: null, isLoading: true, published: null}),\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Box, Card, type CardProps, Flex, Text} from '@sanity/ui'\nimport {type HTMLProps, type ReactNode} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport interface DocumentInspectorHeaderProps {\n  as?: CardProps['as']\n  closeButtonLabel: string\n  flex?: CardProps['flex']\n  onClose: () => void\n  title: ReactNode\n}\n\nconst Root = styled(Card)({\n  position: 'relative',\n  zIndex: 1,\n  lineHeight: 0,\n})\n\n/** @internal */\nexport function DocumentInspectorHeader(\n  props: DocumentInspectorHeaderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height' | 'ref'>,\n) {\n  const {as: forwardedAs, children, closeButtonLabel, onClose, title, ...restProps} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Root {...restProps} as={forwardedAs}>\n      <Flex padding={2}>\n        <Box flex={1} padding={3}>\n          <Text as=\"h1\" size={1} weight=\"medium\">\n            {title}\n          </Text>\n        </Box>\n        <Box flex=\"none\" padding={1}>\n          <Button\n            aria-label={closeButtonLabel}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Box>\n      </Flex>\n      {children}\n    </Root>\n  )\n}\n","import {Box} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Resizable} from 'sanity'\n\nimport {usePane} from '../../../components'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DOCUMENT_INSPECTOR_MAX_WIDTH, DOCUMENT_INSPECTOR_MIN_WIDTH} from '../constants'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentInspectorPanelProps {\n  documentId: string\n  documentType: string\n  flex?: number | number[]\n}\n\nexport function DocumentInspectorPanel(\n  props: DocumentInspectorPanelProps,\n): React.JSX.Element | null {\n  const {documentId, documentType, flex} = props\n  const {collapsed} = usePane()\n  const {closeInspector, inspector} = useDocumentPane()\n  const {features} = useStructureTool()\n\n  const handleClose = useCallback(() => {\n    if (inspector) closeInspector(inspector.name)\n  }, [closeInspector, inspector])\n\n  if (collapsed || !inspector) return null\n\n  const Component = inspector.component\n  const element = (\n    <Component onClose={handleClose} documentId={documentId} documentType={documentType} />\n  )\n\n  if (features.resizablePanes) {\n    return (\n      <Resizable\n        as=\"aside\"\n        data-ui=\"DocumentInspectorPanel\"\n        flex={flex}\n        resizerPosition=\"left\"\n        maxWidth={DOCUMENT_INSPECTOR_MAX_WIDTH}\n        minWidth={DOCUMENT_INSPECTOR_MIN_WIDTH}\n      >\n        {element}\n      </Resizable>\n    )\n  }\n\n  return (\n    <Box as=\"aside\" data-ui=\"DocumentInspectorPanel\" flex={flex}>\n      {element}\n    </Box>\n  )\n}\n","import {useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {map} from 'rxjs/operators'\nimport {useKeyValueStore} from 'sanity'\n\nconst STRUCTURE_TOOL_NAMESPACE = 'studio.structure-tool'\n\n/**\n * @internal\n */\nexport function useStructureToolSetting<ValueType>(\n  namespace: string,\n  key: string | null,\n  defaultValue?: ValueType,\n): [ValueType | undefined, (_value: ValueType) => void] {\n  const keyValueStore = useKeyValueStore()\n\n  const keyValueStoreKey = [STRUCTURE_TOOL_NAMESPACE, namespace, key].filter(Boolean).join('.')\n\n  const value$ = useMemo(() => {\n    return keyValueStore\n      .getKey(keyValueStoreKey)\n      .pipe(map((value) => (value === null ? defaultValue : value)))\n  }, [defaultValue, keyValueStore, keyValueStoreKey])\n\n  const value = useObservable(value$, defaultValue) as ValueType\n  const set = useCallback(\n    (newValue: ValueType) => {\n      if (newValue !== value) {\n        keyValueStore.setKey(keyValueStoreKey, newValue as string)\n      }\n    },\n    [keyValueStore, keyValueStoreKey, value],\n  )\n\n  return useMemo(() => [value, set], [set, value])\n}\n","export const VIEW_MODE_PARSED = {id: 'parsed', title: 'document-inspector.view-mode.parsed'}\nexport const VIEW_MODE_RAW = {id: 'raw', title: 'document-inspector.view-mode.raw-json'}\nexport const VIEW_MODES = [VIEW_MODE_PARSED, VIEW_MODE_RAW]\n","import {type SanityDocumentLike} from '@sanity/types'\nimport LRU from 'quick-lru'\nimport {isRecord, isString} from 'sanity'\n\nconst lru = new LRU({maxSize: 1000})\n\nexport function isExpanded(keyPath: any, value: any): any {\n  const cached = lru.get(keyPath)\n\n  if (cached === undefined) {\n    lru.set(keyPath, Array.isArray(value) || isRecord(value))\n    return isExpanded(keyPath, value)\n  }\n\n  return cached\n}\n\nexport function toggleExpanded(event: any): void {\n  const {path} = event\n  const current = lru.get(path)\n\n  if (current === undefined) {\n    // something is wrong\n    return\n  }\n\n  lru.set(path, !current)\n}\n\nexport function selectElement(element: HTMLElement): void {\n  const sel = window.getSelection()\n\n  if (sel) {\n    const range = document.createRange()\n\n    sel.removeAllRanges()\n    range.selectNodeContents(element)\n    sel.addRange(range)\n  }\n}\n\nexport function select(event: any): void {\n  selectElement(event.currentTarget)\n}\n\nexport function maybeSelectAll(event: any): void {\n  const selectAll = event.keyCode === 65 && (event.metaKey || event.ctrlKey)\n\n  if (!selectAll) {\n    return\n  }\n\n  event.preventDefault()\n\n  selectElement(event.currentTarget)\n}\n\nexport function isDocumentLike(value: unknown): value is SanityDocumentLike {\n  return isRecord(value) && isString(value._id) && isString(value._type)\n}\n","import {rem, type Theme} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const JSONInspectorWrapper = styled.div(({theme}: {theme: Theme}) => {\n  const {color, fonts, space} = theme.sanity\n\n  return css`\n    & .json-inspector,\n    & .json-inspector .json-inspector__selection {\n      font-family: ${fonts.code.family};\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n      color: var(--card-code-fg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf {\n      padding-left: ${rem(space[4])};\n    }\n\n    & .json-inspector .json-inspector__leaf.json-inspector__leaf_root {\n      padding-top: ${rem(space[3])};\n      padding-left: 0;\n    }\n\n    & .json-inspector > .json-inspector__leaf_root > .json-inspector__line > .json-inspector__key {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__line {\n      display: block;\n      position: relative;\n      cursor: default;\n    }\n\n    & .json-inspector .json-inspector__line::after {\n      content: '';\n      position: absolute;\n      top: 0;\n      left: -200px;\n      right: -50px;\n      bottom: 0;\n      z-index: -1;\n      pointer-events: none;\n    }\n\n    & .json-inspector .json-inspector__line:hover::after {\n      background: var(--card-code-bg-color);\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line {\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__leaf_composite > .json-inspector__line::before {\n      content: '▸ ';\n      margin-left: calc(0 - ${rem(space[4])} + 3px);\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    &\n      .json-inspector\n      .json-inspector__leaf_expanded.json-inspector__leaf_composite\n      > .json-inspector__line::before {\n      content: '▾ ';\n      font-size: ${fonts.code.sizes[1].fontSize}px;\n      line-height: ${fonts.code.sizes[1].lineHeight}px;\n    }\n\n    & .json-inspector .json-inspector__radio,\n    & .json-inspector .json-inspector__flatpath {\n      display: none;\n    }\n\n    & .json-inspector .json-inspector__value {\n      margin-left: ${rem(space[4] / 2)};\n    }\n\n    &\n      .json-inspector\n      > .json-inspector__leaf_root\n      > .json-inspector__line\n      > .json-inspector__key\n      + .json-inspector__value {\n      margin: 0;\n    }\n\n    & .json-inspector .json-inspector__key {\n      color: ${color.syntax.property};\n    }\n\n    & .json-inspector .json-inspector__value_helper,\n    & .json-inspector .json-inspector__value_null {\n      color: ${color.syntax.constant};\n    }\n\n    & .json-inspector .json-inspector__not-found {\n      padding-top: ${rem(space[3])};\n    }\n\n    & .json-inspector .json-inspector__value_string {\n      color: ${color.syntax.string};\n    }\n\n    & .json-inspector .json-inspector__value_boolean {\n      color: ${color.syntax.boolean};\n    }\n\n    & .json-inspector .json-inspector__value_number {\n      color: ${color.syntax.number};\n    }\n\n    & .json-inspector .json-inspector__show-original {\n      display: inline-block;\n      padding: 0 6px;\n      cursor: pointer;\n    }\n\n    & .json-inspector .json-inspector__show-original:hover {\n      color: inherit;\n    }\n\n    & .json-inspector .json-inspector__show-original::before {\n      content: '↔';\n    }\n\n    & .json-inspector .json-inspector__show-original:hover::after {\n      content: ' expand';\n    }\n  `\n})\n","import {SearchIcon} from '@sanity/icons'\nimport {TextInput} from '@sanity/ui'\nimport {type ChangeEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../i18n'\n\nexport function Search(props: {onChange: (q: string) => void; query: string}) {\n  const {onChange, query} = props\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.value),\n    [onChange],\n  )\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <TextInput\n      icon={SearchIcon}\n      onChange={handleChange}\n      placeholder={t('document-inspector.search.placeholder')}\n      radius={2}\n      value={query || ''}\n    />\n  )\n}\n","import {JsonInspector} from '@rexxars/react-json-inspector'\nimport {type SanityDocument} from '@sanity/types'\nimport {Card, Code, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {Translate, useTranslation} from 'sanity'\n\nimport {Dialog, Tab} from '../../../../ui-components'\nimport {DocTitle} from '../../../components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureToolSetting} from '../../../useStructureToolSetting'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {VIEW_MODE_PARSED, VIEW_MODE_RAW, VIEW_MODES} from './constants'\nimport {isDocumentLike, isExpanded, maybeSelectAll, select, toggleExpanded} from './helpers'\nimport {JSONInspectorWrapper} from './InspectDialog.styles'\nimport {Search} from './Search'\n\ninterface InspectDialogProps {\n  value: Partial<SanityDocument> | null\n}\n\nexport function InspectDialog(props: InspectDialogProps) {\n  const {value} = props\n  const {onInspectClose, paneKey} = useDocumentPane()\n  const dialogIdPrefix = `${paneKey}_inspect_`\n\n  /* this creates a view mode (the default that it opens with is the parsed tab) that is saved based on the paneKey\n  where the inspect dialog lives.\n  This also means that when a page is loaded, the state of the tabs remains and doesn't revert to the pane tab */\n  const [viewModeId, onViewModeChange] = useStructureToolSetting(\n    'inspect-view-mode',\n    null,\n    'parsed',\n  )\n\n  /* based on the view mode it shows the right tab content */\n  const viewMode = VIEW_MODES.find((mode) => mode.id === viewModeId)\n\n  const setParsedViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_PARSED.id)\n  }, [onViewModeChange])\n\n  const setRawViewMode = useCallback(() => {\n    onViewModeChange(VIEW_MODE_RAW.id)\n  }, [onViewModeChange])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Dialog\n      bodyHeight=\"fill\"\n      id={`${dialogIdPrefix}dialog`}\n      header={\n        isDocumentLike(value) ? (\n          <Translate\n            t={t}\n            i18nKey=\"document-inspector.dialog.title\"\n            components={{\n              DocumentTitle: () => (\n                <em>\n                  <DocTitle document={value} />\n                </em>\n              ),\n            }}\n          />\n        ) : (\n          <em>{t('document-inspector.dialog.title-no-value')}</em>\n        )\n      }\n      onClose={onInspectClose}\n      onClickOutside={onInspectClose}\n      padding={false}\n      width={2}\n    >\n      <Flex direction=\"column\" height=\"fill\">\n        <Card\n          padding={3}\n          paddingTop={0}\n          shadow={1}\n          style={{position: 'sticky', bottom: 0, zIndex: 3}}\n        >\n          <TabList space={1}>\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_PARSED.id}`}\n              label={t(VIEW_MODE_PARSED.title)}\n              onClick={setParsedViewMode}\n              selected={viewMode === VIEW_MODE_PARSED}\n            />\n            <Tab\n              aria-controls={`${dialogIdPrefix}tabpanel`}\n              id={`${dialogIdPrefix}tab-${VIEW_MODE_RAW.id}`}\n              label={t(VIEW_MODE_RAW.title)}\n              onClick={setRawViewMode}\n              selected={viewMode === VIEW_MODE_RAW}\n            />\n          </TabList>\n        </Card>\n\n        <TabPanel\n          aria-labelledby={`${dialogIdPrefix}tab-${viewModeId}`}\n          flex={1}\n          id={`${dialogIdPrefix}tabpanel`}\n          overflow=\"auto\"\n          padding={4}\n          style={{outline: 'none'}}\n        >\n          {viewMode === VIEW_MODE_PARSED && (\n            <JSONInspectorWrapper>\n              <JsonInspector\n                data={value}\n                isExpanded={isExpanded}\n                onClick={toggleExpanded}\n                search={Search}\n                filterOptions={{ignoreCase: true}}\n              />\n            </JSONInspectorWrapper>\n          )}\n\n          {viewMode === VIEW_MODE_RAW && (\n            <Code\n              language=\"json\"\n              tabIndex={0}\n              onKeyDown={maybeSelectAll}\n              onDoubleClick={select}\n              onFocus={select}\n              size={1}\n            >\n              {JSON.stringify(value, null, 2)}\n            </Code>\n          )}\n        </TabPanel>\n      </Flex>\n    </Dialog>\n  )\n}\n","import {Box, type ButtonMode, type ButtonTone, Card, type CardTone, Flex, Text} from '@sanity/ui'\nimport {type ComponentType, type ElementType, type ReactNode} from 'react'\n\nimport {Button} from '../../../../../ui-components'\n\ninterface BannerProps {\n  action?: {\n    as?: ElementType | keyof React.JSX.IntrinsicElements\n    icon?: ComponentType\n    onClick?: () => void\n    text: string\n    tone?: ButtonTone\n    disabled?: boolean\n    mode?: ButtonMode\n  }\n  content: ReactNode\n  icon?: ComponentType\n  tone?: CardTone\n  paddingY?: number\n}\n\nexport function Banner(props: BannerProps) {\n  const {action, content, icon: Icon, tone = 'transparent', paddingY = 2, ...rest} = props\n\n  return (\n    <Box padding={1}>\n      <Card radius={3} paddingX={2} paddingY={paddingY} tone={tone} {...rest}>\n        <Flex align=\"center\" gap={3} paddingX={2}>\n          {Icon && (\n            <Text size={0}>\n              <Icon />\n            </Text>\n          )}\n\n          <Flex align=\"center\" flex={1} gap={2} paddingY={2}>\n            {content}\n          </Flex>\n\n          {action && (\n            <Button {...action} mode={action.mode || 'ghost'} tone={action.tone || 'default'} />\n          )}\n        </Flex>\n      </Card>\n    </Box>\n  )\n}\n","import {DocumentRemoveIcon, ReadOnlyIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  isDraftPerspective,\n  isPublishedPerspective,\n  type ReleaseDocument,\n  Translate,\n  useDocumentOperation,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeletedDocumentBanners() {\n  const {isDeleted, isDeleting} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  if (\n    !isPublishedPerspective(selectedPerspective) &&\n    !isDraftPerspective(selectedPerspective) &&\n    selectedPerspective.state === 'archived'\n  ) {\n    return <ArchivedReleaseBanner release={selectedPerspective as ReleaseDocument} />\n  }\n  if (isDeleted && !isDeleting) return <DeletedDocumentBanner />\n}\n\nfunction DeletedDocumentBanner() {\n  const {documentId, documentType, lastNonDeletedRevId} = useDocumentPane()\n  const {restore} = useDocumentOperation(documentId, documentType)\n  const {navigateIntent} = useRouter()\n\n  const handleRestore = useCallback(() => {\n    if (lastNonDeletedRevId) {\n      restore.execute(lastNonDeletedRevId)\n      navigateIntent('edit', {id: documentId, type: documentType})\n    }\n  }, [documentId, documentType, navigateIntent, restore, lastNonDeletedRevId])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  return (\n    <Banner\n      action={\n        lastNonDeletedRevId\n          ? {\n              onClick: handleRestore,\n              text: t('banners.deleted-document-banner.restore-button.text'),\n            }\n          : undefined\n      }\n      content={\n        <Text size={1} weight=\"medium\">\n          {t('banners.deleted-document-banner.text')}\n        </Text>\n      }\n      data-testid=\"deleted-document-banner\"\n      icon={ReadOnlyIcon}\n    />\n  )\n}\n\nconst ArchivedReleaseBanner = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  return (\n    <Banner\n      tone=\"caution\"\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate\n            t={t}\n            i18nKey=\"banners.deleted-release-banner.text\"\n            values={{title: release.metadata?.title || t('release.placeholder-untitled-release')}}\n          />\n        </Text>\n      }\n      data-testid=\"deleted-release-banner\"\n      icon={DocumentRemoveIcon}\n    />\n  )\n}\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {isDeprecatedSchemaType, Translate, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function DeprecatedDocumentTypeBanner() {\n  const {schemaType} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (!isDeprecatedSchemaType(schemaType)) {\n    return null\n  }\n\n  return (\n    <Banner\n      content={\n        <Text size={1} weight=\"medium\">\n          <Translate t={t} i18nKey=\"banners.deprecated-document-type-banner.text\" />{' '}\n          {schemaType.deprecated.reason}\n        </Text>\n      }\n      data-testid=\"deprecated-document-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/** @internal */\nexport const AskToEditDialogOpened = defineEvent({\n  name: 'Ask To Edit Dialog Opened',\n  version: 1,\n  description: 'User clicked the \"Ask to edit\" button in the document permissions banner',\n})\n\n/** @internal */\nexport const AskToEditRequestSent = defineEvent({\n  name: 'Ask To Edit Request Sent',\n  version: 1,\n  description: 'User sent a role change request from the dialog',\n})\n","import {useTelemetry} from '@sanity/telemetry/react'\nimport {Box, Card, DialogProvider, Flex, Stack, Text, TextInput, useToast} from '@sanity/ui'\nimport {useId, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {catchError, map, type Observable, of, startWith} from 'rxjs'\nimport {type Role, useClient, useProjectId, useTranslation, useZIndex} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Dialog} from '../../../ui-components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {AskToEditRequestSent} from './__telemetry__/RequestPermissionDialog.telemetry'\nimport {type AccessRequest} from './useRoleRequestsStatus'\n\nconst MAX_NOTE_LENGTH = 150\n\n/** @internal */\nexport const DialogBody = styled(Box)`\n  box-sizing: border-box;\n`\n\n/** @internal */\nexport const LoadingContainer = styled(Flex).attrs({\n  align: 'center',\n  direction: 'column',\n  justify: 'center',\n})`\n  height: 110px;\n`\n\n/** @internal */\nexport interface RequestPermissionDialogProps {\n  onClose?: () => void\n  onRequestSubmitted?: () => void\n}\n\n/**\n * A dialog that enables the user to request permission to change their\n * member role from \"Viewer\" to \"Editor\" or \"Admin\" depending on the\n * project's available roles.\n *\n * @internal\n */\nexport function RequestPermissionDialog({\n  onClose,\n  onRequestSubmitted,\n}: RequestPermissionDialogProps) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemtry = useTelemetry()\n  const dialogId = `request-permissions-${useId()}`\n  const projectId = useProjectId()\n  const client = useClient({apiVersion: '2024-09-26'})\n  const toast = useToast()\n  const zOffset = useZIndex()\n\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const [note, setNote] = useState('')\n\n  const [msgError, setMsgError] = useState<string | undefined>()\n  const [hasTooManyRequests, setHasTooManyRequests] = useState<boolean>(false)\n  const [hasBeenDenied, setHasBeenDenied] = useState<boolean>(false)\n\n  const requestedRole$: Observable<'administrator' | 'editor'> = useMemo(() => {\n    const adminRole = 'administrator' as const\n    if (!projectId || !client) return of(adminRole)\n    return client.observable\n      .request<(Role & {appliesToUsers?: boolean})[]>({url: `/projects/${projectId}/roles`})\n      .pipe(\n        map((roles) => {\n          const hasEditor = roles\n            .filter((role) => role?.appliesToUsers)\n            .find((role) => role.name === 'editor')\n          return hasEditor ? 'editor' : adminRole\n        }),\n        startWith(adminRole),\n        catchError(() => of(adminRole)),\n      )\n  }, [projectId, client])\n\n  const requestedRole = useObservable(requestedRole$)\n\n  const onSubmit = () => {\n    setIsSubmitting(true)\n    client\n      .request<AccessRequest | null>({\n        url: `/access/project/${projectId}/requests`,\n        method: 'post',\n        body: {note, requestUrl: window?.location.href, requestedRole, type: 'role'},\n      })\n      .then((request) => {\n        if (request) {\n          if (onRequestSubmitted) onRequestSubmitted()\n          telemtry.log(AskToEditRequestSent)\n          toast.push({title: 'Edit access requested'})\n        }\n      })\n      .catch((err) => {\n        const statusCode = err?.response?.statusCode\n        const errMessage = err?.response?.body?.message\n        if (statusCode === 429) {\n          // User is over their cross-project request limit\n          setHasTooManyRequests(true)\n          setMsgError(errMessage)\n        }\n        if (statusCode === 409) {\n          // If we get a 409, user has been denied on this project or has a valid pending request\n          // valid pending request should be handled by GET request above\n          setHasBeenDenied(true)\n          setMsgError(errMessage)\n        } else {\n          toast.push({\n            title: 'There was a problem submitting your request.',\n            status: 'error',\n          })\n        }\n      })\n      .finally(() => {\n        setIsSubmitting(false)\n      })\n  }\n\n  return (\n    <DialogProvider position={'fixed'} zOffset={zOffset.fullscreen}>\n      <Dialog\n        width={1}\n        id={dialogId}\n        header={t('request-permission-dialog.header.text')}\n        footer={{\n          cancelButton: {\n            onClick: onClose,\n            text: t('confirm-dialog.cancel-button.fallback-text'),\n          },\n          confirmButton: {\n            onClick: onSubmit,\n            loading: isSubmitting,\n            disabled: hasTooManyRequests || hasBeenDenied,\n            text: t('request-permission-dialog.confirm-button.text'),\n            tone: 'primary',\n            type: 'submit',\n          },\n        }}\n        onClose={onClose}\n        onClickOutside={onClose}\n      >\n        <DialogBody>\n          <Stack space={4}>\n            <Text>{t('request-permission-dialog.description.text')}</Text>\n            {hasTooManyRequests || hasBeenDenied ? (\n              <Card tone={'caution'} padding={3} radius={2} shadow={1}>\n                <Text size={1}>\n                  {hasTooManyRequests && (\n                    <>{msgError ?? t('request-permission-dialog.warning.limit-reached.text')}</>\n                  )}\n                  {hasBeenDenied && (\n                    <>{msgError ?? t('request-permission-dialog.warning.denied.text')}</>\n                  )}\n                </Text>\n              </Card>\n            ) : (\n              <Stack space={3} paddingBottom={0}>\n                <TextInput\n                  placeholder={t('request-permission-dialog.note-input.placeholder.text')}\n                  disabled={isSubmitting}\n                  onKeyDown={(e) => {\n                    if (e.key === 'Enter') onSubmit()\n                  }}\n                  maxLength={MAX_NOTE_LENGTH}\n                  value={note}\n                  onChange={(e) => {\n                    setNote(e.currentTarget.value)\n                  }}\n                />\n\n                <Text align=\"right\" muted size={1}>{`${note.length}/${MAX_NOTE_LENGTH}`}</Text>\n              </Stack>\n            )}\n          </Stack>\n        </DialogBody>\n      </Dialog>\n    </DialogProvider>\n  )\n}\n","import {addWeeks, isAfter, isBefore} from 'date-fns'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {of} from 'rxjs'\nimport {catchError, map, startWith} from 'rxjs/operators'\nimport {type SanityClient, useClient, useProjectId} from 'sanity'\n\n/** @internal */\nexport interface AccessRequest {\n  id: string\n  status: 'pending' | 'accepted' | 'declined'\n  resourceId: string\n  resourceType: 'project'\n  createdAt: string\n  updatedAt: string\n  updatedByUserId: string\n  requestedByUserId: string\n  requestedRole: string\n  type: 'access' | 'role'\n  note: string\n}\n\nconst LOADING_STATE = {loading: true, error: false, status: undefined}\nconst EMPTY_STATE = {loading: false, error: false, status: 'none'}\nconst DECLINED_STATE = {loading: false, error: false, status: 'declined'}\nconst PENDING_STATE = {loading: false, error: false, status: 'pending'}\nconst EXPIRED_STATE = {loading: false, error: false, status: 'expired'}\n\n/** @internal */\nexport const useRoleRequestsStatus = () => {\n  const client = useClient({apiVersion: '2024-07-01'})\n  const projectId = useProjectId()\n\n  const checkRoleRequests$ = useMemo(() => {\n    if (!client || !projectId) {\n      return of(EMPTY_STATE)\n    }\n\n    return checkRoleRequests(client, projectId)\n  }, [client, projectId])\n\n  const {loading, error, status} = useObservable(checkRoleRequests$, LOADING_STATE)\n  return {data: status, loading, error}\n}\n\nfunction checkRoleRequests(client: SanityClient, projectId: string) {\n  return client.observable\n    .request<AccessRequest[] | null>({\n      url: '/access/requests/me',\n      tag: 'use-role-requests-status',\n    })\n    .pipe(\n      map((requests) => {\n        if (!requests || requests.length === 0) {\n          return EMPTY_STATE\n        }\n\n        // Filter requests for the specific project and where type is 'role'\n        const projectRequests = requests.filter(\n          (request) => request.resourceId === projectId && request.type === 'role',\n        )\n\n        const declinedRequest = projectRequests.find((request) => request.status === 'declined')\n        if (\n          declinedRequest &&\n          isAfter(addWeeks(new Date(declinedRequest.createdAt), 2), new Date())\n        ) {\n          return DECLINED_STATE\n        }\n\n        const pendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isAfter(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n        if (pendingRequest) {\n          return PENDING_STATE\n        }\n\n        const oldPendingRequest = projectRequests.find(\n          (request) =>\n            request.status === 'pending' &&\n            isBefore(addWeeks(new Date(request.createdAt), 2), new Date()),\n        )\n\n        return oldPendingRequest ? EXPIRED_STATE : EMPTY_STATE\n      }),\n      catchError((err) => {\n        console.error('Failed to fetch access requests', err)\n        return of({loading: false, error: true, status: undefined})\n      }),\n      startWith(LOADING_STATE), // Start with loading state\n    )\n}\n","import {ReadOnlyIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {Translate, useCurrentUser, useListFormat, useTranslation} from 'sanity'\n\nimport {\n  RequestPermissionDialog,\n  useRoleRequestsStatus,\n} from '../../../../components/requestPermissionDialog'\nimport {AskToEditDialogOpened} from '../../../../components/requestPermissionDialog/__telemetry__/RequestPermissionDialog.telemetry'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {Banner} from './Banner'\n\ninterface InsufficientPermissionBannerProps {\n  requiredPermission: 'update' | 'create'\n}\n\nexport function InsufficientPermissionBanner({\n  requiredPermission,\n}: InsufficientPermissionBannerProps) {\n  const currentUser = useCurrentUser()\n\n  const {\n    data: roleRequestStatus,\n    loading: requestStatusLoading,\n    error: requestStatusError,\n  } = useRoleRequestsStatus()\n  const [requestSent, setRequestSent] = useState(false)\n  const requestPending = useMemo(\n    () => roleRequestStatus === 'pending' || roleRequestStatus === 'declined' || requestSent,\n    [roleRequestStatus, requestSent],\n  )\n  const currentUserRoles = currentUser?.roles || []\n  const isOnlyViewer = currentUserRoles.length === 1 && currentUserRoles[0].name === 'viewer'\n  const [showRequestPermissionDialog, setShowRequestPermissionDialog] = useState(false)\n\n  const listFormat = useListFormat({style: 'short'})\n  const {t} = useTranslation(structureLocaleNamespace)\n  const telemetry = useTelemetry()\n\n  const roleTitles = currentUserRoles.map((role) => role.title)\n  const roles = listFormat\n    .formatToParts(roleTitles)\n    .map((part) =>\n      part.type === 'element' ? <code key={part.value}>{part.value}</code> : part.value,\n    )\n\n  return (\n    <>\n      <Banner\n        content={\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey=\"banners.permission-check-banner.missing-permission\"\n              components={{Roles: () => <>{roles}</>}}\n              values={{count: roles.length, roles: roleTitles}}\n              context={requiredPermission}\n            />\n          </Text>\n        }\n        action={\n          isOnlyViewer && roleRequestStatus && !requestStatusError && !requestStatusLoading\n            ? {\n                onClick: requestPending\n                  ? undefined\n                  : () => {\n                      setShowRequestPermissionDialog(true)\n                      telemetry.log(AskToEditDialogOpened)\n                    },\n                text: requestPending\n                  ? t('banners.permission-check-banner.request-permission-button.sent')\n                  : t('banners.permission-check-banner.request-permission-button.text'),\n                tone: requestPending ? 'default' : 'primary',\n                disabled: requestPending,\n                mode: requestPending ? 'bleed' : undefined,\n              }\n            : undefined\n        }\n        data-testid=\"permission-check-banner\"\n        icon={ReadOnlyIcon}\n      />\n      {showRequestPermissionDialog && (\n        <RequestPermissionDialog\n          onClose={() => setShowRequestPermissionDialog(false)}\n          onRequestSubmitted={() => {\n            setRequestSent(true)\n            setShowRequestPermissionDialog(false)\n          }}\n        />\n      )}\n    </>\n  )\n}\n","import {CloseIcon, SyncIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {type KeyedSegment, type Reference} from '@sanity/types'\nimport {Text} from '@sanity/ui'\nimport {fromString as pathFromString, get as pathGet} from '@sanity/util/paths'\nimport {memo, useCallback, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, type Observable, of} from 'rxjs'\nimport {debounceTime, map} from 'rxjs/operators'\nimport {\n  type DocumentAvailability,\n  getPublishedId,\n  useDocumentPreviewStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {type RouterPaneGroup} from '../../../../types'\nimport {Banner} from './Banner'\n\ninterface ParentReferenceInfo {\n  loading: boolean\n  result?: {\n    availability: {\n      draft: DocumentAvailability\n      published: DocumentAvailability\n      version?: DocumentAvailability\n    }\n    refValue: string | undefined\n  }\n}\n\nexport const ReferenceChangedBanner = memo(() => {\n  const documentPreviewStore = useDocumentPreviewStore()\n  const {selectedReleaseId} = usePerspective()\n  const {params, groupIndex, routerPanesState, replaceCurrent, BackLink} = usePaneRouter()\n  const routerReferenceId = routerPanesState[groupIndex]?.[0].id\n  const parentGroup = routerPanesState[groupIndex - 1] as RouterPaneGroup | undefined\n  const parentSibling = parentGroup?.[0]\n  const parentId = parentSibling?.id\n  const hasHistoryOpen = Boolean(parentSibling?.params?.rev)\n  const parentRefPath = useMemo(() => {\n    return (params?.parentRefPath && pathFromString(params.parentRefPath)) || null\n  }, [params?.parentRefPath])\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  /**\n   * Loads information regarding the reference field of the parent pane. This\n   * is only applicable to child references (aka references-in-place).\n   *\n   * It utilizes the pane ID of the parent pane (which is a document ID) along\n   * with the `parentRefPath` router param on the current pane to find the\n   * current value of the reference field on the parent document.\n   *\n   * This is used to compare with the current pane's document ID. If the IDs\n   * don't match then this banner should reveal itself\n   */\n  const referenceInfoObservable = useMemo((): Observable<ParentReferenceInfo> => {\n    const parentRefPathSegment = parentRefPath?.[0] as string | undefined\n\n    // short-circuit: this document pane is not a child reference pane\n    if (!parentId || !parentRefPathSegment || !parentRefPath) {\n      return of({loading: false})\n    }\n\n    const publishedId = getPublishedId(parentId)\n    const path = pathFromString(parentRefPathSegment)\n\n    // note: observePaths doesn't support keyed path segments, so we need to select the nearest parent\n    const keyedSegmentIndex = path.findIndex(\n      (p): p is KeyedSegment => typeof p == 'object' && '_key' in p,\n    )\n\n    return concat(\n      // emit a loading state instantly\n      of({loading: true}),\n      // then emit the values from watching the published ID's path\n      documentPreviewStore\n        .unstable_observePathsDocumentPair(\n          publishedId,\n          (keyedSegmentIndex === -1 ? path : path.slice(0, keyedSegmentIndex)) as string[][],\n          {\n            version: selectedReleaseId,\n          },\n        )\n        .pipe(\n          // this debounce time is needed to prevent flashing banners due to\n          // the router state updating faster than the content-lake state. we\n          // debounce to wait for more emissions because the value pulled\n          // initially could be stale.\n          debounceTime(750),\n          map(\n            ({draft, published, version}): ParentReferenceInfo => ({\n              loading: false,\n              result: {\n                availability: {\n                  draft: draft.availability,\n                  published: published.availability,\n                  ...(version?.availability\n                    ? {\n                        version: version.availability,\n                      }\n                    : {}),\n                },\n                refValue: pathGet<Reference>(\n                  version?.snapshot || draft.snapshot || published.snapshot,\n                  parentRefPath,\n                )?._ref,\n              },\n            }),\n          ),\n        ),\n    )\n  }, [selectedReleaseId, documentPreviewStore, parentId, parentRefPath])\n  const referenceInfo = useObservable(referenceInfoObservable, {loading: true})\n\n  const handleReloadReference = useCallback(() => {\n    if (referenceInfo.loading) return\n\n    if (referenceInfo.result?.refValue) {\n      replaceCurrent({\n        id: referenceInfo.result.refValue,\n        params: params as Record<string, string>,\n      })\n    }\n  }, [referenceInfo.loading, referenceInfo.result, replaceCurrent, params])\n\n  const shouldHide =\n    // if `parentId` or `parentRefPath` is not present then this banner is n/a\n    !parentId ||\n    !parentRefPath ||\n    // if viewing this pane via history, then hide\n    hasHistoryOpen ||\n    // if loading, hide\n    referenceInfo.loading ||\n    // if the parent document is not available (e.g. due to permission denied or\n    // not found) we don't want to display a warning here, but instead rely on the\n    // parent view to display the appropriate message\n    (!referenceInfo.result?.availability.draft.available &&\n      !referenceInfo.result?.availability.published.available) ||\n    // if the references are the same, then hide the reference changed banner\n    referenceInfo.result?.refValue === routerReferenceId\n\n  if (shouldHide) return null\n\n  return (\n    <Banner\n      action={\n        referenceInfo.result?.refValue\n          ? {\n              onClick: handleReloadReference,\n              icon: SyncIcon,\n              text: t('banners.reference-changed-banner.reason-changed.reload-button.text'),\n            }\n          : {\n              as: BackLink,\n              icon: CloseIcon,\n              text: t('banners.reference-changed-banner.reason-removed.close-button.text'),\n            }\n      }\n      data-testid=\"reference-changed-banner\"\n      content={\n        <Text size={1} weight=\"medium\">\n          {referenceInfo.result?.refValue\n            ? t('banners.reference-changed-banner.reason-changed.text')\n            : t('banners.reference-changed-banner.reason-removed.text')}\n        </Text>\n      }\n      icon={WarningOutlineIcon}\n      tone=\"caution\"\n    />\n  )\n})\n\nReferenceChangedBanner.displayName = 'Memo(ReferenceChangedBanner)'\n","import {type ToastParams, useToast} from '@sanity/ui'\nimport {useEffect} from 'react'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value\nconst LONG_ENOUGH_BUT_NOT_TOO_LONG = 1000 * 60 * 60 * 24 * 24\n\n/**\n * Workaround to support conditional toast (e.g. a toast that is visible as long as a condition holds true)\n */\nexport function useConditionalToast(params: ToastParams & {id: string; enabled?: boolean}) {\n  const toast = useToast()\n\n  // note1: there's a `duration || 0` in Sanity UI's pushToast(), so make it non-falsey\n  // note2: cannot use `Infinity` as duration, since it exceeds setTimeout's maximum delay value\n  useEffect(() => {\n    if (params.enabled) {\n      toast.push({...params, duration: LONG_ENOUGH_BUT_NOT_TOO_LONG})\n    }\n    return () => {\n      if (params.enabled) {\n        toast.push({\n          ...params,\n          // Note: @sanity/ui fallbacks to the default duration of 4s in case of falsey values\n          duration: 0.01,\n        })\n      }\n    }\n  }, [params, toast])\n}\n","import {Flex, Text, useToast} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionInlineBadge,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n  useVersionOperations,\n} from 'sanity'\nimport {structureLocaleNamespace} from 'sanity/structure'\n\nimport {Button} from '../../../../../ui-components'\nimport {useConditionalToast} from '../documentViews/useConditionalToast'\nimport {Banner} from './Banner'\n\n// How long to wait after user hit the \"Add to release\"-button before displaying the \"waiting…\" toast\nconst TOAST_DELAY = 1000\n\ntype VersionCreateState = {\n  status: 'creating' | 'created'\n  lastUpdate: Date\n}\n\nexport function AddToReleaseBanner({\n  documentId,\n  currentRelease,\n  value,\n}: {\n  documentId: string\n  currentRelease: ReleaseDocument\n  value?: Record<string, unknown>\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n\n  const {createVersion} = useVersionOperations()\n\n  const [versionCreateState, setVersionCreateState] = useState<VersionCreateState | undefined>()\n  const toast = useToast()\n  const handleAddToRelease = useCallback(async () => {\n    if (currentRelease._id) {\n      setVersionCreateState({status: 'creating', lastUpdate: new Date()})\n      try {\n        await createVersion(\n          getReleaseIdFromReleaseDocumentId(currentRelease._id),\n          documentId,\n          value,\n        )\n        setVersionCreateState({status: 'created', lastUpdate: new Date()})\n      } catch (err) {\n        toast.push({\n          status: 'error',\n          closable: true,\n          title: t('banners.release.error.title'),\n          description: t('banners.release.error.description', {message: err.message}),\n        })\n        // Note: we only want to reset pending state in case of failure, not unconditionally the request completes (i.e. in a finally clause)\n        // this is because the UI won't reflect that the document was successfully added to the release until we get the result back over the listener\n        // once the listener event that adds the document to the release arrives the UI knows that a version exists,\n        // and this banner will not be rendered anymore\n        setVersionCreateState(undefined)\n      }\n    }\n  }, [createVersion, currentRelease._id, documentId, t, toast, value])\n\n  const now = useCurrentTime(200)\n\n  useConditionalToast({\n    status: 'info',\n    id: 'add-document-to-release',\n    enabled: Boolean(\n      versionCreateState?.status === 'created' &&\n        now.getTime() - versionCreateState.lastUpdate.getTime() > TOAST_DELAY,\n    ),\n    closable: true,\n    title: t('banners.release.waiting.title'),\n    description: t('banners.release.waiting.description'),\n  })\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              i18nKey=\"banners.release.not-in-release\"\n              t={t}\n              values={{\n                title:\n                  currentRelease?.metadata?.title || tCore('release.placeholder-untitled-release'),\n              }}\n              components={{\n                VersionBadge: getVersionInlineBadge(currentRelease),\n              }}\n            />\n          </Text>\n          <Flex gap={2} align=\"center\" justify=\"center\">\n            <Button\n              text={t('banners.release.action.add-to-release')}\n              tone={tone}\n              disabled={Boolean(versionCreateState)}\n              onClick={handleAddToRelease}\n            />\n          </Flex>\n        </Flex>\n      }\n    />\n  )\n}\n\nfunction useCurrentTime(updateIntervalMs: number): Date {\n  const [currentTime, setCurrentTime] = useState(new Date())\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date())\n    }, updateIntervalMs)\n    return () => clearInterval(intervalId)\n  }, [updateIntervalMs])\n  return currentTime\n}\n","import {Flex, Text} from '@sanity/ui'\nimport {useMemo} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getVersionInlineBadge,\n  Translate,\n  useArchivedReleases,\n  useTranslation,\n} from 'sanity'\nimport {structureLocaleNamespace, usePaneRouter} from 'sanity/structure'\n\nimport {Banner} from './Banner'\n\nexport function ArchivedReleaseDocumentBanner(): React.JSX.Element {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n  const {data: archivedReleases} = useArchivedReleases()\n\n  const {params, setParams} = usePaneRouter()\n  const handleGoBack = () => {\n    setParams({\n      ...params,\n      rev: params?.historyEvent || undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  }\n\n  const release = useMemo(() => {\n    return archivedReleases.find(\n      (r) => getReleaseIdFromReleaseDocumentId(r._id) === params?.historyVersion,\n    )\n  }, [archivedReleases, params?.historyVersion])\n\n  const description =\n    release?.state === 'published'\n      ? 'banners.published-release.description'\n      : 'banners.archived-release.description'\n\n  const title = release?.metadata.title || tCore('release.placeholder-untitled-release')\n\n  return (\n    <Banner\n      tone=\"caution\"\n      paddingY={2}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Translate\n              t={t}\n              i18nKey={description}\n              values={{\n                title,\n              }}\n              components={{\n                VersionBadge: getVersionInlineBadge(release),\n              }}\n            />\n          </Text>\n        </Flex>\n      }\n      action={\n        params?.archivedRelease\n          ? undefined\n          : {\n              text: 'Go back to published version',\n              onClick: handleGoBack,\n            }\n      }\n    />\n  )\n}\n","import {getSanityCreateLinkMetadata, useSanityCreateConfig} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\n\nimport {Banner} from './Banner'\n\nexport function CreateLinkedBanner() {\n  const {value} = useDocumentPane()\n  const {documentLinkedBannerContent: CreateLinkedBannerContent} =\n    useSanityCreateConfig().components ?? {}\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n\n  if (!CreateLinkedBannerContent || !createLinkMetadata) return null\n\n  return (\n    <Banner\n      tone=\"transparent\"\n      data-test-id=\"sanity-create-read-only-banner\"\n      content={<CreateLinkedBannerContent metadata={createLinkMetadata} />}\n    />\n  )\n}\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface TypeInfo {\n  liveEditResolveType: 'publish' | 'discard'\n}\n\n/**\n * When a draft in a live edit document is published\n * @internal\n */\nexport const ResolvedLiveEdit = defineEvent<TypeInfo>({\n  name: 'LiveEdit Draft Resolved',\n  version: 1,\n  description: 'User resolved a draft of a live edit document to continue editing',\n})\n","import {type SanityDocument} from '@sanity/client'\nimport {ErrorOutlineIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {Flex, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useState} from 'react'\nimport {type ObjectSchemaType, Translate, useDocumentOperation, useTranslation} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {ResolvedLiveEdit} from './__telemetry__/DraftLiveEditBanner.telemetry'\nimport {Banner} from './Banner'\n\ninterface DraftLiveEditBannerProps {\n  displayed: Partial<SanityDocument> | null\n  documentId: string\n  schemaType: ObjectSchemaType\n}\n\nexport function DraftLiveEditBanner({\n  displayed,\n  documentId,\n  schemaType,\n}: DraftLiveEditBannerProps): React.JSX.Element | null {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const [isPublishing, setPublishing] = useState(false)\n  const [isDiscarding, setDiscarding] = useState(false)\n  const telemetry = useTelemetry()\n\n  const {publish, discardChanges} = useDocumentOperation(documentId, displayed?._type || '')\n\n  const handlePublish = useCallback(() => {\n    publish.execute()\n    setPublishing(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'publish'})\n  }, [publish, telemetry])\n\n  const handleDiscard = useCallback(() => {\n    discardChanges.execute()\n    setDiscarding(true)\n    telemetry.log(ResolvedLiveEdit, {liveEditResolveType: 'discard'})\n  }, [discardChanges, telemetry])\n\n  useEffect(() => {\n    return () => {\n      setPublishing(false)\n      setDiscarding(false)\n    }\n  })\n\n  return (\n    <Banner\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={2}>\n          <Text size={1} weight=\"medium\">\n            <Translate\n              t={t}\n              i18nKey={'banners.live-edit-draft-banner.text'}\n              values={{schemaType: schemaType.title}}\n            />\n          </Text>\n\n          <Button\n            onClick={handlePublish}\n            text={t('action.publish.live-edit.label')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.publish.tooltip')}}\n            loading={isPublishing}\n          />\n\n          <Button\n            onClick={handleDiscard}\n            text={t('banners.live-edit-draft-banner.discard.tooltip')}\n            tooltipProps={{content: t('banners.live-edit-draft-banner.discard.tooltip')}}\n            loading={isDiscarding}\n          />\n        </Flex>\n      }\n      data-testid=\"live-edit-type-banner\"\n      icon={ErrorOutlineIcon}\n    />\n  )\n}\n","import {Flex, Text} from '@sanity/ui'\nimport {useCallback, useMemo} from 'react'\nimport {\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  isVersionId,\n  Translate,\n  useActiveReleases,\n  useDocumentVersions,\n  useOnlyHasVersions,\n  useSetPerspective,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {structureLocaleNamespace} from 'sanity/structure'\n\nimport {Button} from '../../../../../ui-components'\nimport {Banner} from './Banner'\n\nexport function OpenReleaseToEditBanner({\n  documentId,\n  isPinnedDraftOrPublished,\n}: {\n  documentId: string\n  isPinnedDraftOrPublished: boolean\n}): React.JSX.Element | null {\n  const onlyHasVersions = useOnlyHasVersions({documentId})\n\n  /** this banner should only be rendered in specific cases\n   * 1. when the document is not a draft or published\n   * 2. when the document only has version or versions\n   * 3. when the global perspective is not set (published or draft)\n   */\n\n  if (!isVersionId(documentId)) {\n    return null\n  }\n\n  if (!onlyHasVersions || !isPinnedDraftOrPublished) {\n    return null\n  }\n\n  return <OpenReleaseToEditBannerInner documentId={documentId} />\n}\n\nexport function OpenReleaseToEditBannerInner({\n  documentId,\n}: {\n  documentId: string\n}): React.JSX.Element {\n  const {data: activeReleases} = useActiveReleases()\n  const setPerspective = useSetPerspective()\n  const releaseId = getVersionFromId(documentId) ?? ''\n  const currentVersion = useMemo(\n    () => activeReleases.find((version) => version._id.includes(releaseId)),\n    [activeReleases, releaseId],\n  )\n  const {t: tCore} = useTranslation()\n\n  const {data: documentVersions} = useDocumentVersions({documentId})\n\n  const documentVersionsTitleList = useMemo(\n    () =>\n      activeReleases\n        .filter((version) => {\n          return documentVersions.find((release) => {\n            const r = getVersionFromId(release) ?? ''\n            return getReleaseIdFromReleaseDocumentId(version._id) === r\n          })\n        })\n        .map((version) => version.metadata.title || tCore('release.placeholder-untitled-release')),\n    [activeReleases, documentVersions, tCore],\n  )\n  const tone = currentVersion && getReleaseTone(currentVersion)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleGoToEdit = useCallback(async () => {\n    setPerspective(releaseId)\n  }, [releaseId, setPerspective])\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      data-testid=\"open-release-to-edit-banner\"\n      content={\n        <Flex direction={'row'} align=\"center\" justify=\"space-between\" flex={1}>\n          <Text size={1}>\n            <Flex direction={'row'} gap={1}>\n              {documentVersionsTitleList.length > 1 ? (\n                <Translate\n                  t={t}\n                  i18nKey=\"banners.release.navigate-to-edit-description-multiple\"\n                  components={{\n                    VersionBadge: () => (\n                      <VersionInlineBadge> {documentVersionsTitleList[0]}</VersionInlineBadge>\n                    ),\n                  }}\n                  values={{count: documentVersionsTitleList.length - 1}}\n                />\n              ) : (\n                <Translate\n                  t={t}\n                  i18nKey=\"banners.release.navigate-to-edit-description-single\"\n                  components={{\n                    VersionBadge: () => (\n                      <VersionInlineBadge> {documentVersionsTitleList[0]}</VersionInlineBadge>\n                    ),\n                  }}\n                />\n              )}\n            </Flex>\n          </Text>\n\n          <Button\n            text={t('banners.release.action.open-to-edit')}\n            tone={tone}\n            onClick={handleGoToEdit}\n          />\n        </Flex>\n      }\n    />\n  )\n}\n","import {LockIcon} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseTone,\n  LATEST,\n  type ReleaseDocument,\n  Translate,\n  useTranslation,\n} from 'sanity'\n\nimport {Banner} from './Banner'\n\nexport function ScheduledReleaseBanner({\n  currentRelease,\n}: {\n  currentRelease: ReleaseDocument\n}): React.JSX.Element {\n  const tone = getReleaseTone(currentRelease ?? LATEST)\n\n  const {t: tCore} = useTranslation()\n\n  return (\n    <Banner\n      tone={tone}\n      paddingY={0}\n      content={\n        <Flex align=\"center\" justify=\"space-between\" gap={1} flex={1}>\n          <Text size={1}>\n            <Flex align=\"center\" justify=\"center\" gap={2}>\n              <LockIcon />{' '}\n              <Translate\n                t={tCore}\n                i18nKey=\"release.banner.scheduled-for-publishing-on\"\n                values={{\n                  date: formatRelativeLocalePublishDate(currentRelease),\n                }}\n              />\n            </Flex>\n          </Text>\n        </Flex>\n      }\n    />\n  )\n}\n","import {UnpublishIcon} from '@sanity/icons'\nimport {Text} from '@sanity/ui'\nimport {\n  getVersionInlineBadge,\n  isGoingToUnpublish,\n  isReleaseDocument,\n  Translate,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {Banner} from './Banner'\n\nexport function UnpublishedDocumentBanner() {\n  const {value} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n  const willBeUnpublished = isGoingToUnpublish(value)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {t: tCore} = useTranslation()\n\n  if (isReleaseDocument(selectedPerspective) && willBeUnpublished) {\n    const title =\n      selectedPerspective.metadata?.title || tCore('release.placeholder-untitled-release')\n\n    return (\n      <Banner\n        tone=\"critical\"\n        content={\n          <Text size={1}>\n            <Translate\n              t={t}\n              i18nKey=\"banners.unpublished-release-banner.text\"\n              values={{\n                title,\n              }}\n              components={{\n                VersionBadge: getVersionInlineBadge(selectedPerspective),\n              }}\n            />\n          </Text>\n        }\n        icon={UnpublishIcon}\n      />\n    )\n  }\n  return null\n}\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {Heading, Stack, Text} from '@sanity/ui'\nimport {useTranslation} from 'react-i18next'\nimport {css, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\n\ninterface DocumentHeaderProps {\n  documentId: string\n  schemaType: ObjectSchemaType\n  title?: string\n}\n\n/**\n * Use CSS container queries to conditionally render headings at different sizes.\n * We hide this entire container (including the document type) if container queries\n * not supported in the current browser.\n *\n * Note that usage of container queries in `styled-components` is only supported in `6.x`.\n * As such, studios that include `\"styled-components\": \"<6\"` as a dependency will only see\n * the largest heading size here, even if their browser supports it!\n */\n\nexport const TitleContainer = styled(Stack)`\n  ${({theme}) => {\n    return css`\n      @supports not (container-type: inline-size) {\n        display: none !important;\n      }\n\n      container-type: inline-size;\n\n      [data-heading] {\n        font-size: ${theme.sanity.fonts.heading.sizes[4].fontSize}px;\n        line-height: ${theme.sanity.fonts.heading.sizes[4].lineHeight}px;\n        overflow-wrap: break-word;\n        text-wrap: pretty;\n      }\n\n      @container (max-width: 560px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[3].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[3].lineHeight}px;\n        }\n      }\n\n      @container (max-width: 420px) {\n        [data-heading] {\n          font-size: ${theme.sanity.fonts.heading.sizes[2].fontSize}px;\n          line-height: ${theme.sanity.fonts.heading.sizes[2].lineHeight}px;\n        }\n      }\n    `\n  }}\n`\n\n/**\n * Header containing current document title and type.\n * Document type is hidden if the document `_id` matches the current document `_type`.\n * The entire header is hidden if container queries are not supported.\n */\nexport const FormHeader = ({documentId, schemaType, title}: DocumentHeaderProps) => {\n  const isSingleton = documentId === schemaType.name\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (schemaType.__experimental_formPreviewTitle === false) {\n    return null\n  }\n\n  return (\n    <TitleContainer marginBottom={6} space={4}>\n      {!isSingleton && (\n        <Text muted size={1}>\n          {schemaType.title ?? schemaType.name}\n        </Text>\n      )}\n\n      <Heading as=\"h2\" data-heading muted={!title} data-testid=\"document-panel-document-title\">\n        {title ?? t('document-view.form-view.form-title-fallback')}\n      </Heading>\n    </TitleContainer>\n  )\n}\n","/* eslint-disable no-nested-ternary */\nimport {Box, Container, Flex, focusFirstDescendant, Spinner, Text} from '@sanity/ui'\nimport {type FormEvent, forwardRef, useCallback, useEffect, useMemo, useState} from 'react'\nimport {tap} from 'rxjs/operators'\nimport {\n  createPatchChannel,\n  type DocumentMutationEvent,\n  type DocumentRebaseEvent,\n  FormBuilder,\n  type FormDocumentValue,\n  fromMutationPatches,\n  type PatchMsg,\n  PresenceOverlay,\n  useDocumentPresence,\n  useDocumentStore,\n  usePerspective,\n  useTranslation,\n} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {Delay} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {useDocumentTitle} from '../../useDocumentTitle'\nimport {FormHeader} from './FormHeader'\nimport {useConditionalToast} from './useConditionalToast'\n\ninterface FormViewProps {\n  hidden: boolean\n  margins: [number, number, number, number]\n}\n\nconst preventDefault = (ev: FormEvent) => ev.preventDefault()\n\nexport const FormView = forwardRef<HTMLDivElement, FormViewProps>(function FormView(props, ref) {\n  const {hidden, margins} = props\n\n  const {\n    collapsedFieldSets,\n    collapsedPaths,\n    displayed: value,\n    editState,\n    documentId,\n    documentType,\n    fieldActions,\n    onChange,\n    validation,\n    ready,\n    formState,\n    onFocus,\n    connectionState,\n    onBlur,\n    onSetCollapsedPath,\n    onPathOpen,\n    onSetCollapsedFieldSet,\n    onSetActiveFieldGroup,\n    openPath,\n  } = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const documentStore = useDocumentStore()\n  const presence = useDocumentPresence(documentId)\n  const {title} = useDocumentTitle()\n  // The `patchChannel` is an INTERNAL publish/subscribe channel that we use to notify form-builder\n  // nodes about both remote and local patches.\n  // - Used by the Portable Text input to modify selections.\n  // - Used by `withDocument` to reset value.\n  const [patchChannel] = useState(() => createPatchChannel())\n\n  const isLocked = editState?.transactionSyncLock?.enabled\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const conditionalToastParams = useMemo(\n    () => ({\n      id: `sync-lock`,\n      status: 'warning' as const,\n      enabled: isLocked,\n      title: t('document-view.form-view.sync-lock-toast.title'),\n      description: t('document-view.form-view.sync-lock-toast.description'),\n      closable: true,\n    }),\n    [isLocked, t],\n  )\n\n  useConditionalToast(conditionalToastParams)\n\n  useEffect(() => {\n    const sub = documentStore.pair\n      .documentEvents(documentId, documentType, selectedReleaseId)\n      .pipe(\n        tap((event) => {\n          if (event.type === 'mutation') {\n            patchChannel.publish(prepareMutationEvent(event))\n          }\n\n          if (event.type === 'rebase') {\n            patchChannel.publish(prepareRebaseEvent(event))\n          }\n        }),\n      )\n      .subscribe()\n\n    return () => {\n      sub.unsubscribe()\n    }\n  }, [documentId, documentStore, documentType, patchChannel, selectedReleaseId])\n\n  const hasRev = Boolean(value?._rev)\n  const handleInitialValue = useEffectEvent(() => {\n    // this is a workaround for an issue that caused the document pushed to withDocument to get\n    // stuck at the first initial value.\n    // This effect is triggered only when the document goes from not having a revision, to getting one\n    // so it will kick in as soon as the document is received from the backend\n    patchChannel.publish({\n      type: 'mutation',\n      patches: [],\n      snapshot: value,\n    })\n  })\n  useEffect(() => {\n    if (hasRev) {\n      handleInitialValue()\n    }\n    // React to changes in hasRev only\n  }, [hasRev])\n\n  const [formRef, setFormRef] = useState<null | HTMLDivElement>(null)\n\n  // We only want to run it on first mount\n  const [focusedFirstDescendant, setFocusedFirstDescendant] = useState(false)\n  useEffect(() => {\n    // Only focus on the first descendant if there is not already a focus path\n    // This is to avoid stealing focus from intent links\n    if (!focusedFirstDescendant && ready && !formState?.focusPath.length && formRef) {\n      setFocusedFirstDescendant(true)\n      focusFirstDescendant(formRef)\n    }\n  }, [focusedFirstDescendant, formRef, formState?.focusPath.length, ready])\n\n  const setRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      setFormRef(node)\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    },\n    [ref],\n  )\n\n  // const after = useMemo(\n  //   () =>\n  //     Array.isArray(afterEditorComponents) &&\n  //     afterEditorComponents.map(\n  //       (AfterEditorComponent: ComponentType<{documentId: string}>, idx: number) => (\n  //         <AfterEditorComponent key={String(idx)} documentId={documentId} />\n  //       )\n  //     ),\n  //   [documentId]\n  // )\n\n  return (\n    <Container\n      hidden={hidden}\n      paddingX={4}\n      paddingTop={5}\n      paddingBottom={9}\n      sizing=\"border\"\n      width={1}\n    >\n      <PresenceOverlay margins={margins}>\n        <Box as=\"form\" onSubmit={preventDefault} ref={setRef}>\n          {connectionState === 'connecting' && !editState?.draft && !editState?.published ? (\n            <Delay ms={300}>\n              {/* TODO: replace with loading block */}\n              <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n                <Spinner muted />\n                <Box marginTop={3}>\n                  <Text align=\"center\" muted size={1}>\n                    {t('document-view.form-view.loading')}\n                  </Text>\n                </Box>\n              </Flex>\n            </Delay>\n          ) : formState === null || hidden ? (\n            <Box padding={2}>\n              <Text>{t('document-view.form-view.form-hidden')}</Text>\n            </Box>\n          ) : (\n            <>\n              <FormHeader documentId={documentId} schemaType={formState.schemaType} title={title} />\n              <FormBuilder\n                __internal_fieldActions={fieldActions}\n                __internal_patchChannel={patchChannel}\n                changed={formState.changed}\n                collapsedFieldSets={collapsedFieldSets}\n                collapsedPaths={collapsedPaths}\n                focused={formState.focused}\n                focusPath={formState.focusPath}\n                groups={formState.groups}\n                id=\"root\"\n                members={formState.members}\n                onChange={onChange}\n                onFieldGroupSelect={onSetActiveFieldGroup}\n                onPathBlur={onBlur}\n                onPathFocus={onFocus}\n                onPathOpen={onPathOpen}\n                onSetFieldSetCollapsed={onSetCollapsedFieldSet}\n                onSetPathCollapsed={onSetCollapsedPath}\n                openPath={openPath}\n                presence={presence}\n                readOnly={\n                  connectionState === 'reconnecting' || formState.readOnly || !editState?.ready\n                }\n                schemaType={formState.schemaType}\n                validation={validation}\n                value={\n                  // note: the form state doesn't have a typed concept of a \"document\" value\n                  // but these should be compatible\n                  formState.value as FormDocumentValue\n                }\n              />\n            </>\n          )}\n        </Box>\n      </PresenceOverlay>\n    </Container>\n  )\n})\n\nfunction prepareMutationEvent(event: DocumentMutationEvent): PatchMsg {\n  const patches = event.mutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'mutation',\n    snapshot: event.document,\n    patches: fromMutationPatches(event.origin, patches),\n  }\n}\n\nfunction prepareRebaseEvent(event: DocumentRebaseEvent): PatchMsg {\n  const remotePatches = event.remoteMutations.map((mut) => mut.patch).filter(Boolean)\n  const localPatches = event.localMutations.map((mut) => mut.patch).filter(Boolean)\n\n  return {\n    type: 'rebase',\n    snapshot: event.document,\n    patches: fromMutationPatches('remote', remotePatches).concat(\n      fromMutationPatches('local', localPatches),\n    ),\n  }\n}\n","import {CheckmarkIcon, ChevronDownIcon} from '@sanity/icons'\nimport {Menu, TabList, useElementSize} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {type ComponentType, type ReactNode, useCallback, useState} from 'react'\n\nimport {Button, MenuButton, MenuItem, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nfunction DelayedDiv({children, show}: {show: boolean; children: ReactNode}) {\n  return (\n    <motion.div\n      key={show ? 'show' : 'wait'}\n      initial={{opacity: show ? 1 : 0}}\n      animate={{opacity: 1}}\n      transition={\n        show\n          ? {duration: 0.2}\n          : // We delay the showing the element to avoid flickering\n            {delay: 1, duration: 0.2}\n      }\n    >\n      {children}\n    </motion.div>\n  )\n}\n\n/**\n * This component will render the tabs for the document pane, following this rules:\n *  if the view tabs are wider than 200px it collapses to a dropdown\n *  if the header is smaller than 480px it collapses to a dropdown\n * For this we need to first measure the pane header width and then the tabs width.\n *\n * Gotcha, if the tabs are wider han 200px it renders a dropdown and if then the tabs change to be smaller than 200px\n * it will not change back to tabs, this is a limitation of the current implementation but an ok tradeoff to avoid mounting\n * ghost elements just to measure the width.\n */\nexport function DocumentHeaderTabs({parentRef}: {parentRef: HTMLDivElement | null}) {\n  const {activeViewId, paneKey, views} = useDocumentPane()\n\n  const [tabList, setTabList] = useState<HTMLDivElement | null>(null)\n  const parentSize = useElementSize(parentRef)\n  const tabListSize = useElementSize(tabList)\n\n  const parentWidth = parentSize?.border?.width ?? 0\n  const tabListWidth = tabListSize?.border?.width ?? 0\n\n  const tabPanelId = `${paneKey}tabpanel`\n  const activeTab = views.find((view) => view.id === activeViewId)\n\n  if (parentWidth < 480 || tabListWidth > 200) {\n    return (\n      <DelayedDiv\n        // We immediately show the dropdown if the elements have been calculated\n        show={Boolean(parentWidth + tabListWidth)}\n      >\n        <MenuButton\n          id={`${paneKey}tab-menu`}\n          popover={{\n            placement: 'bottom-end',\n            portal: true,\n          }}\n          button={<Button iconRight={ChevronDownIcon} mode=\"bleed\" text={activeTab?.title ?? ''} />}\n          menu={\n            <Menu>\n              {views.map((view, index) => (\n                <DocumentHeaderMenuItem\n                  icon={view.icon}\n                  id={`${paneKey}tab-${view.id}`}\n                  isActive={activeViewId === view.id}\n                  key={view.id}\n                  label={view.title}\n                  tabPanelId={tabPanelId}\n                  viewId={index === 0 ? null : (view.id ?? null)}\n                />\n              ))}\n            </Menu>\n          }\n        />\n      </DelayedDiv>\n    )\n  }\n  return (\n    <DelayedDiv show={Boolean(tabListWidth)}>\n      <TabList space={1} ref={setTabList}>\n        {views.map((view, index) => (\n          <DocumentHeaderTab\n            icon={view.icon}\n            id={`${paneKey}tab-${view.id}`}\n            isActive={activeViewId === view.id}\n            key={view.id}\n            label={view.title}\n            tabPanelId={tabPanelId}\n            viewId={index === 0 ? null : (view.id ?? null)}\n          />\n        ))}\n      </TabList>\n    </DelayedDiv>\n  )\n}\n\nfunction DocumentHeaderMenuItem(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <MenuItem\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      text={label}\n      onClick={handleClick}\n      selected={isActive}\n      pressed={isActive}\n      iconRight={isActive ? CheckmarkIcon : undefined}\n    />\n  )\n}\n\nfunction DocumentHeaderTab(props: {\n  icon?: ComponentType | ReactNode\n  id: string\n  isActive: boolean\n  label: string\n  tabPanelId: string\n  viewId: string | null\n}) {\n  const {icon, id, isActive, label, tabPanelId, viewId, ...rest} = props\n  const {ready, editState} = useDocumentPane()\n  const {setView} = usePaneRouter()\n  const handleClick = useCallback(() => setView(viewId), [setView, viewId])\n\n  return (\n    <Tab\n      {...rest} // required to enable <TabList> keyboard navigation\n      aria-controls={tabPanelId}\n      disabled={!ready && !editState?.draft && !editState?.published}\n      icon={icon}\n      id={id}\n      label={label}\n      onClick={handleClick}\n      selected={isActive}\n    />\n  )\n}\n","import {unstable_useValuePreview as useValuePreview, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nexport function DocumentHeaderTitle(): React.JSX.Element {\n  const {connectionState, schemaType, title, value: documentValue} = useDocumentPane()\n  const subscribed = Boolean(documentValue)\n\n  const {error, value} = useValuePreview({\n    enabled: subscribed,\n    schemaType,\n    value: documentValue,\n  })\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (connectionState === 'connecting' && !subscribed) {\n    return <></>\n  }\n\n  if (title) {\n    return <>{title}</>\n  }\n\n  if (!documentValue) {\n    return (\n      <>\n        {t('panes.document-header-title.new.text', {\n          schemaType: schemaType?.title || schemaType?.name,\n        })}\n      </>\n    )\n  }\n\n  if (error) {\n    return <>{t('panes.document-header-title.error.text', {error: error.message})}</>\n  }\n\n  return (\n    <>\n      {value?.title || (\n        <span style={{color: 'var(--card-muted-fg-color)'}}>\n          {t('panes.document-header-title.untitled.text')}\n        </span>\n      )}\n    </>\n  )\n}\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, useMemo, useState} from 'react'\nimport {useTranslation} from 'sanity'\n\nimport {Button} from '../../../../../ui-components'\nimport {PaneHeader, usePane, usePaneRouter} from '../../../../components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTabs} from './DocumentHeaderTabs'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\n\n/**\n * When not collapsed this component will render the title and the tabs.\n * This component will render inside the document panel and not with the DocumentPanelHeader\n */\nexport const DocumentPanelSubHeader = memo(function DocumentPanelHeader() {\n  const {editState, connectionState, views} = useDocumentPane()\n  const {features} = useStructureTool()\n  const {index, BackLink} = usePaneRouter()\n  const [parentRef, setParentRef] = useState<HTMLDivElement | null>(null)\n\n  const showTabs = views.length > 1\n\n  const {collapsed, isLast} = usePane()\n  // Prevent focus if this is the last (non-collapsed) pane.\n  const tabIndex = isLast && !collapsed ? -1 : 0\n\n  // show the back button if both the feature is enabled and the current pane\n  // is not the first\n  const showBackButton = features.backButton && index > 0\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const title = useMemo(() => <DocumentHeaderTitle />, [])\n  const tabs = useMemo(\n    () => showTabs && <DocumentHeaderTabs parentRef={parentRef} />,\n    [showTabs, parentRef],\n  )\n\n  const backButton = useMemo(\n    () =>\n      showBackButton && (\n        <Button\n          as={BackLink}\n          data-as=\"a\"\n          icon={ArrowLeftIcon}\n          mode=\"bleed\"\n          tooltipProps={{content: t('pane-header.back-button.text')}}\n        />\n      ),\n    [BackLink, showBackButton, t],\n  )\n\n  return (\n    <PaneHeader\n      ref={setParentRef}\n      loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n      title={title}\n      tabs={tabs}\n      tabIndex={tabIndex}\n      backButton={backButton}\n    />\n  )\n})\n","import {BoundaryElementProvider, Box, Flex, PortalProvider, usePortal} from '@sanity/ui'\nimport {useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  getSanityCreateLinkMetadata,\n  getVersionFromId,\n  isReleaseDocument,\n  isReleaseScheduledOrScheduling,\n  isSanityCreateLinked,\n  isSystemBundle,\n  LegacyLayerProvider,\n  type ReleaseDocument,\n  ScrollContainer,\n  usePerspective,\n  VirtualizerScrollInstanceProvider,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {PaneContent, usePane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {isLiveEditEnabled} from '../../../components/paneItem/helpers'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {DocumentInspectorPanel} from '../documentInspector'\nimport {InspectDialog} from '../inspectDialog'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {\n  DeletedDocumentBanners,\n  DeprecatedDocumentTypeBanner,\n  InsufficientPermissionBanner,\n  ReferenceChangedBanner,\n} from './banners'\nimport {AddToReleaseBanner} from './banners/AddToReleaseBanner'\nimport {ArchivedReleaseDocumentBanner} from './banners/ArchivedReleaseDocumentBanner'\nimport {CreateLinkedBanner} from './banners/CreateLinkedBanner'\nimport {DraftLiveEditBanner} from './banners/DraftLiveEditBanner'\nimport {OpenReleaseToEditBanner} from './banners/OpenReleaseToEditBanner'\nimport {ScheduledReleaseBanner} from './banners/ScheduledReleaseBanner'\nimport {UnpublishedDocumentBanner} from './banners/UnpublishedDocumentBanner'\nimport {FormView} from './documentViews'\nimport {DocumentPanelSubHeader} from './header/DocumentPanelSubHeader'\n\ninterface DocumentPanelProps {\n  footerHeight: number | null\n  headerHeight: number | null\n  isInspectOpen: boolean\n  rootElement: HTMLDivElement | null\n  setDocumentPanelPortalElement: (el: HTMLElement | null) => void\n  footer: React.ReactNode\n}\n\nconst DocumentBox = styled(Box)({\n  position: 'relative',\n})\n\nconst Scroller = styled(ScrollContainer)<{$disabled: boolean}>(({$disabled}) => {\n  if ($disabled) {\n    return {height: '100%'}\n  }\n\n  return css`\n    height: 100%;\n    overflow: auto;\n    position: relative;\n    scroll-behavior: smooth;\n    outline: none;\n  `\n})\n\nexport const DocumentPanel = function DocumentPanel(props: DocumentPanelProps) {\n  const {\n    footerHeight,\n    headerHeight,\n    isInspectOpen,\n    rootElement,\n    setDocumentPanelPortalElement,\n    footer,\n  } = props\n  const {\n    activeViewId,\n    displayed,\n    documentId,\n    editState,\n    inspector,\n    value,\n    views,\n    ready,\n    schemaType,\n    permissions,\n    isPermissionsLoading,\n  } = useDocumentPane()\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const showCreateBanner = isSanityCreateLinked(createLinkMetadata)\n\n  const {params} = usePaneRouter()\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed} = usePane()\n  const parentPortal = usePortal()\n  const {features} = useStructureTool()\n  const [_portalElement, setPortalElement] = useState<HTMLDivElement | null>(null)\n  const [documentScrollElement, setDocumentScrollElement] = useState<HTMLDivElement | null>(null)\n  const formContainerElement = useRef<HTMLDivElement | null>(null)\n\n  const requiredPermission = value._createdAt ? 'update' : 'create'\n\n  const activeView = useMemo(\n    () => views.find((view) => view.id === activeViewId) || views[0] || {type: 'form'},\n    [activeViewId, views],\n  )\n\n  // Use a local portal container when split panes is supported\n  const portalElement: HTMLElement | null = features.splitPanes\n    ? _portalElement || parentPortal.element\n    : parentPortal.element\n\n  // Calculate the height of the header\n  const margins: [number, number, number, number] = useMemo(() => {\n    if (layoutCollapsed) {\n      return [headerHeight || 0, 0, footerHeight ? footerHeight + 2 : 2, 0]\n    }\n\n    return [0, 0, 2, 0]\n  }, [layoutCollapsed, footerHeight, headerHeight])\n\n  const formViewHidden = activeView.type !== 'form'\n\n  const activeViewNode = useMemo(() => {\n    if (activeView.type === 'component' && activeView.component) {\n      const ActiveViewComponent = activeView.component\n      return (\n        <ActiveViewComponent\n          document={{\n            draft: editState?.draft || null,\n            displayed: displayed || value,\n            historical: displayed,\n            published: editState?.published || null,\n          }}\n          documentId={documentId}\n          options={activeView.options}\n          schemaType={schemaType}\n        />\n      )\n    }\n    return false\n  }, [activeView, displayed, documentId, editState?.draft, editState?.published, schemaType, value])\n\n  const isLiveEdit = isLiveEditEnabled(schemaType)\n\n  // Scroll to top as `documentId` changes\n  useEffect(() => {\n    if (!documentScrollElement?.scrollTo) return\n    documentScrollElement.scrollTo(0, 0)\n  }, [documentId, documentScrollElement])\n\n  // Pass portal element to `DocumentPane`\n  useEffect(() => {\n    if (portalElement) {\n      setDocumentPanelPortalElement(portalElement)\n    }\n  }, [portalElement, setDocumentPanelPortalElement])\n\n  const inspectDialog = useMemo(() => {\n    return isInspectOpen ? <InspectDialog value={displayed || value} /> : null\n  }, [isInspectOpen, displayed, value])\n\n  const showInspector = Boolean(!collapsed && inspector)\n  const {selectedPerspective, selectedReleaseId} = usePerspective()\n\n  const banners = useMemo(() => {\n    if (params?.historyVersion) {\n      return <ArchivedReleaseDocumentBanner />\n    }\n    const isScheduledRelease =\n      isReleaseDocument(selectedPerspective) && isReleaseScheduledOrScheduling(selectedPerspective)\n    if (isScheduledRelease) {\n      return <ScheduledReleaseBanner currentRelease={selectedPerspective as ReleaseDocument} />\n    }\n    const isPinnedDraftOrPublish = isSystemBundle(selectedPerspective)\n\n    if (\n      displayed?._id &&\n      getVersionFromId(displayed._id) !== selectedReleaseId &&\n      ready &&\n      !isPinnedDraftOrPublish\n    ) {\n      return (\n        <AddToReleaseBanner\n          documentId={value._id}\n          currentRelease={selectedPerspective as ReleaseDocument}\n          value={displayed || undefined}\n        />\n      )\n    }\n\n    if (\n      activeView.type === 'form' &&\n      isLiveEdit &&\n      ready &&\n      editState?.draft?._id &&\n      !selectedReleaseId\n    ) {\n      return (\n        <DraftLiveEditBanner\n          displayed={displayed}\n          documentId={documentId}\n          schemaType={schemaType}\n        />\n      )\n    }\n\n    if (activeView.type !== 'form' || isPermissionsLoading || !ready) return null\n\n    return (\n      <>\n        {showCreateBanner && <CreateLinkedBanner />}\n        {!permissions?.granted && (\n          <InsufficientPermissionBanner requiredPermission={requiredPermission} />\n        )}\n        <ReferenceChangedBanner />\n        <DeprecatedDocumentTypeBanner />\n        <DeletedDocumentBanners />\n        <UnpublishedDocumentBanner />\n        <OpenReleaseToEditBanner\n          documentId={displayed?._id ?? documentId}\n          isPinnedDraftOrPublished={isPinnedDraftOrPublish}\n        />\n      </>\n    )\n  }, [\n    params?.historyVersion,\n    selectedPerspective,\n    displayed,\n    selectedReleaseId,\n    ready,\n    activeView.type,\n    isLiveEdit,\n    editState?.draft?._id,\n    isPermissionsLoading,\n    showCreateBanner,\n    permissions?.granted,\n    requiredPermission,\n    documentId,\n    value._id,\n    schemaType,\n  ])\n  const showFormView = features.resizablePanes || !showInspector\n  return (\n    <PaneContent>\n      <Flex height=\"fill\">\n        {showFormView && (\n          <Flex height=\"fill\" direction=\"column\" width=\"fill\" flex={2}>\n            <LegacyLayerProvider zOffset=\"paneHeader\">\n              {banners}\n              <DocumentPanelSubHeader />\n            </LegacyLayerProvider>\n            <DocumentBox flex={2} overflow=\"hidden\">\n              <PortalProvider\n                element={portalElement}\n                __unstable_elements={{documentScrollElement: documentScrollElement}}\n              >\n                <BoundaryElementProvider element={documentScrollElement}>\n                  <VirtualizerScrollInstanceProvider\n                    scrollElement={documentScrollElement}\n                    containerElement={formContainerElement}\n                  >\n                    <Scroller\n                      $disabled={layoutCollapsed || false}\n                      data-testid=\"document-panel-scroller\"\n                      ref={setDocumentScrollElement}\n                    >\n                      <FormView\n                        hidden={formViewHidden}\n                        margins={margins}\n                        ref={formContainerElement}\n                      />\n                      {activeViewNode}\n                    </Scroller>\n\n                    {inspectDialog}\n\n                    <div data-testid=\"document-panel-portal\" ref={setPortalElement} />\n                  </VirtualizerScrollInstanceProvider>\n                </BoundaryElementProvider>\n              </PortalProvider>\n            </DocumentBox>\n\n            {footer}\n          </Flex>\n        )}\n        {showInspector && (\n          <BoundaryElementProvider element={rootElement}>\n            <DocumentInspectorPanel\n              documentId={documentId}\n              documentType={schemaType.name}\n              flex={1}\n            />\n          </BoundaryElementProvider>\n        )}\n      </Flex>\n    </PaneContent>\n  )\n}\nDocumentPanel.displayName = 'DocumentPanel'\n","/**\n * @internal\n */\nexport const _DEBUG = false\n\nexport const EMPTY_PARAMS = Object.freeze({})\nexport const LOADING_PANE = Symbol('LOADING_PANE')\n\nexport const DOCUMENT_PANEL_PORTAL_ELEMENT = 'documentPanelPortalElement'\n","import {type Placement} from '@sanity/ui'\n\nimport {type DialogProps} from '../../../../../ui-components'\n\nexport const POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['left', 'bottom']\n\nexport const DIALOG_WIDTH_TO_UI_WIDTH: {[key: string]: DialogProps['width']} = {\n  small: 0,\n  medium: 1,\n  large: 2,\n  full: 'auto',\n}\n","import {\n  Box,\n  Button, // eslint-disable-line no-restricted-imports\n  Flex,\n  Grid,\n  Popover, // eslint-disable-line no-restricted-imports\n  Text,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionConfirmDialogProps, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function ConfirmDialog(props: {\n  dialog: DocumentActionConfirmDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<ConfirmDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Dialog rendered by custom document actions of dialog type `confirm`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction ConfirmDialogContent(props: {dialog: DocumentActionConfirmDialogProps}) {\n  const {dialog} = props\n  const {\n    cancelButtonIcon,\n    cancelButtonText,\n    confirmButtonIcon,\n    confirmButtonText,\n    // color,\n    message,\n    onCancel,\n    onConfirm,\n    tone,\n  } = dialog\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onCancel()\n    },\n    [isTopLayer, onCancel],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onCancel, () => [ref.current])\n\n  return (\n    <Flex direction=\"column\" ref={ref} style={{minWidth: 320 - 16, maxWidth: 400}}>\n      <Box flex={1} overflow=\"auto\" padding={4}>\n        <Text>{message}</Text>\n      </Box>\n      <Box paddingX={4} paddingY={3} style={{borderTop: '1px solid var(--card-border-color)'}}>\n        <Grid columns={2} gap={2}>\n          <Button\n            data-testid=\"confirm-dialog-cancel-button\"\n            icon={cancelButtonIcon}\n            onClick={onCancel}\n            mode=\"ghost\"\n            text={cancelButtonText || t('confirm-dialog.cancel-button.fallback-text')}\n          />\n          <Button\n            data-testid=\"confirm-dialog-confirm-button\"\n            icon={confirmButtonIcon}\n            onClick={onConfirm}\n            text={confirmButtonText || t('confirm-dialog.confirm-button.fallback-text')}\n            tone={tone}\n          />\n        </Grid>\n      </Box>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  Dialog, // eslint-disable-line no-restricted-imports\n} from '@sanity/ui'\nimport {useId} from 'react'\nimport {type DocumentActionModalDialogProps, LegacyLayerProvider} from 'sanity'\n\nimport {DIALOG_WIDTH_TO_UI_WIDTH} from './constants'\n\n/**\n * Dialog rendered by custom document actions of dialog type `dialog`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nexport function ModalDialog(props: {dialog: DocumentActionModalDialogProps}) {\n  const {dialog} = props\n  const dialogId = useId()\n\n  const footer = dialog.footer && (\n    <Box paddingX={4} paddingY={3}>\n      {dialog.footer}\n    </Box>\n  )\n\n  return (\n    <LegacyLayerProvider zOffset=\"fullscreen\">\n      <Dialog\n        animate\n        __unstable_hideCloseButton={dialog.showCloseButton === false}\n        footer={footer}\n        header={dialog.header}\n        id={dialogId}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClose={dialog.onClose}\n        // eslint-disable-next-line react/jsx-handler-names\n        onClickOutside={dialog.onClose}\n        width={dialog.width === undefined ? 1 : DIALOG_WIDTH_TO_UI_WIDTH[dialog.width]}\n      >\n        <Box padding={4}>{dialog.content}</Box>\n      </Dialog>\n    </LegacyLayerProvider>\n  )\n}\n","import {\n  Popover, // eslint-disable-line no-restricted-imports\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useLayer,\n} from '@sanity/ui'\nimport {useCallback, useRef} from 'react'\nimport {type DocumentActionPopoverDialogProps} from 'sanity'\n\nimport {POPOVER_FALLBACK_PLACEMENTS} from './constants'\n\nexport function PopoverDialog(props: {\n  dialog: DocumentActionPopoverDialogProps\n  referenceElement: HTMLElement | null\n}) {\n  const {dialog, referenceElement} = props\n\n  return (\n    <Popover\n      content={<PopoverDialogContent dialog={dialog} />}\n      fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n      open\n      placement=\"top\"\n      portal\n      preventOverflow\n      referenceElement={referenceElement}\n    />\n  )\n}\n\n/**\n * Popover rendered by custom document actions of dialog type `popover`.\n * As these are user configurable with public facing APIs, internal studio ui-components are not used.\n */\nfunction PopoverDialogContent(props: {dialog: DocumentActionPopoverDialogProps}) {\n  const {dialog} = props\n  const {content, onClose} = dialog\n  const {isTopLayer} = useLayer()\n  const ref = useRef<HTMLDivElement | null>(null)\n\n  const handleGlobalKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === 'Escape' && isTopLayer) onClose()\n    },\n    [isTopLayer, onClose],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(isTopLayer && onClose, () => [ref.current])\n\n  return <div ref={ref}>{content}</div>\n}\n","import {PortalProvider, Text, usePortal} from '@sanity/ui'\nimport {type ReactNode, useId} from 'react'\nimport {type DocumentActionDialogProps} from 'sanity'\n\nimport {Dialog} from '../../../../ui-components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {ConfirmDialog} from './dialogs/ConfirmDialog'\nimport {ModalDialog} from './dialogs/ModalDialog'\nimport {PopoverDialog} from './dialogs/PopoverDialog'\n\nexport interface ActionStateDialogProps {\n  dialog: DocumentActionDialogProps\n  referenceElement?: HTMLElement | null\n}\n\n// A portal provider that uses the document panel portal element if it exists\n// as the portal element so that dialogs are scoped to the document panel\nfunction DocumentActionPortalProvider(props: {children: ReactNode}) {\n  const {children} = props\n  const {element, elements} = usePortal()\n  const portalElement = elements?.[DOCUMENT_PANEL_PORTAL_ELEMENT] || element\n\n  return <PortalProvider element={portalElement}>{children}</PortalProvider>\n}\n\nexport function ActionStateDialog(props: ActionStateDialogProps) {\n  const {dialog, referenceElement = null} = props\n  const modalId = useId()\n\n  if (dialog.type === 'confirm') {\n    return <ConfirmDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'popover') {\n    return <PopoverDialog dialog={dialog} referenceElement={referenceElement} />\n  }\n\n  if (dialog.type === 'dialog' || !dialog.type) {\n    return (\n      <DocumentActionPortalProvider>\n        <ModalDialog dialog={dialog} />\n      </DocumentActionPortalProvider>\n    )\n  }\n\n  if (dialog.type === 'custom') {\n    return <DocumentActionPortalProvider>{dialog?.component}</DocumentActionPortalProvider>\n  }\n\n  // @todo: add validation?\n  const unknownModal: any = dialog\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unsupported modal type ${unknownModal.type}`)\n\n  return (\n    <Dialog\n      id={modalId}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClose={unknownModal.onClose}\n      // eslint-disable-next-line react/jsx-handler-names\n      onClickOutside={unknownModal.onClose}\n      width={1}\n    >\n      {unknownModal.content || (\n        // eslint-disable-next-line i18next/no-literal-string\n        <Text size={1}>\n          Unexpected modal type (<code>{unknownModal.type}</code>)\n        </Text>\n      )}\n    </Dialog>\n  )\n}\n","import {Menu} from '@sanity/ui'\nimport {memo, type ReactNode, useCallback, useId, useMemo, useState} from 'react'\nimport {\n  ContextMenuButton,\n  type DocumentActionDescription,\n  LegacyLayerProvider,\n  useTranslation,\n} from 'sanity'\n\nimport {MenuButton, MenuItem, type PopoverProps} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {ActionStateDialog} from './ActionStateDialog'\n\nexport interface ActionMenuButtonProps {\n  actionStates: DocumentActionDescription[]\n  disabled: boolean\n}\n\n/**\n * @internal\n */\nexport const ActionDialogWrapper = memo(function ActionDialogWrapper({\n  actionStates,\n  children,\n  referenceElement,\n}: {\n  actionStates: DocumentActionDescription[]\n  children: ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  referenceElement?: HTMLElement | null\n}) {\n  const [actionIndex, setActionIndex] = useState(-1)\n  const currentAction = useMemo(() => actionStates[actionIndex], [actionIndex, actionStates])\n\n  const handleAction = useCallback((idx: number) => {\n    setActionIndex(idx)\n  }, [])\n\n  const result = useMemo(() => children({handleAction}), [children, handleAction])\n\n  return (\n    <>\n      {currentAction && currentAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={currentAction.dialog} referenceElement={referenceElement} />\n        </LegacyLayerProvider>\n      )}\n      {result}\n    </>\n  )\n})\n\n/**\n * @internal\n */\nexport function ActionMenuButton(props: ActionMenuButtonProps) {\n  const {actionStates, disabled} = props\n  const idPrefix = useId()\n\n  const [referenceElement, setReferenceElement] = useState<HTMLButtonElement | null>(null)\n\n  const popoverProps: PopoverProps = useMemo(\n    () => ({\n      placement: 'top-end',\n      portal: true,\n      preventOverflow: true,\n    }),\n    [],\n  )\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => ReactNode\n  >(\n    ({handleAction}) => (\n      <MenuButton\n        id={`${idPrefix}-action-menu`}\n        button={\n          <ContextMenuButton\n            aria-label={t('buttons.action-menu-button.aria-label')}\n            disabled={disabled}\n            data-testid=\"action-menu-button\"\n            tooltipProps={{content: t('buttons.action-menu-button.tooltip')}}\n          />\n        }\n        menu={\n          <Menu padding={1}>\n            {actionStates.map((actionState, idx) => (\n              <ActionMenuListItem\n                actionState={actionState}\n                disabled={disabled}\n                index={idx}\n                // eslint-disable-next-line react/no-array-index-key\n                key={idx}\n                onAction={handleAction}\n              />\n            ))}\n          </Menu>\n        }\n        popover={popoverProps}\n        ref={setReferenceElement}\n      />\n    ),\n    [actionStates, disabled, idPrefix, popoverProps, t],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={actionStates} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n}\n\ninterface ActionMenuListItemProps {\n  actionState: DocumentActionDescription\n  disabled: boolean\n  index: number\n  onAction: (idx: number) => void\n}\n\nexport function ActionMenuListItem(props: ActionMenuListItemProps) {\n  const {actionState, disabled, index, onAction} = props\n  const {onHandle} = actionState\n\n  const handleClick = useCallback(() => {\n    onAction(index)\n    if (onHandle) onHandle()\n  }, [index, onAction, onHandle])\n\n  const hotkeys = useMemo(() => {\n    return actionState.shortcut\n      ? String(actionState.shortcut)\n          .split('+')\n          .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1))\n      : undefined\n  }, [actionState.shortcut])\n\n  return (\n    <MenuItem\n      data-testid={`action-${actionState.label.replace(' ', '')}`}\n      disabled={disabled || Boolean(actionState.disabled)}\n      hotkeys={hotkeys}\n      icon={actionState.icon}\n      onClick={handleClick}\n      text={actionState.label}\n      tone={actionState.tone}\n      {...(actionState.disabled && {tooltipProps: {content: actionState.title}})}\n    />\n  )\n}\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {TrashIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_TITLE_KEY = {\n  NOTHING_TO_DELETE: 'action.delete.disabled.nothing-to-delete',\n  NOT_READY: 'action.delete.disabled.not-ready',\n}\n\n/** @internal */\nexport const DeleteAction: DocumentActionComponent = ({id, type, draft, onComplete, release}) => {\n  const {setIsDeleting: paneSetIsDeleting} = useDocumentPane()\n  const {delete: deleteOp} = useDocumentOperation(id, type, release)\n  const [isDeleting, setIsDeleting] = useState(false)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setIsDeleting(true)\n    setConfirmDialogOpen(false)\n    paneSetIsDeleting(true)\n    deleteOp.execute()\n    onComplete()\n  }, [deleteOp, onComplete, paneSetIsDeleting])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'delete',\n  })\n\n  const currentUser = useCurrentUser()\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: TrashIcon,\n        disabled: true,\n        label: t('action.delete.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"delete-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: TrashIcon,\n      disabled: isDeleting || Boolean(deleteOp.disabled) || isPermissionsLoading,\n      title: (deleteOp.disabled && t(DISABLED_REASON_TITLE_KEY[deleteOp.disabled])) || '',\n      label: isDeleting ? t('action.delete.running.label') : t('action.delete.label'),\n      shortcut: 'Ctrl+Alt+D',\n      onHandle: handle,\n      dialog: isConfirmDialogOpen && {\n        type: 'custom',\n        component: (\n          <ConfirmDeleteDialog\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"delete\"\n            id={draft?._id || id}\n            type={type}\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      },\n    }\n  }, [\n    currentUser,\n    deleteOp.disabled,\n    draft?._id,\n    handle,\n    handleCancel,\n    handleConfirm,\n    id,\n    isConfirmDialogOpen,\n    isDeleting,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n    type,\n  ])\n}\n\nDeleteAction.action = 'delete'\nDeleteAction.displayName = 'DeleteAction'\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport {ResetIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  InsufficientPermissionsMessage,\n  isPublishedId,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_KEY = {\n  NO_CHANGES: 'action.discard-changes.disabled.no-change',\n  NOT_PUBLISHED: 'action.discard-changes.disabled.not-published',\n  NOT_READY: 'action.discard-changes.disabled.not-ready',\n} as const\n\n/** @internal */\nexport const DiscardChangesAction: DocumentActionComponent = ({\n  id,\n  type,\n  published,\n  liveEdit,\n  onComplete,\n  release,\n}) => {\n  const {discardChanges} = useDocumentOperation(id, type, release)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'discardDraft',\n  })\n  const currentUser = useCurrentUser()\n  const {displayed} = useDocumentPane()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isPublished = displayed?._id && isPublishedId(displayed?._id)\n\n  const handleConfirm = useCallback(() => {\n    discardChanges.execute()\n    onComplete()\n  }, [discardChanges, onComplete])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | false = useMemo(\n    () =>\n      isConfirmDialogOpen && {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.discard-changes.confirm-dialog.confirm-discard-changes'),\n      },\n    [handleConfirm, isConfirmDialogOpen, onComplete, t],\n  )\n\n  return useMemo(() => {\n    if (!published || liveEdit || isPublished) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: ResetIcon,\n        disabled: true,\n        label: t('action.discard-changes.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"discard-changes\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: ResetIcon,\n      disabled: Boolean(discardChanges.disabled) || isPermissionsLoading,\n      title: t((discardChanges.disabled && DISABLED_REASON_KEY[discardChanges.disabled]) || ''),\n      label: t('action.discard-changes.label'),\n      onHandle: handle,\n      dialog,\n    }\n  }, [\n    currentUser,\n    dialog,\n    discardChanges.disabled,\n    handle,\n    isPermissionsLoading,\n    isPublished,\n    liveEdit,\n    permissions?.granted,\n    published,\n    t,\n  ])\n}\n\nDiscardChangesAction.action = 'discardChanges'\nDiscardChangesAction.displayName = 'DiscardChangesAction'\n","import {CopyIcon} from '@sanity/icons'\nimport {uuid} from '@sanity/uuid'\nimport {useCallback, useMemo, useState} from 'react'\nimport {filter, firstValueFrom} from 'rxjs'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useDocumentStore,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nconst DISABLED_REASON_KEY = {\n  NOTHING_TO_DUPLICATE: 'action.duplicate.disabled.nothing-to-duplicate',\n  NOT_READY: 'action.duplicate.disabled.not-ready',\n}\n\n/** @internal */\nexport const DuplicateAction: DocumentActionComponent = ({id, type, onComplete, release}) => {\n  const documentStore = useDocumentStore()\n  const {duplicate} = useDocumentOperation(id, type, release)\n  const {navigateIntent} = useRouter()\n  const [isDuplicating, setDuplicating] = useState(false)\n\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    version: release,\n    permission: 'duplicate',\n  })\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const currentUser = useCurrentUser()\n\n  const handle = useCallback(async () => {\n    const dupeId = uuid()\n\n    setDuplicating(true)\n\n    // set up the listener before executing\n    const duplicateSuccess = firstValueFrom(\n      documentStore.pair\n        .operationEvents(id, type)\n        .pipe(filter((e) => e.op === 'duplicate' && e.type === 'success')),\n    )\n    duplicate.execute(dupeId)\n\n    // only navigate to the duplicated document when the operation is successful\n    await duplicateSuccess\n    navigateIntent('edit', {id: dupeId, type})\n\n    onComplete()\n  }, [documentStore.pair, duplicate, id, navigateIntent, onComplete, type])\n\n  return useMemo(() => {\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        icon: CopyIcon,\n        disabled: true,\n        label: t('action.duplicate.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"duplicate-document\" currentUser={currentUser} />\n        ),\n      }\n    }\n\n    return {\n      icon: CopyIcon,\n      disabled: isDuplicating || Boolean(duplicate.disabled) || isPermissionsLoading,\n      label: isDuplicating ? t('action.duplicate.running.label') : t('action.duplicate.label'),\n      title: duplicate.disabled ? t(DISABLED_REASON_KEY[duplicate.disabled]) : '',\n      onHandle: handle,\n    }\n  }, [\n    currentUser,\n    duplicate.disabled,\n    handle,\n    isDuplicating,\n    isPermissionsLoading,\n    permissions?.granted,\n    t,\n  ])\n}\n\nDuplicateAction.action = 'duplicate'\nDuplicateAction.displayName = 'DuplicateAction'\n","import {RevertIcon} from '@sanity/icons'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDialogProps,\n  useDocumentOperation,\n  useDocumentOperationEvent,\n  useTranslation,\n} from 'sanity'\nimport {useRouter} from 'sanity/router'\n\nimport {structureLocaleNamespace} from '../i18n'\n\n/** @internal */\nexport const HistoryRestoreAction: DocumentActionComponent = ({\n  id,\n  type,\n  revision,\n  onComplete,\n  release,\n}) => {\n  const {restore} = useDocumentOperation(id, type, release)\n  const event = useDocumentOperationEvent(id, type)\n  const {navigateIntent} = useRouter()\n  const prevEvent = useRef(event)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleConfirm = useCallback(() => {\n    restore.execute(revision!)\n    onComplete()\n  }, [restore, revision, onComplete])\n\n  /**\n   * If the restore operation is successful, navigate to the document edit view\n   */\n  useEffect(() => {\n    if (!event || event === prevEvent.current) return\n\n    if (event.type === 'success' && event.op === 'restore') {\n      navigateIntent('edit', {id, type})\n    }\n\n    prevEvent.current = event\n  }, [event, id, navigateIntent, type])\n\n  const handle = useCallback(() => {\n    setConfirmDialogOpen(true)\n  }, [])\n\n  const dialog: DocumentActionDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'confirm',\n        tone: 'critical',\n        onCancel: onComplete,\n        onConfirm: handleConfirm,\n        message: t('action.restore.confirm.message'),\n      }\n    }\n\n    return null\n  }, [handleConfirm, isConfirmDialogOpen, onComplete, t])\n\n  const isRevisionInitial = revision === '@initial'\n  const isRevisionLatest = revision === undefined // undefined means latest revision\n\n  return useMemo(() => {\n    if (isRevisionLatest) {\n      return null\n    }\n\n    return {\n      label: t('action.restore.label'),\n      tone: 'caution',\n      onHandle: handle,\n      title: t(\n        isRevisionInitial\n          ? 'action.restore.disabled.cannot-restore-initial'\n          : 'action.restore.tooltip',\n      ),\n      icon: RevertIcon,\n      dialog,\n      disabled: isRevisionInitial,\n    }\n  }, [dialog, handle, isRevisionInitial, isRevisionLatest, t])\n}\n\nHistoryRestoreAction.action = 'restore'\nHistoryRestoreAction.displayName = 'HistoryRestoreAction'\n","import {defineEvent} from '@sanity/telemetry'\n\ninterface DocumentPublishedInfo {\n  /**\n   * The document was created and published straight away\n   */\n  publishedImmediately: boolean\n\n  /**\n   * The document had a previously published version when it was published\n   */\n  previouslyPublished: boolean\n}\nexport const DocumentPublished = defineEvent<DocumentPublishedInfo>({\n  name: 'Document Published',\n  version: 1,\n  description: 'User clicked the \"Publish\" button in the document pane',\n})\n","import {PublishIcon} from '@sanity/icons'\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {isValidationErrorMarker} from '@sanity/types'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  InsufficientPermissionsMessage,\n  isPublishedId,\n  type TFunction,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useEditState,\n  useRelativeTime,\n  useSyncState,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {structureLocaleNamespace, type StructureLocaleResourceKeys} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\nimport {DocumentPublished} from './__telemetry__/documentActions.telemetry'\n\nconst DISABLED_REASON_TITLE_KEY: Record<string, StructureLocaleResourceKeys> = {\n  LIVE_EDIT_ENABLED: 'action.publish.live-edit.publish-disabled',\n  ALREADY_PUBLISHED: 'action.publish.already-published.no-time-ago.tooltip',\n  NO_CHANGES: 'action.publish.no-changes.tooltip',\n  NOT_READY: 'action.publish.disabled.not-ready',\n} as const\n\nfunction getDisabledReason(\n  reason: keyof typeof DISABLED_REASON_TITLE_KEY,\n  publishedAt: string | undefined,\n  t: TFunction,\n) {\n  if (reason === 'ALREADY_PUBLISHED' && publishedAt) {\n    return <AlreadyPublished publishedAt={publishedAt} />\n  }\n  return t(DISABLED_REASON_TITLE_KEY[reason])\n}\n\nfunction AlreadyPublished({publishedAt}: {publishedAt: string}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const timeSincePublished = useRelativeTime(publishedAt, {useTemporalPhrase: true})\n  return <span>{t('action.publish.already-published.tooltip', {timeSincePublished})}</span>\n}\n\n/** @internal */\n// eslint-disable-next-line complexity\nexport const PublishAction: DocumentActionComponent = (props) => {\n  const {id, type, liveEdit, draft, published, release} = props\n  const [publishState, setPublishState] = useState<'publishing' | 'published' | null>(null)\n  const {publish} = useDocumentOperation(id, type)\n  const validationStatus = useValidationStatus(id, type)\n  const syncState = useSyncState(id, type)\n  const {changesOpen, documentId, documentType, value} = useDocumentPane()\n  const editState = useEditState(documentId, documentType)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const revision = (editState?.draft || editState?.published || {})._rev\n\n  const hasValidationErrors = validationStatus.validation.some(isValidationErrorMarker)\n  // we use this to \"schedule\" publish after pending tasks (e.g. validation and sync) has completed\n  const [publishScheduled, setPublishScheduled] = useState<boolean>(false)\n  const isSyncing = syncState.isSyncing\n  const isValidating = validationStatus.isValidating\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'publish',\n  })\n\n  const currentUser = useCurrentUser()\n\n  // eslint-disable-next-line no-nested-ternary\n  const title = publish.disabled\n    ? getDisabledReason(publish.disabled, (published || {})._updatedAt, t) || ''\n    : hasValidationErrors\n      ? t('action.publish.validation-issues.tooltip')\n      : ''\n\n  const hasDraft = Boolean(draft)\n\n  const doPublish = useCallback(() => {\n    publish.execute()\n    setPublishState('publishing')\n  }, [publish])\n\n  useEffect(() => {\n    // make sure the validation status is about the current revision and not an earlier one\n    const validationComplete =\n      validationStatus.isValidating === false && validationStatus.revision !== revision\n\n    if (!publishScheduled || isSyncing || !validationComplete) {\n      return\n    }\n\n    if (!hasValidationErrors) {\n      doPublish()\n    }\n    setPublishScheduled(false)\n  }, [\n    isSyncing,\n    doPublish,\n    hasValidationErrors,\n    publishScheduled,\n    validationStatus.revision,\n    revision,\n    isValidating,\n    validationStatus.isValidating,\n  ])\n\n  useEffect(() => {\n    const didPublish = publishState === 'publishing' && !hasDraft\n\n    const nextState = didPublish ? 'published' : null\n    const delay = didPublish ? 200 : 4000\n    const timer = setTimeout(() => {\n      setPublishState(nextState)\n    }, delay)\n    return () => clearTimeout(timer)\n  }, [changesOpen, publishState, hasDraft])\n\n  const telemetry = useTelemetry()\n\n  const handle = useCallback(() => {\n    telemetry.log(DocumentPublished, {\n      publishedImmediately: !draft?._createdAt,\n      previouslyPublished: Boolean(published),\n    })\n    if (\n      syncState.isSyncing ||\n      validationStatus.isValidating ||\n      validationStatus.revision !== revision\n    ) {\n      setPublishScheduled(true)\n    } else {\n      doPublish()\n    }\n  }, [\n    telemetry,\n    draft?._createdAt,\n    published,\n    syncState.isSyncing,\n    validationStatus.isValidating,\n    validationStatus.revision,\n    revision,\n    doPublish,\n  ])\n\n  return useMemo(() => {\n    if (release) {\n      // Version documents are not publishable by this action, they should be published as part of a release\n      return null\n    }\n    if (liveEdit) {\n      // Live edit documents are not publishable by this action, they are published automatically\n      return null\n    }\n\n    /**\n     * When draft is null, if not a published or version document\n     * then it means the draft is yet to be saved - in this case don't disabled\n     * the publish button due to ALREADY_PUBLISHED reason\n     */\n    if (isPublishedId(value._id) && draft !== null) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.label'),\n        title: getDisabledReason('ALREADY_PUBLISHED', published?._updatedAt, t),\n        disabled: true,\n      }\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'default',\n        icon: PublishIcon,\n        label: t('action.publish.label'),\n        title: (\n          <InsufficientPermissionsMessage context=\"publish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    const disabled = Boolean(\n      publishScheduled ||\n        editState?.transactionSyncLock?.enabled ||\n        publishState === 'publishing' ||\n        publishState === 'published' ||\n        hasValidationErrors ||\n        publish.disabled,\n    )\n\n    return {\n      disabled: disabled || isPermissionsLoading,\n      tone: 'default',\n      label:\n        // eslint-disable-next-line no-nested-ternary\n        publishState === 'published'\n          ? t('action.publish.published.label')\n          : publishScheduled || publishState === 'publishing'\n            ? t('action.publish.running.label')\n            : t('action.publish.draft.label'),\n      // @todo: Implement loading state, to show a `<Button loading />` state\n      // loading: publishScheduled || publishState === 'publishing',\n      icon: PublishIcon,\n      // eslint-disable-next-line no-nested-ternary\n      title: publishScheduled\n        ? t('action.publish.waiting')\n        : publishState === 'published' || publishState === 'publishing'\n          ? null\n          : title,\n      shortcut: disabled || publishScheduled ? null : 'Ctrl+Alt+P',\n      onHandle: handle,\n    }\n  }, [\n    release,\n    liveEdit,\n    value._id,\n    draft,\n    isPermissionsLoading,\n    permissions?.granted,\n    publishScheduled,\n    editState?.transactionSyncLock?.enabled,\n    publishState,\n    hasValidationErrors,\n    publish.disabled,\n    t,\n    title,\n    handle,\n    published?._updatedAt,\n    currentUser,\n  ])\n}\n\nPublishAction.action = 'publish'\nPublishAction.displayName = 'PublishAction'\n","import {UnpublishIcon} from '@sanity/icons'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionModalDialogProps,\n  InsufficientPermissionsMessage,\n  isDraftId,\n  useCurrentUser,\n  useDocumentOperation,\n  useDocumentPairPermissions,\n  useTranslation,\n} from 'sanity'\n\nimport {ConfirmDeleteDialog} from '../components'\nimport {structureLocaleNamespace} from '../i18n'\nimport {useDocumentPane} from '../panes/document/useDocumentPane'\n\nconst DISABLED_REASON_KEY = {\n  NOT_PUBLISHED: 'action.unpublish.disabled.not-published',\n  NOT_READY: 'action.unpublish.disabled.not-ready',\n  LIVE_EDIT_ENABLED: 'action.unpublish.disabled.live-edit-enabled',\n}\n\n/** @internal */\nexport const UnpublishAction: DocumentActionComponent = ({\n  id,\n  type,\n  draft,\n  onComplete,\n  liveEdit,\n  release,\n}) => {\n  const {unpublish} = useDocumentOperation(id, type)\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false)\n  const [permissions, isPermissionsLoading] = useDocumentPairPermissions({\n    id,\n    type,\n    permission: 'unpublish',\n  })\n  const currentUser = useCurrentUser()\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const isDraft = displayed?._id && isDraftId(displayed?._id)\n\n  const handleCancel = useCallback(() => {\n    setConfirmDialogOpen(false)\n    onComplete()\n  }, [onComplete])\n\n  const handleConfirm = useCallback(() => {\n    setConfirmDialogOpen(false)\n    unpublish.execute()\n    onComplete()\n  }, [onComplete, unpublish])\n\n  const dialog: DocumentActionModalDialogProps | null = useMemo(() => {\n    if (isConfirmDialogOpen) {\n      return {\n        type: 'dialog',\n        onClose: onComplete,\n        content: (\n          <ConfirmDeleteDialog\n            id={draft?._id || id}\n            type={type}\n            // eslint-disable-next-line @sanity/i18n/no-attribute-string-literals\n            action=\"unpublish\"\n            onCancel={handleCancel}\n            onConfirm={handleConfirm}\n          />\n        ),\n      }\n    }\n\n    return null\n  }, [draft, id, handleCancel, handleConfirm, isConfirmDialogOpen, onComplete, type])\n\n  return useMemo(() => {\n    if (release || isDraft) {\n      // Version documents cannot be unpublished by this action, they should be unpublished as part of a release\n      // Draft documents can't either\n      return null\n    }\n    if (liveEdit) {\n      return null\n    }\n\n    if (!isPermissionsLoading && !permissions?.granted) {\n      return {\n        tone: 'critical',\n        icon: UnpublishIcon,\n        label: 'Unpublish',\n        title: (\n          <InsufficientPermissionsMessage context=\"unpublish-document\" currentUser={currentUser} />\n        ),\n        disabled: true,\n      }\n    }\n\n    return {\n      tone: 'critical',\n      icon: UnpublishIcon,\n      disabled: Boolean(unpublish.disabled) || isPermissionsLoading,\n      label: t('action.unpublish.label'),\n      title: unpublish.disabled ? t(DISABLED_REASON_KEY[unpublish.disabled]) : '',\n      onHandle: () => setConfirmDialogOpen(true),\n      dialog,\n    }\n  }, [\n    release,\n    isDraft,\n    liveEdit,\n    isPermissionsLoading,\n    permissions?.granted,\n    unpublish.disabled,\n    t,\n    dialog,\n    currentUser,\n  ])\n}\n\nUnpublishAction.action = 'unpublish'\nUnpublishAction.displayName = 'UnpublishAction'\n","/* eslint-disable no-warning-comments */\n/* eslint-disable camelcase */\nimport {Flex, LayerProvider, Stack, Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentActionComponent,\n  type DocumentActionDescription,\n  Hotkeys,\n  usePerspective,\n  useSource,\n} from 'sanity'\n\nimport {Button, Tooltip} from '../../../../ui-components'\nimport {RenderActionCollectionState} from '../../../components'\nimport {HistoryRestoreAction} from '../../../documentActions'\nimport {toLowerCaseNoSpaces} from '../../../util/toLowerCaseNoSpaces'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {ActionMenuButton} from './ActionMenuButton'\nimport {ActionStateDialog} from './ActionStateDialog'\n\ninterface DocumentStatusBarActionsInnerProps {\n  disabled: boolean\n  showMenu: boolean\n  states: DocumentActionDescription[]\n}\n\nconst DocumentStatusBarActionsInner = memo(function DocumentStatusBarActionsInner(\n  props: DocumentStatusBarActionsInnerProps,\n) {\n  const {disabled, showMenu, states} = props\n  const {__internal_tasks} = useSource()\n  const {editState} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [firstActionState, ...menuActionStates] = states\n  const [buttonElement, setButtonElement] = useState<HTMLButtonElement | null>(null)\n\n  // TODO: This could be refactored to use the tooltip from the button if the firstAction.title was updated to a string.\n  const tooltipContent = useMemo(() => {\n    if (!firstActionState || (!firstActionState.title && !firstActionState.shortcut)) return null\n\n    return (\n      <Flex style={{maxWidth: 300}} align=\"center\" gap={3}>\n        {firstActionState.title && <Text size={1}>{firstActionState.title}</Text>}\n        {firstActionState.shortcut && (\n          <Hotkeys\n            data-testid=\"document-status-bar-hotkeys\"\n            fontSize={1}\n            style={{marginTop: -4, marginBottom: -4}}\n            keys={String(firstActionState.shortcut)\n              .split('+')\n              .map((s) => s.slice(0, 1).toUpperCase() + s.slice(1).toLowerCase())}\n          />\n        )}\n      </Flex>\n    )\n  }, [firstActionState])\n\n  const sideMenuItems = useMemo(() => {\n    return selectedReleaseId ? [firstActionState, ...menuActionStates] : menuActionStates\n  }, [selectedReleaseId, firstActionState, menuActionStates])\n\n  const canShowAction = firstActionState && !selectedReleaseId && !editState?.liveEdit\n\n  /* Version / Bundling handling */\n  return (\n    <Flex align=\"center\" gap={1}>\n      {__internal_tasks && __internal_tasks.footerAction}\n      {canShowAction && (\n        <LayerProvider zOffset={200}>\n          <Tooltip disabled={!tooltipContent} content={tooltipContent} placement=\"top\">\n            <Stack>\n              <Button\n                data-testid={`action-${toLowerCaseNoSpaces(firstActionState.label)}`}\n                disabled={disabled || Boolean(firstActionState.disabled)}\n                icon={firstActionState.icon}\n                // eslint-disable-next-line react/jsx-handler-names\n                onClick={firstActionState.onHandle}\n                ref={setButtonElement}\n                text={firstActionState.label}\n                tone={firstActionState.tone || 'primary'}\n              />\n            </Stack>\n          </Tooltip>\n        </LayerProvider>\n      )}\n      {/* if it's in version we always only want to show the items on the side menu and not on the main action */}\n      {((showMenu && menuActionStates.length > 0) || selectedReleaseId) && (\n        <ActionMenuButton actionStates={sideMenuItems} disabled={disabled} />\n      )}\n      {firstActionState && firstActionState.dialog && (\n        <ActionStateDialog dialog={firstActionState.dialog} referenceElement={buttonElement} />\n      )}\n    </Flex>\n  )\n})\n\nexport const DocumentStatusBarActions = memo(function DocumentStatusBarActions() {\n  const {actions: allActions, connectionState, documentId, editState} = useDocumentPane()\n  // const [isMenuOpen, setMenuOpen] = useState(false)\n  // const handleMenuOpen = useCallback(() => setMenuOpen(true), [])\n  // const handleMenuClose = useCallback(() => setMenuOpen(false), [])\n  // const handleActionComplete = useCallback(() => setMenuOpen(false), [])\n\n  // The restore action has a dedicated place in the UI; it's only visible when the user is viewing\n  // a different document revision. It must be omitted from this collection.\n  const actions = useMemo(\n    () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n    [allActions],\n  )\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected'}\n        // isMenuOpen={isMenuOpen}\n        // onMenuOpen={handleMenuOpen}\n        // onMenuClose={handleMenuClose}\n        showMenu={actions.length > 1}\n        states={states}\n        // Use document ID as key to make sure that the actions state is reset when the document changes\n        key={documentId}\n      />\n    ),\n    [actions.length, connectionState, documentId],\n  )\n\n  if (actions.length === 0 || !editState) {\n    return null\n  }\n\n  return (\n    <RenderActionCollectionState\n      // component={}\n      // onActionComplete={handleActionComplete}\n      actions={actions}\n      actionProps={editState}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport const HistoryStatusBarActions = memo(function HistoryStatusBarActions() {\n  const {actions, connectionState, editState, revisionId: revision} = useDocumentPane()\n\n  const disabled = (editState?.draft || editState?.published || {})._rev === revision\n  const actionProps = useMemo(() => ({...(editState || {}), revision}), [editState, revision])\n\n  // If multiple `restore` actions are defined, ensure only the final one is used.\n  const historyActions = useMemo(() => (actions ?? []).filter(isRestoreAction).slice(-1), [actions])\n\n  const renderDocumentStatusBarActions = useCallback<\n    (props: {states: DocumentActionDescription[]}) => React.ReactNode\n  >(\n    ({states}) => (\n      <DocumentStatusBarActionsInner\n        disabled={connectionState !== 'connected' || Boolean(disabled)}\n        showMenu={false}\n        states={states}\n      />\n    ),\n    [connectionState, disabled],\n  )\n\n  return (\n    <RenderActionCollectionState\n      actions={historyActions}\n      actionProps={actionProps as any}\n      group=\"default\"\n    >\n      {renderDocumentStatusBarActions}\n    </RenderActionCollectionState>\n  )\n})\n\nexport function isRestoreAction(\n  action: DocumentActionComponent,\n): action is DocumentActionComponent & {action: 'restore'} {\n  return action.action === HistoryRestoreAction.action\n}\n","import {Text} from '@sanity/ui'\nimport {memo, useCallback, useMemo} from 'react'\nimport {\n  formatRelativeLocalePublishDate,\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  isDraftId,\n  isPublishedId,\n  isPublishedPerspective,\n  isReleaseScheduledOrScheduling,\n  isVersionId,\n  type ReleaseDocument,\n  Translate,\n  useActiveReleases,\n  useDateTimeFormat,\n  type UseDateTimeFormatOptions,\n  useOnlyHasVersions,\n  usePerspective,\n  useSchema,\n  useSetPerspective,\n  useTranslation,\n  VersionChip,\n} from 'sanity'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {isLiveEditEnabled} from '../../../../../components/paneItem/helpers'\nimport {useFilteredReleases} from '../../../../../hooks/useFilteredReleases'\nimport {useDocumentPane} from '../../../useDocumentPane'\n\nconst TooltipContent = ({release}: {release: ReleaseDocument}) => {\n  const {t} = useTranslation()\n\n  if (release.state === 'archived') {\n    return <Text size={1}>{t('release.chip.tooltip.archived')}</Text>\n  }\n  if (release.metadata.releaseType === 'asap') {\n    return <Text size={1}>{t('release.type.asap')}</Text>\n  }\n  if (release.metadata.releaseType === 'scheduled') {\n    const isActive = release.state === 'active'\n\n    return (\n      release.metadata.intendedPublishAt && (\n        <Text size={1}>\n          {isActive ? (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.intended-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          ) : (\n            <Translate\n              t={t}\n              i18nKey=\"release.chip.tooltip.scheduled-for-date\"\n              values={{\n                date: formatRelativeLocalePublishDate(release),\n              }}\n            />\n          )}\n        </Text>\n      )\n    )\n  }\n\n  if (release.metadata.releaseType === 'undecided') {\n    return <Text size={1}>{t('release.type.undecided')}</Text>\n  }\n  return null\n}\n\nconst DATE_TIME_FORMAT: UseDateTimeFormatOptions = {\n  dateStyle: 'medium',\n  timeStyle: 'short',\n}\n\nexport const DocumentPerspectiveList = memo(function DocumentPerspectiveList() {\n  const {selectedReleaseId, selectedPerspectiveName} = usePerspective()\n  const {t} = useTranslation()\n  const setPerspective = useSetPerspective()\n  const {params, setParams} = usePaneRouter()\n  const dateTimeFormat = useDateTimeFormat(DATE_TIME_FORMAT)\n  const {loading} = useActiveReleases()\n  const schema = useSchema()\n  const {editState, displayed, documentType, documentId} = useDocumentPane()\n  const isCreatingDocument = displayed && !displayed._createdAt\n  const filteredReleases = useFilteredReleases({displayed, documentId})\n  const onlyHasVersions = useOnlyHasVersions({documentId})\n\n  const handlePerspectiveChange = useCallback(\n    (perspective: Parameters<typeof setPerspective>[0]) => () => {\n      if (perspective === 'published' && params?.historyVersion) {\n        setParams({\n          ...params,\n          rev: params?.historyEvent || undefined,\n          since: undefined,\n          historyVersion: undefined,\n        })\n      }\n      setPerspective(perspective)\n    },\n    [setPerspective, setParams, params],\n  )\n\n  const schemaType = schema.get(documentType)\n  const isLiveEdit = schemaType ? isLiveEditEnabled(schemaType) : false\n\n  const isPublishedChipDisabled = useMemo(() => {\n    // If it's a live edit document the only option to edit it is through\n    // the published perspective, users should be able to select it.\n    if (isLiveEdit && !selectedReleaseId) return false\n\n    // If it's not live edit, we want to check for the existence of the published doc.\n    return !editState?.published\n  }, [isLiveEdit, selectedReleaseId, editState?.published])\n\n  const getReleaseChipState = useCallback(\n    (release: ReleaseDocument): {selected: boolean; disabled?: boolean} => {\n      if (!params?.historyVersion)\n        return {\n          selected:\n            getReleaseIdFromReleaseDocumentId(release._id) ===\n            getVersionFromId(displayed?._id || ''),\n        }\n\n      const isReleaseHistoryMatch =\n        getReleaseIdFromReleaseDocumentId(release._id) === params.historyVersion\n\n      return {selected: isReleaseHistoryMatch, disabled: isReleaseHistoryMatch}\n    },\n    [displayed?._id, params?.historyVersion],\n  )\n\n  const isPublishSelected: boolean = useMemo(() => {\n    /**\n     * The publish perspective is selected when:\n     *  - the document is live edit and there is no draft\n     *  - the document is published and the selected perspective is published\n     */\n    if (isLiveEdit && !editState?.draft?._id && !selectedReleaseId) return true\n    if (\n      isPublishedId(displayed?._id || '') &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    ) {\n      return true\n    }\n    return false\n  }, [\n    displayed?._id,\n    editState?.draft?._id,\n    isLiveEdit,\n    selectedPerspectiveName,\n    selectedReleaseId,\n  ])\n\n  const isDraftSelected: boolean = useMemo(() => {\n    const displayedId = displayed?._id || ''\n    /** the draft is selected when:\n     * not viewing a historical version,\n     * when the document displayed is a draft,\n     * when the perspective is null,\n     * when the document is not published and the displayed version is draft,\n     * when there is no draft (new document),\n     */\n    if (isPublishSelected) return false\n    if (params?.historyVersion) return false\n    if (selectedPerspectiveName) return false\n    if (isVersionId(displayedId)) return false\n    if (isDraftId(displayedId)) return true\n    if (\n      isPublishedId(displayedId) &&\n      editState?.published &&\n      isPublishedPerspective(selectedPerspectiveName || '')\n    )\n      return false\n    return true\n  }, [\n    displayed?._id,\n    editState?.published,\n    isPublishSelected,\n    params?.historyVersion,\n    selectedPerspectiveName,\n  ])\n\n  const isDraftDisabled: boolean = useMemo(() => {\n    // Draft is disabled when the document has no published or draft but has versions\n    if (onlyHasVersions || (isCreatingDocument && selectedReleaseId)) {\n      return true\n    }\n\n    // Draft is disabled when we are creating a new document inside a release\n    // or when the document is live edit and there is no draft\n    if (!editState?.draft && !isLiveEdit) {\n      return false\n    }\n\n    if (isCreatingDocument && selectedReleaseId) return true\n    if (isLiveEdit) return true\n    return false\n  }, [editState?.draft, isCreatingDocument, isLiveEdit, onlyHasVersions, selectedReleaseId])\n\n  return (\n    <>\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.published && editState?.published?._updatedAt ? (\n              <Translate\n                t={t}\n                i18nKey=\"release.chip.tooltip.published-date\"\n                values={{date: dateTimeFormat.format(new Date(editState?.published._updatedAt))}}\n              />\n            ) : (\n              <>{t('release.chip.tooltip.not-published')}</>\n            )}\n          </Text>\n        }\n        disabled={isPublishedChipDisabled}\n        onClick={handlePerspectiveChange('published')}\n        selected={isPublishSelected}\n        text={t('release.chip.published')}\n        tone=\"positive\"\n        contextValues={{\n          documentId: editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType,\n          fromRelease: 'published',\n          isVersion: false,\n          disabled: !editState?.published,\n        }}\n      />\n      <VersionChip\n        tooltipContent={\n          <Text size={1}>\n            {editState?.draft ? (\n              <>\n                {editState?.draft._updatedAt ? (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.edited-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._updatedAt))}}\n                  />\n                ) : (\n                  <Translate\n                    t={t}\n                    i18nKey=\"release.chip.tooltip.created-date\"\n                    values={{date: dateTimeFormat.format(new Date(editState?.draft._createdAt))}}\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                {isLiveEdit\n                  ? t('release.chip.tooltip.draft-disabled.live-edit')\n                  : t('release.chip.tooltip.no-edits')}\n              </>\n            )}\n          </Text>\n        }\n        selected={isDraftSelected}\n        disabled={isDraftDisabled}\n        text={t('release.chip.draft')}\n        tone={editState?.draft ? 'caution' : 'neutral'}\n        onClick={handlePerspectiveChange('drafts')}\n        contextValues={{\n          documentId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          menuReleaseId: editState?.draft?._id || editState?.published?._id || editState?.id || '',\n          releases: filteredReleases.notCurrentReleases,\n          releasesLoading: loading,\n          documentType: documentType,\n          fromRelease: 'draft',\n          isVersion: false,\n          disabled: !editState?.draft,\n        }}\n      />\n      {filteredReleases.inCreation && (\n        <VersionChip\n          tooltipContent={<TooltipContent release={filteredReleases.inCreation} />}\n          selected\n          onClick={() => {}}\n          locked={false}\n          tone={getReleaseTone(filteredReleases.inCreation)}\n          text={\n            filteredReleases.inCreation.metadata.title || t('release.placeholder-untitled-release')\n          }\n          contextValues={{\n            disabled: true, // disable the chip context menu, this one is in creation\n            documentId: displayed?._id || '',\n            menuReleaseId: filteredReleases.inCreation._id,\n            releases: filteredReleases.notCurrentReleases,\n            releasesLoading: loading,\n            documentType,\n            fromRelease: getReleaseIdFromReleaseDocumentId(filteredReleases.inCreation._id),\n            releaseState: filteredReleases.inCreation.state,\n            isVersion: true,\n          }}\n        />\n      )}\n\n      {displayed &&\n        filteredReleases.currentReleases?.map((release) => (\n          <VersionChip\n            key={release._id}\n            tooltipContent={<TooltipContent release={release} />}\n            {...getReleaseChipState(release)}\n            onClick={handlePerspectiveChange(getReleaseIdFromReleaseDocumentId(release._id))}\n            text={release.metadata.title || t('release.placeholder-untitled-release')}\n            tone={getReleaseTone(release)}\n            locked={isReleaseScheduledOrScheduling(release)}\n            contextValues={{\n              documentId: displayed?._id || '',\n              menuReleaseId: release._id,\n              releases: filteredReleases.notCurrentReleases,\n              releasesLoading: loading,\n              documentType: documentType,\n              fromRelease: getReleaseIdFromReleaseDocumentId(release._id),\n              releaseState: release.state,\n              isVersion: true,\n            }}\n          />\n        ))}\n    </>\n  )\n})\n","import {ArrowLeftIcon, CloseIcon, SplitVerticalIcon} from '@sanity/icons'\nimport {Box, Card, Flex} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, rgba} from '@sanity/ui/theme'\nimport {\n  type ForwardedRef,\n  forwardRef,\n  memo,\n  useCallback,\n  useDeferredValue,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, useFieldActions, useTranslation} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../../ui-components'\nimport {\n  PaneContextMenuButton,\n  PaneHeader,\n  PaneHeaderActionButton,\n  RenderActionCollectionState,\n  usePane,\n  usePaneRouter,\n} from '../../../../components'\nimport {type _PaneMenuNode} from '../../../../components/pane/types'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {isMenuNodeButton, isNotMenuNodeButton, resolveMenuNodes} from '../../../../menuNodes'\nimport {type PaneMenuItem} from '../../../../types'\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {ActionDialogWrapper, ActionMenuListItem} from '../../statusBar/ActionMenuButton'\nimport {isRestoreAction} from '../../statusBar/DocumentStatusBarActions'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {DocumentHeaderTitle} from './DocumentHeaderTitle'\nimport {DocumentPerspectiveList} from './perspective/DocumentPerspectiveList'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DocumentPanelHeaderProps {\n  menuItems: PaneMenuItem[]\n}\n\nconst HorizontalScroller = styled(Card)((props) => {\n  const theme = getTheme_v2(props.theme)\n\n  return css`\n    scrollbar-width: none;\n    z-index: 1;\n    flex: 1;\n    position: relative;\n    > div {\n      &::-webkit-scrollbar {\n        width: 0;\n        height: 0;\n      }\n    }\n\n    &::after {\n      content: '';\n      display: block;\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      width: ${theme.space[3]}px;\n      background: linear-gradient(to right, ${rgba(theme.color.bg, 0)}, var(--card-bg-color));\n    }\n  `\n})\n\nexport const DocumentPanelHeader = memo(\n  forwardRef(function DocumentPanelHeader(\n    _props: DocumentPanelHeaderProps,\n    ref: ForwardedRef<HTMLDivElement>,\n  ) {\n    const {menuItems} = _props\n    const {\n      actions: allActions,\n      editState,\n      onMenuAction,\n      onPaneClose,\n      onPaneSplit,\n      menuItemGroups,\n      schemaType,\n      connectionState,\n      views,\n      unstable_languageFilter,\n    } = useDocumentPane()\n    const {features} = useStructureTool()\n    const {index, BackLink, hasGroupSiblings} = usePaneRouter()\n    const {actions: fieldActions} = useFieldActions()\n    const [referenceElement, setReferenceElement] = useState<HTMLElement | null>(null)\n\n    // The restore action has a dedicated place in the UI; it's only visible when the user is\n    // viewing a different document revision. It must be omitted from this collection.\n    const actions = useMemo(\n      () => (allActions ?? []).filter((action) => !isRestoreAction(action)),\n      [allActions],\n    )\n\n    const menuNodes = useMemo(\n      () =>\n        resolveMenuNodes({actionHandler: onMenuAction, fieldActions, menuItems, menuItemGroups}),\n      [onMenuAction, fieldActions, menuItemGroups, menuItems],\n    )\n\n    const menuButtonNodes = useMemo(() => menuNodes.filter(isMenuNodeButton), [menuNodes])\n    const contextMenuNodes = useMemo(() => menuNodes.filter(isNotMenuNodeButton), [menuNodes])\n    const showTabs = views.length > 1\n\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    // there are three kinds of buttons possible:\n    //\n    // 1. split pane - creates a new split pane\n    // 2. close split pane — closes the current split pane\n    // 3. close pane group — closes the current pane group\n\n    // show the split pane button if they're enabled and there is more than one\n    // view available to use to create a split view\n    const showSplitPaneButton = features.splitViews && onPaneSplit && views.length > 1\n\n    // show the split pane button close button if the split button is showing\n    // and there is more than one split pane open (aka has-siblings)\n    const showSplitPaneCloseButton = showSplitPaneButton && hasGroupSiblings\n\n    // show the back button if both the feature is enabled and the current pane\n    // is not the first\n    const showBackButton = features.backButton && index > 0\n\n    // show the pane group close button if the `showSplitPaneCloseButton` is\n    // _not_ showing (the split pane button replaces the group close button)\n    // and if the back button is not showing (the back button and the close\n    // button do the same thing and shouldn't be shown at the same time)\n    // and if a BackLink component was provided\n    const showPaneGroupCloseButton = !showSplitPaneCloseButton && !showBackButton && !!BackLink\n\n    const {t} = useTranslation(structureLocaleNamespace)\n\n    const renderPaneActions = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <DocumentPanelHeaderActionDialogDeferred\n          contextMenuNodes={contextMenuNodes}\n          setReferenceElement={setReferenceElement}\n          referenceElement={referenceElement}\n          states={states}\n        />\n      ),\n      [contextMenuNodes, referenceElement],\n    )\n\n    const title = useMemo(() => <DocumentHeaderTitle />, [])\n    const backButton = useMemo(\n      () =>\n        showBackButton && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: t('pane-header.back-button.text')}}\n          />\n        ),\n      [BackLink, showBackButton, t],\n    )\n    const renderedActions = useMemo(\n      () => (\n        <Flex align=\"center\" gap={1}>\n          {unstable_languageFilter.length > 0 && (\n            <>\n              {unstable_languageFilter.map((LanguageFilterComponent, idx) => {\n                return (\n                  <LanguageFilterComponent\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`language-filter-${idx}`}\n                    schemaType={schemaType}\n                  />\n                )\n              })}\n            </>\n          )}\n\n          {menuButtonNodes.map((item) => (\n            <PaneHeaderActionButton key={item.key} node={item} />\n          ))}\n          {editState && (\n            <RenderActionCollectionState\n              actions={actions}\n              actionProps={editState}\n              group=\"paneActions\"\n            >\n              {renderPaneActions}\n            </RenderActionCollectionState>\n          )}\n\n          {showSplitPaneButton && (\n            <Button\n              aria-label={t('buttons.split-pane-button.aria-label')}\n              icon={SplitVerticalIcon}\n              key=\"split-pane-button\"\n              mode=\"bleed\"\n              onClick={onPaneSplit}\n              tooltipProps={{content: t('buttons.split-pane-button.tooltip')}}\n            />\n          )}\n\n          {showSplitPaneCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              onClick={onPaneClose}\n              tooltipProps={{content: t('buttons.split-pane-close-button.title')}}\n            />\n          )}\n\n          {showPaneGroupCloseButton && (\n            <Button\n              icon={CloseIcon}\n              key=\"close-view-button\"\n              mode=\"bleed\"\n              tooltipProps={{content: t('buttons.split-pane-close-group-button.title')}}\n              as={BackLink}\n            />\n          )}\n        </Flex>\n      ),\n      [\n        BackLink,\n        actions,\n        editState,\n        menuButtonNodes,\n        onPaneClose,\n        onPaneSplit,\n        renderPaneActions,\n        schemaType,\n        showPaneGroupCloseButton,\n        showSplitPaneButton,\n        showSplitPaneCloseButton,\n        t,\n        unstable_languageFilter,\n      ],\n    )\n\n    return (\n      <TooltipDelayGroupProvider>\n        {collapsed ? (\n          <PaneHeader\n            border\n            ref={ref}\n            loading={connectionState === 'connecting' && !editState?.draft && !editState?.published}\n            title={title}\n            tabIndex={tabIndex}\n            backButton={backButton}\n          />\n        ) : (\n          <Card hidden={collapsed} style={{lineHeight: 0}} borderBottom>\n            <Flex gap={3} paddingY={3}>\n              <HorizontalScroller>\n                <Flex flex={1} gap={1} overflow=\"auto\" paddingX={3}>\n                  <DocumentPerspectiveList />\n                </Flex>\n              </HorizontalScroller>\n\n              <Box flex=\"none\" paddingRight={3}>\n                {renderedActions}\n              </Box>\n            </Flex>\n          </Card>\n        )}\n      </TooltipDelayGroupProvider>\n    )\n  }),\n)\n\nconst DocumentPanelHeaderActionDialogDeferred = memo(\n  function DocumentPanelHeaderActionDialogDeferred(props: {\n    states: DocumentActionDescription[]\n    setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n    referenceElement: HTMLElement | null\n    contextMenuNodes: _PaneMenuNode[]\n  }) {\n    const {setReferenceElement, referenceElement, contextMenuNodes} = props\n    /**\n     * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n     * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n     */\n    const states = useDeferredValue(props.states)\n\n    return (\n      <DocumentPanelHeaderActionDialog\n        setReferenceElement={setReferenceElement}\n        referenceElement={referenceElement}\n        contextMenuNodes={contextMenuNodes}\n        states={states}\n      />\n    )\n  },\n)\n\nconst DocumentPanelHeaderActionDialog = memo(function DocumentPanelHeaderActionDialog(props: {\n  states: DocumentActionDescription[]\n  setReferenceElement: React.Dispatch<React.SetStateAction<HTMLElement | null>>\n  referenceElement: HTMLElement | null\n  contextMenuNodes: _PaneMenuNode[]\n}) {\n  const {states, setReferenceElement, contextMenuNodes, referenceElement} = props\n\n  const renderActionDialog = useCallback<\n    ({handleAction}: {handleAction: (idx: number) => void}) => React.ReactNode\n  >(\n    ({handleAction}) => (\n      <div ref={setReferenceElement}>\n        <PaneContextMenuButton\n          nodes={contextMenuNodes}\n          key=\"context-menu\"\n          actionsNodes={\n            states.length > 0\n              ? states.map((actionState, actionIndex) => (\n                  <ActionMenuListItem\n                    key={actionState.label}\n                    actionState={actionState}\n                    disabled={Boolean(actionState.disabled)}\n                    index={actionIndex}\n                    onAction={handleAction}\n                  />\n                ))\n              : undefined\n          }\n        />\n      </div>\n    ),\n    [contextMenuNodes, setReferenceElement, states],\n  )\n\n  return (\n    <ActionDialogWrapper actionStates={states} referenceElement={referenceElement}>\n      {renderActionDialog}\n    </ActionDialogWrapper>\n  )\n})\n","import {Button, type ButtonProps} from '../../../ui-components'\n\ninterface SpacerButtonProps {\n  size?: ButtonProps['size']\n}\n\n/**\n * This renders a visually hidden <Button> component that is still contributes\n * to document layout.\n *\n * It's used to simplify padding in Sanity UI components that contain buttons which\n * may not always be rendered.\n *\n * TODO: let's find a more elegant solve to this layout shift problem\n *\n * @internal\n */\nexport function SpacerButton({size}: SpacerButtonProps) {\n  return (\n    <Button\n      aria-hidden\n      disabled\n      size={size}\n      style={{\n        pointerEvents: 'none',\n        visibility: 'hidden',\n        width: 0,\n      }}\n      text=\"-\"\n    />\n  )\n}\n","import {Badge, type BadgeTone, Inline} from '@sanity/ui'\nimport {memo, useCallback, useDeferredValue} from 'react'\nimport {type DocumentBadgeDescription} from 'sanity'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {RenderBadgeCollectionState} from '../../../components'\nimport {useDocumentPane} from '../useDocumentPane'\n\ninterface DocumentBadgesInnerProps {\n  states: DocumentBadgeDescription[]\n}\n\nconst BADGE_TONES: Record<string, BadgeTone | undefined> = {\n  primary: 'primary',\n  success: 'positive',\n  warning: 'caution',\n  danger: 'critical',\n}\n\nconst DocumentBadgesInner = memo(function DocumentBadgesInner({states}: DocumentBadgesInnerProps) {\n  if (states.length === 0) {\n    return null\n  }\n  return (\n    <Inline space={1}>\n      {states.map((badge, index) => (\n        <Tooltip\n          content={badge.title}\n          disabled={!badge.title}\n          key={`${badge.label}-${index}`}\n          placement=\"top\"\n          portal\n        >\n          <Badge\n            fontSize={1}\n            mode=\"outline\"\n            paddingX={2}\n            paddingY={1}\n            radius={4}\n            tone={badge.color ? BADGE_TONES[badge.color] : undefined}\n            style={{whiteSpace: 'nowrap'}}\n          >\n            {badge.label}\n          </Badge>\n        </Tooltip>\n      ))}\n    </Inline>\n  )\n})\n\nconst DocumentBadgesDeferred = memo(function DocumentBadgesDeferred(\n  props: DocumentBadgesInnerProps,\n) {\n  /**\n   * The purpose of this component is to allow deferring the rendering of document action hook states if the main thread becomes very busy.\n   * The `useDeferredValue` doesn't have an effect unless it's used to delay rendering a component that has `React.memo` to prevent unnecessary re-renders.\n   */\n  const states = useDeferredValue(props.states)\n  return <DocumentBadgesInner states={states} />\n})\n\nexport function DocumentBadges() {\n  const {badges, editState} = useDocumentPane()\n\n  const renderDocumentBadges = useCallback<\n    (props: {states: DocumentBadgeDescription[]}) => React.ReactNode\n  >(({states}) => <DocumentBadgesDeferred states={states} />, [])\n\n  if (!editState || !badges) return null\n\n  return (\n    <RenderBadgeCollectionState badges={badges} badgeProps={editState}>\n      {renderDocumentBadges}\n    </RenderBadgeCollectionState>\n  )\n}\n","import {\n  AddIcon,\n  CloseIcon,\n  EditIcon,\n  type IconComponent,\n  PublishIcon,\n  TrashIcon,\n  UnpublishIcon,\n} from '@sanity/icons'\n\nexport const TIMELINE_ICON_COMPONENTS: {[key: string]: IconComponent | undefined} = {\n  create: AddIcon,\n  delete: TrashIcon,\n  discardDraft: CloseIcon,\n  initial: AddIcon,\n  editDraft: EditIcon,\n  editLive: EditIcon,\n  publish: PublishIcon,\n  unpublish: UnpublishIcon,\n}\n","import {type IconComponent} from '@sanity/icons'\nimport {type ChunkType} from 'sanity'\n\nimport {TIMELINE_ICON_COMPONENTS} from './constants'\n\nexport function getTimelineEventIconComponent(type: ChunkType): IconComponent | undefined {\n  return TIMELINE_ICON_COMPONENTS[type]\n}\n","import {ChevronLeftIcon} from '@sanity/icons'\nimport {type MouseEvent, useCallback} from 'react'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button} from '../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {TIMELINE_LIST_WRAPPER_ID} from './timeline'\n\n/**\n * This is a hack to force the scrollbar to not appear when the list is expanding,\n * if we don't do this the scrollbar will appear for a brief moment when the list is expanding and then disappear\n * when the list is fully expanded.\n */\nfunction hideScrollbarOnExpand(isExpanded: boolean) {\n  // Do nothing if the list is already expanded\n  if (isExpanded) return\n\n  const listWrapper = document.getElementById(TIMELINE_LIST_WRAPPER_ID)\n\n  if (listWrapper) {\n    const firstChildren = listWrapper.children[0] as HTMLElement\n    const hasScrollbar = firstChildren.scrollHeight > firstChildren.clientHeight\n    if (!hasScrollbar) {\n      //\n      const currentStyle = getComputedStyle(firstChildren).overflowY\n      // Add overflow hidden to the listWrapper to avoid the scrollbar to appear when expanding\n      firstChildren.style.overflowY = 'hidden'\n      setTimeout(() => {\n        // Reset the overflow style after the list is expanded\n        firstChildren.style.overflowY = currentStyle\n      }, 0)\n    }\n  }\n}\n\nconst FlipIcon = styled(ChevronLeftIcon)`\n  transition: transform 200ms;\n  &[data-expanded='true'] {\n    transform: rotate(-90deg);\n  }\n`\n\nexport function ExpandableTimelineItemButton({\n  isExpanded,\n  onExpand,\n}: {\n  isExpanded: boolean\n  onExpand: () => void\n}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleExpandClick = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.stopPropagation()\n      hideScrollbarOnExpand(isExpanded)\n      onExpand()\n    },\n    [onExpand, isExpanded],\n  )\n\n  return (\n    <Button\n      mode=\"bleed\"\n      icon={<FlipIcon data-expanded={isExpanded} />}\n      tooltipProps={{\n        content: isExpanded\n          ? t('timeline-item.menu.action-collapse')\n          : t('timeline-item.menu.action-expand'),\n      }}\n      onClick={handleExpandClick}\n    />\n  )\n}\n","import {Box, Flex, Stack} from '@sanity/ui'\nimport {css, styled} from 'styled-components'\n\nexport const StackWrapper = styled(Stack)`\n  max-width: 200px;\n`\n\nexport const ListWrapper = styled(Flex)<{$maxHeight: string}>`\n  max-height: ${(props) => props.$maxHeight};\n  min-width: 244px;\n`\n\nexport const Root = styled(Box)<{$visible?: boolean}>(({$visible}) => {\n  return css`\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.2s;\n\n    ${$visible &&\n    css`\n      opacity: 1;\n      pointer-events: auto;\n    `}\n  `\n})\n","import {type ChunkType, type StudioLocaleResourceKeys} from 'sanity'\n\n/**\n * Maps from a chunk type to an i18n key for the operation\n *\n * @internal\n */\nexport const TIMELINE_ITEM_I18N_KEY_MAPPING: Record<ChunkType, StudioLocaleResourceKeys> = {\n  initial: 'timeline.operation.created-initial',\n  create: 'timeline.operation.created',\n  publish: 'timeline.operation.published',\n  editLive: 'timeline.operation.edited-live',\n  editDraft: 'timeline.operation.edited-draft',\n  unpublish: 'timeline.operation.unpublished',\n  discardDraft: 'timeline.operation.draft-discarded',\n  delete: 'timeline.operation.deleted',\n}\n","import {type AvatarSize, AvatarStack} from '@sanity/ui'\nimport {UserAvatar} from 'sanity'\n\ninterface UserAvatarStackProps {\n  maxLength?: number\n  userIds: string[]\n  size?: AvatarSize\n  withTooltip?: boolean\n}\n\nexport function UserAvatarStack({\n  maxLength,\n  userIds,\n  size,\n  withTooltip = true,\n}: UserAvatarStackProps) {\n  return (\n    <AvatarStack maxLength={maxLength} size={size}>\n      {userIds.map((userId) => (\n        <UserAvatar key={userId} user={userId} withTooltip={withTooltip} />\n      ))}\n    </AvatarStack>\n  )\n}\n","import {Box, Card, Flex, Skeleton, Stack, Text} from '@sanity/ui'\n// eslint-disable-next-line camelcase\nimport {getTheme_v2, type ThemeColorAvatarColorKey} from '@sanity/ui/theme'\nimport {type MouseEvent, useCallback, useMemo} from 'react'\nimport {\n  AvatarSkeleton,\n  type ChunkType,\n  type RelativeTimeOptions,\n  useDateTimeFormat,\n  UserAvatar,\n  useRelativeTime,\n  useTranslation,\n  useUser,\n} from 'sanity'\nimport {css, styled} from 'styled-components'\n\nimport {Tooltip} from '../../../../ui-components'\nimport {getTimelineEventIconComponent} from './helpers'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\nimport {UserAvatarStack} from './userAvatarStack'\nimport {type ChunksWithCollapsedDrafts} from './utils'\n\nexport const IconBox = styled(Flex)<{$color: ThemeColorAvatarColorKey}>((props) => {\n  const theme = getTheme_v2(props.theme)\n  const color = props.$color\n\n  return css`\n    --card-icon-color: ${theme.color.avatar[color].fg};\n    background-color: ${theme.color.avatar[color].bg};\n    box-shadow: 0 0 0 1px var(--card-bg-color);\n\n    position: absolute;\n    width: ${theme.avatar.sizes[0].size}px;\n    height: ${theme.avatar.sizes[0].size}px;\n    right: -3px;\n    bottom: -3px;\n    border-radius: 50%;\n  `\n})\n\nconst TIMELINE_ITEM_EVENT_TONE: Record<ChunkType | 'withinSelection', ThemeColorAvatarColorKey> = {\n  initial: 'blue',\n  create: 'blue',\n  publish: 'green',\n  editLive: 'green',\n  editDraft: 'yellow',\n  unpublish: 'orange',\n  discardDraft: 'orange',\n  delete: 'red',\n  withinSelection: 'magenta',\n}\n\nexport interface TimelineItemProps {\n  chunk: ChunksWithCollapsedDrafts\n  isSelected: boolean\n  onSelect: (chunk: ChunksWithCollapsedDrafts) => void\n  collaborators?: Set<string>\n  optionsMenu?: React.ReactNode\n}\n\nconst RELATIVE_TIME_OPTIONS: RelativeTimeOptions = {\n  minimal: true,\n  useTemporalPhrase: true,\n}\n\nconst NameSkeleton = styled(Skeleton)((props) => {\n  const theme = getTheme_v2(props.theme)\n  return css`\n    width: 6ch;\n    height: ${theme.font.text.sizes[0].lineHeight}px;\n  `\n})\n\nconst UserLine = ({userId}: {userId: string}) => {\n  const [user, loading] = useUser(userId)\n\n  return (\n    <Flex align=\"center\" gap={2} key={userId} padding={1}>\n      <Box>{loading || !user ? <AvatarSkeleton animated /> : <UserAvatar user={user} />}</Box>\n      <Box>\n        {loading || !user?.displayName ? (\n          <Text size={1}>\n            <NameSkeleton animated />\n          </Text>\n        ) : (\n          <Text muted size={1}>\n            {user.displayName}\n          </Text>\n        )}\n      </Box>\n    </Flex>\n  )\n}\nconst TooltipContent = ({collaborators}: {collaborators: string[]}) => {\n  const {t} = useTranslation('studio')\n  return (\n    <Stack paddingBottom={1}>\n      <Box padding={1} paddingBottom={2}>\n        <Text size={1} weight=\"medium\">\n          {t('timeline.changes.title')}\n        </Text>\n      </Box>\n      {collaborators.map((userId) => (\n        <UserLine key={userId} userId={userId} />\n      ))}\n    </Stack>\n  )\n}\nexport function TimelineItem({\n  chunk,\n  isSelected,\n  onSelect,\n  collaborators,\n  optionsMenu,\n}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const {type, endTimestamp: timestamp} = chunk\n  const IconComponent = getTimelineEventIconComponent(type)\n  const authorUserIds = Array.from(chunk.authors)\n  const collaboratorsUsersIds = collaborators ? Array.from(collaborators) : []\n  const isSelectable = type !== 'delete'\n  const dateFormat = useDateTimeFormat({dateStyle: 'medium', timeStyle: 'short'})\n  const date = new Date(timestamp)\n\n  const updatedTimeAgo = useRelativeTime(date || '', RELATIVE_TIME_OPTIONS)\n\n  const formattedTimestamp = useMemo(() => {\n    const parsedDate = new Date(timestamp)\n    const formattedDate = dateFormat.format(parsedDate)\n\n    return formattedDate\n  }, [timestamp, dateFormat])\n\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(chunk)\n      }\n    },\n    [onSelect, chunk, isSelectable],\n  )\n\n  return (\n    <Flex align=\"center\" gap={1}>\n      <Card\n        as=\"button\"\n        onClick={handleClick}\n        padding={2}\n        pressed={isSelected}\n        radius={2}\n        data-ui=\"timelineItem\"\n        data-testid=\"timeline-item-button\"\n        data-chunk-id={chunk.id}\n      >\n        <Flex align=\"center\" gap={3}>\n          <div style={{position: 'relative'}}>\n            <UserAvatarStack maxLength={3} userIds={authorUserIds} size={2} />\n            <IconBox align=\"center\" justify=\"center\" $color={TIMELINE_ITEM_EVENT_TONE[type]}>\n              <Text size={0}>{IconComponent && <IconComponent />}</Text>\n            </IconBox>\n          </div>\n          <Stack space={2}>\n            <Text size={1} weight=\"medium\">\n              {t(TIMELINE_ITEM_I18N_KEY_MAPPING[type]) || <code>{type}</code>}\n            </Text>\n\n            <Text as=\"time\" size={1} muted dateTime={timestamp} title={formattedTimestamp}>\n              {updatedTimeAgo}\n            </Text>\n          </Stack>\n\n          {collaboratorsUsersIds.length > 0 && (\n            <Flex flex={1} justify=\"flex-end\" align=\"center\">\n              <Tooltip\n                placement=\"top\"\n                content={<TooltipContent collaborators={collaboratorsUsersIds} />}\n                portal\n              >\n                <Box paddingLeft={2} paddingY={2}>\n                  <UserAvatarStack\n                    maxLength={3}\n                    userIds={collaboratorsUsersIds}\n                    size={0}\n                    withTooltip={false}\n                  />\n                </Box>\n              </Tooltip>\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n      {optionsMenu}\n    </Flex>\n  )\n}\n","import {type Chunk, type ChunkType} from 'sanity'\n\nexport type NonPublishChunk = Omit<Chunk, 'type'> & {\n  type: Exclude<ChunkType, 'publish'>\n  parentId?: string\n}\n\nexport type PublishChunk = Omit<Chunk, 'type'> & {\n  type: 'publish'\n  children: string[]\n  collaborators: Set<string>\n}\n\nexport const isNonPublishChunk = (chunk: Chunk): chunk is NonPublishChunk =>\n  chunk.type !== 'publish'\n\nexport const isPublishChunk = (chunk: Chunk): chunk is PublishChunk => chunk.type === 'publish'\n\n/**\n * searches for the previous publish action in the list of chunks\n * e.g. chunks = [publish, edit, publish, edit, edit] it needs to return the second publish action\n * e.g. chunks = [publish, edit, delete, edit, edit] it returns undefined\n */\n\nfunction getPreviousPublishAction(chunks: Chunk[]) {\n  let previousPublish: PublishChunk | null = null\n  // We need to iterate from the end to the start of the list\n  for (let index = chunks.length - 1; index >= 0; index--) {\n    const chunk = chunks[index]\n    if (isPublishChunk(chunk)) {\n      previousPublish = chunk\n      break\n    }\n    if (chunk.type === 'editDraft') {\n      continue\n    } else break\n  }\n\n  return previousPublish\n}\nexport type ChunksWithCollapsedDrafts = NonPublishChunk | PublishChunk\n\n/**\n * Takes an array of chunks and adds them metadata necessary for the timeline view.\n * for draft chunks, it will add the parentId of the published chunk if this draft action is now published\n * for published, it will add the children array and the collaborators array\n */\nexport function addChunksMetadata(chunks: Chunk[]): ChunksWithCollapsedDrafts[] {\n  const result: ChunksWithCollapsedDrafts[] = []\n\n  for (const chunk of chunks) {\n    if (isPublishChunk(chunk)) {\n      result.push({\n        ...chunk,\n        type: 'publish',\n        children: [],\n        collaborators: new Set(), // Initialize the collaborators array\n      })\n      continue\n    }\n    if (isNonPublishChunk(chunk)) {\n      const previousPublish = getPreviousPublishAction(result)\n      if (chunk.type === 'editDraft' && previousPublish?.type === 'publish') {\n        Array.from(chunk.authors).forEach((id) => {\n          previousPublish.collaborators.add(id)\n        })\n        previousPublish.children.push(chunk.id)\n        result.push({\n          ...chunk,\n          parentId: previousPublish.id,\n        })\n        continue\n      }\n    }\n    if (isNonPublishChunk(chunk)) {\n      result.push(chunk)\n    }\n  }\n\n  return result\n}\n","import {Box, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type Chunk,\n  CommandList,\n  type CommandListRenderItemCallback,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from './expandableTimelineItemButton'\nimport {ListWrapper, Root, StackWrapper} from './timeline.styled'\nimport {TimelineItem} from './timelineItem'\nimport {\n  addChunksMetadata,\n  type ChunksWithCollapsedDrafts,\n  isNonPublishChunk,\n  isPublishChunk,\n} from './utils'\n\ninterface TimelineProps {\n  chunks: Chunk[]\n  hasMoreChunks: boolean | null\n  lastChunk?: Chunk | null\n  onLoadMore: () => void\n  onSelect: (chunk: Chunk) => void\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const Timeline = ({\n  chunks,\n  hasMoreChunks,\n  lastChunk: selectedChunk,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const selectedChunkId = selectedChunk?.id\n  const chunksWithMetadata = useMemo(() => addChunksMetadata(chunks), [chunks])\n\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedChunkId) {\n      // If the selected chunk is a draft, we need to expand its parent\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        return new Set([selected.parentId])\n      }\n    }\n    return new Set()\n  })\n\n  useEffect(() => {\n    // This effect ensures that when we reload the timeline with a selected draft, we expand its parent.\n    if (selectedChunkId) {\n      const selected = chunksWithMetadata.find((chunk) => chunk.id === selectedChunkId)\n      if (selected && isNonPublishChunk(selected) && selected.parentId) {\n        const parentId = selected.parentId\n        setExpandedParents((prev) => {\n          if (prev.has(parentId)) return prev\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n      }\n    }\n  }, [chunksWithMetadata, selectedChunkId])\n\n  const filteredChunks = useMemo(() => {\n    return chunksWithMetadata.filter((chunk) => {\n      if (isPublishChunk(chunk) || !chunk.parentId) return true\n      // If the chunk has a parent id keep it hidden until the parent is expanded.\n      return expandedParents.has(chunk.parentId)\n    })\n  }, [chunksWithMetadata, expandedParents])\n\n  useEffect(() => {\n    // This effect ensures that we load more chunks if the list is not long enough.\n    // This could happen if a parent chunk has multiple drafts, so you could end with a list of 50 transactions but only\n    // 1 parent chunk, the publish, which squashed all the changes.\n    // In that case, users will see the loading block at the bottom, but nothing will really be happening. Because they haven't reach the end of the list.\n    if (filteredChunks.length < 16 && hasMoreChunks) {\n      onLoadMore()\n    }\n  }, [filteredChunks, hasMoreChunks, onLoadMore])\n\n  const handleExpandParent = useCallback(\n    (parentId: string) => () =>\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else next.add(parentId)\n\n        return next\n      }),\n    [],\n  )\n\n  const selectedIndex = useMemo(\n    () =>\n      selectedChunkId ? filteredChunks.findIndex((chunk) => chunk.id === selectedChunkId) : -1,\n    [selectedChunkId, filteredChunks],\n  )\n  const handleSelectChunk = useCallback(\n    (chunk: ChunksWithCollapsedDrafts) => {\n      const timelineChunk = chunks.find((c) => c.id === chunk.id)\n      if (timelineChunk) onSelect(timelineChunk)\n      else {\n        console.error('TimelineItem: chunk not found')\n        onSelect(chunk)\n      }\n    },\n    [chunks, onSelect],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<(typeof filteredChunks)[number]>>(\n    (chunk, {activeIndex}) => {\n      const isFirst = activeIndex === 0\n\n      return (\n        <Box\n          paddingBottom={1}\n          paddingTop={isFirst ? 1 : 0}\n          paddingRight={1}\n          paddingLeft={isNonPublishChunk(chunk) && chunk.parentId ? 4 : 1}\n        >\n          <TimelineItem\n            chunk={chunk}\n            isSelected={selectedChunkId === chunk.id}\n            onSelect={handleSelectChunk}\n            collaborators={isPublishChunk(chunk) ? chunk.collaborators : undefined}\n            optionsMenu={\n              isPublishChunk(chunk) && chunk.children.length > 0 ? (\n                <ExpandableTimelineItemButton\n                  isExpanded={expandedParents.has(chunk.id)}\n                  onExpand={handleExpandParent(chunk.id)}\n                />\n              ) : null\n            }\n          />\n          {activeIndex === filteredChunks.length - 1 && hasMoreChunks && <LoadingBlock />}\n        </Box>\n      )\n    },\n    [\n      expandedParents,\n      filteredChunks.length,\n      handleExpandParent,\n      handleSelectChunk,\n      hasMoreChunks,\n      selectedChunkId,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {filteredChunks.length === 0 && (\n        <StackWrapper padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </StackWrapper>\n      )}\n\n      {filteredChunks.length > 0 && (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={57}\n            items={filteredChunks}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      )}\n    </Root>\n  )\n}\n\nTimeline.displayName = 'Timeline'\n","import {ErrorOutlineIcon} from '@sanity/icons'\nimport {Flex, Stack} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nexport function TimelineError({versionError}: {versionError?: boolean}) {\n  const {t} = useTranslation('studio')\n\n  return (\n    <Flex align=\"flex-start\" gap={3} padding={4}>\n      <TextWithTone tone=\"critical\">\n        <ErrorOutlineIcon />\n      </TextWithTone>\n      <Stack space={4}>\n        <TextWithTone size={1} tone=\"critical\" weight=\"medium\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-title')\n            : t('timeline.error.load-document-changes-title')}\n        </TextWithTone>\n        <TextWithTone size={1} tone=\"critical\">\n          {versionError\n            ? t('timeline.error.load-document-changes-version-description')\n            : t('timeline.error.load-document-changes-description')}\n        </TextWithTone>\n      </Stack>\n    </Flex>\n  )\n}\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {type Chunk, useTimelineSelector, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../ui-components'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {Timeline} from './timeline'\nimport {TimelineError} from './TimelineError'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING} from './timelineI18n'\n\ninterface TimelineMenuProps {\n  chunk: Chunk | null\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nexport function TimelineMenu({chunk, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange, timelineError, ready, timelineStore} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n\n  const toast = useToast()\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (open && (event.key === 'Escape' || event.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const selectSince = useCallback(\n    (sinceChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForSince(sinceChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  const content = useMemo(() => {\n    if (timelineError) return <TimelineError />\n\n    if (mode === 'rev') {\n      return (\n        <Timeline\n          chunks={chunks}\n          hasMoreChunks={hasMoreChunks}\n          lastChunk={realRevChunk}\n          onLoadMore={handleLoadMore}\n          onSelect={selectRev}\n        />\n      )\n    }\n\n    const filteredChunks = realRevChunk\n      ? chunks.filter((c) => c.index < realRevChunk.index)\n      : chunks\n    return (\n      <Timeline\n        chunks={filteredChunks}\n        hasMoreChunks={hasMoreChunks}\n        lastChunk={sinceTime}\n        onLoadMore={handleLoadMore}\n        onSelect={selectSince}\n      />\n    )\n  }, [\n    chunks,\n    handleLoadMore,\n    hasMoreChunks,\n    mode,\n    realRevChunk,\n    selectRev,\n    selectSince,\n    sinceTime,\n    timelineError,\n  ])\n\n  const formatParams = {\n    timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n  }\n\n  const revLabel = chunk\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[chunk.type], {\n        context: 'timestamp',\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  const sinceLabel = chunk\n    ? t('timeline.since', {\n        timestamp: new Date(chunk?.endTimestamp),\n        formatParams,\n      })\n    : t('timeline.since-version-missing')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={!ready}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={ready ? buttonLabel : t('timeline.loading-history')}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {motion} from 'framer-motion'\nimport {type ComponentProps} from 'react'\nimport {keyframes, styled} from 'styled-components'\n\nconst StyledMotionPath = styled(motion.path)`\n  transform-origin: center;\n`\n\ntype MotionCircleProps = Omit<ComponentProps<typeof motion.circle>, 'd'>\ntype MotionPathProps = Omit<ComponentProps<typeof motion.path>, 'd' | 'ref'>\n\nconst Circle = (props: MotionCircleProps) => (\n  <motion.circle fill=\"none\" r=\"8\" cx=\"12.5\" cy=\"12.5\" strokeWidth=\"1.2\" {...props} />\n)\nconst Arrows = (props: MotionPathProps) => (\n  <StyledMotionPath\n    fill=\"none\"\n    d=\"M14 17.5619L11.5 20.5L14.5 23.0619M11 7.43811L13.5 4.50001L10.5 1.93811\"\n    {...props}\n  />\n)\nconst Checkmark = (props: MotionPathProps) => (\n  <motion.path d=\"M9.5 12.1316L11.7414 14.5L16 10\" {...props} />\n)\n\nconst rotateAnimation = keyframes`\n  0% {\n    transform: rotate(0);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`\nconst RotateGroup = styled.g`\n  transform-origin: center;\n\n  &[data-rotate] {\n    animation: ${rotateAnimation} 1s ease-in-out infinite;\n  }\n`\n\nconst root = {\n  syncing: {\n    scale: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    scale: [1, 0.8, 1.2, 0.9, 1.1, 0.95, 1.05, 0.99, 1],\n    transition: {\n      duration: 0.5,\n      delay: 0.2,\n    },\n  },\n  changes: {transition: {duration: 0}},\n}\n\nconst circle = {\n  syncing: {\n    strokeDasharray: '0, 0, 23, 3, 23, 3',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    strokeDasharray: '0, 0, 23, 0, 23, 0',\n    strokeDashoffset: 10,\n    opacity: 1,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    strokeDasharray: '0, 60, 23, 0, 23, 0',\n    strokeDashoffset: 0,\n    opacity: 0,\n    transition: {\n      duration: 0.5,\n    },\n  },\n}\n\nconst arrows = {\n  syncing: {\n    opacity: 1,\n    transition: {\n      duration: 0,\n    },\n  },\n  saved: {\n    opacity: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n  changes: {\n    opacity: 0,\n  },\n}\n\nconst checkmark = {\n  syncing: {\n    pathLength: 0,\n    transition: {duration: 0},\n  },\n  saved: {\n    pathLength: 1,\n    transition: {\n      delay: 0.4,\n      duration: 0.3,\n    },\n  },\n  changes: {\n    pathLength: 0,\n    transition: {\n      duration: 0.2,\n    },\n  },\n}\n\ninterface AnimatedStatusIconProps {\n  status?: 'changes' | 'saved' | 'syncing'\n}\n\nexport function AnimatedStatusIcon(props: AnimatedStatusIconProps) {\n  const {status} = props\n\n  if (!status) {\n    return null\n  }\n\n  return (\n    <svg\n      width=\"1em\"\n      height=\"1em\"\n      viewBox=\"0 0 25 25\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.2\"\n      data-sanity-icon=\"animated-status-icon\"\n    >\n      <motion.g variants={root} initial={status} animate={status}>\n        <RotateGroup data-rotate={status === 'changes' ? undefined : ''}>\n          <Arrows variants={arrows} initial={status} animate={status} />\n          <Circle variants={circle} initial={status} animate={status} />\n        </RotateGroup>\n        <Checkmark variants={checkmark} initial={status} animate={status} />\n      </motion.g>\n    </svg>\n  )\n}\n","import {type ButtonTone, Flex, Text} from '@sanity/ui'\nimport {TextWithTone, useTranslation} from 'sanity'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {AnimatedStatusIcon} from './AnimatedStatusIcon'\n\ntype StatusType = 'saved' | 'syncing'\ninterface ReviewChangesButtonProps {\n  status?: StatusType\n}\n\nconst STATUS_DICTIONARY: Record<StatusType, {i18nKey: string; tone: ButtonTone}> = {\n  saved: {\n    i18nKey: 'status-bar.document-status-pulse.status.saved.text',\n    tone: 'positive',\n  },\n  syncing: {\n    i18nKey: 'status-bar.document-status-pulse.status.syncing.text',\n    tone: 'default',\n  },\n}\n\nexport const DocumentStatusPulse = (props: ReviewChangesButtonProps) => {\n  const {status} = props\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (status !== 'saved' && status !== 'syncing') {\n    return null\n  }\n\n  const currentStatus = STATUS_DICTIONARY[status]\n\n  return (\n    <Flex align=\"center\" gap={2} data-testid=\"pane-footer-document-status-pulse\">\n      <TextWithTone size={1} tone={currentStatus.tone}>\n        <AnimatedStatusIcon status={status} />\n      </TextWithTone>\n\n      <Text muted size={1}>\n        {t(currentStatus.i18nKey)}\n      </Text>\n    </Flex>\n  )\n}\n","import {\n  Box,\n  // eslint-disable-next-line no-restricted-imports\n  Button,\n  Flex,\n  Skeleton,\n  Text,\n} from '@sanity/ui'\nimport {AnimatePresence, motion} from 'framer-motion'\nimport {useEffect, useLayoutEffect, useMemo, useState} from 'react'\nimport {\n  AvatarSkeleton,\n  isPublishedPerspective,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  usePerspective,\n  UserAvatar,\n  useRelativeTime,\n  useSource,\n  useSyncState,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\n\nimport {HISTORY_INSPECTOR_NAME} from '../constants'\nimport {TIMELINE_ITEM_I18N_KEY_MAPPING as TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY} from '../timeline'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentStatusPulse} from './DocumentStatusPulse'\n\nconst RELATIVE_TIME_OPTIONS = {\n  minimal: true,\n  useTemporalPhrase: true,\n} as const\n\nconst MotionButton = motion.create(Button)\nconst MotionBox = motion.create(Box)\n\nconst ButtonSkeleton = () => {\n  return (\n    <Flex align=\"center\" gap={3} paddingLeft={1} paddingRight={2} paddingY={2}>\n      <div style={{margin: -5}}>\n        <AvatarSkeleton $size={0} animated />\n      </div>\n      <Skeleton animated style={{width: '80px', height: '15px'}} radius={2} />\n    </Flex>\n  )\n}\n\nconst DocumentStatusButton = ({\n  author,\n  translationKey,\n  timestamp = '',\n}: {\n  author: string\n  translationKey: string\n  timestamp?: string\n}) => {\n  const {onHistoryOpen, inspector, onHistoryClose} = useDocumentPane()\n  const {t} = useTranslation()\n  const relativeTime = useRelativeTime(timestamp, RELATIVE_TIME_OPTIONS)\n\n  return (\n    <MotionButton\n      data-testid=\"pane-footer-document-status\"\n      animate={{opacity: 1}}\n      initial={{opacity: 0}}\n      exit={{opacity: 0}}\n      mode=\"bleed\"\n      onClick={inspector?.name === HISTORY_INSPECTOR_NAME ? onHistoryClose : onHistoryOpen}\n      padding={2}\n      muted\n    >\n      <Flex align=\"center\" flex=\"none\" gap={3}>\n        {author && (\n          <div style={{margin: -5}}>\n            <UserAvatar user={author} size={0} />\n          </div>\n        )}\n        <Text muted size={1}>\n          {t(translationKey)} {relativeTime}\n        </Text>\n      </Flex>\n    </MotionButton>\n  )\n}\n\nconst FallbackStatus = () => {\n  const {editState} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n\n  const status = useMemo(() => {\n    if (isPublishedPerspective(selectedPerspective) && editState?.published?._updatedAt) {\n      return {\n        translationKey: TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion,\n        timestamp: editState.published._updatedAt,\n      }\n    }\n    if (editState?.version?._updatedAt) {\n      return {\n        translationKey:\n          editState?.version?._updatedAt === editState?.version?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.version._updatedAt,\n      }\n    }\n    if (editState?.draft?._updatedAt) {\n      return {\n        translationKey:\n          editState?.draft?._updatedAt === editState?.draft?._createdAt\n            ? TIMELINE_ITEM_I18N_KEY_MAPPING.createDocumentVersion\n            : TIMELINE_ITEM_I18N_KEY_MAPPING.editDocumentVersion,\n        timestamp: editState.draft._updatedAt,\n      }\n    }\n    return null\n  }, [\n    selectedPerspective,\n    editState?.published?._updatedAt,\n    editState?.version?._updatedAt,\n    editState?.version?._createdAt,\n    editState?.draft?._updatedAt,\n    editState?.draft?._createdAt,\n  ])\n  if (!status) {\n    return null\n  }\n  return (\n    <DocumentStatusButton\n      author=\"\"\n      translationKey={status.translationKey}\n      timestamp={status.timestamp}\n    />\n  )\n}\n\nconst EventsStatus = () => {\n  const {events, loading} = useEvents()\n  const event = events?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  return (\n    <DocumentStatusButton\n      author={event.author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING[event.type]}\n      timestamp={event.timestamp}\n    />\n  )\n}\n\nconst TimelineStatus = () => {\n  const {timelineStore} = useDocumentPane()\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n  const event = chunks?.[0]\n\n  if (!event && loading) {\n    return <ButtonSkeleton />\n  }\n  if (!event) {\n    return <FallbackStatus />\n  }\n\n  const author = Array.from(event.authors)[0]\n  return (\n    <DocumentStatusButton\n      author={author}\n      translationKey={TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY[event.type]}\n      timestamp={event.endTimestamp}\n    />\n  )\n}\n\nconst SYNCING_TIMEOUT = 1000\nconst SAVED_TIMEOUT = 3000\n\nexport function DocumentStatusLine() {\n  const {documentId, documentType, editState, value} = useDocumentPane()\n  const [status, setStatus] = useState<'saved' | 'syncing' | null>(null)\n  const source = useSource()\n  const eventsEnabled = source.beta?.eventsAPI?.documents\n\n  const syncState = useSyncState(documentId, documentType, editState?.release)\n\n  const lastUpdated = value?._updatedAt\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    // Schedule an update to set the status to 'saved' when status changed to 'syncing.\n    // We use `syncState.isSyncing` here to avoid the status being set to 'saved' when the document is syncing.\n    if (status === 'syncing' && !syncState.isSyncing) {\n      const timerId = setTimeout(() => setStatus('saved'), SYNCING_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n    // Schedule an update to clear the status when status changed to 'saved'\n    if (status === 'saved') {\n      const timerId = setTimeout(() => setStatus(null), SAVED_TIMEOUT)\n      return () => clearTimeout(timerId)\n    }\n  }, [status, lastUpdated, syncState.isSyncing])\n\n  // Clear the status when documentId changes to make sure we don't show the wrong status when opening a new document\n  useLayoutEffect(() => {\n    setStatus(null)\n  }, [documentId])\n\n  // Set status to 'syncing' when lastUpdated changes and we go from not syncing to syncing\n  useLayoutEffect(() => {\n    if (syncState.isSyncing) {\n      setStatus('syncing')\n    }\n  }, [syncState.isSyncing, lastUpdated])\n\n  return (\n    <AnimatePresence>\n      {status ? (\n        <MotionBox\n          paddingLeft={2}\n          animate={{opacity: 1}}\n          initial={{opacity: 0}}\n          exit={{opacity: 0}}\n        >\n          <DocumentStatusPulse status={status || undefined} />\n        </MotionBox>\n      ) : (\n        <>{eventsEnabled ? <EventsStatus /> : <TimelineStatus />}</>\n      )}\n    </AnimatePresence>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {format} from 'date-fns'\nimport {Translate, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport const StatusText = styled(Text)`\n  color: var(--card-muted-fg-color);\n\n  em {\n    color: var(--card-fg-color);\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport function RevisionStatusLine(): React.JSX.Element {\n  const {displayed} = useDocumentPane()\n  const {t} = useTranslation()\n  const date = displayed?._updatedAt || displayed?._createdAt\n\n  const message = {\n    name: 'revision',\n    text: date ? (\n      <Translate\n        t={t}\n        i18nKey=\"document-status.revision-from\"\n        values={{\n          date: format(new Date(date), `MMM d, yyyy '@' pp`),\n        }}\n      />\n    ) : null,\n    tone: 'caution',\n  }\n\n  return (\n    <>\n      <Flex flex={1} gap={3} padding={2}>\n        <Box flex=\"none\">\n          <Text size={1}>\n            <RestoreIcon />\n          </Text>\n        </Box>\n        <Box flex={1}>\n          <StatusText size={1} textOverflow=\"ellipsis\">\n            {message.text}\n          </StatusText>\n        </Box>\n      </Flex>\n    </>\n  )\n}\n","import {useLayoutEffect} from 'react'\nimport {resizeObserver} from 'sanity'\n\nexport function useResizeObserver({\n  element,\n  onResize,\n}: {\n  element?: HTMLDivElement | null\n  onResize: (event: ResizeObserverEntry) => void\n}): void {\n  useLayoutEffect(() => {\n    if (element) {\n      resizeObserver.observe(element, onResize)\n    }\n\n    return () => {\n      if (element) {\n        resizeObserver.unobserve(element)\n      }\n    }\n  }, [element, onResize])\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {type Ref, useCallback, useMemo, useState} from 'react'\nimport {\n  type CreateLinkMetadata,\n  isPublishedPerspective,\n  isReleaseDocument,\n  isSanityCreateLinked,\n  usePerspective,\n  useSanityCreateConfig,\n} from 'sanity'\n\nimport {SpacerButton} from '../../../components/spacerButton'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {useDocumentTitle} from '../useDocumentTitle'\nimport {DocumentBadges} from './DocumentBadges'\nimport {DocumentStatusBarActions, HistoryStatusBarActions} from './DocumentStatusBarActions'\nimport {DocumentStatusLine} from './DocumentStatusLine'\nimport {RevisionStatusLine} from './RevisionStatusLine'\nimport {useResizeObserver} from './useResizeObserver'\n\nexport interface DocumentStatusBarProps {\n  actionsBoxRef?: Ref<HTMLDivElement>\n  createLinkMetadata?: CreateLinkMetadata\n}\n\nconst CONTAINER_BREAKPOINT = 480 // px\n\nconst AnimatedCard = motion.create(Card)\n\nexport function DocumentStatusBar(props: DocumentStatusBarProps) {\n  const {actionsBoxRef, createLinkMetadata} = props\n  const {editState, revisionId, onChange: onDocumentChange} = useDocumentPane()\n  const {selectedPerspective} = usePerspective()\n  const {title} = useDocumentTitle()\n\n  const CreateLinkedActions = useSanityCreateConfig().components?.documentLinkedActions\n\n  const showingRevision = Boolean(revisionId)\n  const [collapsed, setCollapsed] = useState<boolean | null>(null)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n\n  const handleResize = useCallback((event: ResizeObserverEntry) => {\n    setCollapsed(event.contentRect.width < CONTAINER_BREAKPOINT)\n  }, [])\n\n  useResizeObserver({element: rootElement, onResize: handleResize})\n\n  const shouldRender = useMemo(() => {\n    const isReady = Boolean(editState?.ready && typeof collapsed === 'boolean')\n    if (selectedPerspective) {\n      if (isPublishedPerspective(selectedPerspective)) {\n        return isReady && Boolean(editState?.published)\n      }\n      if (isReleaseDocument(selectedPerspective)) {\n        return isReady && Boolean(editState?.version)\n      }\n    }\n    return isReady\n  }, [collapsed, editState?.published, editState?.ready, editState?.version, selectedPerspective])\n\n  let actions: React.JSX.Element | null = null\n  if (createLinkMetadata && isSanityCreateLinked(createLinkMetadata) && CreateLinkedActions) {\n    actions = (\n      <CreateLinkedActions\n        metadata={createLinkMetadata}\n        panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n        onDocumentChange={onDocumentChange}\n        documentTitle={title}\n      />\n    )\n  } else if (showingRevision) {\n    actions = <HistoryStatusBarActions />\n  } else {\n    actions = <DocumentStatusBarActions />\n  }\n\n  return (\n    <AnimatedCard\n      key={showingRevision ? 'revision' : 'published'}\n      initial={{opacity: 0.2}}\n      animate={{opacity: 1, transition: {duration: 0.3}}}\n      tone={showingRevision ? 'caution' : undefined}\n      radius={3}\n      ref={setRootElement}\n      sizing=\"border\"\n      padding={2}\n    >\n      {shouldRender && (\n        <Flex\n          align=\"stretch\"\n          gap={1}\n          justify=\"space-between\"\n          paddingLeft={showingRevision ? 0 : 1}\n          paddingRight={showingRevision ? 0 : 1}\n        >\n          <Flex align=\"center\" flex={1} gap={collapsed ? 2 : 3} wrap=\"wrap\" paddingRight={3}>\n            <Flex align=\"center\">\n              {showingRevision ? <RevisionStatusLine /> : <DocumentStatusLine />}\n              <SpacerButton />\n            </Flex>\n            <DocumentBadges />\n          </Flex>\n\n          <Flex\n            align=\"flex-start\"\n            justify=\"flex-end\"\n            ref={actionsBoxRef}\n            style={{flexShrink: 0, marginLeft: 'auto'}}\n          >\n            <SpacerButton />\n            {actions}\n          </Flex>\n        </Flex>\n      )}\n    </AnimatedCard>\n  )\n}\n","import {isHotkey} from 'is-hotkey-esm'\nimport {\n  type ElementType,\n  type HTMLProps,\n  memo,\n  type Ref,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react'\nimport {type DocumentActionDescription, type DocumentActionProps, LegacyLayerProvider} from 'sanity'\n\nimport {RenderActionCollectionState} from '../../../components'\nimport {ActionStateDialog} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nexport interface KeyboardShortcutResponderProps {\n  actionsBoxElement: HTMLElement | null\n  activeIndex: number\n  as?: ElementType\n  currentMinWidth?: number\n  flex?: number\n  id: string\n  minWidth?: number\n  onActionStart: (index: number) => void\n  rootRef: Ref<HTMLDivElement>\n  states: DocumentActionDescription[]\n}\n\nconst KeyboardShortcutResponder = memo(function KeyboardShortcutResponder(\n  props: KeyboardShortcutResponderProps & Omit<HTMLProps<HTMLDivElement>, 'as' | 'height'>,\n) {\n  const {\n    actionsBoxElement,\n    activeIndex,\n    as: As = 'div',\n    children,\n    id,\n    onActionStart,\n    onKeyDown,\n    rootRef,\n    states,\n    ...rest\n  } = props\n\n  const activeAction = states[activeIndex]\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      const matchingStates = states.filter(\n        (state) => state.shortcut && isHotkey(state.shortcut, event),\n      )\n\n      const matchingState = matchingStates[0]\n\n      if (matchingStates.length > 1) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Keyboard shortcut conflict: More than one document action matches the shortcut \"${matchingState.shortcut}\"`,\n        )\n      }\n\n      if (matchingState && !matchingState.disabled && matchingState.onHandle) {\n        event.preventDefault()\n        matchingState.onHandle()\n        onActionStart(states.indexOf(matchingState))\n        return\n      }\n\n      if (onKeyDown) {\n        onKeyDown(event)\n      }\n    },\n    [onActionStart, onKeyDown, states],\n  )\n\n  return (\n    <As id={id} onKeyDown={handleKeyDown} tabIndex={-1} {...rest} ref={rootRef}>\n      {children}\n      {activeAction && activeAction.dialog && (\n        <LegacyLayerProvider zOffset=\"paneFooter\">\n          <ActionStateDialog dialog={activeAction.dialog} referenceElement={actionsBoxElement} />\n        </LegacyLayerProvider>\n      )}\n    </As>\n  )\n})\n\nexport interface DocumentActionShortcutsProps {\n  actionsBoxElement: HTMLElement | null\n  as?: ElementType\n  currentMinWidth?: number\n  debug?: boolean\n  flex: number\n  id: string\n  minWidth: number\n  rootRef: Ref<HTMLDivElement>\n}\n\nexport const DocumentActionShortcuts = memo(\n  (props: DocumentActionShortcutsProps & Omit<HTMLProps<HTMLDivElement>, 'as'>) => {\n    const {actionsBoxElement, as = 'div', children, ...rest} = props\n    const {actions, editState} = useDocumentPane()\n    const [activeIndex, setActiveIndex] = useState(-1)\n\n    const onActionStart = useCallback((idx: number) => {\n      setActiveIndex(idx)\n    }, [])\n\n    const actionProps: DocumentActionProps | null = useMemo(\n      () =>\n        editState && {\n          ...editState,\n\n          // @todo: what to call here?\n          onComplete: () => undefined,\n\n          // @todo: get revision string\n          revision: undefined,\n        },\n      [editState],\n    )\n\n    const renderDocumentActionShortcuts = useCallback<\n      (props: {states: DocumentActionDescription[]}) => React.ReactNode\n    >(\n      ({states}) => (\n        <KeyboardShortcutResponder\n          {...rest}\n          activeIndex={activeIndex}\n          actionsBoxElement={actionsBoxElement}\n          as={as}\n          onActionStart={onActionStart}\n          states={states}\n        >\n          {children}\n        </KeyboardShortcutResponder>\n      ),\n      [actionsBoxElement, activeIndex, as, children, onActionStart, rest],\n    )\n\n    if (!actionProps || !actions) return null\n\n    return (\n      <RenderActionCollectionState actionProps={actionProps} actions={actions}>\n        {renderDocumentActionShortcuts}\n      </RenderActionCollectionState>\n    )\n  },\n)\n\nDocumentActionShortcuts.displayName = 'Memo(DocumentActionShortcuts)'\n","import {EarthAmericasIcon, JsonIcon, LinkIcon, TransferIcon} from '@sanity/icons'\nimport {type DocumentInspector, type DocumentInspectorMenuItem, type TFunction} from 'sanity'\n\nimport {type DocumentIdStack} from '../../hooks/useDocumentIdStack'\nimport {type PaneMenuItem, type StructureToolFeatures} from '../../types'\nimport {INSPECT_ACTION_PREFIX} from './constants'\n\ninterface GetMenuItemsParams {\n  currentInspector?: DocumentInspector\n  features: StructureToolFeatures\n  hasValue: boolean\n  inspectors: DocumentInspector[]\n  previewUrl?: string | null\n  documentIdStack?: DocumentIdStack\n  inspectorMenuItems: DocumentInspectorMenuItem[]\n  t: TFunction\n}\n\nfunction getInspectorItems({\n  currentInspector,\n  hasValue,\n  inspectors,\n  inspectorMenuItems,\n}: GetMenuItemsParams): PaneMenuItem[] {\n  return inspectors\n    .map((inspector, index) => {\n      const menuItem = inspectorMenuItems[index]\n\n      if (!menuItem || menuItem.hidden) return null\n\n      return {\n        action: `${INSPECT_ACTION_PREFIX}${inspector.name}`,\n        group: menuItem.showAsAction ? undefined : 'inspectors',\n        icon: menuItem.icon,\n        isDisabled: !hasValue,\n        selected: currentInspector?.name === inspector.name,\n        shortcut: menuItem.hotkeys?.join('+'),\n        showAsAction: menuItem.showAsAction,\n        title: menuItem.title,\n        tone: menuItem.tone,\n      }\n    })\n    .filter(Boolean) as PaneMenuItem[]\n}\n\nfunction getInspectItem({hasValue, t}: GetMenuItemsParams): PaneMenuItem {\n  return {\n    action: 'inspect',\n    group: 'inspectors',\n    title: t('document-inspector.menu-item.title'),\n    icon: JsonIcon,\n    isDisabled: !hasValue,\n    shortcut: 'Ctrl+Alt+I',\n  }\n}\n\nfunction getCompareVersionsItem({documentIdStack, t}: GetMenuItemsParams): PaneMenuItem | null {\n  const isDisabled = typeof documentIdStack?.previousId === 'undefined'\n\n  // TODO: It would be preferable to display the option in an inert state, but the `isDisabled`\n  // property does not appear to have any impact. Instead, we simply exclude the option when\n  // there is no version to compare.\n  if (isDisabled) {\n    return null\n  }\n\n  return {\n    action: 'compareVersions',\n    group: 'inspectors',\n    title: t('compare-versions.menu-item.title'),\n    icon: TransferIcon,\n    isDisabled,\n  }\n}\n\nexport function getProductionPreviewItem({previewUrl, t}: GetMenuItemsParams): PaneMenuItem | null {\n  if (!previewUrl) return null\n\n  return {\n    action: 'production-preview',\n    group: 'links',\n    title: t('production-preview.menu-item.title'),\n    icon: EarthAmericasIcon,\n    shortcut: 'Ctrl+Alt+O',\n  }\n}\n\nexport function getMenuItems(params: GetMenuItemsParams): PaneMenuItem[] {\n  const inspectorItems = getInspectorItems(params)\n  const items = [\n    // Get production preview item\n    getProductionPreviewItem(params),\n    getCompareVersionsItem(params),\n  ].filter(Boolean) as PaneMenuItem[]\n\n  return [\n    // Always present document menu item to copy current url to clipboard\n    {\n      action: 'copy-document-url',\n      showAsAction: true,\n      title: params.t('action.copy-document-url.label'),\n      icon: LinkIcon,\n    },\n    ...inspectorItems,\n\n    // TODO: convert to inspector or document view?\n    getInspectItem(params),\n\n    ...items,\n  ]\n}\n","import {Card, Code, Stack, Text} from '@sanity/ui'\nimport {isDev, Translate, useTranslation} from 'sanity'\n\nimport {ErrorPane} from '../../error'\n\ninterface DocumentLayoutErrorProps {\n  currentMinWidth?: number\n  documentType?: string\n  minWidth?: number\n  paneKey: string\n  value?: Record<string, unknown>\n}\n\nexport function DocumentLayoutError(props: DocumentLayoutErrorProps) {\n  const {documentType, value, currentMinWidth, paneKey, minWidth} = props\n  const {t} = useTranslation()\n\n  return (\n    <ErrorPane\n      currentMinWidth={currentMinWidth}\n      flex={2.5}\n      minWidth={minWidth}\n      paneKey={paneKey}\n      title={\n        <Translate\n          t={t}\n          i18nKey=\"panes.document-pane.document-unknown-type.title\"\n          values={{documentType}}\n        />\n      }\n      tone=\"caution\"\n    >\n      <Stack space={4}>\n        {documentType && (\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-unknown-type.text\"\n              values={{documentType}}\n            />\n          </Text>\n        )}\n\n        {!documentType && (\n          <Text as=\"p\">{t('panes.document-pane.document-unknown-type.without-schema.text')}</Text>\n        )}\n\n        {isDev && value && (\n          /* eslint-disable i18next/no-literal-string */\n          <>\n            <Text as=\"p\">Here is the JSON representation of the document:</Text>\n\n            <Card padding={3} overflow=\"auto\" radius={2} shadow={1} tone=\"inherit\">\n              <Code language=\"json\" size={[1, 1, 2]}>\n                {JSON.stringify(value, null, 2)}\n              </Code>\n            </Card>\n          </>\n          /* eslint-enable i18next/no-literal-string */\n        )}\n      </Stack>\n    </ErrorPane>\n  )\n}\n","import {DialogProvider, type DialogProviderProps, PortalProvider} from '@sanity/ui'\nimport {type Dispatch, type ReactNode, type SetStateAction, useMemo} from 'react'\nimport {getSanityCreateLinkMetadata, useSanityCreateConfig, useZIndex} from 'sanity'\n\nimport {TooltipDelayGroupProvider} from '../../../../ui-components/tooltipDelayGroupProvider/TooltipDelayGroupProvider'\nimport {PaneFooter, usePane} from '../../../components'\nimport {DOCUMENT_PANEL_PORTAL_ELEMENT} from '../../../constants'\nimport {DocumentStatusBar} from '../statusBar'\nimport {useDocumentPane} from '../useDocumentPane'\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nexport function DocumentLayoutFooter({\n  documentPanelPortalElement,\n  setFooterElement,\n  setActionsBoxElement,\n}: {\n  documentPanelPortalElement: HTMLElement | null\n  setFooterElement: Dispatch<SetStateAction<HTMLDivElement | null>>\n  setActionsBoxElement: Dispatch<SetStateAction<HTMLDivElement | null>>\n}) {\n  const zOffsets = useZIndex()\n\n  const {value, isInitialValueLoading, ready, documentId, schemaType} = useDocumentPane()\n  const portalElements = useMemo(\n    () => ({[DOCUMENT_PANEL_PORTAL_ELEMENT]: documentPanelPortalElement}),\n    [documentPanelPortalElement],\n  )\n\n  const createLinkMetadata = getSanityCreateLinkMetadata(value)\n  const {startInCreateBanner: StartInCreateBanner} = useSanityCreateConfig().components ?? {}\n  return (\n    // These providers are added because we want the dialogs in `DocumentStatusBar` to be scoped to the document pane\n    // The portal element comes from `DocumentPanel`.\n    <PortalProvider __unstable_elements={portalElements}>\n      <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.portal}>\n        <PaneFooter ref={setFooterElement} padding={1}>\n          {StartInCreateBanner && (\n            <ShowWhenPaneOpen>\n              <StartInCreateBanner\n                document={value}\n                documentId={documentId}\n                documentType={schemaType}\n                documentReady={ready}\n                isInitialValueLoading={!!isInitialValueLoading}\n                panelPortalElementId={DOCUMENT_PANEL_PORTAL_ELEMENT}\n              />\n            </ShowWhenPaneOpen>\n          )}\n          <TooltipDelayGroupProvider>\n            <DocumentStatusBar\n              actionsBoxRef={setActionsBoxElement}\n              createLinkMetadata={createLinkMetadata}\n            />\n          </TooltipDelayGroupProvider>\n        </PaneFooter>\n      </DialogProvider>\n    </PortalProvider>\n  )\n}\n\n/**\n * Prevents whatever is inside of it from rendering when the pane is collapsed.\n * Needed locally as DocumentLayout does lives outside PaneContext, but is provided _somewhere_ within it.\n */\nfunction ShowWhenPaneOpen(props: {children: ReactNode}) {\n  const {collapsed} = usePane()\n  return collapsed ? null : props.children\n}\n","import {DialogProvider, type DialogProviderProps, Flex, useElementRect} from '@sanity/ui'\nimport {isHotkey} from 'is-hotkey-esm'\nimport {useCallback, useMemo, useState} from 'react'\nimport {useTranslation} from 'react-i18next'\nimport {\n  ChangeConnectorRoot,\n  type DocumentFieldActionNode,\n  type DocumentInspectorMenuItem,\n  FieldActionsProvider,\n  FieldActionsResolver,\n  GetFormValueProvider,\n  type Path,\n  useGlobalCopyPasteElementHandler,\n  useZIndex,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Pane, usePaneLayout, usePaneRouter} from '../../../components'\nimport {useDocumentIdStack} from '../../../hooks/useDocumentIdStack'\nimport {structureLocaleNamespace} from '../../../i18n'\nimport {useStructureTool} from '../../../useStructureTool'\nimport {\n  DOCUMENT_INSPECTOR_MIN_WIDTH,\n  DOCUMENT_PANEL_INITIAL_MIN_WIDTH,\n  DOCUMENT_PANEL_MIN_WIDTH,\n} from '../constants'\nimport {DocumentInspectorMenuItemsResolver} from '../DocumentInspectorMenuItemsResolver'\nimport {DocumentOperationResults} from '../DocumentOperationResults'\nimport {DocumentPanel} from '../documentPanel'\nimport {DocumentPanelHeader} from '../documentPanel/header'\nimport {DocumentActionShortcuts} from '../keyboardShortcuts'\nimport {getMenuItems} from '../menuItems'\nimport {useDocumentPane} from '../useDocumentPane'\nimport {DocumentLayoutError} from './DocumentLayoutError'\nimport {DocumentLayoutFooter} from './DocumentLayoutFooter'\n\nconst EMPTY_ARRAY: [] = []\n\nconst DIALOG_PROVIDER_POSITION: DialogProviderProps['position'] = [\n  // We use the `position: fixed` for dialogs on narrower screens (first two media breakpoints).\n  'fixed',\n  'fixed',\n  // And we use the `position: absolute` strategy (within panes) on wide screens.\n  'absolute',\n]\n\nconst StyledChangeConnectorRoot = styled(ChangeConnectorRoot)`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  min-height: 0;\n  min-width: 0;\n`\n\nexport function DocumentLayout() {\n  const {\n    changesOpen,\n    displayed,\n    documentId,\n    documentType,\n    editState,\n    fieldActions,\n    focusPath,\n    inspectOpen,\n    inspector,\n    inspectors,\n    onFocus,\n    onHistoryOpen,\n    onMenuAction,\n    onPathOpen,\n    paneKey,\n    schemaType,\n    value,\n    isInitialValueLoading,\n    ready,\n    previewUrl,\n  } = useDocumentPane()\n  const {params: paneParams} = usePaneRouter()\n  const {features} = useStructureTool()\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n\n  const zOffsets = useZIndex()\n\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [footerElement, setFooterElement] = useState<HTMLDivElement | null>(null)\n  const [headerElement, setHeaderElement] = useState<HTMLDivElement | null>(null)\n\n  const [actionsBoxElement, setActionsBoxElement] = useState<HTMLDivElement | null>(null)\n  const [documentPanelPortalElement, setDocumentPanelPortalElement] = useState<HTMLElement | null>(\n    null,\n  )\n\n  useGlobalCopyPasteElementHandler({\n    element: rootElement,\n    focusPath,\n    value,\n  })\n\n  const [inspectorMenuItems, setInspectorMenuItems] = useState<DocumentInspectorMenuItem[]>([])\n  const [rootFieldActionNodes, setRootFieldActionNodes] = useState<DocumentFieldActionNode[]>([])\n\n  const footerRect = useElementRect(footerElement)\n  const headerRect = useElementRect(headerElement)\n  const footerHeight = footerRect?.height\n  const headerHeight = headerRect?.height\n  const currentMinWidth =\n    DOCUMENT_PANEL_INITIAL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n  const minWidth = DOCUMENT_PANEL_MIN_WIDTH + (inspector ? DOCUMENT_INSPECTOR_MIN_WIDTH : 0)\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspector?.name),\n    [inspectors, inspector?.name],\n  )\n\n  const documentIdStack = useDocumentIdStack({displayed, documentId, editState})\n\n  const hasValue = Boolean(value)\n\n  const menuItems = useMemo(\n    () =>\n      getMenuItems({\n        currentInspector,\n        features,\n        hasValue,\n        inspectorMenuItems,\n        inspectors,\n        previewUrl,\n        documentIdStack,\n        t,\n      }),\n    [\n      currentInspector,\n      documentIdStack,\n      features,\n      hasValue,\n      inspectorMenuItems,\n      inspectors,\n      previewUrl,\n      t,\n    ],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      for (const item of menuItems) {\n        if (item.shortcut) {\n          if (isHotkey(item.shortcut, event)) {\n            event.preventDefault()\n            event.stopPropagation()\n            onMenuAction(item)\n            return\n          }\n        }\n      }\n    },\n    [onMenuAction, menuItems],\n  )\n\n  const onConnectorSetFocus = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onPathOpen, onFocus],\n  )\n\n  if (!schemaType) {\n    return (\n      <DocumentLayoutError\n        currentMinWidth={currentMinWidth}\n        documentType={documentType}\n        minWidth={minWidth}\n        paneKey={paneKey}\n        value={value}\n      />\n    )\n  }\n\n  return (\n    <GetFormValueProvider value={value}>\n      {inspectors.length > 0 && (\n        <DocumentInspectorMenuItemsResolver\n          documentId={documentId}\n          documentType={documentType}\n          inspectors={inspectors}\n          onMenuItems={setInspectorMenuItems}\n        />\n      )}\n\n      {fieldActions.length > 0 && schemaType && (\n        <FieldActionsResolver\n          actions={fieldActions}\n          documentId={documentId}\n          documentType={documentType}\n          onActions={setRootFieldActionNodes}\n          path={EMPTY_ARRAY}\n          schemaType={schemaType}\n        />\n      )}\n\n      <FieldActionsProvider actions={rootFieldActionNodes} path={EMPTY_ARRAY}>\n        <DocumentActionShortcuts\n          actionsBoxElement={actionsBoxElement}\n          as={Pane}\n          currentMinWidth={currentMinWidth}\n          data-testid=\"document-pane\"\n          flex={2.5}\n          id={paneKey}\n          minWidth={minWidth}\n          onKeyUp={handleKeyUp}\n          rootRef={setRootElement}\n        >\n          <DocumentPanelHeader ref={setHeaderElement} menuItems={menuItems} />\n          <DialogProvider position={DIALOG_PROVIDER_POSITION} zOffset={zOffsets.paneDialog}>\n            <Flex direction=\"column\" flex={1} height={layoutCollapsed ? undefined : 'fill'}>\n              <StyledChangeConnectorRoot\n                data-testid=\"change-connector-root\"\n                isReviewChangesOpen={changesOpen && paneParams?.changesInspectorTab === 'review'}\n                onOpenReviewChanges={onHistoryOpen}\n                onSetFocus={onConnectorSetFocus}\n              >\n                <DocumentPanel\n                  footerHeight={footerHeight || null}\n                  headerHeight={headerHeight || null}\n                  isInspectOpen={inspectOpen}\n                  rootElement={rootElement}\n                  setDocumentPanelPortalElement={setDocumentPanelPortalElement}\n                  footer={\n                    <DocumentLayoutFooter\n                      documentPanelPortalElement={documentPanelPortalElement}\n                      setFooterElement={setFooterElement}\n                      setActionsBoxElement={setActionsBoxElement}\n                    />\n                  }\n                />\n              </StyledChangeConnectorRoot>\n            </Flex>\n          </DialogProvider>\n          <DocumentOperationResults />\n        </DocumentActionShortcuts>\n      </FieldActionsProvider>\n    </GetFormValueProvider>\n  )\n}\n","import {type ComponentType} from 'react'\nimport {type DocumentLayoutProps, useMiddlewareComponents} from 'sanity'\n\nimport {DocumentLayout} from './DocumentLayout'\nimport {pickDocumentLayoutComponent} from './pickDocumentLayoutComponent'\n\n/**\n * A hook that returns the document layout composed\n * by the Components API (`document.components.layout`).\n */\nexport function useDocumentLayoutComponent(): ComponentType<\n  Omit<DocumentLayoutProps, 'renderDefault'>\n> {\n  return useMiddlewareComponents({\n    pick: pickDocumentLayoutComponent,\n    defaultComponent: DocumentLayout,\n  })\n}\n","import {defineEvent} from '@sanity/telemetry'\n\n/**\n * @internal\n */\nexport const DocumentURLCopied = defineEvent({\n  name: 'DocumentURLCopied',\n  version: 1,\n  description: 'User copied document URL to clipboard',\n})\n","import {type Template} from 'sanity'\n\ninterface InitialValueOptions {\n  documentType: string\n  panePayload?: unknown\n  templateName?: string\n  templateParams?: Record<string, unknown>\n  urlTemplate?: string\n}\n\n/**\n * @internal\n */\nexport function getInitialValueTemplateOpts(\n  templates: Template[],\n  opts: InitialValueOptions,\n): {templateName: string; templateParams: Record<string, unknown>} {\n  const payload = opts.panePayload || {}\n  const structureNodeTemplate = opts.templateName\n\n  if (opts.urlTemplate && structureNodeTemplate && structureNodeTemplate !== opts.urlTemplate) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Conflicting templates: URL says \"${opts.urlTemplate}\", structure node says \"${structureNodeTemplate}\". Using \"${structureNodeTemplate}\".`,\n    )\n  }\n\n  const template = structureNodeTemplate || opts.urlTemplate\n  const typeTemplates = templates.filter((t) => t.schemaType === opts.documentType)\n\n  const templateParams = {\n    ...opts.templateParams,\n    ...(typeof payload === 'object' ? payload || {} : {}),\n  }\n\n  let templateName = template\n\n  // If we have not specified a specific template, and we only have a single\n  // template available for a schema type, use it\n  if (!template && typeTemplates.length === 1) {\n    templateName = typeTemplates[0].id\n  }\n\n  return {templateName: templateName!, templateParams}\n}\n","import {useMemo} from 'react'\nimport {useInitialValue, useTemplates, useUnique} from 'sanity'\n\nimport {type PaneRouterContextValue, usePaneRouter} from '../../components'\nimport {type DocumentPaneNode} from '../../types'\nimport {getInitialValueTemplateOpts} from './getInitialValueTemplateOpts'\n\nexport const useDocumentPaneInitialValue = ({\n  paneOptions,\n  documentType,\n  documentId,\n  params,\n}: {\n  paneOptions: DocumentPaneNode['options']\n  documentType: string\n  documentId: string\n  params: NonNullable<PaneRouterContextValue['params']>\n}) => {\n  const templates = useTemplates()\n  const paneRouter = usePaneRouter()\n  const panePayload = useUnique(paneRouter.payload)\n\n  const {templateName, templateParams} = useMemo(\n    () =>\n      getInitialValueTemplateOpts(templates, {\n        documentType,\n        templateName: paneOptions.template,\n        templateParams: paneOptions.templateParameters,\n        panePayload,\n        urlTemplate: params.template,\n      }),\n    [documentType, paneOptions, params.template, panePayload, templates],\n  )\n\n  const initialValueRaw = useInitialValue({\n    documentId,\n    documentType,\n    templateName,\n    templateParams,\n    version: params.version,\n  })\n\n  const initialValue = useUnique(initialValueRaw)\n  return initialValue\n}\n","import {omit} from 'lodash'\nimport {useCallback, useEffect, useMemo, useRef, useState} from 'react'\nimport {type DocumentInspector, useSource} from 'sanity'\n\nimport {type PaneRouterContextValue} from '../../components'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME, INSPECT_ACTION_PREFIX} from './constants'\n\nexport function useDocumentPaneInspector({\n  documentId,\n  documentType,\n  params,\n  setParams,\n}: {\n  params: NonNullable<PaneRouterContextValue['params']>\n  documentId: string\n  documentType: string\n  setParams: (params: Record<string, string | undefined>) => void\n}) {\n  const {features} = useStructureTool()\n  const source = useSource()\n  const inspectorsResolver = source.document.inspectors\n\n  const inspectors: DocumentInspector[] = useMemo(\n    () => inspectorsResolver({documentId, documentType}),\n    [documentId, documentType, inspectorsResolver],\n  )\n\n  const [inspectorName, setInspectorName] = useState<string | null>(() => params.inspect || null)\n\n  // Handle inspector name changes from URL\n  const inspectParamRef = useRef<string | undefined>(params.inspect)\n  useEffect(() => {\n    if (inspectParamRef.current !== params.inspect) {\n      inspectParamRef.current = params.inspect\n      setInspectorName(params.inspect || null)\n    }\n  }, [params.inspect])\n\n  const currentInspector = useMemo(\n    () => inspectors?.find((i) => i.name === inspectorName),\n    [inspectors, inspectorName],\n  )\n  const historyInspector = useMemo(\n    () => inspectors.find((i) => i.name === HISTORY_INSPECTOR_NAME),\n    [inspectors],\n  )\n\n  const changesOpen = currentInspector?.name === HISTORY_INSPECTOR_NAME\n\n  const closeInspector = useCallback(\n    (closeInspectorName?: string) => {\n      const inspector = closeInspectorName && inspectors.find((i) => i.name === closeInspectorName)\n\n      if (closeInspectorName && !inspector) {\n        console.warn(`No inspector named \"${closeInspectorName}\"`)\n        return\n      }\n\n      if (!currentInspector) {\n        return\n      }\n\n      if (inspector) {\n        const result = inspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setParams({...result.params, inspect: undefined})\n\n        return\n      }\n\n      if (currentInspector) {\n        const result = currentInspector.onClose?.({params}) ?? {params}\n\n        setInspectorName(null)\n        inspectParamRef.current = undefined\n\n        setParams({...result.params, inspect: undefined})\n      }\n    },\n    [currentInspector, inspectors, params, setParams],\n  )\n\n  const openInspector = useCallback(\n    (nextInspectorName: string, paneParams?: Record<string, string>) => {\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (!nextInspector) {\n        console.warn(`No inspector named \"${nextInspectorName}\"`)\n        return\n      }\n\n      // if the inspector is already open, only update params\n      if (currentInspector?.name === nextInspector.name) {\n        setParams({...params, ...paneParams, inspect: nextInspector.name})\n        return\n      }\n\n      let currentParams = params\n\n      if (currentInspector) {\n        const closeResult = nextInspector.onClose?.({params: currentParams}) ?? {\n          params: currentParams,\n        }\n\n        currentParams = closeResult.params\n      }\n\n      const result = nextInspector.onOpen?.({params: currentParams}) ?? {params: currentParams}\n\n      setInspectorName(nextInspector.name)\n      inspectParamRef.current = nextInspector.name\n\n      setParams({...result.params, ...paneParams, inspect: nextInspector.name})\n    },\n    [currentInspector, inspectors, params, setParams],\n  )\n  const handleHistoryClose = useCallback(() => {\n    if (historyInspector) {\n      closeInspector(historyInspector.name)\n    }\n  }, [closeInspector, historyInspector])\n\n  const handleHistoryOpen = useCallback(() => {\n    if (!features.reviewChanges) {\n      return\n    }\n\n    if (historyInspector) {\n      openInspector(historyInspector.name, {changesInspectorTab: 'review'})\n    }\n  }, [features.reviewChanges, openInspector, historyInspector])\n\n  const inspectOpen = params.inspect === 'on'\n\n  const toggleLegacyInspect = useCallback(\n    (toggle = !inspectOpen) => {\n      if (toggle) {\n        setParams({...params, inspect: 'on'})\n      } else {\n        setParams(omit(params, 'inspect'))\n      }\n    },\n    [inspectOpen, params, setParams],\n  )\n\n  const handleLegacyInspectClose = useCallback(\n    () => toggleLegacyInspect(false),\n    [toggleLegacyInspect],\n  )\n\n  const handleInspectorAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'inspect') {\n        toggleLegacyInspect(true)\n        return true\n      }\n\n      if (typeof item.action !== 'string') return false\n      const nextInspectorName = item.action.slice(INSPECT_ACTION_PREFIX.length)\n      const nextInspector = inspectors.find((i) => i.name === nextInspectorName)\n\n      if (nextInspector) {\n        if (nextInspector.name === inspectorName) {\n          closeInspector(nextInspector.name)\n        } else {\n          openInspector(nextInspector.name)\n        }\n        return true\n      }\n      return false\n    },\n    [closeInspector, inspectorName, inspectors, openInspector, toggleLegacyInspect],\n  )\n\n  return {\n    changesOpen,\n    currentInspector,\n    inspectors,\n    closeInspector,\n    openInspector,\n    handleHistoryClose,\n    handleHistoryOpen,\n    handleInspectorAction,\n    // TODO: Deprecate this legacy inspect toggle it's used to render the <InspectDialog /> component\n    handleLegacyInspectClose,\n    inspectOpen,\n  }\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useEffect, useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {BehaviorSubject, from, of} from 'rxjs'\nimport {catchError, debounceTime, distinctUntilChanged, switchMap} from 'rxjs/operators'\nimport {isRecord, useSource} from 'sanity'\n\nconst isSanityDocument = (value: unknown): value is SanityDocument =>\n  isRecord(value) && typeof value._id === 'string' && typeof value._type === 'string'\n\nexport function usePreviewUrl(value: Partial<SanityDocument> | undefined): string | undefined {\n  const {resolveProductionUrl} = useSource().document\n  const subject = useMemo(\n    () => new BehaviorSubject<Partial<SanityDocument> | undefined>(undefined),\n    [],\n  )\n\n  useEffect(() => {\n    subject.next(value)\n  }, [subject, value])\n\n  const resolvedUrlObservable = useMemo(() => {\n    return subject.asObservable().pipe(\n      // this so that the preview URL isn't fetched on every keystroke\n      distinctUntilChanged(),\n      debounceTime(500),\n      switchMap((document) =>\n        isSanityDocument(document) ? from(resolveProductionUrl({document})) : of(undefined),\n      ),\n      distinctUntilChanged(),\n      catchError((err) => {\n        const message =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n        throw new Error(`An error was thrown while trying to get your preview url: ${message}`)\n      }),\n    )\n  }, [resolveProductionUrl, subject])\n\n  return useObservable(resolvedUrlObservable)\n}\n","/* eslint-disable camelcase */\nimport {useTelemetry} from '@sanity/telemetry/react'\nimport {type ObjectSchemaType, type SanityDocument, type SanityDocumentLike} from '@sanity/types'\nimport {useToast} from '@sanity/ui'\nimport {fromString as pathFromString, resolveKeyedPath} from '@sanity/util/paths'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  type DocumentActionsContext,\n  type DocumentActionsVersionType,\n  type DocumentFieldAction,\n  type EditStateFor,\n  EMPTY_ARRAY,\n  getPublishedId,\n  isVersionId,\n  type PartialContext,\n  useCopyPaste,\n  useDocumentForm,\n  usePerspective,\n  useSchema,\n  useSource,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {DocumentPaneContext} from 'sanity/_singletons'\n\nimport {usePaneRouter} from '../../components'\nimport {useDiffViewRouter} from '../../diffView/hooks/useDiffViewRouter'\nimport {useDocumentIdStack} from '../../hooks/useDocumentIdStack'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type PaneMenuItem} from '../../types'\nimport {DocumentURLCopied} from './__telemetry__'\nimport {DEFAULT_MENU_ITEM_GROUPS, EMPTY_PARAMS, INSPECT_ACTION_PREFIX} from './constants'\nimport {type DocumentPaneContextValue} from './DocumentPaneContext'\nimport {\n  type DocumentPaneProviderProps as DocumentPaneProviderWrapperProps,\n  type HistoryStoreProps,\n} from './types'\nimport {useDocumentPaneInitialValue} from './useDocumentPaneInitialValue'\nimport {useDocumentPaneInspector} from './useDocumentPaneInspector'\nimport {usePreviewUrl} from './usePreviewUrl'\n\ninterface DocumentPaneProviderProps extends DocumentPaneProviderWrapperProps {\n  historyStore: HistoryStoreProps\n}\n\n/**\n * @internal\n */\n// eslint-disable-next-line complexity, max-statements\nexport const DocumentPaneProvider = memo((props: DocumentPaneProviderProps) => {\n  const {children, index, pane, paneKey, onFocusPath, forcedVersion, historyStore} = props\n  const {\n    store: timelineStore,\n    error: timelineError,\n    ready: timelineReady,\n    revisionDocument,\n    onOlderRevision,\n    sinceDocument,\n    isPristine,\n    revisionId,\n    lastNonDeletedRevId,\n  } = historyStore\n\n  const schema = useSchema()\n  const {setDocumentMeta} = useCopyPaste()\n  const {\n    document: {\n      actions: documentActions,\n      badges: documentBadges,\n      unstable_fieldActions: fieldActionsResolver,\n      unstable_languageFilter: languageFilterResolver,\n    },\n  } = useSource()\n  const telemetry = useTelemetry()\n  const paneRouter = usePaneRouter()\n  const setPaneParams = paneRouter.setParams\n  const {push: pushToast} = useToast()\n  const {\n    options,\n    menuItemGroups = DEFAULT_MENU_ITEM_GROUPS,\n    title = null,\n    views: viewsProp = [],\n  } = pane\n  const paneOptions = useUnique(options)\n  const documentIdRaw = paneOptions.id\n  const documentId = getPublishedId(documentIdRaw)\n  const documentType = options.type\n  const params = useUnique(paneRouter.params) || EMPTY_PARAMS\n\n  const perspective = usePerspective()\n\n  const {selectedReleaseId, selectedPerspectiveName} = useMemo(() => {\n    // TODO: COREL - Remove this after updating sanity-assist to use <PerspectiveProvider>\n    if (forcedVersion) {\n      return forcedVersion\n    }\n    return {\n      selectedPerspectiveName: perspective.selectedPerspectiveName,\n      selectedReleaseId: perspective.selectedReleaseId,\n    }\n  }, [forcedVersion, perspective.selectedPerspectiveName, perspective.selectedReleaseId])\n\n  const diffViewRouter = useDiffViewRouter()\n\n  const initialValue = useDocumentPaneInitialValue({\n    paneOptions,\n    documentId,\n    documentType,\n    params,\n  })\n\n  const isInitialValueLoading = initialValue.loading\n  const {\n    changesOpen,\n    currentInspector,\n    inspectors,\n    closeInspector,\n    openInspector,\n    handleHistoryClose,\n    handleHistoryOpen,\n    handleInspectorAction,\n    inspectOpen,\n    handleLegacyInspectClose,\n  } = useDocumentPaneInspector({documentId, documentType, params, setParams: setPaneParams})\n\n  const [isDeleting, setIsDeleting] = useState(false)\n\n  /**\n   * Determine if the current document is deleted.\n   *\n   * When the timeline is available – we check for the absence of an editable document pair\n   * (both draft + published versions) as well as a non 'pristine' timeline (i.e. a timeline that consists\n   * of at least one chunk).\n   *\n   * In the _very rare_ case where the timeline cannot be loaded – we skip this check and always assume\n   * the document is NOT deleted. Since we can't accurately determine document deleted status without history,\n   * skipping this check means that in these cases, users will at least be able to create new documents\n   * without them being incorrectly marked as deleted.\n   */\n  const getIsDeleted = useCallback(\n    (editState: EditStateFor) => {\n      if (!timelineReady) return false\n      return (\n        Boolean(!editState?.draft && !editState?.published && !editState?.version) && !isPristine\n      )\n    },\n    [timelineReady, isPristine],\n  )\n\n  const getComparisonValue = useCallback(\n    (editState: EditStateFor) => {\n      return changesOpen ? sinceDocument : editState?.published || null\n    },\n    [changesOpen, sinceDocument],\n  )\n\n  const schemaType = schema.get(documentType) as ObjectSchemaType | undefined\n\n  const getIsReadOnly = useCallback(\n    (editState: EditStateFor): boolean => {\n      const isDeleted = getIsDeleted(editState)\n      const seeingHistoryDocument = revisionId !== null\n      return seeingHistoryDocument || isDeleting || isDeleted\n    },\n    [getIsDeleted, isDeleting, revisionId],\n  )\n\n  const getDisplayed = useCallback(\n    (value: SanityDocumentLike) => {\n      if (onOlderRevision) {\n        return revisionDocument || {_id: value._id, _type: value._type}\n      }\n      return value\n    },\n    [onOlderRevision, revisionDocument],\n  )\n\n  const {\n    editState,\n    connectionState,\n    focusPath,\n    onChange,\n    validation,\n    ready: formReady,\n    value,\n    formState,\n    permissions,\n    onPathOpen,\n    isPermissionsLoading,\n    formStateRef,\n    onProgrammaticFocus,\n\n    collapsedFieldSets,\n    collapsedPaths,\n    onBlur,\n    onFocus,\n    onSetActiveFieldGroup,\n    onSetCollapsedPath,\n    onSetCollapsedFieldSet,\n    openPath,\n  } = useDocumentForm({\n    documentType,\n    documentId,\n    initialValue: initialValue.value,\n    comparisonValue: getComparisonValue,\n    releaseId: selectedReleaseId,\n    selectedPerspectiveName,\n    initialFocusPath: params.path ? pathFromString(params.path) : EMPTY_ARRAY,\n    readOnly: getIsReadOnly,\n    onFocusPath,\n    getFormDocumentValue: getDisplayed,\n  })\n\n  const getDocumentVersionType = useCallback(() => {\n    let version: DocumentActionsVersionType\n    switch (true) {\n      case Boolean(params.rev):\n        version = 'revision'\n        break\n      case selectedReleaseId && isVersionId(value._id):\n        version = 'version'\n        break\n      case selectedPerspectiveName === 'published':\n        version = 'published'\n        break\n      default:\n        version = 'draft'\n    }\n\n    return version\n  }, [selectedPerspectiveName, selectedReleaseId, params, value._id])\n\n  const actionsPerspective = useMemo(() => getDocumentVersionType(), [getDocumentVersionType])\n\n  const documentActionsProps: PartialContext<DocumentActionsContext> = useMemo(\n    () => ({\n      schemaType: documentType,\n      documentId,\n      versionType: actionsPerspective,\n      ...(selectedReleaseId && {versionName: selectedReleaseId}),\n    }),\n    [documentType, documentId, actionsPerspective, selectedReleaseId],\n  )\n\n  // Resolve document actions\n  const actions = useMemo(\n    () => documentActions(documentActionsProps),\n    [documentActions, documentActionsProps],\n  )\n\n  // Resolve document badges\n  const badges = useMemo(\n    () => documentBadges({schemaType: documentType, documentId}),\n    [documentBadges, documentId, documentType],\n  )\n\n  // Resolve document language filter\n  const languageFilter = useMemo(\n    () => languageFilterResolver({schemaType: documentType, documentId}),\n    [documentId, documentType, languageFilterResolver],\n  )\n\n  const views = useUnique(viewsProp)\n\n  const activeViewId = params.view || (views[0] && views[0].id) || null\n\n  // TODO: this may cause a lot of churn. May be a good idea to prevent these\n  // requests unless the menu is open somehow\n  const previewUrl = usePreviewUrl(value)\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const fieldActions: DocumentFieldAction[] = useMemo(\n    () => (schemaType ? fieldActionsResolver({documentId, documentType, schemaType}) : []),\n    [documentId, documentType, fieldActionsResolver, schemaType],\n  )\n\n  /**\n   * Note that in addition to connection and edit state, we also wait for a valid document timeline\n   * range to be loaded. This means if we're loading an older revision, the full transaction range must\n   * be loaded in full prior to the document being displayed.\n   *\n   * Previously, visiting studio URLs with timeline params would display the 'current' document and then\n   * 'snap' in the older revision, which was disorienting and could happen mid-edit.\n   *\n   * In the event that the timeline cannot be loaded due to TimelineController errors or blocked requests,\n   * we skip this readiness check to ensure that users aren't locked out of editing. Trying to select\n   * a timeline revision in this instance will display an error localized to the popover itself.\n   */\n  const ready = formReady && (!params.rev || timelineReady || !!timelineError)\n\n  const displayed: Partial<SanityDocument> | undefined = useMemo(\n    () => getDisplayed(value),\n    [getDisplayed, value],\n  )\n\n  const {previousId} = useDocumentIdStack({displayed, documentId, editState})\n\n  const setTimelineRange = useCallback(\n    (newSince: string, newRev: string | null) => {\n      setPaneParams({\n        ...params,\n        since: newSince,\n        rev: newRev || undefined,\n      })\n    },\n    [params, setPaneParams],\n  )\n\n  const handlePaneClose = useCallback(() => paneRouter.closeCurrent(), [paneRouter])\n\n  const handlePaneSplit = useCallback(() => paneRouter.duplicateCurrent(), [paneRouter])\n\n  const handleMenuAction = useCallback(\n    (item: PaneMenuItem) => {\n      if (item.action === 'production-preview' && previewUrl) {\n        window.open(previewUrl)\n        return true\n      }\n\n      if (item.action === 'copy-document-url' && navigator) {\n        telemetry.log(DocumentURLCopied)\n        // Chose to copy the user's current URL instead of\n        // the document's edit intent link because\n        // of bugs when resolving a document that has\n        // multiple access paths within Structure\n        navigator.clipboard.writeText(window.location.toString())\n        pushToast({\n          id: 'copy-document-url',\n          status: 'info',\n          title: t('panes.document-operation-results.operation-success_copy-url'),\n        })\n        return true\n      }\n\n      if (item.action === 'reviewChanges') {\n        handleHistoryOpen()\n        return true\n      }\n\n      if (\n        item.action === 'inspect' ||\n        (typeof item.action === 'string' && item.action.startsWith(INSPECT_ACTION_PREFIX))\n      ) {\n        handleInspectorAction(item)\n      }\n\n      if (item.action === 'compareVersions' && typeof previousId !== 'undefined') {\n        diffViewRouter.navigateDiffView({\n          mode: 'version',\n          previousDocument: {\n            type: documentType,\n            id: previousId,\n          },\n          nextDocument: {\n            type: documentType,\n            id: value._id,\n          },\n        })\n        return true\n      }\n\n      return false\n    },\n    [\n      previewUrl,\n      previousId,\n      telemetry,\n      pushToast,\n      t,\n      handleHistoryOpen,\n      handleInspectorAction,\n      diffViewRouter,\n      documentType,\n      value._id,\n    ],\n  )\n\n  useEffect(() => {\n    setDocumentMeta({\n      documentId,\n      documentType,\n      schemaType: schemaType!,\n      onChange,\n    })\n  }, [documentId, documentType, schemaType, onChange, setDocumentMeta])\n\n  const compareValue = useMemo(() => getComparisonValue(editState), [editState, getComparisonValue])\n  const isDeleted = useMemo(() => getIsDeleted(editState), [editState, getIsDeleted])\n  const documentPane: DocumentPaneContextValue = useMemo(\n    () =>\n      ({\n        actions,\n        activeViewId,\n        badges,\n        changesOpen,\n        closeInspector,\n        collapsedFieldSets,\n        collapsedPaths,\n        compareValue,\n        connectionState,\n        displayed,\n        documentId,\n        documentIdRaw,\n        documentType,\n        editState,\n        fieldActions,\n        focusPath,\n        inspector: currentInspector || null,\n        inspectors,\n        onBlur,\n        onChange,\n        onFocus,\n        onPathOpen,\n        onHistoryClose: handleHistoryClose,\n        onHistoryOpen: handleHistoryOpen,\n        onInspectClose: handleLegacyInspectClose,\n        onMenuAction: handleMenuAction,\n        onPaneClose: handlePaneClose,\n        onPaneSplit: handlePaneSplit,\n        onSetActiveFieldGroup,\n        onSetCollapsedPath,\n        onSetCollapsedFieldSet,\n        openInspector,\n        openPath,\n        index,\n        inspectOpen,\n        validation,\n        menuItemGroups: menuItemGroups || [],\n        paneKey,\n        previewUrl,\n        ready,\n        schemaType: schemaType!,\n        isPermissionsLoading,\n        isInitialValueLoading,\n        permissions,\n        setTimelineRange,\n        setIsDeleting,\n        isDeleting,\n        isDeleted,\n        timelineError,\n        timelineStore,\n        title,\n        value,\n        selectedReleaseId,\n        views,\n        formState,\n        unstable_languageFilter: languageFilter,\n        revisionId,\n        lastNonDeletedRevId,\n      }) satisfies DocumentPaneContextValue,\n    [\n      actions,\n      activeViewId,\n      badges,\n      changesOpen,\n      closeInspector,\n      collapsedFieldSets,\n      collapsedPaths,\n      compareValue,\n      connectionState,\n      displayed,\n      documentId,\n      documentIdRaw,\n      documentType,\n      editState,\n      fieldActions,\n      focusPath,\n      currentInspector,\n      inspectors,\n      onBlur,\n      onChange,\n      onFocus,\n      onPathOpen,\n      handleHistoryClose,\n      handleHistoryOpen,\n      handleLegacyInspectClose,\n      handleMenuAction,\n      handlePaneClose,\n      handlePaneSplit,\n      onSetActiveFieldGroup,\n      onSetCollapsedPath,\n      onSetCollapsedFieldSet,\n      openInspector,\n      openPath,\n      index,\n      inspectOpen,\n      validation,\n      menuItemGroups,\n      paneKey,\n      previewUrl,\n      ready,\n      schemaType,\n      isPermissionsLoading,\n      isInitialValueLoading,\n      permissions,\n      setTimelineRange,\n      isDeleting,\n      isDeleted,\n      timelineError,\n      timelineStore,\n      title,\n      value,\n      selectedReleaseId,\n      views,\n      formState,\n      languageFilter,\n      revisionId,\n      lastNonDeletedRevId,\n    ],\n  )\n\n  // Reset `focusPath` when `documentId` or `params.path` changes\n  useEffect(() => {\n    if (ready && params.path) {\n      const {path, ...restParams} = params\n      const pathFromUrl = resolveKeyedPath(formStateRef.current?.value, pathFromString(path))\n      onProgrammaticFocus(pathFromUrl)\n\n      // remove the `path`-param from url after we have consumed it as the initial focus path\n      paneRouter.setParams(restParams)\n    }\n\n    return undefined\n  }, [formStateRef, onProgrammaticFocus, paneRouter, params, ready])\n\n  return (\n    <DocumentPaneContext.Provider value={documentPane}>{children}</DocumentPaneContext.Provider>\n  )\n})\n\nDocumentPaneProvider.displayName = 'Memo(DocumentPaneProvider)'\n","import {type ObjectSchemaType} from '@sanity/types'\nimport {useMemo} from 'react'\nimport {\n  EMPTY_ARRAY,\n  EventsProvider,\n  getDraftId,\n  getPublishedId,\n  getReleaseIdFromReleaseDocumentId,\n  getVersionId,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  PerspectiveProvider,\n  useArchivedReleases,\n  useEditState,\n  useEventsStore,\n  usePerspective,\n  useSchema,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentEventsPane = (props: DocumentPaneProviderProps) => {\n  const {params = EMPTY_PARAMS} = usePaneRouter()\n  const options = usePaneOptions(props.pane.options, params)\n  const schema = useSchema()\n  const documentType = options.type\n  const schemaType = schema.get(options.type) as ObjectSchemaType | undefined\n  const liveEdit = Boolean(schemaType?.liveEdit)\n\n  const {selectedPerspectiveName, selectedReleaseId, selectedPerspective} = usePerspective()\n  const {data: archivedReleases} = useArchivedReleases()\n  const editState = useEditState(\n    getPublishedId(options.id),\n    documentType,\n    'default',\n    selectedReleaseId,\n  )\n\n  const showingPublishedOnDraft = liveEdit && selectedPerspective === 'drafts' && !editState?.draft\n  const {rev, since} = params\n  const historyVersion = params.historyVersion\n\n  const documentId = useMemo(() => {\n    if (showingPublishedOnDraft) {\n      return getPublishedId(options.id)\n    }\n    if (\n      historyVersion &&\n      archivedReleases.some(\n        (release) => getReleaseIdFromReleaseDocumentId(release._id) === historyVersion,\n      )\n    ) {\n      // Check if we have a release that matches with this historyVersion\n      return getVersionId(options.id, historyVersion)\n    }\n    if (typeof selectedPerspectiveName === 'undefined') {\n      return getDraftId(options.id)\n    }\n    if (selectedPerspectiveName === 'published') {\n      return getPublishedId(options.id)\n    }\n    if (selectedReleaseId) {\n      return getVersionId(options.id, selectedPerspectiveName)\n    }\n    return options.id\n  }, [\n    archivedReleases,\n    historyVersion,\n    selectedPerspectiveName,\n    options.id,\n    showingPublishedOnDraft,\n    selectedReleaseId,\n  ])\n\n  const eventsStore = useEventsStore({documentId, documentType: options.type, rev, since})\n\n  const historyStoreProps = useMemo(\n    () => ({\n      error: eventsStore.error,\n      revisionId: eventsStore.revision?.revisionId || null,\n      onOlderRevision: Boolean(eventsStore.revision?.document && eventsStore.revision?.revisionId),\n      revisionDocument: eventsStore.revision?.document || null,\n      sinceDocument: eventsStore.sinceRevision?.document || null,\n      ready: !eventsStore.loading,\n      isPristine: Boolean(eventsStore.events.length === 0),\n      lastNonDeletedRevId:\n        eventsStore.events.find(\n          (e) => !isDeleteDocumentGroupEvent(e) && !isDeleteDocumentVersionEvent(e),\n        )?.id || null,\n    }),\n    [eventsStore],\n  )\n\n  const value = useMemo(() => eventsStore, [eventsStore])\n\n  return (\n    <EventsProvider value={value}>\n      {historyVersion ? (\n        <PerspectiveProvider\n          selectedPerspectiveName={historyVersion}\n          excludedPerspectives={EMPTY_ARRAY}\n        >\n          <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n        </PerspectiveProvider>\n      ) : (\n        <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n      )}\n    </EventsProvider>\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {useMemo, useState} from 'react'\nimport {getPublishedId, useTimelineSelector, useTimelineStore} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\nimport {usePaneOptions} from './DocumentPane'\nimport {DocumentPaneProvider} from './DocumentPaneProvider'\nimport {type DocumentPaneProviderProps} from './types'\n\nexport const DocumentPaneWithLegacyTimelineStore = (props: DocumentPaneProviderProps) => {\n  const {pane} = props\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n\n  const params = paneRouter.params || EMPTY_PARAMS\n\n  const [timelineError, setTimelineError] = useState<Error | null>(null)\n\n  const store = useTimelineStore({\n    documentId: getPublishedId(options.id),\n    documentType: options.type,\n    onError: setTimelineError,\n    rev: params.rev,\n    since: params.since,\n  })\n\n  const onOlderRevision = useTimelineSelector(store, (state) => state.onOlderRevision)\n  const revTime = useTimelineSelector(store, (state) => state.revTime)\n  const sinceAttributes = useTimelineSelector(store, (state) => state.sinceAttributes)\n  const timelineDisplayed = useTimelineSelector(store, (state) => state.timelineDisplayed)\n  const timelineReady = useTimelineSelector(store, (state) => state.timelineReady)\n  const isPristine = useTimelineSelector(store, (state) => state.isPristine)\n  const lastNonDeletedRevId = useTimelineSelector(store, (state) => state.lastNonDeletedRevId)\n\n  const historyStoreProps = useMemo(\n    () => ({\n      store,\n      error: timelineError,\n      revisionId: revTime?.id || null,\n      onOlderRevision: onOlderRevision,\n      revisionDocument: timelineDisplayed as SanityDocument | null,\n      sinceDocument: sinceAttributes as SanityDocument | null,\n      ready: timelineReady,\n      isPristine: Boolean(isPristine),\n      lastNonDeletedRevId,\n    }),\n    [\n      store,\n      timelineError,\n      revTime?.id,\n      onOlderRevision,\n      timelineDisplayed,\n      sinceAttributes,\n      timelineReady,\n      isPristine,\n      lastNonDeletedRevId,\n    ],\n  )\n  return <DocumentPaneProvider {...props} historyStore={historyStoreProps} />\n}\n","import {memo} from 'react'\nimport {useSource} from 'sanity'\n\nimport {DocumentEventsPane} from './DocumentEventsPane'\nimport {DocumentPaneWithLegacyTimelineStore} from './DocumentPaneLegacyTimeline'\nimport {type DocumentPaneProviderProps} from './types'\n\n/**\n * @internal\n */\nexport const DocumentPaneProviderWrapper = memo((props: DocumentPaneProviderProps) => {\n  const source = useSource()\n  if (source.beta?.eventsAPI?.documents) {\n    return <DocumentEventsPane {...props} />\n  }\n  return <DocumentPaneWithLegacyTimelineStore {...props} />\n})\nDocumentPaneProviderWrapper.displayName = 'Memo(DocumentPaneProviderWrapper)'\n","import {useEffect, useRef} from 'react'\nimport {usePerspective} from 'sanity'\nimport {useEffectEvent} from 'use-effect-event'\n\nimport {usePaneRouter} from '../../components'\nimport {EMPTY_PARAMS} from './constants'\n\n/**\n * This hooks takes care of resetting the history related params when the perspective changes.\n * It needs to be placed in a stable component, like the `DocumentPane`, which won't be unmounted when the perspective changes.\n */\nexport function useResetHistoryParams() {\n  const {params = EMPTY_PARAMS, setParams} = usePaneRouter()\n\n  const {selectedPerspectiveName} = usePerspective()\n  const isMounted = useRef(false)\n\n  const updateHistoryParams = useEffectEvent((_perspective?: string) => {\n    // Check if any of the history related params are set, and reset them, don't unnecessarily update the params\n    const PARAMS_TO_UPDATE = ['since', 'historyVersion', 'rev', 'preserveRev']\n    const shouldUpdateParams = PARAMS_TO_UPDATE.some((param) => params[param])\n    if (!shouldUpdateParams) return\n\n    setParams({\n      ...params,\n      // Reset the history related params when the perspective changes, as they don't make sense\n      // in the context of the new perspective - preserveRev is used when setting draft revision.\n      rev: params.preserveRev === 'true' ? params.rev : undefined,\n      preserveRev: undefined,\n      since: undefined,\n      historyVersion: undefined,\n    })\n  })\n  useEffect(() => {\n    // Skip the first run to avoid resetting the params on initial load\n    if (isMounted.current) {\n      updateHistoryParams(selectedPerspectiveName)\n    }\n  }, [selectedPerspectiveName])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n}\n","import {type Path} from '@sanity/types'\nimport {Stack, Text} from '@sanity/ui'\nimport {fromString as pathFromString} from '@sanity/util/paths'\nimport {memo, useMemo} from 'react'\nimport {\n  CopyPasteProvider,\n  ReferenceInputOptionsProvider,\n  SourceProvider,\n  Translate,\n  useDocumentType,\n  usePerspective,\n  useSource,\n  useTemplatePermissions,\n  useTemplates,\n  useTranslation,\n} from 'sanity'\n\nimport {usePaneRouter} from '../../components'\nimport {DiffViewDocumentLayout} from '../../diffView/plugin/DiffViewDocumentLayout'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type DocumentPaneNode} from '../../types'\nimport {ErrorPane} from '../error'\nimport {LoadingPane} from '../loading'\nimport {CommentsWrapper} from './comments'\nimport {useDocumentLayoutComponent} from './document-layout'\nimport {DocumentPaneProviderWrapper} from './DocumentPaneProviderWrapper'\nimport {type DocumentPaneProviderProps} from './types'\nimport {useResetHistoryParams} from './useResetHistoryParams'\n\ntype DocumentPaneOptions = DocumentPaneNode['options']\n\n/**\n * @internal\n */\nexport const DocumentPane = memo(function DocumentPane(props: DocumentPaneProviderProps) {\n  const {name: parentSourceName} = useSource()\n\n  return (\n    <SourceProvider name={props.pane.source || parentSourceName}>\n      <CopyPasteProvider>\n        <DocumentPaneInner {...props} />\n      </CopyPasteProvider>\n    </SourceProvider>\n  )\n})\n\nfunction DocumentPaneInner(props: DocumentPaneProviderProps) {\n  const {pane, paneKey} = props\n  const {resolveNewDocumentOptions} = useSource().document\n  const {selectedPerspectiveName} = usePerspective()\n  const paneRouter = usePaneRouter()\n  const options = usePaneOptions(pane.options, paneRouter.params)\n  const {documentType, isLoaded: isDocumentLoaded} = useDocumentType(options.id, options.type)\n  useResetHistoryParams()\n  const DocumentLayout = useDocumentLayoutComponent()\n\n  // The templates that should be creatable from inside this document pane.\n  // For example, from the \"Create new\" menu in reference inputs.\n  const templateItems = useMemo(() => {\n    return resolveNewDocumentOptions({\n      type: 'document',\n      documentId: options.id,\n      schemaType: options.type,\n    })\n  }, [options.id, options.type, resolveNewDocumentOptions])\n\n  const [templatePermissions, isTemplatePermissionsLoading] = useTemplatePermissions({\n    templateItems,\n  })\n  const isLoaded = isDocumentLoaded && !isTemplatePermissionsLoading\n\n  const providerProps = useMemo(() => {\n    return isLoaded && documentType && options.type !== documentType\n      ? mergeDocumentType(props, options, documentType)\n      : props\n  }, [props, documentType, isLoaded, options])\n\n  const {ReferenceChildLink, handleEditReference, groupIndex, routerPanesState} = paneRouter\n  const childParams = routerPanesState[groupIndex + 1]?.[0].params || {}\n  const routerPanesStateLength = routerPanesState.length\n  const {parentRefPath} = childParams\n\n  const activePath: {path: Path; state: 'selected' | 'pressed' | 'none'} = useMemo(() => {\n    return parentRefPath\n      ? {\n          path: pathFromString(parentRefPath),\n          state:\n            // eslint-disable-next-line no-nested-ternary\n            groupIndex >= routerPanesStateLength - 1\n              ? 'none'\n              : groupIndex >= routerPanesStateLength - 2\n                ? 'selected'\n                : 'pressed',\n        }\n      : {path: [], state: 'none'}\n  }, [parentRefPath, groupIndex, routerPanesStateLength])\n\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  if (options.type === '*' && !isLoaded) {\n    return (\n      <LoadingPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.loading')}\n      />\n    )\n  }\n\n  if (!documentType) {\n    return (\n      <ErrorPane\n        flex={2.5}\n        minWidth={320}\n        paneKey={paneKey}\n        title={t('panes.document-pane.document-not-found.title')}\n      >\n        <Stack space={4}>\n          <Text as=\"p\">\n            <Translate\n              t={t}\n              i18nKey=\"panes.document-pane.document-not-found.text\"\n              values={{id: options.id}}\n              components={{Code: ({children}) => <code>{children}</code>}}\n            />\n          </Text>\n        </Stack>\n      </ErrorPane>\n    )\n  }\n\n  return (\n    <DocumentPaneProviderWrapper\n      // this needs to be here to avoid formState from being re-used across (incompatible) document types\n      // see https://github.com/sanity-io/sanity/discussions/3794 for a description of the problem\n      key={`${documentType}-${options.id}-${selectedPerspectiveName || ''}`}\n      {...providerProps}\n    >\n      {/* NOTE: this is a temporary location for this provider until we */}\n      {/* stabilize the reference input options formally in the form builder */}\n      {/* eslint-disable-next-line react/jsx-pascal-case */}\n      <ReferenceInputOptionsProvider\n        EditReferenceLinkComponent={ReferenceChildLink}\n        onEditReference={handleEditReference}\n        initialValueTemplateItems={templatePermissions}\n        activePath={activePath}\n      >\n        <DiffViewDocumentLayout documentId={options.id} documentType={options.type}>\n          <CommentsWrapper documentId={options.id} documentType={options.type}>\n            <DocumentLayout documentId={options.id} documentType={options.type} />\n          </CommentsWrapper>\n        </DiffViewDocumentLayout>\n      </ReferenceInputOptionsProvider>\n    </DocumentPaneProviderWrapper>\n  )\n}\n\n/**\n * @internal\n */\nexport function usePaneOptions(\n  options: DocumentPaneOptions,\n  params: Record<string, string | undefined> = {},\n): DocumentPaneOptions {\n  const templates = useTemplates()\n\n  return useMemo(() => {\n    // The document type is provided, so return\n    if (options.type && options.type !== '*') {\n      return options\n    }\n\n    // Attempt to derive document type from the template configuration\n    const templateName = options.template || params.template\n    const template = templateName ? templates.find((t) => t.id === templateName) : undefined\n    const documentType = template?.schemaType\n\n    // No document type was found in a template\n    if (!documentType) {\n      return options\n    }\n\n    // The template provided the document type, so modify the pane’s `options` property\n    return {...options, type: documentType}\n  }, [options, params.template, templates])\n}\n\nfunction mergeDocumentType(\n  props: DocumentPaneProviderProps,\n  options: DocumentPaneOptions,\n  documentType: string,\n): DocumentPaneProviderProps {\n  return {\n    ...props,\n    pane: {\n      ...props.pane,\n      options: {...options, type: documentType},\n    },\n  }\n}\n","import {type SortOrder} from './types'\n\nexport const PARTIAL_PAGE_LIMIT = 100\nexport const FULL_LIST_LIMIT = 2000\nexport const DEFAULT_ORDERING: SortOrder = {by: [{field: '_updatedAt', direction: 'desc'}]}\nexport const EMPTY_RECORD: Record<string, unknown> = {}\n\nexport const ENABLE_LRU_MEMO = true\n","import {type SanityDocument} from '@sanity/types'\nimport {Box, Container, Flex, Heading, Stack, Text} from '@sanity/ui'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  ErrorActions,\n  type GeneralPreviewLayoutKey,\n  getPublishedId,\n  LoadingBlock,\n  SanityDefaultPreview,\n  Translate,\n  useSchema,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Delay, PaneContent, PaneItem, usePane, usePaneLayout} from '../../components'\nimport {structureLocaleNamespace} from '../../i18n'\nimport {FULL_LIST_LIMIT} from './constants'\nimport {type DocumentListPaneItem, type LoadingVariant} from './types'\n\nconst RootBox = styled(Box)<{$opacity?: number}>`\n  position: relative;\n  opacity: ${(props) => props.$opacity || 1};\n  transition: opacity 0.4s;\n`\n\nconst CommandListBox = styled(Box)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n`\n\ninterface DocumentListPaneContentProps {\n  childItemId?: string\n  error: {message: string} | null\n  filterIsSimpleTypeConstraint: boolean\n  hasMaxItems?: boolean\n  hasSearchQuery: boolean\n  isActive?: boolean\n  isLazyLoading: boolean\n  isLoading: boolean\n  items: DocumentListPaneItem[]\n  layout?: GeneralPreviewLayoutKey\n  loadingVariant?: LoadingVariant\n  onEndReached: () => void\n  onRetry?: () => void\n  paneTitle: string\n  searchInputElement: HTMLInputElement | null\n  showIcons: boolean\n}\n\nconst SKELETON_ITEMS = [...Array(30).keys()]\n\nfunction LoadingView(props: {layout?: GeneralPreviewLayoutKey}) {\n  const {layout} = props\n\n  return (\n    <Stack paddingX={3} paddingY={2} paddingTop={0} space={1}>\n      {SKELETON_ITEMS.map((num) => (\n        <SanityDefaultPreview isPlaceholder layout={layout} key={num} />\n      ))}\n    </Stack>\n  )\n}\n\nexport function DocumentListPaneContent(props: DocumentListPaneContentProps) {\n  const {\n    childItemId,\n    error,\n    filterIsSimpleTypeConstraint,\n    hasMaxItems,\n    hasSearchQuery,\n    isActive,\n    isLazyLoading,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    onEndReached,\n    onRetry,\n    paneTitle,\n    searchInputElement,\n    showIcons,\n  } = props\n\n  const schema = useSchema()\n\n  const {collapsed: layoutCollapsed} = usePaneLayout()\n  const {collapsed, index} = usePane()\n  const [shouldRender, setShouldRender] = useState(!collapsed)\n  const {t} = useTranslation(structureLocaleNamespace)\n\n  const handleEndReached = useCallback(() => {\n    if (shouldRender) {\n      onEndReached()\n    }\n  }, [onEndReached, shouldRender])\n\n  useEffect(() => {\n    if (collapsed) return undefined\n\n    const timer = setTimeout(() => {\n      setShouldRender(true)\n    }, 0)\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [collapsed, items])\n\n  const renderItem = useCallback<CommandListRenderItemCallback<SanityDocument>>(\n    (item, {activeIndex}) => {\n      const publishedId = getPublishedId(item._id)\n      const isSelected = childItemId === publishedId\n      const pressed = !isActive && isSelected\n      const selected = isActive && isSelected\n      const isLastItem = activeIndex === items.length - 1\n      const showSpinner = isLastItem && isLazyLoading\n      const showMaxItemsMessage = isLastItem && hasMaxItems\n\n      return (\n        <>\n          <PaneItem\n            icon={showIcons === false ? false : undefined}\n            id={publishedId}\n            layout={layout}\n            marginBottom={1}\n            pressed={pressed}\n            schemaType={schema.get(item._type)}\n            selected={selected}\n            value={item}\n          />\n\n          {showSpinner && <LoadingBlock />}\n\n          {showMaxItemsMessage && (\n            <Box marginY={1} paddingX={3} paddingY={4}>\n              <Text align=\"center\" muted size={1}>\n                {t('panes.document-list-pane.max-items.text', {limit: FULL_LIST_LIMIT})}\n              </Text>\n            </Box>\n          )}\n        </>\n      )\n    },\n    [childItemId, isActive, items.length, layout, schema, showIcons, hasMaxItems, isLazyLoading, t],\n  )\n\n  const noDocumentsContent = useMemo(() => {\n    if (hasSearchQuery) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Box paddingX={4} paddingY={5}>\n              <Text align=\"center\" muted>\n                {t('panes.document-list-pane.no-documents.text')}\n              </Text>\n            </Box>\n          </Container>\n        </Flex>\n      )\n    }\n\n    return (\n      <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n        <Container width={1}>\n          <Box paddingX={4} paddingY={5}>\n            <Text align=\"center\" muted>\n              {filterIsSimpleTypeConstraint\n                ? t('panes.document-list-pane.no-documents-of-type.text')\n                : t('panes.document-list-pane.no-matching-documents.text')}\n            </Text>\n          </Box>\n        </Container>\n      </Flex>\n    )\n  }, [filterIsSimpleTypeConstraint, hasSearchQuery, t])\n\n  const mainContent = useMemo(() => {\n    if (!shouldRender) {\n      return null\n    }\n\n    if (error) {\n      return (\n        <Flex align=\"center\" direction=\"column\" height=\"fill\" justify=\"center\">\n          <Container width={1}>\n            <Stack paddingX={4} paddingY={5} space={4}>\n              <Heading as=\"h3\">{t('panes.document-list-pane.error.title')}</Heading>\n              <Text as=\"p\">\n                <Translate\n                  t={t}\n                  i18nKey=\"panes.document-list-pane.error.text\"\n                  values={{error: error.message}}\n                  components={{Code: ({children}) => <code>{children}</code>}}\n                />\n              </Text>\n              <ErrorActions error={error} eventId={null} onRetry={onRetry} />\n            </Stack>\n          </Container>\n        </Flex>\n      )\n    }\n\n    if (!isLoading && items.length === 0) {\n      return noDocumentsContent\n    }\n\n    if (loadingVariant === 'initial' && isLoading) {\n      return (\n        <Delay ms={300}>\n          <LoadingView layout={layout} />\n        </Delay>\n      )\n    }\n\n    if (loadingVariant === 'spinner' && isLoading) {\n      return null\n    }\n\n    // prevents bug when panes won't render if first rendered while collapsed\n    const key = `${index}-${collapsed}`\n\n    return (\n      <RootBox overflow=\"hidden\" height=\"fill\" $opacity={loadingVariant === 'subtle' ? 0.8 : 1}>\n        <CommandListBox>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={paneTitle}\n            canReceiveFocus\n            inputElement={searchInputElement}\n            itemHeight={51}\n            items={items}\n            key={key}\n            onEndReached={handleEndReached}\n            onlyShowSelectionWhenActive\n            overscan={10}\n            paddingBottom={1}\n            paddingX={3}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </CommandListBox>\n      </RootBox>\n    )\n  }, [\n    collapsed,\n    error,\n    handleEndReached,\n    index,\n    isLoading,\n    items,\n    layout,\n    loadingVariant,\n    noDocumentsContent,\n    onRetry,\n    paneTitle,\n    renderItem,\n    searchInputElement,\n    shouldRender,\n    t,\n  ])\n\n  return (\n    <PaneContent\n      data-testid=\"document-list-pane\"\n      overflow={layoutCollapsed || loadingVariant === 'initial' ? 'hidden' : 'auto'}\n    >\n      {mainContent}\n    </PaneContent>\n  )\n}\n","import {\n  isIndexSegment,\n  isKeySegment,\n  isReferenceSchemaType,\n  type ObjectField,\n  type ObjectFieldType,\n  type ObjectSchemaType,\n  type SanityDocumentLike,\n  type SchemaType,\n} from '@sanity/types'\nimport * as PathUtils from '@sanity/util/paths'\nimport {type ExprNode, parse} from 'groq-js'\nimport {collate, getPublishedId} from 'sanity'\n\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\nexport function getDocumentKey(value: DocumentListPaneItem, index: number): string {\n  return value._id ? getPublishedId(value._id) : `item-${index}`\n}\n\nexport function removePublishedWithDrafts(documents: SanityDocumentLike[]): DocumentListPaneItem[] {\n  return collate(documents).map((entry) => {\n    const doc = entry.draft || entry.published || entry.versions[0]\n    const hasDraft = Boolean(entry.draft)\n\n    return {\n      ...doc,\n      hasPublished: !!entry.published,\n      hasDraft,\n    }\n  }) as any\n}\n\nexport function applyOrderingFunctions(order: SortOrder, schemaType: ObjectSchemaType): SortOrder {\n  const orderBy = order.by.map((by) => {\n    // Skip those that already have a mapper\n    if (by.mapWith) {\n      return by\n    }\n\n    const fieldType = tryResolveSchemaTypeForPath(schemaType, by.field)\n    if (!fieldType) {\n      return by\n    }\n\n    // Note: order matters here, since the jsonType of a date field is `string`,\n    // but we want to apply `datetime()`, not `lower()`\n    if (fieldExtendsType(fieldType, 'datetime')) {\n      return {...by, mapWith: 'dateTime'}\n    }\n\n    if (fieldType.jsonType === 'string') {\n      return {...by, mapWith: 'lower'}\n    }\n\n    return by\n  })\n\n  return orderBy.every((item, index) => item === order.by[index]) ? order : {...order, by: orderBy}\n}\n\nfunction tryResolveSchemaTypeForPath(baseType: SchemaType, path: string): SchemaType | undefined {\n  const pathSegments = PathUtils.fromString(path)\n\n  let current: SchemaType | undefined = baseType\n  for (const segment of pathSegments) {\n    if (!current) {\n      return undefined\n    }\n\n    if (typeof segment === 'string') {\n      current = getFieldTypeByName(current, segment)\n      continue\n    }\n\n    const isArrayAccessor = isKeySegment(segment) || isIndexSegment(segment)\n    if (!isArrayAccessor || current.jsonType !== 'array') {\n      return undefined\n    }\n\n    const [memberType, otherType] = current.of || []\n    if (otherType || !memberType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    if (!isReferenceSchemaType(memberType)) {\n      current = memberType\n      continue\n    }\n\n    const [refType, otherRefType] = memberType.to || []\n    if (otherRefType || !refType) {\n      // Can't figure out the type without knowing the value\n      return undefined\n    }\n\n    current = refType\n  }\n\n  return current\n}\n\nfunction getFieldTypeByName(type: SchemaType, fieldName: string): SchemaType | undefined {\n  if (!('fields' in type)) {\n    return undefined\n  }\n\n  const fieldType = type.fields.find((field) => field.name === fieldName)\n  return fieldType ? fieldType.type : undefined\n}\n\nexport function fieldExtendsType(field: ObjectField | ObjectFieldType, ofType: string): boolean {\n  let current: SchemaType | undefined = field.type\n  while (current) {\n    if (current.name === ofType) {\n      return true\n    }\n\n    if (!current.type && current.jsonType === ofType) {\n      return true\n    }\n\n    current = current.type\n  }\n\n  return false\n}\n\n/**\n * Recursively extract static `_type`s from GROQ filter expressions. If the\n * types can't be statically determined then it will return `null`.\n */\n// eslint-disable-next-line complexity\nfunction findTypes(node: ExprNode): Set<string> | null {\n  switch (node.type) {\n    case 'OpCall': {\n      const {left, right} = node\n\n      switch (node.op) {\n        // e.g. `a == b`\n        case '==': {\n          // e.g. `_type == 'value'`\n          if (left.type === 'AccessAttribute' && left.name === '_type' && !left.base) {\n            if (right.type !== 'Value' || typeof right.value !== 'string') return null\n            return new Set([right.value])\n          }\n\n          // e.g. `'value' == _type`\n          if (right.type === 'AccessAttribute' && right.name === '_type' && !right.base) {\n            if (left.type !== 'Value' || typeof left.value !== 'string') return null\n            return new Set([left.value])\n          }\n\n          // otherwise, we can't determine the types statically\n          return null\n        }\n\n        // e.g. `a in b`\n        case 'in': {\n          // if `_type` is not on the left hand side of `in` then it can't be determined\n          if (left.type !== 'AccessAttribute' || left.name !== '_type' || left.base) return null\n          // if the right hand side is not an array then the types can't be determined\n          if (right.type !== 'Array') return null\n\n          const types = new Set<string>()\n          // iterate through all the types\n          for (const element of right.elements) {\n            // if we find a splat, then early return, we can't determine the types\n            if (element.isSplat) return null\n            // if the array element is not just a simple value, then early return\n            if (element.value.type !== 'Value') return null\n            // if the array element value is not a string, then early return\n            if (typeof element.value.value !== 'string') return null\n            // otherwise add the element value to the set of types\n            types.add(element.value.value)\n          }\n\n          // if there were any elements in the types set, return it\n          if (types.size) return types\n          // otherwise, the set of types cannot be determined\n          return null\n        }\n\n        default: {\n          return null\n        }\n      }\n    }\n\n    // groups can just be unwrapped, the AST preserves the order\n    case 'Group': {\n      return findTypes(node.base)\n    }\n\n    // e.g. `_type == 'a' || _type == 'b'`\n    // with Or nodes, if we can't determine the types for either the left or\n    // right hand side then we can't determine the types for any\n    // e.g. `_type == 'a' || isActive`\n    // — can't determine types because `isActive` could be true on another types\n    case 'Or': {\n      const left = findTypes(node.left)\n      if (!left) return null\n\n      const right = findTypes(node.right)\n      if (!right) return null\n\n      return new Set([...left, ...right])\n    }\n\n    // e.g. `_type == 'a' && isActive`\n    // with And nodes, we can determine the types as long as we can determine\n    // the types for one side. We can't determine the types if both are `null`.\n    case 'And': {\n      const left = findTypes(node.left)\n      const right = findTypes(node.right)\n\n      if (!left && !right) return null\n      return new Set([...(left || []), ...(right || [])])\n    }\n\n    default: {\n      return null\n    }\n  }\n}\n\nexport function findStaticTypesInFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] | null {\n  try {\n    const types = findTypes(parse(filter, {params}))\n    if (!types) return null\n\n    return Array.from(types).sort()\n  } catch {\n    // if we couldn't parse the filter, just return `null`\n    return null\n  }\n}\n","import {type SchemaType, type SortOrderingItem} from '@sanity/types'\n\nconst IMPLICIT_SCHEMA_TYPE_FIELDS = ['_id', '_type', '_createdAt', '_updatedAt', '_rev']\n\n// Takes a path array and a schema type and builds a GROQ join every time it enters a reference field\nfunction joinReferences(schemaType: SchemaType, path: string[], strict: boolean = false): string {\n  const [head, ...tail] = path\n\n  if (!('fields' in schemaType)) {\n    return ''\n  }\n\n  const schemaField = schemaType.fields.find((field) => field.name === head)\n  if (!schemaField) {\n    if (!IMPLICIT_SCHEMA_TYPE_FIELDS.includes(head)) {\n      const errorMessage = `The current ordering config targeted the nonexistent field \"${head}\" on schema type \"${schemaType.name}\". It should be one of ${schemaType.fields.map((field) => field.name).join(', ')}`\n      if (strict) {\n        throw new Error(errorMessage)\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage)\n      }\n    }\n    return ''\n  }\n\n  if ('to' in schemaField.type && schemaField.type.name === 'reference') {\n    const refTypes = schemaField.type.to\n    return `${head}->{${refTypes.map((refType) => joinReferences(refType, tail)).join(',')}}`\n  }\n\n  const tailFields = tail.length > 0 && joinReferences(schemaField.type, tail)\n  const tailWrapper = tailFields ? `{${tailFields}}` : ''\n  return tail.length > 0 ? `${head}${tailWrapper}` : head\n}\n\nexport function getExtendedProjection(\n  schemaType: SchemaType,\n  orderBy: SortOrderingItem[],\n  strict: boolean = false,\n): string {\n  return orderBy\n    .map((ordering) => joinReferences(schemaType, ordering.field.split('.'), strict))\n    .join(', ')\n}\n","import {type ClientPerspective, type SanityClient} from '@sanity/client'\nimport {\n  asyncScheduler,\n  defer,\n  map,\n  merge,\n  mergeMap,\n  type Observable,\n  of,\n  partition,\n  share,\n  take,\n  throttleTime,\n  throwError,\n  timer,\n} from 'rxjs'\nimport {exhaustMapWithTrailing} from 'rxjs-exhaustmap-with-trailing'\nimport {\n  createSearch,\n  createSWR,\n  getSearchableTypes,\n  type SanityDocumentLike,\n  type Schema,\n  type SearchOptions,\n  type SearchStrategy,\n} from 'sanity'\n\nimport {getExtendedProjection} from '../../structureBuilder/util/getExtendedProjection'\nimport {type SortOrder} from './types'\n\ninterface ListenQueryOptions {\n  client: SanityClient\n  filter: string\n  limit: number\n  params: Record<string, unknown>\n  schema: Schema\n  searchQuery: string\n  sort: SortOrder\n  perspective?: ClientPerspective\n  staticTypeNames?: string[] | null\n  maxFieldDepth?: number\n  searchStrategy?: SearchStrategy\n}\n\nexport interface SearchQueryResult {\n  fromCache: boolean\n  documents: SanityDocumentLike[]\n}\n\nconst swr = createSWR<SanityDocumentLike[]>({maxSize: 100})\n\nexport function listenSearchQuery(options: ListenQueryOptions): Observable<SearchQueryResult> {\n  const {\n    client,\n    schema,\n    sort,\n    perspective,\n    limit,\n    params,\n    filter,\n    searchQuery,\n    staticTypeNames,\n    maxFieldDepth,\n    searchStrategy,\n  } = options\n  const sortBy = sort.by\n  const extendedProjection = sort?.extendedProjection\n\n  // Listen for changes with the given filter and params, and whenever a change occurs, we want to\n  // re-fetch the documents that match the search query (see below).\n  // We use a separate listener since the search query is too large to use in a listen query.\n  const events$ = defer(() => {\n    return client.listen(`*[${filter}]`, params, {\n      events: ['welcome', 'mutation', 'reconnect'],\n      includeAllVersions: true,\n      includeResult: false,\n      visibility: 'query',\n      tag: 'listen-search-query',\n    })\n  }).pipe(\n    mergeMap((ev, i) => {\n      const isFirst = i === 0\n      if (isFirst && ev.type !== 'welcome') {\n        // If the first event is not welcome, it is most likely a reconnect and\n        // if it's not a reconnect something is very wrong and we should throw.\n        return throwError(\n          () =>\n            new Error(\n              ev.type === 'reconnect'\n                ? 'Could not establish EventSource connection'\n                : `Received unexpected type of first event \"${ev.type}\"`,\n            ),\n        )\n      }\n      return of(ev)\n    }),\n    share(),\n  )\n\n  const [welcome$, mutationAndReconnect$] = partition(events$, (ev) => ev.type === 'welcome')\n\n  const swrKey = JSON.stringify({\n    filter,\n    limit,\n    params,\n    searchQuery,\n    perspective,\n    sort,\n    staticTypeNames,\n  })\n\n  return merge(\n    welcome$.pipe(take(1)),\n    mutationAndReconnect$.pipe(throttleTime(1000, asyncScheduler, {leading: true, trailing: true})),\n  ).pipe(\n    exhaustMapWithTrailing((event) => {\n      // Get the types names to use for searching.\n      // If we have a static list of types, we can skip fetching the types and use the static list.\n      const typeNames$ = staticTypeNames\n        ? of(staticTypeNames)\n        : client.observable.fetch(`array::unique(*[${filter}][]._type)`, params)\n\n      // Use the type names to create a search query and fetch the documents that match the query.\n      return typeNames$.pipe(\n        mergeMap((typeNames: string[]) => {\n          const types = getSearchableTypes(schema, staticTypeNames || []).filter((type) => {\n            if (typeNames.includes(type.name)) {\n              // make a call to getExtendedProjection in strict mode to verify that all fields are\n              // known. This method will throw an exception if there are any unknown fields specified\n              // in the sort by list\n              getExtendedProjection(type, sort.by, true)\n              return true\n            }\n            return false\n          })\n\n          const search = createSearch(types, client, {\n            filter,\n            params,\n            strategy: searchStrategy,\n            maxDepth: maxFieldDepth,\n          })\n\n          const doFetch = () => {\n            const searchTerms = {\n              query: searchQuery || '',\n              types,\n            }\n\n            const searchOptions: SearchOptions = {\n              __unstable_extendedProjection: extendedProjection,\n              comments: [`findability-source: ${searchQuery ? 'list-query' : 'list'}`],\n              limit,\n              skipSortByScore: true,\n              sort: sortBy,\n              perspective,\n            }\n\n            return search(searchTerms, searchOptions).pipe(\n              map((result) =>\n                // eslint-disable-next-line max-nested-callbacks\n                result.hits.map(({hit}) => hit),\n              ),\n            )\n          }\n\n          if (event.type === 'mutation' && event.visibility !== 'query') {\n            // Even though the listener request specifies visibility=query, the events are not guaranteed to be delivered with visibility=query\n            // If the event we are responding to arrives with visibility != query, we add a little delay to allow for the updated document to be available for queries\n            // See https://www.sanity.io/docs/listening#visibility-c4786e55c3ff\n            return timer(1200).pipe(mergeMap(doFetch))\n          }\n          return doFetch()\n        }),\n      )\n    }),\n    swr(swrKey),\n    map(({fromCache, value}) => ({fromCache, documents: value})),\n  )\n}\n","import {type ClientPerspective} from '@sanity/client'\nimport {observableCallback} from 'observable-callback'\nimport {useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {concat, fromEvent, merge, of} from 'rxjs'\nimport {\n  catchError,\n  filter,\n  map,\n  mergeMap,\n  scan,\n  share,\n  shareReplay,\n  take,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators'\nimport {\n  DEFAULT_STUDIO_CLIENT_OPTIONS,\n  useClient,\n  useSchema,\n  useSearchMaxFieldDepth,\n  useWorkspace,\n} from 'sanity'\n\nimport {DEFAULT_ORDERING, FULL_LIST_LIMIT, PARTIAL_PAGE_LIMIT} from './constants'\nimport {findStaticTypesInFilter, removePublishedWithDrafts} from './helpers'\nimport {listenSearchQuery} from './listenSearchQuery'\nimport {type DocumentListPaneItem, type SortOrder} from './types'\n\ninterface UseDocumentListOpts {\n  apiVersion?: string\n  filter: string\n  perspective?: ClientPerspective\n  params: Record<string, unknown>\n  searchQuery: string | null\n  sortOrder?: SortOrder\n}\n\ninterface DocumentListState {\n  error: {message: string} | null\n  isLoadingFullList: boolean\n  isLoading: boolean\n  fromCache?: boolean\n  items: DocumentListPaneItem[]\n}\n\nconst INITIAL_QUERY_STATE: DocumentListState = {\n  error: null,\n  isLoading: true,\n  isLoadingFullList: false,\n  fromCache: false,\n  items: [],\n}\n\ninterface UseDocumentListHookValue extends DocumentListState {\n  onRetry: () => void\n  onLoadFullList: () => void\n}\n\n/**\n * @internal\n */\nexport function useDocumentList(opts: UseDocumentListOpts): UseDocumentListHookValue {\n  const {\n    filter: searchFilter,\n    params: paramsProp,\n    sortOrder,\n    searchQuery,\n    perspective,\n    apiVersion,\n  } = opts\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const {strategy: searchStrategy} = useWorkspace().search\n  const schema = useSchema()\n  const maxFieldDepth = useSearchMaxFieldDepth()\n\n  // Get the type name from the filter, if it is a simple type filter.\n  const typeNameFromFilter = useMemo(\n    () => findStaticTypesInFilter(searchFilter, paramsProp),\n    [searchFilter, paramsProp],\n  )\n\n  const [[onRetry$, onRetry]] = useState(() => observableCallback())\n  const [[onFetchFullList$, onLoadFullList]] = useState(() => observableCallback())\n\n  const queryResults$ = useMemo(() => {\n    const listenSearchQueryArgs = {\n      client,\n      filter: searchFilter,\n      limit: PARTIAL_PAGE_LIMIT,\n      params: paramsProp,\n      schema,\n      perspective,\n      searchQuery: searchQuery || '',\n      sort: sortOrder || DEFAULT_ORDERING,\n      staticTypeNames: typeNameFromFilter,\n      maxFieldDepth,\n      searchStrategy,\n    }\n\n    const partialList$ = listenSearchQuery(listenSearchQueryArgs).pipe(\n      shareReplay({refCount: true, bufferSize: 1}),\n    )\n\n    // we want to fetch the full list if the last result of the partial list is at the limit\n    const fullList$ = onFetchFullList$.pipe(\n      withLatestFrom(partialList$),\n      filter(([, result]) => result?.documents.length === PARTIAL_PAGE_LIMIT),\n      // we want to set up the full list listener only once\n      take(1),\n      mergeMap(() =>\n        concat(\n          of({type: 'loadFullList' as const}),\n          listenSearchQuery({...listenSearchQueryArgs, limit: FULL_LIST_LIMIT}).pipe(\n            map((result) => ({type: 'result' as const, result})),\n          ),\n        ),\n      ),\n      share(),\n    )\n\n    // The combined search results from both partial page and full list\n    return merge(\n      partialList$.pipe(\n        map((result) => ({\n          type: 'result' as const,\n          result,\n        })),\n        // when the full list listener kicks off, we want to stop the partial list listener\n        takeUntil(fullList$),\n      ),\n      fullList$,\n    ).pipe(\n      catchError((err: unknown, caught$) => {\n        return concat(\n          of({type: 'error' as const, error: safeError(err)}),\n          merge(fromEvent(window, 'online'), onRetry$).pipe(\n            take(1),\n            mergeMap(() => caught$),\n          ),\n        )\n      }),\n      scan((prev, event) => {\n        if (event.type === 'error') {\n          return {\n            ...prev,\n            error: event.error,\n          }\n        }\n        if (event.type === 'result') {\n          return {\n            ...prev,\n            error: null,\n            fromCache: event.result.fromCache,\n            isLoading: false,\n            items: removePublishedWithDrafts(event.result.documents),\n            isLoadingFullList: false,\n          }\n        }\n        if (event.type === 'loadFullList') {\n          return {\n            ...prev,\n            error: null,\n            isLoadingFullList: true,\n          }\n        }\n        throw new Error('Unexpected')\n      }, INITIAL_QUERY_STATE),\n    )\n  }, [\n    client,\n    searchFilter,\n    paramsProp,\n    schema,\n    perspective,\n    searchQuery,\n    sortOrder,\n    typeNameFromFilter,\n    maxFieldDepth,\n    searchStrategy,\n    onFetchFullList$,\n    onRetry$,\n  ])\n\n  const {error, items, isLoading, fromCache, isLoadingFullList} = useObservable(\n    queryResults$,\n    INITIAL_QUERY_STATE,\n  )\n\n  return {\n    error,\n    onRetry,\n    isLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    isLoadingFullList,\n  }\n}\n\n// todo: candidate for re-use\nconst nonErrorThrownWarning = `[WARNING: This was thrown as a non-error. Only Error instances should be thrown]`\nfunction safeError(thrown: unknown): Error {\n  if (thrown instanceof Error) {\n    return thrown\n  }\n  if (typeof thrown === 'object' && thrown !== null) {\n    if ('message' in thrown && typeof thrown.message === 'string') {\n      return new Error(`${thrown.message} ${nonErrorThrownWarning}`)\n    }\n    return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n  }\n  return new Error(`${String(thrown)} ${nonErrorThrownWarning}`)\n}\n","import {SearchIcon, SpinnerIcon} from '@sanity/icons'\nimport {Box, TextInput} from '@sanity/ui'\nimport {memo, useCallback, useEffect, useMemo, useState} from 'react'\nimport {useObservableEvent} from 'react-rx'\nimport {debounce, map, type Observable, of, tap, timer} from 'rxjs'\nimport {\n  type GeneralPreviewLayoutKey,\n  useActiveReleases,\n  useI18nText,\n  usePerspective,\n  useSchema,\n  useTranslation,\n  useUnique,\n} from 'sanity'\nimport {keyframes, styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../i18n'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {EMPTY_RECORD, FULL_LIST_LIMIT} from './constants'\nimport {DocumentListPaneContent} from './DocumentListPaneContent'\nimport {applyOrderingFunctions, findStaticTypesInFilter} from './helpers'\nimport {useShallowUnique} from './PaneContainer'\nimport {type LoadingVariant, type SortOrder} from './types'\nimport {useDocumentList} from './useDocumentList'\n\n/**\n * @internal\n */\nexport type DocumentListPaneProps = BaseStructureToolPaneProps<'documentList'> & {\n  sortOrder?: SortOrder\n  layout?: Exclude<GeneralPreviewLayoutKey, 'sheetList'>\n}\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0;\n  }\n  50% {\n    opacity: 0.1;\n  }\n  100% {\n    opacity: 0.4;\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst SubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 1500ms linear infinite;\n  opacity: 0.4;\n`\n\nconst DelayedSubtleSpinnerIcon = styled(SpinnerIcon)`\n  animation:\n    ${rotate} 1500ms linear infinite,\n    ${fadeIn} 1000ms linear;\n  opacity: 0.4;\n`\n\n/**\n * @internal\n */\n\nexport const DocumentListPane = memo(function DocumentListPane(props: DocumentListPaneProps) {\n  const {childItemId, isActive, pane, paneKey, sortOrder: sortOrderRaw, layout} = props\n  const schema = useSchema()\n  const releases = useActiveReleases()\n  const {perspectiveStack} = usePerspective()\n  const {displayOptions, options} = pane\n  const {apiVersion, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const showIcons = displayOptions?.showIcons !== false\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const {title} = useI18nText(pane)\n\n  const [searchQuery, setSearchQuery] = useState<string>('')\n  const [searchInputValue, setSearchInputValue] = useState<string>('')\n  const [searchInputElement, setSearchInputElement] = useState<HTMLInputElement | null>(null)\n\n  const sortWithOrderingFn =\n    typeName && sortOrderRaw\n      ? applyOrderingFunctions(sortOrderRaw, schema.get(typeName) as any)\n      : sortOrderRaw\n\n  const sortOrder = useUnique(sortWithOrderingFn)\n\n  const {\n    error,\n    isLoadingFullList,\n    isLoading: documentListIsLoading,\n    items,\n    fromCache,\n    onLoadFullList,\n    onRetry,\n  } = useDocumentList({\n    apiVersion,\n    filter,\n    perspective: perspectiveStack,\n    params,\n    searchQuery: searchQuery?.trim(),\n    sortOrder,\n  })\n\n  const isLoading = documentListIsLoading || releases.loading\n\n  const handleQueryChange = useObservableEvent(\n    (event$: Observable<React.ChangeEvent<HTMLInputElement>>) => {\n      return event$.pipe(\n        map((event) => event.target.value),\n        tap(setSearchInputValue),\n        debounce((value) => (value === '' ? of('') : timer(300))),\n        tap(setSearchQuery),\n      )\n    },\n  )\n\n  const handleClearSearch = useCallback(() => {\n    setSearchQuery('')\n    setSearchInputValue('')\n  }, [])\n\n  const handleSearchKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      if (event.key === 'Escape') {\n        handleClearSearch()\n      }\n    },\n    [handleClearSearch],\n  )\n\n  const [enableSearchSpinner, setEnableSearchSpinner] = useState<string | void>()\n\n  useEffect(() => {\n    if (!enableSearchSpinner && !isLoading) {\n      setEnableSearchSpinner(paneKey)\n    }\n  }, [enableSearchSpinner, isLoading, paneKey])\n\n  useEffect(() => {\n    // Clear search field and disable search spinner\n    // when switching between panes (i.e. when paneKey changes).\n    handleClearSearch()\n    setEnableSearchSpinner()\n  }, [paneKey, handleClearSearch])\n\n  const loadingVariant: LoadingVariant = useMemo(() => {\n    if (isLoading && enableSearchSpinner === paneKey) {\n      return 'spinner'\n    }\n    if (fromCache) {\n      return 'subtle'\n    }\n\n    return 'initial'\n  }, [enableSearchSpinner, fromCache, isLoading, paneKey])\n\n  const textInputIcon = useMemo(() => {\n    if (loadingVariant === 'spinner') {\n      return AnimatedSpinnerIcon\n    }\n    if (searchInputValue && loadingVariant === 'subtle') {\n      return SubtleSpinnerIcon\n    }\n    return SearchIcon\n  }, [loadingVariant, searchInputValue])\n\n  return (\n    <>\n      <Box paddingX={3} paddingBottom={3}>\n        <TextInput\n          aria-label={t('panes.document-list-pane.search-input.aria-label')}\n          autoComplete=\"off\"\n          border={false}\n          clearButton={Boolean(searchQuery)}\n          disabled={Boolean(error)}\n          fontSize={[2, 2, 1]}\n          icon={textInputIcon}\n          iconRight={\n            loadingVariant === 'subtle' && !searchInputValue ? DelayedSubtleSpinnerIcon : null\n          }\n          onChange={handleQueryChange}\n          onClear={handleClearSearch}\n          onKeyDown={handleSearchKeyDown}\n          padding={2}\n          placeholder={t('panes.document-list-pane.search-input.placeholder')}\n          radius={2}\n          ref={setSearchInputElement}\n          spellCheck={false}\n          value={searchInputValue}\n        />\n      </Box>\n      <DocumentListPaneContent\n        childItemId={childItemId}\n        error={error}\n        filterIsSimpleTypeConstraint={!!typeName}\n        hasMaxItems={items.length === FULL_LIST_LIMIT}\n        hasSearchQuery={Boolean(searchQuery)}\n        isActive={isActive}\n        isLazyLoading={isLoadingFullList}\n        isLoading={isLoading}\n        items={items}\n        key={paneKey}\n        layout={layout}\n        loadingVariant={loadingVariant}\n        onEndReached={onLoadFullList}\n        onRetry={onRetry}\n        paneTitle={title}\n        searchInputElement={searchInputElement}\n        showIcons={showIcons}\n      />\n    </>\n  )\n})\n","import {ArrowLeftIcon} from '@sanity/icons'\nimport {memo, type ReactNode, useMemo} from 'react'\nimport {type GeneralPreviewLayoutKey, type InitialValueTemplateItem} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../ui-components'\nimport {\n  BackLink,\n  PaneHeader as StructurePaneHeader,\n  PaneHeaderActions,\n  usePane,\n} from '../../components'\nimport {\n  type PaneMenuItem,\n  type PaneMenuItemGroup,\n  type StructureToolPaneActionHandler,\n} from '../../types'\nimport {useStructureTool} from '../../useStructureTool'\nimport {type SortOrder} from './types'\n\ninterface PaneHeaderProps {\n  contentAfter?: ReactNode\n  index: number\n  initialValueTemplates?: InitialValueTemplateItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  menuItems?: PaneMenuItem[]\n  setLayout: (layout: GeneralPreviewLayoutKey) => void\n  setSortOrder: (sortOrder: SortOrder) => void\n  title: string\n}\n\nexport const PaneHeader = memo(\n  ({\n    contentAfter,\n    index,\n    initialValueTemplates = [],\n    menuItemGroups = [],\n    menuItems = [],\n    setLayout,\n    setSortOrder,\n    title,\n  }: PaneHeaderProps) => {\n    const {features} = useStructureTool()\n    const {collapsed, isLast} = usePane()\n    // Prevent focus if this is the last (non-collapsed) pane.\n    const tabIndex = isLast && !collapsed ? -1 : 0\n\n    const actionHandlers = useMemo((): Record<string, StructureToolPaneActionHandler> => {\n      return {\n        setLayout: ({layout: value}: {layout: GeneralPreviewLayoutKey}) => {\n          setLayout(value)\n        },\n        setSortOrder: (sort: SortOrder) => {\n          setSortOrder(sort)\n        },\n      }\n    }, [setLayout, setSortOrder])\n\n    return (\n      <TooltipDelayGroupProvider>\n        <StructurePaneHeader\n          actions={\n            <PaneHeaderActions\n              initialValueTemplateItems={initialValueTemplates}\n              actionHandlers={actionHandlers}\n              menuItemGroups={menuItemGroups}\n              menuItems={menuItems}\n            />\n          }\n          backButton={\n            features.backButton &&\n            index > 0 && (\n              <Button\n                as={BackLink}\n                data-as=\"a\"\n                icon={ArrowLeftIcon}\n                mode=\"bleed\"\n                tooltipProps={{content: 'Back'}}\n              />\n            )\n          }\n          contentAfter={contentAfter}\n          tabIndex={tabIndex}\n          title={title}\n        />\n      </TooltipDelayGroupProvider>\n    )\n  },\n)\n\nPaneHeader.displayName = 'Memo(PaneHeader)'\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {type SanityDocument} from '@sanity/client'\nimport {Checkbox} from '@sanity/ui'\nimport {type CellContext} from '@tanstack/react-table'\nimport {type MouseEvent, useCallback} from 'react'\n\nexport function DocumentSheetListSelect(props: CellContext<SanityDocument, unknown>) {\n  const {row, table} = props\n\n  const {selectedAnchor, setSelectedAnchor} = table.options.meta || {}\n\n  const handleOnClick = useCallback(\n    (e: MouseEvent<HTMLInputElement>) => {\n      if (e.shiftKey && selectedAnchor !== null && selectedAnchor !== undefined) {\n        const shiftClickIndex = row.index\n        const lowerIndex = shiftClickIndex < selectedAnchor ? shiftClickIndex : selectedAnchor\n        const upperIndex = shiftClickIndex < selectedAnchor ? selectedAnchor : shiftClickIndex\n\n        const additionalSelectedRows = table\n          .getRowModel()\n          .flatRows.slice(lowerIndex, upperIndex + 1)\n          .map(({id}) => id)\n\n        const currentSelectedRows = table.getSelectedRowModel().rows.map(({id}) => id)\n        table.setRowSelection(() =>\n          [...additionalSelectedRows, ...currentSelectedRows].reduce(\n            (nextSelectedRows, rowId) => ({...nextSelectedRows, [rowId]: true}),\n            {},\n          ),\n        )\n      } else if (setSelectedAnchor) {\n        const isRowCurrentlySelected = row.getIsSelected()\n        if (isRowCurrentlySelected) {\n          // about to unselect so invalidate current anchor\n          setSelectedAnchor(null)\n        } else {\n          // override anchor with new selection index\n          setSelectedAnchor(row.index)\n        }\n\n        row.toggleSelected()\n      }\n    },\n    [selectedAnchor, row, setSelectedAnchor, table],\n  )\n\n  return (\n    <Checkbox\n      style={{paddingLeft: 4}}\n      checked={props.row.getIsSelected()}\n      disabled={!props.row.getCanSelect()}\n      // onChange doesn't have shiftKey in event, but want to control this checkbox\n      // need to define noop onChange to suppress the warning\n      // eslint-disable-next-line react/jsx-no-bind\n      onChange={() => null}\n      onClick={handleOnClick}\n    />\n  )\n}\n","import {type SanityDocument} from '@sanity/types'\nimport {type Table} from '@tanstack/react-table'\nimport {type ReactNode, useCallback, useContext, useEffect, useMemo, useState} from 'react'\nimport {DocumentSheetListContext} from 'sanity/_singletons'\n\ninterface DocumentSheetListProviderProps {\n  children?: ReactNode\n  table: Table<SanityDocument>\n}\n\ntype SelectedCellDetails = {\n  colId: string\n  rowIndex: number\n  state: 'focused' | 'selected'\n} | null\n\n/** @internal */\nexport interface DocumentSheetListContextValue {\n  focusAnchorCell: () => void\n  resetFocusSelection: () => void\n  setSelectedAnchorCell: (colId: string, rowIndex: number) => void\n  getStateByCellId: (\n    colId: string,\n    rowIndex: number,\n  ) => 'focused' | 'selectedAnchor' | 'selectedRange' | null\n  submitFocusedCell: () => void\n}\n\n/** @internal */\nexport const useDocumentSheetListContext = (): DocumentSheetListContextValue => {\n  const context = useContext(DocumentSheetListContext)\n\n  if (context === undefined) {\n    throw new Error('useDocumentSheetListContext must be used within an DocumentSheetListProvider')\n  }\n  return context\n}\n\n/** @internal */\nexport function DocumentSheetListProvider({\n  children,\n  table,\n}: DocumentSheetListProviderProps): ReactNode {\n  const [selectedAnchorCellDetails, setSelectedAnchorCellDetails] =\n    useState<SelectedCellDetails>(null)\n  const [selectedRangeCellIndexes, setSelectedRangeCellIndexes] = useState<number[]>([])\n\n  const clearAndSetFocusSelection = useCallback(\n    (nextAnchorDetails: SelectedCellDetails = null) => {\n      if (\n        selectedAnchorCellDetails?.state === 'focused' &&\n        document.activeElement instanceof HTMLElement\n      ) {\n        document.activeElement.blur()\n      }\n\n      setSelectedAnchorCellDetails(nextAnchorDetails)\n      setSelectedRangeCellIndexes([])\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const resetFocusSelection = useCallback(\n    () => clearAndSetFocusSelection(),\n    [clearAndSetFocusSelection],\n  )\n\n  const changeSelectionColumn = useCallback(\n    (direction: 'left' | 'right') => {\n      if (!selectedAnchorCellDetails) return\n\n      const visibleColumns = table.getVisibleLeafColumns()\n      const columnIndexAfterMove =\n        visibleColumns.findIndex((col) => col.id === selectedAnchorCellDetails.colId) +\n        (direction === 'left' ? -1 : 1)\n\n      if (columnIndexAfterMove < 0 || columnIndexAfterMove >= visibleColumns.length) return\n\n      clearAndSetFocusSelection({\n        colId: visibleColumns[columnIndexAfterMove].id,\n        rowIndex: selectedAnchorCellDetails.rowIndex,\n        state: 'selected',\n      })\n    },\n    [clearAndSetFocusSelection, selectedAnchorCellDetails, table],\n  )\n\n  const changeSelectionRange = useCallback(\n    (direction: 'up' | 'down') => {\n      if (!selectedAnchorCellDetails) return\n\n      setSelectedRangeCellIndexes((previousSelection) => {\n        const {rowIndex: anchorIndex} = selectedAnchorCellDetails\n        const getNextIndex = (startingIndex: number) =>\n          startingIndex + (direction === 'down' ? 1 : -1)\n        // if no cells are selected, select the cell in the direction\n        if (!previousSelection.length) {\n          const firstSelectedIndex = getNextIndex(anchorIndex)\n          if (firstSelectedIndex < 0) return []\n          return [firstSelectedIndex]\n        }\n        const lastIndexSelected = previousSelection[previousSelection.length - 1]\n        const nextIndex = getNextIndex(lastIndexSelected)\n\n        // if the cell in the direction is out of bounds, return the previous selection\n        if (nextIndex < 0) return previousSelection\n\n        // if the cell in the direction is the same as the focused cell, deselect all cells\n        if (nextIndex === anchorIndex) return []\n\n        // if the cell in the direction is already selected, deselect the last selected cell\n        if (previousSelection.includes(nextIndex)) {\n          return previousSelection.slice(0, -1)\n        }\n\n        return [...previousSelection, nextIndex]\n      })\n    },\n    [selectedAnchorCellDetails],\n  )\n\n  const setSelectedAnchorCell = useCallback(\n    (colId: string, rowIndex: number) => {\n      clearAndSetFocusSelection({colId, rowIndex, state: 'selected'})\n    },\n    [clearAndSetFocusSelection],\n  )\n\n  const handleEscapePress = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n    if (selectedRangeCellIndexes.length) {\n      // only clear selected range if it exists\n      setSelectedRangeCellIndexes([])\n    } else {\n      const nextAnchorCellDetails: SelectedCellDetails =\n        selectedAnchorCellDetails.state === 'selected'\n          ? null\n          : {\n              ...selectedAnchorCellDetails,\n              state: 'selected',\n            }\n      clearAndSetFocusSelection(nextAnchorCellDetails)\n    }\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails, selectedRangeCellIndexes.length])\n\n  const handleUpDownKey = useCallback(\n    (isShiftKey: boolean, key: string) => {\n      if (!selectedAnchorCellDetails) return\n\n      const direction = key === 'ArrowDown' ? 'down' : 'up'\n      const offset = direction === 'down' ? 1 : -1\n\n      if (isShiftKey) {\n        changeSelectionRange(direction)\n      } else {\n        const newSelectedCellRowIndex = selectedAnchorCellDetails.rowIndex + offset\n        if (newSelectedCellRowIndex < 0) return\n\n        setSelectedAnchorCell(selectedAnchorCellDetails.colId, newSelectedCellRowIndex)\n      }\n    },\n    [changeSelectionRange, selectedAnchorCellDetails, setSelectedAnchorCell],\n  )\n\n  const handleAnchorKeydown = useCallback(\n    (event: KeyboardEvent) => {\n      if (!selectedAnchorCellDetails) return\n\n      const {key, shiftKey} = event\n\n      switch (key) {\n        case 'Shift':\n          break // shift allow should do nothing\n\n        case 'Escape':\n          handleEscapePress()\n          break\n\n        case 'ArrowDown':\n        case 'ArrowUp':\n          event.preventDefault()\n          handleUpDownKey(shiftKey, key)\n          break\n\n        case 'ArrowLeft':\n        case 'ArrowRight':\n          // when cell is focused, arrows should have default behavior\n          // only prevent default when cell is selected\n          if (selectedAnchorCellDetails.state === 'selected') {\n            event.preventDefault()\n            changeSelectionColumn(key === 'ArrowLeft' ? 'left' : 'right')\n          }\n          break\n\n        default:\n          break\n      }\n    },\n    [selectedAnchorCellDetails, handleEscapePress, handleUpDownKey, changeSelectionColumn],\n  )\n\n  const handleAnchorClick = useCallback(\n    (event: MouseEvent) => {\n      if (!selectedAnchorCellDetails) return\n      const isClickInAnchorCell = document\n        .getElementById(\n          `cell-${selectedAnchorCellDetails.colId}-${selectedAnchorCellDetails.rowIndex}`,\n        )\n        ?.contains(event.target as Node)\n\n      if (!isClickInAnchorCell) resetFocusSelection()\n    },\n    [resetFocusSelection, selectedAnchorCellDetails],\n  )\n\n  useEffect(() => {\n    if (selectedAnchorCellDetails) {\n      document.addEventListener('keydown', handleAnchorKeydown)\n      document.addEventListener('click', handleAnchorClick)\n    }\n\n    return () => {\n      if (selectedAnchorCellDetails) {\n        document.removeEventListener('keydown', handleAnchorKeydown)\n        document.removeEventListener('click', handleAnchorClick)\n      }\n    }\n  }, [handleAnchorClick, handleAnchorKeydown, selectedAnchorCellDetails])\n\n  const focusAnchorCell = useCallback(\n    () =>\n      setSelectedAnchorCellDetails((anchorCellDetails) => {\n        if (!anchorCellDetails) return null\n\n        return {...anchorCellDetails, state: 'focused'}\n      }),\n    [],\n  )\n\n  const getStateByCellId = useCallback(\n    (colId: string, rowIndex: number) => {\n      if (selectedAnchorCellDetails?.colId !== colId) return null\n\n      if (selectedAnchorCellDetails.rowIndex === rowIndex)\n        return selectedAnchorCellDetails.state === 'focused' ? 'focused' : 'selectedAnchor'\n\n      if (selectedRangeCellIndexes.includes(rowIndex)) return 'selectedRange'\n\n      return null\n    },\n    [selectedAnchorCellDetails, selectedRangeCellIndexes],\n  )\n\n  const submitFocusedCell = useCallback(() => {\n    if (!selectedAnchorCellDetails) return\n\n    clearAndSetFocusSelection({\n      colId: selectedAnchorCellDetails.colId,\n      rowIndex: selectedAnchorCellDetails.rowIndex + 1,\n      state: 'selected',\n    })\n  }, [clearAndSetFocusSelection, selectedAnchorCellDetails])\n\n  const value = useMemo<DocumentSheetListContextValue>(\n    () => ({\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    }),\n    [\n      focusAnchorCell,\n      resetFocusSelection,\n      setSelectedAnchorCell,\n      getStateByCellId,\n      submitFocusedCell,\n    ],\n  )\n\n  return (\n    <DocumentSheetListContext.Provider value={value}>{children}</DocumentSheetListContext.Provider>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\nimport {type ObjectFieldType} from '@sanity/types'\nimport {Select, TextInput} from '@sanity/ui'\nimport {type Cell, type CellContext, flexRender} from '@tanstack/react-table'\nimport {type MouseEventHandler, useCallback, useEffect, useRef, useState} from 'react'\nimport {type SanityDocument} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {useDocumentSheetListContext} from './DocumentSheetListProvider'\n\nconst DataCell = styled.td<{width: number}>`\n  display: flex;\n  overflow: hidden;\n  box-sizing: border-box;\n  width: ${({width}) => width}px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-bg-color);\n`\n\nconst PinnedDataCell = styled(DataCell)`\n  position: sticky;\n  z-index: 2;\n`\n\ninterface SheetListCellInnerProps extends CellContext<SanityDocument, unknown> {\n  fieldType: ObjectFieldType\n}\n\ntype CellInputElement = HTMLInputElement | HTMLSelectElement\ntype InputRef = CellInputElement | null\n\n/** @internal */\nexport function SheetListCellInner(props: SheetListCellInnerProps) {\n  const {getValue, column, row, fieldType} = props\n  const cellId = `cell-${column.id}-${row.index}`\n  const [renderValue, setRenderValue] = useState<string>(getValue() as string)\n  const [isDirty, setIsDirty] = useState(false)\n  const inputRef = useRef<InputRef>(null)\n  const {\n    focusAnchorCell,\n    resetFocusSelection,\n    setSelectedAnchorCell,\n    getStateByCellId,\n    submitFocusedCell,\n  } = useDocumentSheetListContext()\n  const cellState = getStateByCellId(column.id, row.index)\n\n  const handleOnFocus = useCallback(() => {\n    // reselect in cases where focus achieved without initial mousedown\n    setSelectedAnchorCell(column.id, row.index)\n    focusAnchorCell()\n  }, [column.id, focusAnchorCell, row.index, setSelectedAnchorCell])\n  const {patchDocument} = props.table.options.meta || {}\n\n  const handleProgrammaticFocus = () => {\n    inputRef.current?.focus()\n    if (inputRef.current instanceof HTMLInputElement) {\n      inputRef.current.select()\n    }\n  }\n\n  const handleOnMouseDown: MouseEventHandler<CellInputElement> = (event) => {\n    if (event.detail === 2) {\n      handleProgrammaticFocus()\n    } else {\n      event.preventDefault()\n      setSelectedAnchorCell(column.id, row.index)\n    }\n  }\n\n  const handleOnEnterDown = useCallback(\n    (event: KeyboardEvent) => {\n      const {key} = event\n      if (key === 'Enter') {\n        if (cellState === 'selectedAnchor') handleProgrammaticFocus()\n        if (cellState === 'focused') submitFocusedCell()\n      }\n    },\n    [cellState, submitFocusedCell],\n  )\n\n  const handleOnChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setIsDirty(true)\n    setRenderValue(event.target.value)\n  }\n\n  const handleOnBlur = () => {\n    if (isDirty) {\n      patchDocument?.(row.id, column.id, renderValue)\n      setIsDirty(false)\n    }\n    resetFocusSelection()\n  }\n\n  const handlePaste = useCallback(\n    (event: ClipboardEvent) => {\n      const clipboardData = event.clipboardData?.getData('Text')\n\n      if (typeof clipboardData === 'string' || typeof clipboardData === 'number') {\n        setRenderValue(clipboardData)\n        // patch immediately when pasting\n        patchDocument?.(row.id, column.id, clipboardData)\n      }\n    },\n    [column.id, patchDocument, row.id],\n  )\n\n  const handleCopy = useCallback(() => {\n    navigator.clipboard.writeText(renderValue.toString())\n  }, [renderValue])\n\n  useEffect(() => {\n    if (cellState === 'selectedAnchor' || cellState === 'focused')\n      // only listen for enter key when cell is focused or anchor\n      document.addEventListener('keydown', handleOnEnterDown)\n    if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n      // if cell is selected, paste events should be handled\n      document.addEventListener('paste', handlePaste)\n\n    if (cellState === 'selectedAnchor')\n      // only allow copying when cell is selected anchor\n      document.addEventListener('copy', handleCopy)\n\n    return () => {\n      if (cellState === 'selectedAnchor' || cellState === 'focused')\n        document.removeEventListener('keydown', handleOnEnterDown)\n      if (cellState === 'selectedAnchor' || cellState === 'selectedRange')\n        document.removeEventListener('paste', handlePaste)\n      if (cellState === 'selectedAnchor') document.removeEventListener('copy', handleCopy)\n    }\n  }, [\n    cellId,\n    cellState,\n    column.id,\n    getStateByCellId,\n    handleCopy,\n    handleOnEnterDown,\n    handlePaste,\n    row.index,\n  ])\n\n  const getBorderStyle = () => {\n    if (cellState === 'focused') return '2px solid blue'\n    if (cellState === 'selectedRange') return '1px solid green'\n    if (cellState === 'selectedAnchor') return '1px solid blue'\n\n    return '1px solid transparent'\n  }\n\n  const inputProps = {\n    'onFocus': handleOnFocus,\n    'onBlur': handleOnBlur,\n    'onMouseDown': handleOnMouseDown,\n    'aria-selected': !!cellState,\n    'data-testid': cellId,\n    'id': cellId,\n    'ref': (ref: InputRef) => {\n      inputRef.current = ref\n    },\n  }\n\n  if (fieldType.name === 'boolean') {\n    return (\n      <Select\n        {...inputProps}\n        onChange={() => null}\n        radius={0}\n        style={{\n          boxShadow: 'none',\n          border: getBorderStyle(),\n          padding: 0,\n        }}\n        value={JSON.stringify(renderValue)}\n      >\n        <option value=\"True\">True</option>\n        <option value=\"False\">False</option>\n      </Select>\n    )\n  }\n\n  return (\n    <TextInput\n      {...inputProps}\n      size={0}\n      radius={0}\n      border={false}\n      style={{\n        border: getBorderStyle(),\n        padding: '22px 16px',\n      }}\n      value={\n        typeof renderValue === 'string' || typeof renderValue === 'number'\n          ? renderValue\n          : JSON.stringify(renderValue)\n      }\n      onChange={handleOnChange}\n    />\n  )\n}\n\n/** @internal */\nexport function SheetListCell(cell: Cell<SanityDocument, unknown>) {\n  const isPinned = cell.column.getIsPinned()\n  const Cell = isPinned ? PinnedDataCell : DataCell\n  const borderWidth = isPinned && cell.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <Cell\n      key={cell.row.original._id + cell.id}\n      style={{\n        left: cell.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      width={cell.column.getSize()}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext?.())}\n    </Cell>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isObjectSchemaType, type ObjectSchemaType} from '@sanity/types'\nimport {Box, Checkbox, Flex, Text} from '@sanity/ui'\nimport {\n  type AccessorKeyColumnDef,\n  createColumnHelper,\n  type GroupColumnDef,\n  type VisibilityState,\n} from '@tanstack/react-table'\nimport {useMemo} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  type DocumentPreviewStore,\n  DocumentStatusIndicator,\n  getPreviewStateObservable,\n  type SanityDocument,\n  type SchemaType,\n  useDocumentPreviewStore,\n  useDocumentVersionInfo,\n} from 'sanity'\n\nimport {DocumentSheetListSelect} from './DocumentSheetListSelect'\nimport {SheetListCellInner} from './SheetListCell'\n\nexport const VISIBLE_COLUMN_LIMIT = 5\n\nconst PreviewCell = (props: {\n  documentPreviewStore: DocumentPreviewStore\n  schemaType: SchemaType\n  row: {\n    original: SanityDocument\n  }\n}) => {\n  const {documentPreviewStore, row, schemaType} = props\n  const previewStateObservable = useMemo(\n    () => getPreviewStateObservable(documentPreviewStore, schemaType, row.original._id),\n    [documentPreviewStore, row.original._id, schemaType],\n  )\n\n  const versionsInfo = useDocumentVersionInfo(row.original._id)\n\n  const {snapshot, isLoading} = useObservable(previewStateObservable, {\n    snapshot: null,\n    isLoading: true,\n  })\n  if (isLoading) {\n    return (\n      <Text size={1} muted>\n        Loading...\n      </Text>\n    )\n  }\n  const displayValue = (snapshot?.title ?? 'Untitled') as string\n\n  return (\n    <Flex align=\"center\" gap={3}>\n      <DocumentStatusIndicator\n        draft={versionsInfo.draft}\n        published={versionsInfo.published}\n        versions={undefined}\n      />\n      <Text size={1}>{displayValue}</Text>\n    </Flex>\n  )\n}\n\nconst columnHelper = createColumnHelper<SanityDocument>()\nconst SUPPORTED_FIELDS = ['string', 'number', 'boolean']\n\ntype Columns = (\n  | AccessorKeyColumnDef<SanityDocument, unknown>\n  | GroupColumnDef<SanityDocument, unknown>\n)[]\n\nconst getColsFromSchemaType = (schemaType: ObjectSchemaType, parentalField?: string): Columns => {\n  return schemaType.fields.reduce<Columns>((tableColumns: Columns, field) => {\n    const {type, name} = field\n    if (SUPPORTED_FIELDS.includes(type.name)) {\n      const nextCol = columnHelper.accessor(\n        // accessor must use dot notation for internal tanstack method of reading cell data\n        parentalField ? `${parentalField}.${field.name}` : field.name,\n        {\n          id: parentalField ? `${parentalField}_${field.name}` : field.name,\n          header: field.type.title,\n          enableHiding: true,\n          cell: (info) => <SheetListCellInner {...info} fieldType={type} />,\n        },\n      )\n\n      return [...tableColumns, nextCol]\n    }\n\n    // if first layer nested object\n    if (type.name === 'object' && isObjectSchemaType(type) && !parentalField) {\n      return [\n        ...tableColumns,\n        columnHelper.group({header: name, columns: getColsFromSchemaType(type, field.name)}),\n      ]\n    }\n\n    return tableColumns\n  }, [])\n}\n\n// Type guard function to check if a column is of type GroupColumnDef\nfunction isAccessorKeyColumnDef(\n  column: Columns[number],\n): column is AccessorKeyColumnDef<SanityDocument, unknown> {\n  return 'accessorKey' in column\n}\nfunction isGroupColumnDef(\n  column: AccessorKeyColumnDef<SanityDocument, unknown> | GroupColumnDef<SanityDocument, unknown>,\n): column is GroupColumnDef<SanityDocument, unknown> {\n  return 'columns' in column\n}\n\nconst flatColumns = (cols: Columns): AccessorKeyColumnDef<SanityDocument, unknown>[] => {\n  return cols.flatMap((col) => {\n    if (isAccessorKeyColumnDef(col)) {\n      return col\n    }\n    if (isGroupColumnDef(col)) {\n      return col.columns ? flatColumns(col.columns) : []\n    }\n    return []\n  })\n}\n\nexport function useDocumentSheetColumns(documentSchemaType?: ObjectSchemaType) {\n  const documentPreviewStore = useDocumentPreviewStore()\n\n  const columns: Columns = useMemo(() => {\n    if (!documentSchemaType) {\n      return []\n    }\n    return [\n      columnHelper.display({\n        id: 'selected',\n        enableHiding: false,\n        header: (info) => (\n          <Box>\n            <Checkbox\n              style={{paddingLeft: 4}}\n              indeterminate={info.table.getIsSomeRowsSelected()}\n              onChange={info.table.getToggleAllPageRowsSelectedHandler()}\n            />\n            {/* eslint-disable-next-line i18next/no-literal-string */}\n            {info.table.getSelectedRowModel().rows.length} selected\n          </Box>\n        ),\n        cell: DocumentSheetListSelect,\n      }),\n      columnHelper.accessor('Preview', {\n        enableHiding: false,\n        id: 'Preview',\n        cell: (info) => {\n          return (\n            <PreviewCell\n              {...info}\n              documentPreviewStore={documentPreviewStore}\n              schemaType={documentSchemaType}\n            />\n          )\n        },\n      }),\n      ...getColsFromSchemaType(documentSchemaType),\n    ]\n  }, [documentPreviewStore, documentSchemaType])\n\n  const [initialColumnsVisibility]: [VisibilityState, number] = useMemo(\n    () =>\n      flatColumns(columns).reduce<[VisibilityState, number]>(\n        ([accCols, countAllowedVisible], column) => {\n          if (!column.id) throw new Error('Column must have an id')\n          const visibilityKey = column.id\n\n          // this column is always visible\n          if (!column.enableHiding) {\n            return [{...accCols, [visibilityKey]: true}, countAllowedVisible]\n          }\n\n          // have already reached column visibility limit, hide column by default\n          if (countAllowedVisible === VISIBLE_COLUMN_LIMIT) {\n            return [{...accCols, [visibilityKey]: false}, countAllowedVisible]\n          }\n\n          return [{...accCols, [visibilityKey]: true}, countAllowedVisible + 1]\n        },\n        [{}, 0],\n      ),\n    [columns],\n  )\n\n  return {columns, initialColumnsVisibility}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {Box, Checkbox, Flex, Menu, Stack, Text} from '@sanity/ui'\nimport {type Column, type Table} from '@tanstack/react-table'\nimport {useCallback} from 'react'\nimport {type SanityDocument, useTranslation} from 'sanity'\n\nimport {Button, MenuButton} from '../../../../ui-components'\nimport {VISIBLE_COLUMN_LIMIT} from './useDocumentSheetColumns'\n\ntype ColumnsControlProps = {\n  table: Table<SanityDocument>\n}\n\nexport function ColumnsControl({table}: ColumnsControlProps) {\n  const {t} = useTranslation()\n  const isVisibleLimitReached =\n    table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length >= VISIBLE_COLUMN_LIMIT\n\n  const setInitialColumns = useCallback(() => {\n    table.resetColumnVisibility()\n  }, [table])\n\n  const handleColumnOnChange = (column: Column<SanityDocument, unknown>) => () => {\n    column.toggleVisibility()\n  }\n\n  const getColumnVisibilityDisabled = (column: Column<SanityDocument, unknown>) => {\n    const isColumnVisible = column.getIsVisible()\n    const isSingleColumnVisible =\n      table.getVisibleLeafColumns().filter((col) => col.getCanHide()).length === 1\n\n    return (isVisibleLimitReached && !isColumnVisible) || (isSingleColumnVisible && isColumnVisible)\n  }\n\n  return (\n    <MenuButton\n      button={<Button mode=\"bleed\" text={t('sheet-list.edit-columns')} />}\n      id=\"columns-control\"\n      menu={\n        <Menu padding={3} paddingTop={4} style={{width: 240}}>\n          <Flex direction=\"column\" height=\"fill\" gap={3}>\n            <Text weight=\"semibold\" size={1}>\n              {t('sheet-list.select-fields')}\n            </Text>\n            <Flex style={{flex: '1 1 auto', maxHeight: 320, overflowY: 'scroll'}}>\n              <Stack>\n                {table\n                  .getAllLeafColumns()\n                  .filter((column) => column.getCanHide())\n                  .map((column) => (\n                    <Flex key={column.id} marginY={2} align=\"center\">\n                      <Checkbox\n                        readOnly={getColumnVisibilityDisabled(column)}\n                        checked={column.getIsVisible()}\n                        onChange={handleColumnOnChange(column)}\n                        id={`col-visibility-${column.id}`}\n                        style={{display: 'block'}}\n                      />\n                      <Box flex={1} paddingLeft={3}>\n                        <Text size={1}>\n                          <label htmlFor={`col-visibility-${column.id}`}>\n                            {column.columnDef.header?.toString()}\n                          </label>\n                        </Text>\n                      </Box>\n                    </Flex>\n                  ))}\n              </Stack>\n            </Flex>\n            <Button\n              width=\"fill\"\n              mode=\"ghost\"\n              text={t('sheet-list.reset-columns')}\n              onClick={setInitialColumns}\n            />\n          </Flex>\n        </Menu>\n      }\n      placement=\"bottom\"\n      popover={{portal: true}}\n    />\n  )\n}\n","import {Flex} from '@sanity/ui'\nimport {Filters, SearchHeader, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nconst SearchContainer = styled(Flex)`\n  flex-shrink: 0;\n`\n\nexport function DocumentSheetListFilter() {\n  const {\n    state: {filtersVisible},\n  } = useSearchState()\n\n  return (\n    <SearchContainer>\n      <SearchHeader />\n      {filtersVisible && <Filters showTypeFilter={false} />}\n    </SearchContainer>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {CloseIcon, EllipsisHorizontalIcon} from '@sanity/icons'\nimport {type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Menu, Text} from '@sanity/ui'\nimport {flexRender, type Header as HeaderType, type HeaderGroup} from '@tanstack/react-table'\nimport {useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, MenuButton, MenuItem, Tooltip} from '../../../../ui-components'\n\nconst Header = styled.th<{width: number}>`\n  margin: 16px;\n  z-index: 1;\n  padding: 22px 0px;\n  border-top: 1px solid var(--card-border-color);\n  background-color: var(--card-badge-default-bg-color);\n  box-sizing: border-box;\n  text-align: left;\n  width: ${({width}) => width}px;\n  max-width: ${({width}) => width}px;\n`\n\nconst PinnedHeader = styled(Header)`\n  position: sticky;\n  z-index: 2;\n`\n\nconst HoverMenu = styled.div`\n  visibility: hidden;\n\n  ${Header}:hover & {\n    visibility: visible;\n  }\n`\n\ntype DocumentSheetListHeaderProps = {\n  header: HeaderType<SanityDocument, unknown>\n  headerGroup: HeaderGroup<SanityDocument>\n}\n\nexport function DocumentSheetListHeader(props: DocumentSheetListHeaderProps) {\n  const {header, headerGroup} = props\n  const {t} = useTranslation()\n\n  const isPinned = header.column.getIsPinned()\n\n  const headerTitle =\n    headerGroup.depth > 0 && !header.column.parent ? null : (\n      <Text size={1} weight=\"semibold\" textOverflow=\"ellipsis\">\n        {flexRender(header.column.columnDef.header, header.getContext())}\n      </Text>\n    )\n\n  const HeaderTag = isPinned ? PinnedHeader : Header\n\n  const canShowHeaderMenu =\n    header.column.getCanHide() &&\n    (headerGroup.depth === 0 ? !header.column.columns.length : header.column.parent)\n\n  const borderWidth = isPinned && header.column.getIsLastColumn('left') ? 2 : 1\n\n  return (\n    <HeaderTag\n      style={{\n        left: header.column.getStart('left') ?? undefined,\n        borderRight: `${borderWidth}px solid var(--card-border-color)`,\n      }}\n      key={header.id}\n      data-testid={`header-${header.id}`}\n      width={header.getSize()}\n    >\n      <Flex justify=\"space-between\" marginX={2} align=\"baseline\">\n        <Tooltip delay={500} content={headerTitle}>\n          <Box style={{boxSizing: 'border-box'}} marginLeft={3} marginRight={3}>\n            {headerTitle}\n          </Box>\n        </Tooltip>\n        {canShowHeaderMenu && (\n          <HoverMenu>\n            <MenuButton\n              button={\n                <Button\n                  tooltipProps={{content: 'Open field menu'}}\n                  mode=\"bleed\"\n                  icon={EllipsisHorizontalIcon}\n                  data-testid=\"field-menu-button\"\n                />\n              }\n              id=\"field menu\"\n              popover={{placement: 'bottom-end'}}\n              menu={\n                <Menu>\n                  <MenuItem\n                    text={t('sheet-list.hide-field')}\n                    icon={CloseIcon}\n                    onClick={() => header.column.toggleVisibility()}\n                  />\n                </Menu>\n              }\n            />\n          </HoverMenu>\n        )}\n      </Flex>\n    </HeaderTag>\n  )\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\n/* eslint-disable i18next/no-literal-string */\n/* eslint-disable @sanity/i18n/no-attribute-string-literals */\n/* eslint-disable react/jsx-no-bind */\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  DoubleChevronLeftIcon,\n  DoubleChevronRightIcon,\n} from '@sanity/icons'\nimport {Flex, Text} from '@sanity/ui'\nimport {type Table} from '@tanstack/react-table'\nimport {type SanityDocument} from 'sanity'\n\nimport {Button, TooltipDelayGroupProvider} from '../../../../ui-components'\n\nexport function DocumentSheetListPaginator({table}: {table: Table<SanityDocument>}) {\n  return (\n    <TooltipDelayGroupProvider>\n      <Flex gap={3} align={'center'}>\n        <Button\n          onClick={() => table.setPageIndex(0)}\n          disabled={!table.getCanPreviousPage()}\n          icon={DoubleChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to first page',\n          }}\n        />\n        <Button\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n          icon={ChevronLeftIcon}\n          tooltipProps={{\n            content: 'Go to previous page',\n          }}\n        />\n        <Text style={{whiteSpace: 'nowrap'}}>\n          {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}\n        </Text>\n\n        <Button\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n          icon={ChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to next page',\n          }}\n        />\n        <Button\n          onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n          disabled={!table.getCanNextPage()}\n          icon={DoubleChevronRightIcon}\n          tooltipProps={{\n            content: 'Go to last page',\n          }}\n        />\n        <select\n          value={table.getState().pagination.pageSize}\n          onChange={(e) => {\n            table.setPageSize(Number(e.target.value))\n          }}\n        >\n          {[25, 50, 100].map((pageSize) => (\n            <option key={pageSize} value={pageSize}>\n              {pageSize}\n            </option>\n          ))}\n        </select>\n      </Flex>\n    </TooltipDelayGroupProvider>\n  )\n}\n","import {type ListenEvent, type ListenOptions} from '@sanity/client'\nimport {useCallback, useEffect, useMemo, useReducer, useState} from 'react'\nimport {catchError, of} from 'rxjs'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getDraftId, type SanityDocument, useClient} from 'sanity'\n\ninterface DocumentDeletedAction {\n  id: string\n  type: 'DOCUMENT_DELETED'\n}\n\ninterface DocumentUpdatedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_UPDATED'\n}\n\ninterface DocumentsSetAction {\n  documents: SanityDocument[]\n  type: 'DOCUMENTS_SET'\n}\n\ninterface DocumentReceivedAction {\n  payload: SanityDocument\n  type: 'DOCUMENT_RECEIVED'\n}\n\nexport type DocumentsReducerAction =\n  | DocumentDeletedAction\n  | DocumentUpdatedAction\n  | DocumentsSetAction\n  | DocumentReceivedAction\n\nexport interface DocumentsReducerState {\n  documents: Record<string, SanityDocument>\n}\n\nfunction createDocumentsSet(documents: SanityDocument[]) {\n  const documentsById = documents.reduce((acc, doc) => ({...acc, [doc._id]: doc}), {})\n  return documentsById\n}\n\nfunction documentsReducer(\n  state: DocumentsReducerState,\n  action: DocumentsReducerAction,\n): DocumentsReducerState {\n  switch (action.type) {\n    case 'DOCUMENTS_SET': {\n      // Create an object with the documents id as key\n      const documents = createDocumentsSet(action.documents)\n\n      return {\n        ...state,\n        documents: documents,\n      }\n    }\n\n    case 'DOCUMENT_RECEIVED': {\n      const nextDocumentResult = action.payload as SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [nextDocumentResult._id]: nextDocumentResult,\n        },\n      }\n    }\n\n    case 'DOCUMENT_DELETED': {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const {[action.id]: _, ...restDocuments} = state.documents\n\n      return {\n        ...state,\n        documents: restDocuments,\n      }\n    }\n\n    case 'DOCUMENT_UPDATED': {\n      const updatedDocument = action.payload\n      const id = updatedDocument._id as string\n      const document = state.documents[id]\n\n      const nextDocument = {\n        // Add existing document data\n        ...document,\n        // Add incoming document data\n        ...updatedDocument,\n      } satisfies SanityDocument\n\n      return {\n        ...state,\n        documents: {\n          ...state.documents,\n          [id]: nextDocument,\n        },\n      }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst LISTEN_OPTIONS: ListenOptions = {\n  events: ['welcome', 'mutation', 'reconnect'],\n  includeResult: true,\n  visibility: 'query',\n  includeAllVersions: true,\n  tag: 'document-sheet-list-store',\n}\n\n/**\n * TODO:\n * [] Lazy load more documents, reduce initial fetch.\n * [] Add support for sorting and filtering.\n * []  Make a projection of the query according to the schema. e.g. get only the primitive fields and the _id to reduce the data payload.\n */\nexport function useDocumentSheetListStore({\n  filter,\n  params,\n  apiVersion,\n}: {\n  filter: string\n  params?: Record<string, unknown>\n  apiVersion?: string\n}) {\n  const QUERY = `*[${filter}][0...2000]`\n  const client = useClient({\n    ...DEFAULT_STUDIO_CLIENT_OPTIONS,\n    apiVersion: apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n  })\n  const [state, dispatch] = useReducer(documentsReducer, {\n    documents: {},\n  })\n  const [isLoading, setIsLoading] = useState<boolean>(client !== null)\n  const [error, setError] = useState<Error | null>(null)\n\n  const initialFetch = useCallback(async () => {\n    if (!client) {\n      setIsLoading(false)\n      return\n    }\n    try {\n      const res = await client.fetch(QUERY, params)\n      dispatch({type: 'DOCUMENTS_SET', documents: res})\n      setIsLoading(false)\n    } catch (err) {\n      setError(err)\n    }\n  }, [client, params, QUERY])\n\n  const handleListenerEvent = useCallback(\n    async (event: ListenEvent<Record<string, SanityDocument>>) => {\n      // Fetch all documents on initial connection\n      if (event.type === 'welcome') {\n        setIsLoading(true)\n        await initialFetch()\n        setIsLoading(false)\n      }\n\n      // The reconnect event means that we are trying to reconnect to the realtime listener.\n      // In this case we set loading to true to indicate that we're trying to\n      // reconnect. Once a connection has been established, the welcome event\n      // will be received and we'll fetch all documents again (above).\n      if (event.type === 'reconnect') {\n        setIsLoading(true)\n      }\n\n      // Handle mutations (create, update, delete) from the realtime listener\n      // and update the documents store accordingly\n      if (event.type === 'mutation') {\n        if (event.transition === 'appear') {\n          const nextDocument = event.result as SanityDocument | undefined\n\n          if (nextDocument) {\n            dispatch({\n              type: 'DOCUMENT_RECEIVED',\n              payload: nextDocument,\n            })\n          }\n        }\n\n        if (event.transition === 'disappear') {\n          dispatch({type: 'DOCUMENT_DELETED', id: event.documentId})\n        }\n\n        if (event.transition === 'update') {\n          const updatedDocument = event.result as SanityDocument | undefined\n\n          if (updatedDocument) {\n            dispatch({\n              type: 'DOCUMENT_UPDATED',\n              payload: updatedDocument,\n            })\n          }\n        }\n      }\n    },\n    [initialFetch],\n  )\n\n  const listener$ = useMemo(() => {\n    if (!client) return of()\n\n    const events$ = client.observable.listen(QUERY, params, LISTEN_OPTIONS).pipe(\n      catchError((err) => {\n        setError(err)\n        return of(err)\n      }),\n    )\n\n    return events$\n  }, [client, params, QUERY])\n\n  useEffect(() => {\n    const sub = listener$.subscribe(handleListenerEvent)\n\n    return () => {\n      sub?.unsubscribe()\n    }\n  }, [handleListenerEvent, listener$])\n\n  // Contemplate that we could have drafts and live documents here, merge them.\n  const dataAsArray = useMemo(() => {\n    // Joins the drafts and the live documents\n    const uniques = Object.keys(state.documents).reduce(\n      (acc: {[key: string]: SanityDocument}, key) => {\n        const document = state.documents[key]\n        const isDraft = document._id === getDraftId(document._id)\n        const id = isDraft ? document._id : getDraftId(document._id)\n        // If we already have the document, and this document is not the draft one, it means\n        // the draft hast already been added to the list, so we skip it.\n        if (acc[id] && !isDraft) {\n          return acc\n        }\n        acc[id] = document\n        return acc\n      },\n      {},\n    )\n    return Object.values(uniques)\n  }, [state.documents])\n\n  return {\n    data: dataAsArray,\n    isLoading,\n    error,\n  }\n}\n","import {useMemo} from 'react'\nimport {getPublishedId, useSearchState} from 'sanity'\n\nimport {useDocumentSheetListStore} from './useDocumentSheetListStore'\n\ninterface DocumentSheetListOptions {\n  /** The schemaType.name  */\n  typeName: string\n}\n\nexport function useDocumentSheetList({typeName}: DocumentSheetListOptions) {\n  const {state} = useSearchState()\n\n  const items = useMemo(() => {\n    const map = new Map()\n    state.result.hits.forEach((h) => map.set(getPublishedId(h.hit._id), h.hit))\n    return map\n  }, [state.result.hits])\n\n  // The store is listening to all the documents that match with the _type filter.\n  const {data, isLoading} = useDocumentSheetListStore({\n    filter: `_type == \"${typeName}\"`,\n  })\n\n  // Only return the documents that match with the serverSide filter items.\n  const documents = useMemo(() => {\n    return data.filter((doc) => items.has(getPublishedId(doc._id)))\n  }, [data, items])\n\n  return {data: documents, isLoading}\n}\n","'use no memo'\n// The `use no memo` directive is due to a known issue with react-table and react compiler: https://github.com/TanStack/table/issues/5567\n\nimport {isDocumentSchemaType, type ObjectSchemaType, type SanityDocument} from '@sanity/types'\nimport {Box, Flex, Text} from '@sanity/ui'\nimport {\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  type Row,\n  useReactTable,\n} from '@tanstack/react-table'\nimport {useCallback, useEffect, useState} from 'react'\nimport {SearchProvider, useSchema, useSearchState} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {type BaseStructureToolPaneProps} from '../../types'\nimport {ColumnsControl} from './ColumnsControl'\nimport {DocumentSheetListFilter} from './DocumentSheetListFilter'\nimport {DocumentSheetListHeader} from './DocumentSheetListHeader'\nimport {DocumentSheetListPaginator} from './DocumentSheetListPaginator'\nimport {DocumentSheetListProvider} from './DocumentSheetListProvider'\nimport {SheetListCell} from './SheetListCell'\nimport {useDocumentSheetColumns} from './useDocumentSheetColumns'\nimport {useDocumentSheetList} from './useDocumentSheetList'\n\ntype DocumentSheetListPaneProps = BaseStructureToolPaneProps<'documentList'>\n\nconst PaneContainer = styled(Flex)`\n  height: 100%;\n`\nconst TableContainer = styled.div`\n  overflow: auto; //our scrollable table container\n  position: relative; //needed for sticky header\n`\nconst Table = styled.table`\n  border-collapse: separate;\n  border-spacing: 0;\n  font-family: arial, sans-serif;\n  white-space: nowrap;\n  width: 100%;\n  border: 1px solid lightgray;\n\n  thead {\n    display: grid;\n    position: sticky;\n    top: 0;\n    z-index: 10;\n  }\n  tr {\n    padding: 0;\n  }\n  tr:last-child {\n    border-bottom: none;\n  }\n`\n\nfunction DocumentSheetListPaneInner({\n  documentSchemaType,\n}: DocumentSheetListPaneProps & {documentSchemaType: ObjectSchemaType}) {\n  const {dispatch, state} = useSearchState()\n  const {columns, initialColumnsVisibility} = useDocumentSheetColumns(documentSchemaType)\n  const {data} = useDocumentSheetList({\n    typeName: documentSchemaType.name,\n  })\n  const [selectedAnchor, setSelectedAnchor] = useState<number | null>(null)\n\n  const totalRows = state.result.hits.length\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    // Avoids resetting the page index when the data changes, e.g. a mutation is received\n    autoResetPageIndex: false,\n    initialState: {\n      columnPinning: {left: ['selected', 'Preview']},\n      pagination: {pageSize: 25},\n      columnVisibility: initialColumnsVisibility,\n    },\n    getRowId: (row) => row._id,\n    meta: {\n      selectedAnchor,\n      setSelectedAnchor,\n      patchDocument: (documentId, fieldId, value) => null,\n    },\n  })\n\n  const {rows} = table.getRowModel()\n\n  useEffect(() => {\n    dispatch({type: 'TERMS_TYPE_ADD', schemaType: documentSchemaType})\n    return () => {\n      dispatch({type: 'TERMS_TYPE_REMOVE', schemaType: documentSchemaType})\n    }\n  }, [documentSchemaType, dispatch])\n\n  const renderRow = useCallback((row: Row<SanityDocument>) => {\n    return (\n      <Box\n        as=\"tr\"\n        key={row.original._id + row.id}\n        paddingY={2}\n        style={{display: 'flex', width: '100%'}}\n      >\n        {row.getVisibleCells().map((cell) => (\n          <SheetListCell {...cell} key={row.original._id + cell.id} />\n        ))}\n      </Box>\n    )\n  }, [])\n\n  const rowsCount = `Total: ${totalRows} rows, showing ${rows.length} rows`\n  return (\n    <PaneContainer direction=\"column\" paddingX={3} data-testid=\"document-sheet-list-pane\">\n      <Flex direction=\"row\" align=\"center\" paddingY={3} paddingX={1} justify=\"space-between\">\n        <Flex direction=\"row\" align=\"center\">\n          <DocumentSheetListFilter />\n          <Text size={0} muted>\n            {rowsCount}\n          </Text>\n        </Flex>\n        <ColumnsControl table={table} />\n      </Flex>\n      <TableContainer>\n        <DocumentSheetListProvider table={table}>\n          <Table>\n            <thead>\n              {table.getHeaderGroups().map((headerGroup) => (\n                <Box as=\"tr\" key={headerGroup.id}>\n                  {headerGroup.headers.map((header) => (\n                    <DocumentSheetListHeader\n                      key={header.id}\n                      header={header}\n                      headerGroup={headerGroup}\n                    />\n                  ))}\n                </Box>\n              ))}\n            </thead>\n            <tbody>{table.getRowModel().rows.map(renderRow)}</tbody>\n          </Table>\n        </DocumentSheetListProvider>\n      </TableContainer>\n      <Flex justify={'flex-end'} padding={3} gap={4} paddingY={5}>\n        <DocumentSheetListPaginator table={table} />\n      </Flex>\n    </PaneContainer>\n  )\n}\n\nexport function DocumentSheetListPane(props: DocumentSheetListPaneProps) {\n  const schema = useSchema()\n  const typeName = props.pane.schemaTypeName\n\n  const schemaType = schema.get(typeName)\n  if (!schemaType || !isDocumentSchemaType(schemaType)) {\n    throw new Error(`Schema type \"${typeName}\" not found or not a document schema`)\n  }\n  return (\n    <SearchProvider>\n      <DocumentSheetListPaneInner {...props} documentSchemaType={schemaType} />\n    </SearchProvider>\n  )\n}\n","import {Card, Code} from '@sanity/ui'\nimport {isEqual} from 'lodash'\nimport {memo, useMemo, useState} from 'react'\nimport {\n  EMPTY_ARRAY,\n  type GeneralDocumentListLayoutKey,\n  SourceProvider,\n  useI18nText,\n  useSource,\n} from 'sanity'\nimport shallowEquals from 'shallow-equals'\n\nimport {Pane} from '../../components/pane'\nimport {_DEBUG} from '../../constants'\nimport {type PaneMenuItem} from '../../types'\nimport {useStructureToolSetting} from '../../useStructureToolSetting'\nimport {type BaseStructureToolPaneProps} from '../types'\nimport {DEFAULT_ORDERING, EMPTY_RECORD} from './constants'\nimport {DocumentListPane} from './DocumentListPane'\nimport {findStaticTypesInFilter} from './helpers'\nimport {PaneHeader} from './PaneHeader'\nimport {DocumentSheetListPane} from './sheetList/DocumentSheetListPane'\nimport {type SortOrder} from './types'\n\nconst addSelectedStateToMenuItems = (options: {\n  menuItems?: PaneMenuItem[]\n  sortOrderRaw?: SortOrder\n  layout?: GeneralDocumentListLayoutKey\n}) => {\n  const {menuItems, sortOrderRaw, layout} = options\n\n  return menuItems?.map((item) => {\n    if (item.params?.layout) {\n      return {\n        ...item,\n        selected: layout === item.params?.layout,\n      }\n    }\n\n    if (item?.params?.by) {\n      return {\n        ...item,\n        selected: isEqual(sortOrderRaw?.by, item?.params?.by || EMPTY_ARRAY),\n      }\n    }\n\n    return {...item, selected: false}\n  })\n}\n\nexport function useShallowUnique<ValueType>(value: ValueType): ValueType {\n  const [previous, setPrevious] = useState<ValueType>(value)\n  if (!shallowEquals(previous, value)) {\n    setPrevious(value)\n    return value\n  }\n  return previous\n}\n\n/**\n * @internal\n */\nexport const PaneContainer = memo(function PaneContainer(\n  props: BaseStructureToolPaneProps<'documentList'>,\n) {\n  const {index, isSelected, pane, paneKey} = props\n  const {name: parentSourceName} = useSource()\n\n  const {\n    defaultLayout = 'default',\n    initialValueTemplates = EMPTY_ARRAY,\n    menuItemGroups,\n    menuItems,\n    options,\n  } = pane\n  const {defaultOrdering = EMPTY_ARRAY, filter} = options\n  const params = useShallowUnique(options.params || EMPTY_RECORD)\n  const sourceName = pane.source\n  const typeName = useMemo(() => {\n    const staticTypes = findStaticTypesInFilter(filter, params)\n    if (staticTypes?.length === 1) return staticTypes[0]\n    return null\n  }, [filter, params])\n\n  const [layout, setLayout] = useStructureToolSetting<GeneralDocumentListLayoutKey>(\n    'layout',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultLayout,\n  )\n\n  const {title} = useI18nText(pane)\n\n  // Ensure that we use the defaultOrdering value from structure builder if any as the default\n  const defaultSortOrder = useMemo(() => {\n    return defaultOrdering?.length > 0 ? {by: defaultOrdering} : DEFAULT_ORDERING\n  }, [defaultOrdering])\n\n  const [sortOrderRaw, setSortOrder] = useStructureToolSetting<SortOrder>(\n    'sort-order',\n    typeName ?? pane.id, //pane.id for anything that is not documentTypeList\n    defaultSortOrder,\n  )\n\n  const menuItemsWithSelectedState = useMemo(\n    () =>\n      addSelectedStateToMenuItems({\n        menuItems,\n        sortOrderRaw,\n        layout,\n      }),\n    [layout, menuItems, sortOrderRaw],\n  )\n\n  const isSheetListLayout = layout === 'sheetList'\n  const paneLayout = isSheetListLayout ? (\n    <DocumentSheetListPane {...props} key={props.pane.id} />\n  ) : (\n    <DocumentListPane {...props} sortOrder={sortOrderRaw} layout={layout} />\n  )\n\n  return (\n    <SourceProvider name={sourceName || parentSourceName}>\n      <Pane\n        data-ui=\"DocumentListPane\"\n        id={paneKey}\n        minWidth={320}\n        {...(isSheetListLayout ? {} : {currentMaxWidth: 350, maxWidth: 640})}\n        selected={isSelected}\n      >\n        {_DEBUG && (\n          <Card padding={4} tone=\"transparent\">\n            <Code>{pane.source || '(none)'}</Code>\n          </Card>\n        )}\n\n        <PaneHeader\n          index={index}\n          initialValueTemplates={initialValueTemplates}\n          menuItemGroups={menuItemGroups}\n          menuItems={menuItemsWithSelectedState}\n          setLayout={setLayout}\n          setSortOrder={setSortOrder}\n          title={title}\n        />\n        {paneLayout}\n      </Pane>\n    </SourceProvider>\n  )\n})\nPaneContainer.displayName = 'Memo(PaneContainer)'\n","import {type SerializePath} from './StructureNodes'\n\n/** @internal */\nexport class SerializeError extends Error {\n  public readonly path: SerializePath\n  public helpId?: HELP_URL\n\n  constructor(\n    message: string,\n    parentPath: SerializePath,\n    pathSegment: string | number | undefined,\n    hint?: string,\n  ) {\n    super(message)\n    this.name = 'SerializeError'\n    const segment = typeof pathSegment === 'undefined' ? '<unknown>' : `${pathSegment}`\n    this.path = (parentPath || []).concat(hint ? `${segment} (${hint})` : segment)\n  }\n\n  withHelpUrl(id: HELP_URL): SerializeError {\n    this.helpId = id\n    return this\n  }\n}\n\n/** @internal */\nexport enum HELP_URL {\n  ID_REQUIRED = 'structure-node-id-required',\n  TITLE_REQUIRED = 'structure-title-required',\n  FILTER_REQUIRED = 'structure-filter-required',\n  INVALID_LIST_ITEM = 'structure-invalid-list-item',\n  COMPONENT_REQUIRED = 'structure-view-component-required',\n  DOCUMENT_ID_REQUIRED = 'structure-document-id-required',\n  DOCUMENT_TYPE_REQUIRED = 'structure-document-type-required',\n  SCHEMA_TYPE_REQUIRED = 'structure-schema-type-required',\n  SCHEMA_TYPE_NOT_FOUND = 'structure-schema-type-not-found',\n  LIST_ITEMS_MUST_BE_ARRAY = 'structure-list-items-must-be-array',\n  QUERY_PROVIDED_FOR_FILTER = 'structure-query-provided-for-filter',\n  ACTION_OR_INTENT_REQUIRED = 'structure-action-or-intent-required',\n  LIST_ITEM_IDS_MUST_BE_UNIQUE = 'structure-list-item-ids-must-be-unique',\n  ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE = 'structure-action-and-intent-mutually-exclusive',\n  API_VERSION_REQUIRED_FOR_CUSTOM_FILTER = 'structure-api-version-required-for-custom-filter',\n}\n","import {type SortOrdering} from '@sanity/types'\n\nimport {structureLocaleNamespace} from '../i18n'\n\nexport const ORDER_BY_UPDATED_AT: SortOrdering = {\n  title: 'Last edited',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.last-edited',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastEditedDesc',\n  by: [{field: '_updatedAt', direction: 'desc'}],\n}\n\nexport const ORDER_BY_CREATED_AT: SortOrdering = {\n  title: 'Created',\n  i18n: {\n    title: {\n      key: 'menu-items.sort-by.created',\n      ns: structureLocaleNamespace,\n    },\n  },\n  name: 'lastCreatedDesc',\n  by: [{field: '_createdAt', direction: 'desc'}],\n}\n\nexport const DEFAULT_SELECTED_ORDERING_OPTION = ORDER_BY_UPDATED_AT\n\nexport const DEFAULT_ORDERING_OPTIONS: SortOrdering[] = [\n  ORDER_BY_UPDATED_AT, // _updatedAt\n  ORDER_BY_CREATED_AT, // _createdAt\n]\n","import {SortIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrdering, type SortOrderingItem} from '@sanity/types'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type Intent} from './Intent'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {DEFAULT_ORDERING_OPTIONS} from './Sort'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getExtendedProjection} from './util/getExtendedProjection'\n\n/** @internal */\nexport function maybeSerializeMenuItem(\n  item: MenuItem | MenuItemBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItem {\n  return item instanceof MenuItemBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Menu item action type\n * @public */\nexport type MenuItemActionType =\n  | string\n  | ((params: Record<string, string> | undefined, scope?: any) => void)\n\n/**\n * Menu items parameters\n *\n * @public */\nexport type MenuItemParamsType = Record<string, string | unknown | undefined>\n\n/**\n * Interface for menu items\n *\n * @public */\nexport interface MenuItem {\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /**\n   * Menu Item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here as a fallback if no i18n key is\n   * provided and compatibility with older plugins\n   */\n  title: string\n  /** Menu Item action */\n  action?: MenuItemActionType\n  /** Menu Item intent */\n  intent?: Intent\n  /** Menu Item group */\n  group?: string\n  // TODO: align these with TemplateItem['icon']\n  /** Menu Item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** Menu Item parameters. See {@link MenuItemParamsType} */\n  params?: MenuItemParamsType\n  /** Determine if it will show the MenuItem as action */\n  showAsAction?: boolean\n}\n\n/**\n * Partial menu items\n * @public\n */\nexport type PartialMenuItem = Partial<MenuItem>\n\n/**\n * Class for building menu items.\n *\n * @public */\nexport class MenuItemBuilder implements Serializable<MenuItem> {\n  /** menu item option object. See {@link PartialMenuItem} */\n  protected spec: PartialMenuItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItem,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set menu item action\n   * @param action - menu item action. See {@link MenuItemActionType}\n   * @returns menu item builder based on action provided. See {@link MenuItemBuilder}\n   */\n  action(action: MenuItemActionType): MenuItemBuilder {\n    return this.clone({action})\n  }\n\n  /**\n   * Get menu item action\n   * @returns menu item builder action. See {@link PartialMenuItem}\n   */\n  getAction(): PartialMenuItem['action'] {\n    return this.spec.action\n  }\n\n  /**\n   * Set menu item intent\n   * @param intent - menu item intent. See {@link Intent}\n   * @returns menu item builder based on intent provided. See {@link MenuItemBuilder}\n   */\n  intent(intent: Intent): MenuItemBuilder {\n    return this.clone({intent})\n  }\n\n  /**\n   * Get menu item intent\n   * @returns menu item intent. See {@link PartialMenuItem}\n   */\n  getIntent(): PartialMenuItem['intent'] {\n    return this.spec.intent\n  }\n\n  /**\n   * Set menu item title\n   * @param title - menu item title\n   * @returns menu item builder based on title provided. See {@link MenuItemBuilder}\n   */\n  title(title: string): MenuItemBuilder {\n    return this.clone({title})\n  }\n\n  /**\n   * Get menu item title. Note that the `i18n` configuration will take\n   * precedence and this title is left here for compatibility.\n   * @returns menu item title\n   */\n  getTitle(): string | undefined {\n    return this.spec.title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item builder based on i18n config provided. See {@link MenuItemBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set menu item group\n   * @param group - menu item group\n   * @returns menu item builder based on group provided. See {@link MenuItemBuilder}\n   */\n  group(group: string): MenuItemBuilder {\n    return this.clone({group})\n  }\n\n  /**\n   * Get menu item group\n   * @returns menu item group. See {@link PartialMenuItem}\n   */\n  getGroup(): PartialMenuItem['group'] {\n    return this.spec.group\n  }\n\n  /**\n   * Set menu item icon\n   * @param icon - menu item icon\n   * @returns menu item builder based on icon provided. See {@link MenuItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): MenuItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Get menu item icon\n   * @returns menu item icon. See {@link PartialMenuItem}\n   */\n  getIcon(): PartialMenuItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set menu item parameters\n   * @param params - menu item parameters. See {@link MenuItemParamsType}\n   * @returns menu item builder based on parameters provided. See {@link MenuItemBuilder}\n   */\n  params(params: MenuItemParamsType): MenuItemBuilder {\n    return this.clone({params})\n  }\n\n  /**\n   * Get meny item parameters\n   * @returns menu item parameters. See {@link PartialMenuItem}\n   */\n  getParams(): PartialMenuItem['params'] {\n    return this.spec.params\n  }\n\n  /**\n   * Set menu item to show as action\n   * @param showAsAction - determine if menu item should show as action\n   * @returns menu item builder based on if it should show as action. See {@link MenuItemBuilder}\n   */\n  showAsAction(showAsAction = true): MenuItemBuilder {\n    return this.clone({showAsAction: Boolean(showAsAction)})\n  }\n\n  /**\n   * Check if menu item should show as action\n   * @returns true if menu item should show as action, false if not. See {@link PartialMenuItem}\n   */\n  getShowAsAction(): PartialMenuItem['showAsAction'] {\n    return this.spec.showAsAction\n  }\n\n  /** Serialize menu item builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns menu item node based on path provided in options. See {@link MenuItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItem {\n    const {title, action, intent} = this.spec\n    if (!title) {\n      const hint = typeof action === 'string' ? `action: \"${action}\"` : undefined\n      throw new SerializeError(\n        '`title` is required for menu item',\n        options.path,\n        options.index,\n        hint,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    if (!action && !intent) {\n      throw new SerializeError(\n        `\\`action\\` or \\`intent\\` required for menu item with title ${this.spec.title}`,\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_OR_INTENT_REQUIRED)\n    }\n\n    if (intent && action) {\n      throw new SerializeError(\n        'cannot set both `action` AND `intent`',\n        options.path,\n        options.index,\n        `\"${title}\"`,\n      ).withHelpUrl(HELP_URL.ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE)\n    }\n\n    return {...this.spec, title}\n  }\n\n  /** Clone menu item builder\n   * @param withSpec - menu item options. See {@link PartialMenuItem}\n   * @returns menu item builder based on context and spec provided. See {@link MenuItemBuilder}\n   */\n  clone(withSpec?: PartialMenuItem): MenuItemBuilder {\n    const builder = new MenuItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport interface SortMenuItem extends MenuItem {\n  params: {\n    by: SortOrderingItem[]\n  }\n}\n\n/** @internal */\nexport function getOrderingMenuItem(\n  context: StructureContext,\n  {by, title, i18n}: SortOrdering,\n  extendedProjection?: string,\n): MenuItemBuilder {\n  let builder = new MenuItemBuilder(context)\n    .group('sorting')\n    .title(\n      context.i18n.t('default-menu-item.fallback-title', {\n        // note this lives in the `studio` bundle because that one is loaded by default\n        ns: 'studio',\n        replace: {title}, // replaces the `{{title}}` option\n      }),\n    ) // fallback title\n    .icon(SortIcon)\n    .action('setSortOrder')\n    .params({by, extendedProjection})\n\n  if (i18n) {\n    builder = builder.i18n(i18n)\n  }\n\n  return builder\n}\n\n/** @internal */\nexport function getOrderingMenuItemsForSchemaType(\n  context: StructureContext,\n  typeName: SchemaType | string,\n): MenuItemBuilder[] {\n  const {schema} = context\n  const type = typeof typeName === 'string' ? schema.get(typeName) : typeName\n  if (!type || !('orderings' in type)) {\n    return []\n  }\n\n  return (\n    type.orderings ? type.orderings.concat(DEFAULT_ORDERING_OPTIONS) : DEFAULT_ORDERING_OPTIONS\n  ).map((ordering: SortOrdering) =>\n    getOrderingMenuItem(context, ordering, getExtendedProjection(type, ordering.by)),\n  )\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/** @internal */\nexport function maybeSerializeMenuItemGroup(\n  item: MenuItemGroup | MenuItemGroupBuilder,\n  index: number,\n  path: SerializePath,\n): MenuItemGroup {\n  return item instanceof MenuItemGroupBuilder ? item.serialize({path, index}) : item\n}\n\n/**\n * Interface for menu item groups\n * @public\n */\nexport interface MenuItemGroup {\n  /** Menu group Id */\n  id: string\n  /** Menu group title */\n  title: string\n  i18n?: I18nTextRecord<'title'>\n}\n\n/**\n * Class for building menu item groups.\n *\n * @public\n */\nexport class MenuItemGroupBuilder implements Serializable<MenuItemGroup> {\n  /** Menu item group ID */\n  protected _id: string\n  /** Menu item group title */\n  protected _title: string\n\n  protected _i18n?: I18nTextRecord<'title'>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: MenuItemGroup,\n  ) {\n    this._id = spec ? spec.id : ''\n    this._title = spec ? spec.title : ''\n    this._i18n = spec ? spec.i18n : undefined\n  }\n\n  /**\n   * Set menu item group ID\n   * @param id - menu item group ID\n   * @returns menu item group builder based on ID provided. See {@link MenuItemGroupBuilder}\n   */\n  id(id: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {id, title: this._title, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group ID\n   * @returns menu item group ID\n   */\n  getId(): string {\n    return this._id\n  }\n\n  /**\n   * Set menu item group title\n   * @param title - menu item group title\n   * @returns menu item group builder based on title provided. See {@link MenuItemGroupBuilder}\n   */\n  title(title: string): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {title, id: this._id, i18n: this._i18n})\n  }\n\n  /**\n   * Get menu item group title\n   * @returns menu item group title\n   */\n  getTitle(): string {\n    return this._title\n  }\n\n  /**\n   * Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - object with i18n key and related namespace\n   * @returns menu item group builder based on i18n info provided. See {@link MenuItemGroupBuilder}\n   */\n  i18n(i18n: I18nTextRecord<'title'>): MenuItemGroupBuilder {\n    return new MenuItemGroupBuilder(this._context, {i18n, id: this._id, title: this._title})\n  }\n\n  /**\n   * Get the i18n key and namespace used to populate the localized title.\n   * @returns the i18n key and namespace used to populate the localized title.\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this._i18n\n  }\n\n  /**\n   * Serialize menu item group builder\n   * @param options - serialization options (path). See {@link SerializeOptions}\n   * @returns menu item group based on path provided in options. See {@link MenuItemGroup}\n   */\n  serialize(options: SerializeOptions = {path: []}): MenuItemGroup {\n    const {_id, _title, _i18n} = this\n    if (!_id) {\n      throw new SerializeError(\n        '`id` is required for a menu item group',\n        options.path,\n        options.index,\n        _title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!_title) {\n      throw new SerializeError(\n        '`title` is required for a menu item group',\n        options.path,\n        _id,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: _id,\n      title: _title,\n      i18n: _i18n,\n    }\n  }\n}\n","import {SerializeError} from '../SerializeError'\nimport {type SerializePath} from '../StructureNodes'\n\nexport const disallowedPattern = /([^A-Za-z0-9-_.])/\n\nexport function validateId(\n  id: string,\n  parentPath: SerializePath,\n  pathSegment: string | number | undefined,\n): string {\n  if (typeof id !== 'string') {\n    throw new SerializeError(\n      `Structure node id must be of type string, got ${typeof id}`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  const [disallowedChar] = id.match(disallowedPattern) || []\n  if (disallowedChar) {\n    throw new SerializeError(\n      `Structure node id cannot contain character \"${disallowedChar}\"`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  if (id.startsWith('__edit__')) {\n    throw new SerializeError(\n      `Structure node id cannot start with __edit__`,\n      parentPath,\n      pathSegment,\n    )\n  }\n\n  return id\n}\n","import {camelCase} from 'lodash'\nimport getSlug from 'speakingurl'\n\nimport {disallowedPattern} from './validateId'\n\nexport function getStructureNodeId(title: string, id?: string): string {\n  if (id) {\n    return id\n  }\n\n  const camelCased = camelCase(title)\n\n  return disallowedPattern.test(camelCased) ? camelCase(getSlug(title)) : camelCased\n}\n","import {type I18nTextRecord} from 'sanity'\n\nimport {type IntentChecker} from './Intent'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {type UserComponent} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Interface for component\n *\n * @public\n */\n// TODO: rename to `StructureComponent` since it clashes with React?\nexport interface Component extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component menu items, array of type {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** Component menu item group, array of type {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n  /** Component options */\n  options: {[key: string]: unknown}\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Interface for component input\n *\n * @public\n */\nexport interface ComponentInput extends StructureNode {\n  /** Component of type {@link UserComponent} */\n  component: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for buildable component\n *\n * @public\n */\nexport interface BuildableComponent extends Partial<StructureNode> {\n  /** Component of type {@link UserComponent} */\n  component?: UserComponent\n  /** Component child of type {@link Child} */\n  child?: Child\n  /** Component options */\n  options?: {[key: string]: unknown}\n  /** Component menu items. See {@link MenuItem} and {@link MenuItemBuilder}  */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Component menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  canHandleIntent?: IntentChecker\n}\n\n/**\n * Class for building components\n *\n * @public\n */\nexport class ComponentBuilder implements Serializable<Component> {\n  /** component builder option object */\n  protected spec: BuildableComponent\n\n  constructor(spec?: ComponentInput) {\n    this.spec = {options: {}, ...(spec ? spec : {})}\n  }\n\n  /** Set Component ID\n   * @param id - component ID\n   * @returns component builder based on ID provided\n   */\n  id(id: string): ComponentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get ID\n   * @returns ID\n   */\n  getId(): BuildableComponent['id'] {\n    return this.spec.id\n  }\n\n  /** Set Component title\n   * @param title - component title\n   * @returns component builder based on title provided (and ID)\n   */\n  title(title: string): ComponentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Component title\n   * @returns title\n   */\n  getTitle(): BuildableComponent['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ComponentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Component child\n   * @param child - child component\n   * @returns component builder based on child component provided\n   */\n  child(child: Child): ComponentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Component child\n   * @returns child component\n   */\n  getChild(): BuildableComponent['child'] {\n    return this.spec.child\n  }\n\n  /** Set component\n   * @param component - user built component\n   * @returns component builder based on component provided\n   */\n  component(component: UserComponent): ComponentBuilder {\n    return this.clone({component})\n  }\n\n  /** Get Component\n   * @returns component\n   */\n  getComponent(): BuildableComponent['component'] {\n    return this.spec.component\n  }\n\n  /** Set Component options\n   * @param options - component options\n   * @returns component builder based on options provided\n   */\n  options(options: {[key: string]: unknown}): ComponentBuilder {\n    return this.clone({options})\n  }\n\n  /** Get Component options\n   * @returns component options\n   */\n  getOptions(): NonNullable<BuildableComponent['options']> {\n    return this.spec.options || {}\n  }\n\n  /** Set Component menu items\n   * @param menuItems - component menu items\n   * @returns component builder based on menuItems provided\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[]): ComponentBuilder {\n    return this.clone({menuItems})\n  }\n\n  /** Get Component menu items\n   * @returns menu items\n   */\n  getMenuItems(): BuildableComponent['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set Component menu item groups\n   * @param menuItemGroups - component menu item groups\n   * @returns component builder based on menuItemGroups provided\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ComponentBuilder {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get Component menu item groups\n   * @returns menu item groups\n   */\n  getMenuItemGroups(): BuildableComponent['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  canHandleIntent(canHandleIntent: IntentChecker): ComponentBuilder {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Serialize component\n   * @param options - serialization options\n   * @returns component object based on path provided in options\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): Component {\n    const {id, title, child, options: componentOptions, component} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!component) {\n      throw new SerializeError(\n        '`component` is required for `component` structure item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      type: 'component',\n      child,\n      component,\n      canHandleIntent: this.spec.canHandleIntent,\n      options: componentOptions || {},\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, options.path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, options.path),\n      ),\n    }\n  }\n\n  /** Clone component builder (allows for options overriding)\n   * @param withSpec - component builder options\n   * @returns cloned builder\n   */\n  clone(withSpec?: BuildableComponent): ComponentBuilder {\n    const builder = new ComponentBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SanityClient} from '@sanity/client'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, getPublishedId, type SourceClientOptions} from 'sanity'\n\nexport async function resolveTypeForDocument(\n  getClient: (options: SourceClientOptions) => SanityClient,\n  id: string,\n): Promise<string | undefined> {\n  const query = '*[sanity::versionOf($publishedId)][0]._type'\n\n  const type = await getClient(DEFAULT_STUDIO_CLIENT_OPTIONS).fetch(\n    query,\n    {publishedId: getPublishedId(id)},\n    {tag: 'structure.resolve-type'},\n  )\n\n  return type\n}\n","import {kebabCase} from 'lodash'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from '../StructureNodes'\nimport {type View} from '../types'\nimport {validateId} from '../util/validateId'\nimport {type ComponentViewBuilder} from './ComponentView'\nimport {type FormViewBuilder} from './FormView'\n\n/**\n * Interface for base view\n *\n * @public */\nexport interface BaseView {\n  /** View id */\n  id: string\n  /** View Title */\n  title: string\n  /** View Icon */\n  icon?: React.ComponentType | React.ReactNode\n}\n\n/**\n * Class for building generic views.\n *\n * @public\n */\nexport abstract class GenericViewBuilder<TView extends Partial<BaseView>, ConcreteImpl>\n  implements Serializable<BaseView>\n{\n  /** Generic view option object */\n  protected spec: TView = {} as TView\n\n  /** Set generic view ID\n   * @param id - generic view ID\n   * @returns generic view builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n  /** Get generic view ID\n   * @returns generic view ID\n   */\n  getId(): TView['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic view title\n   * @param title - generic view title\n   * @returns generic view builder based on title provided and (if provided) its ID.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: this.spec.id || kebabCase(title)})\n  }\n\n  /** Get generic view title\n   * @returns generic view title\n   */\n  getTitle(): TView['title'] {\n    return this.spec.title\n  }\n\n  /** Set generic view icon\n   * @param icon - generic view icon\n   * @returns generic view builder based on icon provided.\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ConcreteImpl {\n    return this.clone({icon})\n  }\n\n  /** Get generic view icon\n   * @returns generic view icon\n   */\n  getIcon(): TView['icon'] {\n    return this.spec.icon\n  }\n\n  /** Serialize generic view\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic view object based on path provided in options. See {@link BaseView}\n   */\n  serialize(options: SerializeOptions = {path: []}): BaseView {\n    const {id, title, icon} = this.spec\n    if (!id) {\n      throw new SerializeError(\n        '`id` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!title) {\n      throw new SerializeError(\n        '`title` is required for view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.TITLE_REQUIRED)\n    }\n\n    return {\n      id: validateId(id, options.path, options.index),\n      title,\n      icon,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - Partial generic view builder options. See {@link BaseView}\n   * @returns Generic view builder.\n   */\n  abstract clone(withSpec?: Partial<BaseView>): ConcreteImpl\n}\n\nfunction isSerializable(view: BaseView | Serializable<BaseView>): view is Serializable<BaseView> {\n  return typeof (view as Serializable<BaseView>).serialize === 'function'\n}\n\n/** @internal */\nexport function maybeSerializeView(\n  item: View | Serializable<View>,\n  index: number,\n  path: SerializePath,\n): View {\n  return isSerializable(item) ? item.serialize({path, index}) : item\n}\n\n/**\n * View builder. See {@link ComponentViewBuilder} and {@link FormViewBuilder}\n *\n * @public\n */\nexport type ViewBuilder = ComponentViewBuilder | FormViewBuilder\n","import {isRecord} from 'sanity'\n\nimport {HELP_URL, SerializeError} from '../SerializeError'\nimport {type SerializeOptions} from '../StructureNodes'\nimport {type UserViewComponent} from '../types'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for component views.\n *\n * @public */\nexport interface ComponentView<TOptions = Record<string, any>> extends BaseView {\n  type: 'component'\n  /** Component view components. See {@link UserViewComponent} */\n  component: UserViewComponent\n  /** Component view options */\n  options: TOptions\n}\n\nconst isComponentSpec = (spec: unknown): spec is ComponentView =>\n  isRecord(spec) && spec.type === 'component'\n\n/**\n * Class for building a component view.\n *\n * @public */\nexport class ComponentViewBuilder extends GenericViewBuilder<\n  Partial<ComponentView>,\n  ComponentViewBuilder\n> {\n  /** Partial Component view option object. See {@link ComponentView} */\n  protected spec: Partial<ComponentView>\n\n  constructor(\n    /**\n     * Component view component or spec\n     * @param componentOrSpec - user view component or partial component view. See {@link UserViewComponent} and {@link ComponentView}\n     */\n    componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n  ) {\n    const spec = isComponentSpec(componentOrSpec) ? {...componentOrSpec} : {options: {}}\n\n    super()\n    this.spec = spec\n\n    const userComponent =\n      typeof componentOrSpec === 'function' ? componentOrSpec : this.spec.component\n\n    if (userComponent) {\n      // Because we're cloning, this'll return a new instance, so grab the spec from it\n      this.spec = this.component(userComponent).spec\n    }\n  }\n\n  /** Set view Component\n   * @param component - component view component. See {@link UserViewComponent}\n   * @returns component view builder based on component view provided. See {@link ComponentViewBuilder}\n   */\n  component(component: UserViewComponent): ComponentViewBuilder {\n    return this.clone({component})\n  }\n\n  /** Get view Component\n   * @returns Partial component view. See {@link ComponentView}\n   */\n  getComponent(): Partial<ComponentView>['component'] {\n    return this.spec.component\n  }\n\n  /** Set view Component options\n   * @param options - component view options\n   * @returns component view builder based on options provided. See {@link ComponentViewBuilder}\n   */\n  options(options: {[key: string]: any}): ComponentViewBuilder {\n    return this.clone({options})\n  }\n\n  /** Get view Component options\n   * @returns component view options. See {@link ComponentView}\n   */\n  getOptions(): ComponentView['options'] {\n    return this.spec.options || {}\n  }\n\n  /** Serialize view Component\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns component view based on path provided in options. See {@link ComponentView}\n   *\n   */\n  serialize(options: SerializeOptions = {path: []}): ComponentView {\n    const base = super.serialize(options)\n\n    const component = this.spec.component\n    if (typeof component !== 'function') {\n      throw new SerializeError(\n        '`component` is required and must be a function for `component()` view item',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.COMPONENT_REQUIRED)\n    }\n\n    return {\n      ...base,\n      component,\n      options: this.spec.options || {},\n      type: 'component',\n    }\n  }\n\n  /** Clone Component view builder (allows for options overriding)\n   * @param withSpec - partial for component view option. See {@link ComponentView}\n   * @returns component view builder. See {@link ComponentViewBuilder}\n   */\n  clone(withSpec?: Partial<ComponentView>): ComponentViewBuilder {\n    const builder = new ComponentViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SerializeOptions} from '../StructureNodes'\nimport {type BaseView, GenericViewBuilder} from './View'\n\n/**\n * Interface for form views.\n *\n * @public */\nexport interface FormView extends BaseView {\n  type: 'form'\n}\n\n/**\n * Class for building a form view.\n *\n * @public */\nexport class FormViewBuilder extends GenericViewBuilder<Partial<BaseView>, FormViewBuilder> {\n  /** Document list options. See {@link FormView} */\n  protected spec: Partial<FormView>\n\n  constructor(spec?: Partial<FormView>) {\n    super()\n    this.spec = {id: 'editor', title: 'Editor', ...(spec ? spec : {})}\n  }\n\n  /**\n   * Serialize Form view builder\n   * @param options - Serialize options. See {@link SerializeOptions}\n   * @returns form view builder based on path provided in options. See {@link FormView}\n   */\n  serialize(options: SerializeOptions = {path: []}): FormView {\n    return {\n      ...super.serialize(options),\n      type: 'form',\n    }\n  }\n\n  /**\n   * Clone Form view builder (allows for options overriding)\n   * @param withSpec - Partial form view builder options. See {@link FormView}\n   * @returns form view builder. See {@link FormViewBuilder}\n   */\n  clone(withSpec?: Partial<FormView>): FormViewBuilder {\n    const builder = new FormViewBuilder()\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type UserViewComponent} from '../types'\nimport {type ComponentView, ComponentViewBuilder} from './ComponentView'\nimport {type FormView, FormViewBuilder} from './FormView'\n\nexport * from './ComponentView'\nexport * from './FormView'\nexport * from './View'\n\n/** @internal */\nexport const form = (spec?: Partial<FormView>): FormViewBuilder => new FormViewBuilder(spec)\n\n/** @internal */\nexport const component = (\n  componentOrSpec?: UserViewComponent | Partial<ComponentView>,\n): ComponentViewBuilder => new ComponentViewBuilder(componentOrSpec)\n","import {type SchemaType} from '@sanity/types'\nimport {uniq} from 'lodash'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver} from './ChildResolver'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type DocumentNode,\n  type EditorNode,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext, type View} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\nimport {validateId} from './util/validateId'\nimport {form} from './views'\nimport {maybeSerializeView, type ViewBuilder} from './views/View'\n\nconst createDocumentChildResolver =\n  ({resolveDocumentNode, getClient}: StructureContext): ChildResolver =>\n  async (itemId, {params, path}) => {\n    let type = params.type\n\n    const parentPath = path.slice(0, path.length - 1)\n    const currentSegment = path[path.length - 1]\n\n    if (!type) {\n      type = await resolveTypeForDocument(getClient, itemId)\n    }\n\n    if (!type) {\n      throw new SerializeError(\n        `Failed to resolve document, and no type provided in parameters.`,\n        parentPath,\n        currentSegment,\n      )\n    }\n\n    return resolveDocumentNode({documentId: itemId, schemaType: type})\n  }\n\n/**\n * Interface for options of Partial Documents. See {@link PartialDocumentNode}\n *\n * @public */\nexport interface DocumentOptions {\n  /** Document Id */\n  id: string\n  /** Document Type */\n  type: string\n  /** Document Template */\n  template?: string\n  /** Template parameters */\n  templateParameters?: Record<string, unknown>\n}\n\n/**\n * Interface for partial document (focused on the document pane)\n *\n * @public */\nexport interface PartialDocumentNode {\n  /** Document Id */\n  id?: string\n  /** Document title */\n  title?: string\n  /** I18n key and namespace used to populate the localized title */\n  i18n?: I18nTextRecord<'title'>\n  /** Document children of type {@link Child} */\n  child?: Child\n  /**\n   * Views for the document pane. See {@link ViewBuilder} and {@link View}\n   */\n  views?: (View | ViewBuilder)[]\n  /**\n   * Document options. See {@link DocumentOptions}\n   */\n  options?: Partial<DocumentOptions>\n}\n\n/**\n * A `DocumentBuilder` is used to build a document node.\n *\n * @public */\nexport class DocumentBuilder implements Serializable<DocumentNode> {\n  /** Component builder option object See {@link PartialDocumentNode} */\n  protected spec: PartialDocumentNode\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: PartialDocumentNode,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set Document Builder ID\n   * @param id - document builder ID\n   * @returns document builder based on ID provided. See {@link DocumentBuilder}\n   */\n  id(id: string): DocumentBuilder {\n    return this.clone({id})\n  }\n\n  /** Get Document Builder ID\n   * @returns document ID. See {@link PartialDocumentNode}\n   */\n  getId(): PartialDocumentNode['id'] {\n    return this.spec.id\n  }\n\n  /** Set Document title\n   * @param title - document title\n   * @returns document builder based on title provided (and ID). See {@link DocumentBuilder}\n   */\n  title(title: string): DocumentBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get Document title\n   * @returns document title. See {@link PartialDocumentNode}\n   */\n  getTitle(): PartialDocumentNode['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): DocumentBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /** Set Document child\n   * @param child - document child\n   * @returns document builder based on child provided. See {@link DocumentBuilder}\n   */\n  child(child: Child): DocumentBuilder {\n    return this.clone({child})\n  }\n\n  /** Get Document child\n   * @returns document child. See {@link PartialDocumentNode}\n   */\n  getChild(): PartialDocumentNode['child'] {\n    return this.spec.child\n  }\n\n  /** Set Document ID\n   * @param documentId - document ID\n   * @returns document builder with document based on ID provided. See {@link DocumentBuilder}\n   */\n  documentId(documentId: string): DocumentBuilder {\n    // Let's try to be a bit helpful and assign an ID from document ID if none is specified\n    const paneId = this.spec.id || documentId\n    return this.clone({\n      id: paneId,\n      options: {\n        ...(this.spec.options || {}),\n        id: documentId,\n      },\n    })\n  }\n\n  /** Get Document ID\n   * @returns document ID. See {@link DocumentOptions}\n   */\n  getDocumentId(): Partial<DocumentOptions>['id'] {\n    return this.spec.options?.id\n  }\n\n  /** Set Document Type\n   * @param documentType - document type\n   * @returns document builder with document based on type provided. See {@link DocumentBuilder}\n   */\n  schemaType(documentType: SchemaType | string): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        type: typeof documentType === 'string' ? documentType : documentType.name,\n      },\n    })\n  }\n\n  /** Get Document Type\n   * @returns document type. See {@link DocumentOptions}\n   */\n  getSchemaType(): Partial<DocumentOptions>['type'] {\n    return this.spec.options?.type\n  }\n\n  /** Set Document Template\n   * @param templateId - document template ID\n   * @param parameters - document template parameters\n   * @returns document builder with document based on template provided. See {@link DocumentBuilder}\n   */\n  initialValueTemplate(templateId: string, parameters?: Record<string, unknown>): DocumentBuilder {\n    return this.clone({\n      options: {\n        ...(this.spec.options || {}),\n        template: templateId,\n        templateParameters: parameters,\n      },\n    })\n  }\n\n  /** Get Document Template\n   * @returns document template. See {@link DocumentOptions}\n   */\n  getInitialValueTemplate(): Partial<DocumentOptions>['template'] {\n    return this.spec.options?.template\n  }\n\n  /** Get Document's initial value Template parameters\n   * @returns document template parameters. See {@link DocumentOptions}\n   */\n  getInitialValueTemplateParameters(): Partial<DocumentOptions>['templateParameters'] {\n    return this.spec.options?.templateParameters\n  }\n\n  /** Set Document views\n   * @param views - document views. See {@link ViewBuilder} and {@link View}\n   * @returns document builder with document based on views provided. See {@link DocumentBuilder}\n   */\n  views(views: (View | ViewBuilder)[]): DocumentBuilder {\n    return this.clone({views})\n  }\n\n  /** Get Document views\n   * @returns document views. See {@link ViewBuilder} and {@link View}\n   */\n  getViews(): (View | ViewBuilder)[] {\n    return this.spec.views || []\n  }\n\n  /** Serialize Document builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document node based on path, index and hint provided in options. See {@link DocumentNode}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): DocumentNode {\n    const urlId = path[index || path.length - 1]\n\n    // Try to grab document ID / editor ID from URL if not defined\n    const id = this.spec.id || (urlId && `${urlId}`) || ''\n    const options: Partial<DocumentOptions> = {\n      id,\n      type: undefined,\n      template: undefined,\n      templateParameters: undefined,\n      ...this.spec.options,\n    }\n\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for document nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options || !options.id) {\n      throw new SerializeError(\n        'document id (`id`) is required for document nodes',\n        path,\n        id,\n        hint,\n      ).withHelpUrl(HELP_URL.DOCUMENT_ID_REQUIRED)\n    }\n\n    if (!options || !options.type) {\n      throw new SerializeError(\n        'document type (`schemaType`) is required for document nodes',\n        path,\n        id,\n        hint,\n      )\n    }\n\n    const views = (this.spec.views && this.spec.views.length > 0 ? this.spec.views : [form()]).map(\n      (item, i) => maybeSerializeView(item, i, path),\n    )\n\n    const viewIds = views.map((view) => view.id)\n    const dupes = uniq(viewIds.filter((viewId, i) => viewIds.includes(viewId, i + 1)))\n    if (dupes.length > 0) {\n      throw new SerializeError(\n        `document node has views with duplicate IDs: ${dupes.join(',  ')}`,\n        path,\n        id,\n        hint,\n      )\n    }\n\n    return {\n      ...this.spec,\n      child: this.spec.child || createDocumentChildResolver(this._context),\n      id: validateId(id, path, index),\n      type: 'document',\n      options: getDocumentOptions(options),\n      views,\n    }\n  }\n\n  /** Clone Document builder\n   * @param withSpec - partial document node specification used to extend the cloned builder. See {@link PartialDocumentNode}\n   * @returns document builder based on context and spec provided. See {@link DocumentBuilder}\n   */\n  clone(withSpec: PartialDocumentNode = {}): DocumentBuilder {\n    const builder = new DocumentBuilder(this._context)\n    const options = {...(this.spec.options || {}), ...(withSpec.options || {})}\n    builder.spec = {...this.spec, ...withSpec, options}\n    return builder\n  }\n}\n\nfunction getDocumentOptions(spec: Partial<DocumentOptions>): DocumentOptions {\n  const opts: DocumentOptions = {\n    id: spec.id || '',\n    type: spec.type || '*',\n  }\n\n  if (spec.template) {\n    opts.template = spec.template\n  }\n\n  if (spec.templateParameters) {\n    opts.templateParameters = spec.templateParameters\n  }\n\n  return opts\n}\n\n/** @internal */\nexport function documentFromEditor(context: StructureContext, spec?: EditorNode): DocumentBuilder {\n  let doc = spec?.type\n    ? // Use user-defined document fragment as base if possible\n      context.resolveDocumentNode({schemaType: spec.type})\n    : // Fall back to plain old document builder\n      new DocumentBuilder(context)\n\n  if (!spec) return doc\n\n  const {id, type, template, templateParameters} = spec.options\n  doc = doc.id(spec.id).documentId(id)\n\n  if (type) {\n    doc = doc.schemaType(type)\n  }\n  if (template) {\n    doc = doc.initialValueTemplate(template, templateParameters)\n  }\n  if (spec.child) {\n    doc = doc.child(spec.child)\n  }\n\n  return doc\n}\n\n/** @internal */\nexport function documentFromEditorWithInitialValue(\n  {resolveDocumentNode, templates}: StructureContext,\n  templateId: string,\n  parameters?: Record<string, unknown>,\n): DocumentBuilder {\n  const template = templates.find((t) => t.id === templateId)\n\n  if (!template) {\n    throw new Error(`Template with ID \"${templateId}\" not defined`)\n  }\n\n  return resolveDocumentNode({schemaType: template.schemaType}).initialValueTemplate(\n    templateId,\n    parameters,\n  )\n}\n","import {AddIcon} from '@sanity/icons'\nimport {type InitialValueTemplateItem} from 'sanity'\n\nimport {type BaseIntentParams, type IntentParams} from './Intent'\nimport {type MenuItem, MenuItemBuilder} from './MenuItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Serializable, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * A `InitialValueTemplateItemBuilder` is used to build a document node with an initial value set.\n *\n * @public\n */\nexport class InitialValueTemplateItemBuilder implements Serializable<InitialValueTemplateItem> {\n  /** Initial Value template item option object. See {@link InitialValueTemplateItem} */\n  protected spec: Partial<InitialValueTemplateItem>\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: Partial<InitialValueTemplateItem>,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /** Set initial value template item builder ID\n   * @param id - initial value template item ID\n   * @returns initial value template item based on ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  id(id: string): InitialValueTemplateItemBuilder {\n    return this.clone({id})\n  }\n\n  /** Get initial value template item builder ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getId(): Partial<InitialValueTemplateItem>['id'] {\n    return this.spec.id\n  }\n\n  /** Set initial value template item title\n   * @param title - initial value template item title\n   * @returns initial value template item based on title provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  title(title: string): InitialValueTemplateItemBuilder {\n    return this.clone({title})\n  }\n\n  /** Get initial value template item title\n   * @returns initial value template item title. See {@link InitialValueTemplateItem}\n   */\n  getTitle(): Partial<InitialValueTemplateItem>['title'] {\n    return this.spec.title\n  }\n\n  /** Set initial value template item description\n   * @param description - initial value template item description\n   * @returns initial value template item builder based on description provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  description(description: string): InitialValueTemplateItemBuilder {\n    return this.clone({description})\n  }\n\n  /** Get initial value template item description\n   * @returns initial value template item description. See {@link InitialValueTemplateItem}\n   */\n  getDescription(): Partial<InitialValueTemplateItem>['description'] {\n    return this.spec.description\n  }\n\n  /** Set initial value template ID\n   * @param templateId - initial value template item template ID\n   * @returns initial value template item based builder on template ID provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  templateId(templateId: string): InitialValueTemplateItemBuilder {\n    // Let's try to be a bit helpful and assign an ID from template ID if none is specified\n    const paneId = this.spec.id || templateId\n    return this.clone({\n      id: paneId,\n      templateId,\n    })\n  }\n\n  /** Get initial value template item template ID\n   * @returns initial value template item ID. See {@link InitialValueTemplateItem}\n   */\n  getTemplateId(): Partial<InitialValueTemplateItem>['templateId'] {\n    return this.spec.templateId\n  }\n\n  /** Get initial value template item template parameters\n   * @param parameters - initial value template item parameters\n   * @returns initial value template item builder based on parameters provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  parameters(parameters: {[key: string]: any}): InitialValueTemplateItemBuilder {\n    return this.clone({parameters})\n  }\n\n  /** Get initial value template item template parameters\n   * @returns initial value template item parameters. See {@link InitialValueTemplateItem}\n   */\n  getParameters(): Partial<InitialValueTemplateItem>['parameters'] {\n    return this.spec.parameters\n  }\n\n  /** Serialize initial value template item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns initial value template item object based on the path, index and hint provided in options. See {@link InitialValueTemplateItem}\n   */\n  serialize({path = [], index, hint}: SerializeOptions = {path: []}): InitialValueTemplateItem {\n    const {spec, _context} = this\n    const {templates} = _context\n\n    if (typeof spec.id !== 'string' || !spec.id) {\n      throw new SerializeError(\n        '`id` is required for initial value template item nodes',\n        path,\n        index,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!spec.templateId) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const template = templates.find((t) => t.id === spec.templateId)\n\n    if (!template) {\n      throw new SerializeError(\n        'template id (`templateId`) is required for initial value template item nodes',\n        path,\n        spec.id,\n        hint,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    return {\n      id: spec.id,\n      templateId: spec.id,\n      schemaType: template.schemaType,\n      type: 'initialValueTemplateItem',\n      description: spec.description || template.description,\n      title: spec.title || template.title,\n      subtitle: spec.subtitle,\n      icon: spec.icon || template.icon,\n      initialDocumentId: spec.initialDocumentId,\n      parameters: spec.parameters,\n    }\n  }\n\n  /** Clone generic view builder (allows for options overriding)\n   * @param withSpec - initial value template item builder options. See {@link InitialValueTemplateItemBuilder}\n   * @returns initial value template item builder based on the context and options provided. See {@link InitialValueTemplateItemBuilder}\n   */\n  clone(withSpec: Partial<InitialValueTemplateItem> = {}): InitialValueTemplateItemBuilder {\n    const builder = new InitialValueTemplateItemBuilder(this._context)\n    builder.spec = {...this.spec, ...withSpec}\n    return builder\n  }\n}\n\n/** @internal */\nexport function defaultInitialValueTemplateItems(\n  context: StructureContext,\n): InitialValueTemplateItemBuilder[] {\n  const {schema, getStructureBuilder, templates} = context\n\n  // Sort templates by their schema type, in order or definition\n  const typeNames = schema.getTypeNames()\n  const ordered = templates\n    // Don't list templates that require parameters\n    // TODO: this should use the new-document template items instead maybe?\n    .filter((tpl) => !tpl.parameters?.length)\n    .sort((a, b) => typeNames.indexOf(a.schemaType) - typeNames.indexOf(b.schemaType))\n\n  // Create actual template items out of the templates\n  return ordered.map((tpl) => getStructureBuilder().initialValueTemplateItem(tpl.id))\n}\n\n/** @internal */\nexport function maybeSerializeInitialValueTemplateItem(\n  item: InitialValueTemplateItem | InitialValueTemplateItemBuilder,\n  index: number,\n  path: SerializePath,\n): InitialValueTemplateItem {\n  return item instanceof InitialValueTemplateItemBuilder ? item.serialize({path, index}) : item\n}\n\n/** @internal */\nexport function menuItemsFromInitialValueTemplateItems(\n  context: StructureContext,\n  templateItems: InitialValueTemplateItem[],\n): MenuItem[] {\n  const {schema, templates} = context\n  return templateItems.map((item) => {\n    const template = templates.find((t) => t.id === item.templateId)\n    const title = item.title || template?.title || 'Create'\n\n    const params: BaseIntentParams = {}\n    if (template && template.schemaType) {\n      params.type = template.schemaType\n    }\n\n    if (item.templateId) {\n      params.template = item.templateId\n    }\n\n    const intentParams: IntentParams = item.parameters ? [params, item.parameters] : params\n    const schemaType = template && schema.get(template.schemaType)\n\n    const i18n = item.i18n || template?.i18n\n\n    let builder = new MenuItemBuilder(context)\n      .title(title)\n      .icon((template && template.icon) || schemaType?.icon || AddIcon)\n      .intent({type: 'create', params: intentParams})\n\n    if (i18n) {\n      builder = builder.i18n(i18n)\n    }\n\n    return builder.serialize()\n  })\n}\n","import {type SearchParam} from 'sanity/router'\n\nimport {getTypeNamesFromFilter, type PartialDocumentList} from './DocumentList'\nimport {type StructureNode} from './StructureNodes'\n\n/**\n * Intent parameters (json)\n *\n * @public\n */\nexport type IntentJsonParams = {[key: string]: any}\n\n/**\n * Base intent parameters\n *\n * @public\n * @todo dedupe with core\n */\nexport interface BaseIntentParams {\n  /**\n   * Document schema type name to create/edit.\n   * Required for `create` intents, optional for `edit` (but encouraged, safer and faster)\n   */\n  type?: string\n\n  /**\n   * ID of the document to create/edit.\n   * Required for `edit` intents, optional for `create`.\n   */\n  id?: string\n\n  /**\n   * Name (ID) of initial value template to use for `create` intent. Optional.\n   */\n  template?: string\n\n  /**\n   * Experimental field path\n   *\n   * @beta\n   * @experimental\n   * @hidden\n   */\n  path?: string\n\n  /**\n   * Optional \"mode\" to use for edit intent.\n   * Known modes are `structure` and `presentation`.\n   */\n  mode?: string\n\n  /**\n   * Arbitrary/custom parameters are generally discouraged - try to keep them to a minimum,\n   * or use `payload` (arbitrary JSON-serializable object) instead.\n   */\n  [key: string]: string | undefined\n}\n\n/** @internal */\nexport const DEFAULT_INTENT_HANDLER = Symbol('Document type list canHandleIntent')\n\n/**\n * Intent parameters\n * See {@link structure.BaseIntentParams} and {@link structure.IntentJsonParams}\n *\n * @public\n */\nexport type IntentParams = BaseIntentParams | [BaseIntentParams, IntentJsonParams]\n\n/**\n * Interface for intents\n * @public */\n// TODO: intents should be unified somewhere\nexport interface Intent {\n  /** Intent type */\n  type: string\n  /** Intent parameters. See {@link IntentParams}\n   */\n  params?: IntentParams\n\n  searchParams?: SearchParam[]\n}\n\n/**\n * Interface for intent checker\n *\n * @public\n */\nexport interface IntentChecker {\n  (\n    /** Intent name */\n    intentName: string,\n    /** Intent checker parameter */\n    params: {[key: string]: any},\n    /** Structure context. See {@link StructureNode} */\n    context: {pane: StructureNode; index: number},\n  ): boolean\n  /** intent checker identify */\n  identity?: symbol\n}\n\n/** @internal */\nexport const defaultIntentChecker: IntentChecker = (intentName, params, {pane}): boolean => {\n  const isEdit = intentName === 'edit'\n  const isCreate = intentName === 'create'\n  const typedSpec = pane as PartialDocumentList\n  const paneFilter = typedSpec.options?.filter || ''\n  const paneParams = typedSpec.options?.params || {}\n  const typeNames = typedSpec.schemaTypeName\n    ? [typedSpec.schemaTypeName]\n    : getTypeNamesFromFilter(paneFilter, paneParams)\n\n  const initialValueTemplates = typedSpec.initialValueTemplates || []\n\n  if (isCreate && params.template) {\n    return initialValueTemplates.some((tpl) => tpl.templateId === params.template)\n  }\n\n  return (\n    (isEdit && params.id && typeNames.includes(params.type)) ||\n    (isCreate && typeNames.includes(params.type))\n  )\n}\n\ndefaultIntentChecker.identity = DEFAULT_INTENT_HANDLER\n","export const layoutOptions = ['default', 'card', 'media', 'detail', 'block']\n","import {type I18nTextRecord, type InitialValueTemplateItem, type PreviewLayoutKey} from 'sanity'\n\nimport {\n  type InitialValueTemplateItemBuilder,\n  maybeSerializeInitialValueTemplateItem,\n} from './InitialValueTemplateItem'\nimport {defaultIntentChecker, type IntentChecker} from './Intent'\nimport {layoutOptions} from './Layout'\nimport {maybeSerializeMenuItem, type MenuItem, type MenuItemBuilder} from './MenuItem'\nimport {\n  maybeSerializeMenuItemGroup,\n  type MenuItemGroup,\n  type MenuItemGroupBuilder,\n} from './MenuItemGroup'\nimport {SerializeError} from './SerializeError'\nimport {\n  type Child,\n  type Serializable,\n  type SerializeOptions,\n  type StructureNode,\n} from './StructureNodes'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\nfunction noChildResolver() {\n  return undefined\n}\n\n/** @internal */\nexport const shallowIntentChecker: IntentChecker = (intentName, params, {pane, index}): boolean => {\n  return index <= 1 && defaultIntentChecker(intentName, params, {pane, index})\n}\n\n/**\n * Interface for list display options\n *\n * @public */\nexport interface ListDisplayOptions {\n  /** Check if list display should show icons */\n  showIcons?: boolean\n}\n\n/**\n * Interface for base generic list\n *\n * @public\n */\nexport interface BaseGenericList extends StructureNode {\n  /** List layout key. */\n  defaultLayout?: PreviewLayoutKey\n  /** Can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** List display options. See {@link ListDisplayOptions} */\n  displayOptions?: ListDisplayOptions\n  /** List child. See {@link Child} */\n  child: Child\n  /** List initial values array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n}\n\n/**\n * Interface for generic list\n *\n * @public\n */\n// \"POJO\"/verbatim-version - end result\nexport interface GenericList extends BaseGenericList {\n  /** List type */\n  type: string\n  /** List menu items array. See {@link MenuItem} */\n  menuItems: MenuItem[]\n  /** List menu item groups array. See {@link MenuItemGroup} */\n  menuItemGroups: MenuItemGroup[]\n}\n\n/**\n * Interface for buildable generic list\n *\n * @public\n */\n// Used internally in builder classes to make everything optional\nexport interface BuildableGenericList extends Partial<BaseGenericList> {\n  /** List menu items array. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** List menu items groups array. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n}\n\n/**\n * Interface for generic list input\n * Allows builders and only requires things not inferrable\n *\n * @public */\n// Input version, allows builders and only requires things not inferrable\nexport interface GenericListInput extends StructureNode {\n  /** Input id */\n  id: string\n  /** Input title */\n  title: string\n  /** Input menu items groups. See {@link MenuItem} and {@link MenuItemBuilder} */\n  menuItems?: (MenuItem | MenuItemBuilder)[]\n  /** Input menu items groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder} */\n  menuItemGroups?: (MenuItemGroup | MenuItemGroupBuilder)[]\n  /** Input initial value array. See {@link InitialValueTemplateItem} and {@link InitialValueTemplateItemBuilder} */\n  initialValueTemplates?: (InitialValueTemplateItem | InitialValueTemplateItemBuilder)[]\n  /** Input default layout. */\n  defaultLayout?: PreviewLayoutKey\n  /** If input can handle intent. See {@link IntentChecker} */\n  canHandleIntent?: IntentChecker\n  /** Input child of type {@link Child} */\n  child?: Child\n}\n\n/**\n * Class for building generic lists\n *\n * @public\n */\nexport abstract class GenericListBuilder<TList extends BuildableGenericList, ConcreteImpl>\n  implements Serializable<GenericList>\n{\n  /** Check if initial value templates are set */\n  protected initialValueTemplatesSpecified = false\n  /** Generic list option object */\n  protected spec: TList = {} as TList\n\n  /** Set generic list ID\n   * @param id - generic list ID\n   * @returns generic list builder based on ID provided.\n   */\n  id(id: string): ConcreteImpl {\n    return this.clone({id})\n  }\n\n  /** Get generic list ID\n   * @returns generic list ID\n   */\n  getId(): TList['id'] {\n    return this.spec.id\n  }\n\n  /** Set generic list title\n   * @param title - generic list title\n   * @returns generic list builder based on title and ID provided.\n   */\n  title(title: string): ConcreteImpl {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /** Get generic list title\n   * @returns generic list title\n   */\n  getTitle(): TList['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ConcreteImpl {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): TList['i18n'] {\n    return this.spec.i18n\n  }\n\n  /** Set generic list layout\n   * @param defaultLayout - generic list layout key.\n   * @returns generic list builder based on layout provided.\n   */\n  defaultLayout(defaultLayout: PreviewLayoutKey): ConcreteImpl {\n    return this.clone({defaultLayout})\n  }\n\n  /** Get generic list layout\n   * @returns generic list layout\n   */\n  getDefaultLayout(): TList['defaultLayout'] {\n    return this.spec.defaultLayout\n  }\n\n  /** Set generic list menu items\n   * @param menuItems - generic list menu items. See {@link MenuItem} and {@link MenuItemBuilder}\n   * @returns generic list builder based on menu items provided.\n   */\n  menuItems(menuItems: (MenuItem | MenuItemBuilder)[] | undefined): ConcreteImpl {\n    return this.clone({menuItems})\n  }\n\n  /** Get generic list menu items\n   * @returns generic list menu items\n   */\n  getMenuItems(): TList['menuItems'] {\n    return this.spec.menuItems\n  }\n\n  /** Set generic list menu item groups\n   * @param menuItemGroups - generic list menu item groups. See {@link MenuItemGroup} and {@link MenuItemGroupBuilder}\n   * @returns generic list builder based on menu item groups provided.\n   */\n  menuItemGroups(menuItemGroups: (MenuItemGroup | MenuItemGroupBuilder)[]): ConcreteImpl {\n    return this.clone({menuItemGroups})\n  }\n\n  /** Get generic list menu item groups\n   * @returns generic list menu item groups\n   */\n  getMenuItemGroups(): TList['menuItemGroups'] {\n    return this.spec.menuItemGroups\n  }\n\n  /** Set generic list child\n   * @param child - generic list child. See {@link Child}\n   * @returns generic list builder based on child provided (clone).\n   */\n  child(child: Child): ConcreteImpl {\n    return this.clone({child})\n  }\n\n  /** Get generic list child\n   * @returns generic list child\n   */\n  getChild(): TList['child'] {\n    return this.spec.child\n  }\n\n  /** Set generic list can handle intent\n   * @param canHandleIntent - generic list intent checker. See {@link IntentChecker}\n   * @returns generic list builder based on can handle intent provided.\n   */\n  canHandleIntent(canHandleIntent?: IntentChecker): ConcreteImpl {\n    return this.clone({canHandleIntent})\n  }\n\n  /** Get generic list can handle intent\n   * @returns generic list can handle intent\n   */\n  getCanHandleIntent(): TList['canHandleIntent'] {\n    return this.spec.canHandleIntent\n  }\n\n  /** Set generic list display options\n   * @param enabled - allow / disallow for showing icons\n   * @returns generic list builder based on display options (showIcons) provided.\n   */\n  showIcons(enabled = true): ConcreteImpl {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcons: enabled},\n    })\n  }\n\n  /** Get generic list display options\n   * @returns generic list display options (specifically showIcons)\n   */\n  getShowIcons(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcons : undefined\n  }\n\n  /** Set generic list initial value templates\n   * @param templates - generic list initial value templates. See {@link InitialValueTemplateItemBuilder}\n   * @returns generic list builder based on templates provided.\n   */\n  initialValueTemplates(\n    templates:\n      | InitialValueTemplateItem\n      | InitialValueTemplateItemBuilder\n      | Array<InitialValueTemplateItem | InitialValueTemplateItemBuilder>,\n  ): ConcreteImpl {\n    this.initialValueTemplatesSpecified = true\n    return this.clone({initialValueTemplates: Array.isArray(templates) ? templates : [templates]})\n  }\n\n  /** Get generic list initial value templates\n   * @returns generic list initial value templates\n   */\n  getInitialValueTemplates(): TList['initialValueTemplates'] {\n    return this.spec.initialValueTemplates\n  }\n\n  /** Serialize generic list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns generic list object based on path provided in options. See {@link GenericList}\n   */\n  serialize(options: SerializeOptions = {path: []}): GenericList {\n    const id = this.spec.id || ''\n    const path = options.path\n\n    const defaultLayout = this.spec.defaultLayout\n    if (defaultLayout && !layoutOptions.includes(defaultLayout)) {\n      throw new SerializeError(\n        `\\`layout\\` must be one of ${layoutOptions.map((item) => `\"${item}\"`).join(', ')}`,\n        path,\n        id || options.index,\n        this.spec.title,\n      )\n    }\n\n    const initialValueTemplates = (this.spec.initialValueTemplates || []).map((item, i) =>\n      maybeSerializeInitialValueTemplateItem(item, i, path),\n    )\n\n    return {\n      id: validateId(id, options.path, id || options.index),\n      title: this.spec.title,\n      i18n: this.spec.i18n,\n      type: 'genericList',\n      defaultLayout,\n      child: this.spec.child || noChildResolver,\n      canHandleIntent: this.spec.canHandleIntent || shallowIntentChecker,\n      displayOptions: this.spec.displayOptions,\n      initialValueTemplates,\n      menuItems: (this.spec.menuItems || []).map((item, i) =>\n        maybeSerializeMenuItem(item, i, path),\n      ),\n      menuItemGroups: (this.spec.menuItemGroups || []).map((item, i) =>\n        maybeSerializeMenuItemGroup(item, i, path),\n      ),\n    }\n  }\n\n  /** Clone generic list builder (allows for options overriding)\n   * @param _withSpec - generic list options.\n   * @returns generic list builder.\n   */\n  abstract clone(_withSpec?: object): ConcreteImpl\n}\n","import {generateHelpUrl} from '@sanity/generate-help-url'\nimport {AddIcon} from '@sanity/icons'\nimport {type SchemaType, type SortOrderingItem} from '@sanity/types'\nimport {DEFAULT_STUDIO_CLIENT_OPTIONS, type InitialValueTemplateItem} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions, type ItemChild} from './ChildResolver'\nimport {DocumentBuilder} from './Document'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n} from './GenericList'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Child, type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {resolveTypeForDocument} from './util/resolveTypeForDocument'\n\nconst validateFilter = (spec: PartialDocumentList, options: SerializeOptions) => {\n  const filter = spec.options?.filter.trim() || ''\n\n  if (['*', '{'].includes(filter[0])) {\n    throw new SerializeError(\n      `\\`filter\\` cannot start with \\`${filter[0]}\\` - looks like you are providing a query, not a filter`,\n      options.path,\n      spec.id,\n      spec.title,\n    ).withHelpUrl(HELP_URL.QUERY_PROVIDED_FOR_FILTER)\n  }\n\n  return filter\n}\n\nconst createDocumentChildResolverForItem =\n  (context: StructureContext): ChildResolver =>\n  (itemId: string, options: ChildResolverOptions): ItemChild | Promise<ItemChild> | undefined => {\n    const parentItem = options.parent as DocumentList\n    const template = options.params?.template\n      ? context.templates.find((tpl) => tpl.id === options.params.template)\n      : undefined\n    const type = template\n      ? template.schemaType\n      : parentItem.schemaTypeName || resolveTypeForDocument(context.getClient, itemId)\n\n    return Promise.resolve(type).then((schemaType) =>\n      schemaType\n        ? context.resolveDocumentNode({schemaType, documentId: itemId})\n        : new DocumentBuilder(context).id('editor').documentId(itemId).schemaType(''),\n    )\n  }\n\n/**\n * Partial document list\n *\n * @public\n */\nexport interface PartialDocumentList extends BuildableGenericList {\n  /** Document list options. See {@link DocumentListOptions} */\n  options?: DocumentListOptions\n  /** Schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document list input\n *\n * @public\n */\nexport interface DocumentListInput extends GenericListInput {\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n}\n\n/**\n * Interface for document list\n *\n * @public\n */\nexport interface DocumentList extends GenericList {\n  type: 'documentList'\n  /** Document list options. See {@link DocumentListOptions} */\n  options: DocumentListOptions\n  /** Document list child. See {@link Child} */\n  child: Child\n  /** Document schema type name */\n  schemaTypeName?: string\n}\n\n/**\n * Interface for document List options\n *\n * @public\n */\nexport interface DocumentListOptions {\n  /** Document list filter */\n  filter: string\n  /** Document list parameters */\n  params?: Record<string, unknown>\n  /** Document list API version */\n  apiVersion?: string\n  /** Document list API default ordering array. */\n  defaultOrdering?: SortOrderingItem[]\n}\n\n/**\n * Class for building document list\n *\n * @public\n */\nexport class DocumentListBuilder extends GenericListBuilder<\n  PartialDocumentList,\n  DocumentListBuilder\n> {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super()\n    this.spec = spec || {}\n    this.initialValueTemplatesSpecified = Boolean(spec?.initialValueTemplates)\n  }\n\n  /** Set API version\n   * @param apiVersion - API version\n   * @returns document list builder based on the options and API version provided. See {@link DocumentListBuilder}\n   */\n  apiVersion(apiVersion: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {filter: ''}), apiVersion}})\n  }\n\n  /** Get API version\n   * @returns API version\n   */\n  getApiVersion(): string | undefined {\n    return this.spec.options?.apiVersion\n  }\n\n  /** Set Document list filter\n   * @param filter - GROQ-filter used to determine which documents to display. Do not support joins, since they operate on individual documents, and will ignore order-clauses and projections. See {@link https://www.sanity.io/docs/realtime-updates}\n   * @returns document list builder based on the options and filter provided. See {@link DocumentListBuilder}\n   */\n  filter(filter: string): DocumentListBuilder {\n    return this.clone({options: {...(this.spec.options || {}), filter}})\n  }\n\n  /** Get Document list filter\n   * @returns filter\n   */\n  getFilter(): string | undefined {\n    return this.spec.options?.filter\n  }\n\n  /** Set Document list schema type name\n   * @param type - schema type name.\n   * @returns document list builder based on the schema type name provided. See {@link DocumentListBuilder}\n   */\n  schemaType(type: SchemaType | string): DocumentListBuilder {\n    const schemaTypeName = typeof type === 'string' ? type : type.name\n    return this.clone({schemaTypeName})\n  }\n\n  /** Get Document list schema type name\n   * @returns schema type name\n   */\n  getSchemaType(): string | undefined {\n    return this.spec.schemaTypeName\n  }\n\n  /** Set Document list options' parameters\n   * @param params - parameters\n   * @returns document list builder based on the options provided. See {@link DocumentListBuilder}\n   */\n  params(params: Record<string, unknown>): DocumentListBuilder {\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), params},\n    })\n  }\n\n  /** Get Document list options' parameters\n   * @returns options\n   */\n  getParams(): Record<string, unknown> | undefined {\n    return this.spec.options?.params\n  }\n\n  /** Set Document list default ordering\n   * @param ordering - default sort ordering array. See {@link SortOrderingItem}\n   * @returns document list builder based on ordering provided. See {@link DocumentListBuilder}\n   */\n  defaultOrdering(ordering: SortOrderingItem[]): DocumentListBuilder {\n    if (!Array.isArray(ordering)) {\n      throw new Error('`defaultOrdering` must be an array of order clauses')\n    }\n\n    return this.clone({\n      options: {...(this.spec.options || {filter: ''}), defaultOrdering: ordering},\n    })\n  }\n\n  /** Get Document list default ordering\n   * @returns default ordering. See {@link SortOrderingItem}\n   */\n  getDefaultOrdering(): SortOrderingItem[] | undefined {\n    return this.spec.options?.defaultOrdering\n  }\n\n  /** Serialize Document list\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list object based on path provided in options. See {@link DocumentList}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentList {\n    if (typeof this.spec.id !== 'string' || !this.spec.id) {\n      throw new SerializeError(\n        '`id` is required for document lists',\n        options.path,\n        options.index,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!this.spec.options || !this.spec.options.filter) {\n      throw new SerializeError(\n        '`filter` is required for document lists',\n        options.path,\n        this.spec.id,\n        this.spec.title,\n      ).withHelpUrl(HELP_URL.FILTER_REQUIRED)\n    }\n\n    const hasSimpleFilter = this.spec.options?.filter === '_type == $type'\n    if (!hasSimpleFilter && this.spec.options.filter && !this.spec.options.apiVersion) {\n      console.warn(\n        `No apiVersion specified for document type list with custom filter: \\`${this.spec.options.filter}\\`. This will be required in the future. See %s for more info.`,\n        generateHelpUrl(HELP_URL.API_VERSION_REQUIRED_FOR_CUSTOM_FILTER),\n      )\n    }\n    return {\n      ...super.serialize(options),\n      type: 'documentList',\n      schemaTypeName: this.spec.schemaTypeName,\n      child: this.spec.child || createDocumentChildResolverForItem(this._context),\n      options: {\n        ...this.spec.options,\n        // @todo: make specifying .apiVersion required when using custom (non-simple) filters in v4\n        apiVersion: this.spec.options.apiVersion || DEFAULT_STUDIO_CLIENT_OPTIONS.apiVersion,\n        filter: validateFilter(this.spec, options),\n      },\n    }\n  }\n\n  /** Clone Document list builder (allows for options overriding)\n   * @param withSpec - override document list spec. See {@link PartialDocumentList}\n   * @returns document list builder. See {@link DocumentListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentListBuilder {\n    const builder = new DocumentListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n\n    if (!this.initialValueTemplatesSpecified) {\n      builder.spec.initialValueTemplates = inferInitialValueTemplates(this._context, builder.spec)\n    }\n\n    if (!builder.spec.schemaTypeName) {\n      builder.spec.schemaTypeName = inferTypeName(builder.spec)\n    }\n\n    return builder\n  }\n\n  /** Get Document list spec\n   * @returns document list spec. See {@link PartialDocumentList}\n   */\n  getSpec(): PartialDocumentList {\n    return this.spec\n  }\n}\n\nfunction inferInitialValueTemplates(\n  context: StructureContext,\n  spec: PartialDocumentList,\n): InitialValueTemplateItem[] | undefined {\n  const {document} = context\n  const {schemaTypeName, options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = schemaTypeName\n    ? [schemaTypeName]\n    : Array.from(new Set(getTypeNamesFromFilter(filter, params)))\n\n  if (typeNames.length === 0) {\n    return undefined\n  }\n\n  return typeNames\n    .flatMap((schemaType) =>\n      document.resolveNewDocumentOptions({\n        type: 'structure',\n        schemaType,\n      }),\n    )\n    .map((option) => ({...option, icon: AddIcon}))\n}\n\nfunction inferTypeName(spec: PartialDocumentList): string | undefined {\n  const {options} = spec\n  const {filter, params} = options || {filter: '', params: {}}\n  const typeNames = getTypeNamesFromFilter(filter, params)\n  return typeNames.length === 1 ? typeNames[0] : undefined\n}\n\n/** @internal */\nexport function getTypeNamesFromFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  let typeNames = getTypeNamesFromEqualityFilter(filter, params)\n\n  if (typeNames.length === 0) {\n    typeNames = getTypeNamesFromInTypesFilter(filter, params)\n  }\n\n  return typeNames\n}\n\n// From _type == \"movie\" || _type == $otherType\nfunction getTypeNamesFromEqualityFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern =\n    /\\b_type\\s*==\\s*(['\"].*?['\"]|\\$.*?(?:\\s|$))|\\B(['\"].*?['\"]|\\$.*?(?:\\s|$))\\s*==\\s*_type/g\n  const matches: string[] = []\n  let match\n  while ((match = pattern.exec(filter)) !== null) {\n    matches.push(match[1] || match[2])\n  }\n\n  return matches\n    .map((candidate) => {\n      const typeName = candidate[0] === '$' ? params[candidate.slice(1)] : candidate\n      const normalized = ((typeName as string) || '').trim().replace(/^[\"']|[\"']$/g, '')\n      return normalized\n    })\n    .filter(Boolean)\n}\n\n// From _type in [\"dog\", \"cat\", $otherSpecies]\nfunction getTypeNamesFromInTypesFilter(\n  filter: string,\n  params: Record<string, unknown> = {},\n): string[] {\n  const pattern = /\\b_type\\s+in\\s+\\[(.*?)\\]/\n  const matches = filter.match(pattern)\n  if (!matches) {\n    return []\n  }\n\n  return matches[1]\n    .split(/,\\s*/)\n    .map((match) => match.trim().replace(/^[\"']+|[\"']+$/g, ''))\n    .map((item) => (item[0] === '$' ? params[item.slice(1)] : item))\n    .filter(Boolean) as string[]\n}\n","import {find} from 'lodash'\nimport {isRecord} from 'sanity'\n\nimport {type ChildResolver, type ChildResolverOptions} from './ChildResolver'\nimport {isDocumentListItem} from './DocumentListItem'\nimport {\n  type BuildableGenericList,\n  type GenericList,\n  GenericListBuilder,\n  type GenericListInput,\n  shallowIntentChecker,\n} from './GenericList'\nimport {type IntentChecker} from './Intent'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type Divider, type SerializeOptions, type SerializePath} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst getArgType = (thing: ListItem) => {\n  if (thing instanceof ListBuilder) {\n    return 'ListBuilder'\n  }\n\n  if (isPromise<ListItem>(thing)) {\n    return 'Promise'\n  }\n\n  return Array.isArray(thing) ? 'array' : typeof thing\n}\n\nconst isListItem = (item: ListItem | Divider): item is ListItem => {\n  return item.type === 'listItem'\n}\n\nconst defaultCanHandleIntent: IntentChecker = (intentName: string, params, context) => {\n  const pane = context.pane as List\n  const items = pane.items || []\n  return (\n    items\n      .filter(isDocumentListItem)\n      .some((item) => item.schemaType.name === params.type && item._id === params.id) ||\n    shallowIntentChecker(intentName, params, context)\n  )\n}\n\nconst resolveChildForItem: ChildResolver = (itemId: string, options: ChildResolverOptions) => {\n  const parentItem = options.parent as List\n  const items = parentItem.items.filter(isListItem)\n  const target = (items.find((item) => item.id === itemId) || {child: undefined}).child\n\n  if (!target || typeof target !== 'function') {\n    return target\n  }\n\n  return typeof target === 'function' ? target(itemId, options) : target\n}\n\nfunction maybeSerializeListItem(\n  item: ListItem | ListItemBuilder | Divider,\n  index: number,\n  path: SerializePath,\n): ListItem | Divider {\n  if (item instanceof ListItemBuilder) {\n    return item.serialize({path, index})\n  }\n\n  const listItem = item as ListItem\n  if (listItem && listItem.type === 'divider') {\n    return item as Divider\n  }\n\n  if (!listItem || listItem.type !== 'listItem') {\n    const gotWhat = (listItem && listItem.type) || getArgType(listItem)\n    const helpText = gotWhat === 'array' ? ' - did you forget to spread (...moreItems)?' : ''\n    throw new SerializeError(\n      `List items must be of type \"listItem\", got \"${gotWhat}\"${helpText}`,\n      path,\n      index,\n    ).withHelpUrl(HELP_URL.INVALID_LIST_ITEM)\n  }\n\n  return item\n}\n\nfunction isPromise<T>(thing: unknown): thing is PromiseLike<T> {\n  return isRecord(thing) && typeof thing.then === 'function'\n}\n\n/**\n * Interface for List\n *\n * @public\n */\nexport interface List extends GenericList {\n  type: 'list'\n  /** List items. See {@link ListItem} and {@link Divider} */\n  items: (ListItem | Divider)[]\n}\n\n/**\n * Interface for list input\n *\n * @public\n */\nexport interface ListInput extends GenericListInput {\n  /** List input items array. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * Interface for buildable list\n *\n * @public\n */\nexport interface BuildableList extends BuildableGenericList {\n  /** List items. See {@link ListItem}, {@link ListItemBuilder} and {@link Divider} */\n  items?: (ListItem | ListItemBuilder | Divider)[]\n}\n\n/**\n * A `ListBuilder` is used to build a list of items in the structure tool.\n *\n * @public */\nexport class ListBuilder extends GenericListBuilder<BuildableList, ListBuilder> {\n  /** buildable list option object. See {@link BuildableList} */\n  protected spec: BuildableList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListInput,\n  ) {\n    super()\n    this.spec = spec ? spec : {}\n    this.initialValueTemplatesSpecified = Boolean(spec && spec.initialValueTemplates)\n  }\n\n  /**\n   * Set list builder based on items provided\n   * @param items - list items. See {@link ListItemBuilder}, {@link ListItem} and {@link Divider}\n   * @returns list builder based on items provided. See {@link ListBuilder}\n   */\n  items(items: (ListItemBuilder | ListItem | Divider)[]): ListBuilder {\n    return this.clone({items})\n  }\n\n  /** Get list builder items\n   * @returns list items. See {@link BuildableList}\n   */\n  getItems(): BuildableList['items'] {\n    return this.spec.items\n  }\n\n  /** Serialize list builder\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns list based on path in options. See {@link List}\n   */\n  serialize(options: SerializeOptions = {path: []}): List {\n    const id = this.spec.id\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for lists',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    const items = typeof this.spec.items === 'undefined' ? [] : this.spec.items\n    if (!Array.isArray(items)) {\n      throw new SerializeError(\n        '`items` must be an array of items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEMS_MUST_BE_ARRAY)\n    }\n\n    const path = (options.path || []).concat(id)\n    const serializedItems = items.map((item, index) => maybeSerializeListItem(item, index, path))\n    const dupes = serializedItems.filter((val, i) => find(serializedItems, {id: val.id}, i + 1))\n\n    if (dupes.length > 0) {\n      const dupeIds = dupes.map((item) => item.id).slice(0, 5)\n      const dupeDesc = dupes.length > 5 ? `${dupeIds.join(', ')}...` : dupeIds.join(', ')\n      throw new SerializeError(\n        `List items with same ID found (${dupeDesc})`,\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.LIST_ITEM_IDS_MUST_BE_UNIQUE)\n    }\n\n    return {\n      ...super.serialize(options),\n      type: 'list',\n      canHandleIntent: this.spec.canHandleIntent || defaultCanHandleIntent,\n      child: this.spec.child || resolveChildForItem,\n      items: serializedItems,\n    }\n  }\n\n  /**\n   * Clone list builder and return new list builder based on context and spec provided\n   * @param withSpec - list options. See {@link BuildableList}\n   * @returns new list builder based on context and spec provided. See {@link ListBuilder}\n   */\n  clone(withSpec?: BuildableList): ListBuilder {\n    const builder = new ListBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {type Observable} from 'rxjs'\nimport {type I18nTextRecord} from 'sanity'\n\nimport {type ChildResolver, type ItemChild} from './ChildResolver'\nimport {ComponentBuilder} from './Component'\nimport {DocumentBuilder} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {ListBuilder} from './List'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {\n  type Collection,\n  type CollectionBuilder,\n  type Serializable,\n  type SerializeOptions,\n} from './StructureNodes'\nimport {type StructureContext} from './types'\nimport {getStructureNodeId} from './util/getStructureNodeId'\nimport {validateId} from './util/validateId'\n\n/**\n * Unserialized list item child.\n * See {@link Collection}, {@link CollectionBuilder}, {@link ChildResolver} and {@link ItemChild}\n *\n * @public\n */\nexport type UnserializedListItemChild =\n  | Collection\n  | CollectionBuilder\n  | ChildResolver\n  | Observable<ItemChild>\n\n/**\n * Child of List Item\n * See {@link Collection}, {@link ChildResolver}, {@link ItemChild}\n * @public\n */\nexport type ListItemChild = Collection | ChildResolver | Observable<ItemChild> | undefined\n\n/**\n * Interface for serialize list item options\n *\n * @public\n */\nexport interface ListItemSerializeOptions extends SerializeOptions {\n  /** Check if list item title is optional */\n  titleIsOptional?: boolean\n}\n\n/**\n * Interface for ist item display options\n *\n * @public */\nexport interface ListItemDisplayOptions {\n  /** Check if list item display should show icon */\n  showIcon?: boolean\n}\n\n/**\n * interface for list item input\n *\n * @public */\nexport interface ListItemInput {\n  /** List item id */\n  id: string\n  /** List item title */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Interface for List Item\n *\n * @public */\nexport interface ListItem {\n  /** List item id */\n  id: string\n  /** List item type */\n  type: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item title. Note that the `i18n` key and namespace will take precedence. */\n  title?: string\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link ListItemChild} */\n  child?: ListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema type. See {@link SchemaType} */\n  schemaType?: SchemaType\n}\n\n/**\n * Interface for unserialized list items.\n *\n * @public\n */\nexport interface UnserializedListItem {\n  /** List item ID */\n  id: string\n  /** List item title */\n  title: string\n  /**\n   * The i18n key and namespace used to populate the localized title. This is\n   * the recommend way to set the title if you are localizing your studio.\n   */\n  i18n?: I18nTextRecord<'title'>\n  /** List item icon */\n  icon?: React.ComponentType | React.ReactNode\n  /** List item child. See {@link UnserializedListItemChild} */\n  child?: UnserializedListItemChild\n  /** List item display options. See {@link ListItemDisplayOptions} */\n  displayOptions?: ListItemDisplayOptions\n  /** List item schema. See {@link SchemaType} */\n  schemaType?: SchemaType | string\n}\n\n/**\n * Partial list item. See {@link UnserializedListItem}\n *\n * @public */\nexport type PartialListItem = Partial<UnserializedListItem>\n\n/**\n * Class for building list items\n *\n * @public */\nexport class ListItemBuilder implements Serializable<ListItem> {\n  /** List item option object. See {@link PartialListItem} */\n  protected spec: PartialListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: ListItemInput,\n  ) {\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set list item ID\n   * @returns list item builder based on ID provided. See {@link ListItemBuilder}\n   */\n  id(id: string): ListItemBuilder {\n    return this.clone({id})\n  }\n\n  /**\n   * Get list item ID\n   * @returns list item ID. See {@link PartialListItem}\n   */\n  getId(): PartialListItem['id'] {\n    return this.spec.id\n  }\n\n  /**\n   * Set list item title\n   * @returns list item builder based on title provided. See {@link ListItemBuilder}\n   */\n  title(title: string): ListItemBuilder {\n    return this.clone({title, id: getStructureNodeId(title, this.spec.id)})\n  }\n\n  /**\n   * Get list item title\n   * @returns list item title. See {@link PartialListItem}\n   */\n  getTitle(): PartialListItem['title'] {\n    return this.spec.title\n  }\n\n  /** Set the i18n key and namespace used to populate the localized title.\n   * @param i18n - the key and namespaced used to populate the localized title.\n   * @returns component builder based on i18n key and ns provided\n   */\n  i18n(i18n: I18nTextRecord<'title'>): ListItemBuilder {\n    return this.clone({i18n})\n  }\n\n  /** Get i18n key and namespace used to populate the localized title\n   * @returns the i18n key and namespace used to populate the localized title\n   */\n  getI18n(): I18nTextRecord<'title'> | undefined {\n    return this.spec.i18n\n  }\n\n  /**\n   * Set list item icon\n   * @returns list item builder based on icon provided. See {@link ListItemBuilder}\n   */\n  icon(icon: React.ComponentType | React.ReactNode): ListItemBuilder {\n    return this.clone({icon})\n  }\n\n  /**\n   * Set if list item should show icon\n   * @returns list item builder based on showIcon provided. See {@link ListItemBuilder}\n   */\n  showIcon(enabled = true): ListItemBuilder {\n    return this.clone({\n      displayOptions: {...(this.spec.displayOptions || {}), showIcon: enabled},\n    })\n  }\n\n  /**\n   * Check if list item should show icon\n   * @returns true if it should show the icon, false if not, undefined if not set\n   */\n  getShowIcon(): boolean | undefined {\n    return this.spec.displayOptions ? this.spec.displayOptions.showIcon : undefined\n  }\n\n  /**\n   *Get list item icon\n   * @returns list item icon. See {@link PartialListItem}\n   */\n  getIcon(): PartialListItem['icon'] {\n    return this.spec.icon\n  }\n\n  /**\n   * Set list item child\n   * @param child - list item child. See {@link UnserializedListItemChild}\n   * @returns list item builder based on child provided. See {@link ListItemBuilder}\n   */\n  child(child: UnserializedListItemChild): ListItemBuilder {\n    return this.clone({child})\n  }\n\n  /**\n   * Get list item child\n   * @returns list item child. See {@link PartialListItem}\n   */\n  getChild(): PartialListItem['child'] {\n    return this.spec.child\n  }\n\n  /**\n   * Set list item schema type\n   * @param schemaType - list item schema type. See {@link SchemaType}\n   * @returns list item builder based on schema type provided. See {@link ListItemBuilder}\n   */\n  schemaType(schemaType: SchemaType | string): ListItemBuilder {\n    return this.clone({schemaType})\n  }\n\n  /**\n   * Get list item schema type\n   * @returns list item schema type. See {@link PartialListItem}\n   */\n  getSchemaType(): PartialListItem['schemaType'] {\n    const schemaType = this.spec.schemaType\n\n    if (typeof schemaType === 'string') {\n      return this._context.schema.get(schemaType)\n    }\n\n    return this.spec.schemaType\n  }\n\n  /** Serialize list item builder\n   * @param options - serialization options. See {@link ListItemSerializeOptions}\n   * @returns list item node based on path provided in options. See {@link ListItem}\n   */\n  serialize(options: ListItemSerializeOptions = {path: []}): ListItem {\n    const {id, title, child} = this.spec\n    if (typeof id !== 'string' || !id) {\n      throw new SerializeError(\n        '`id` is required for list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.ID_REQUIRED)\n    }\n\n    if (!options.titleIsOptional && (typeof title !== 'string' || !title)) {\n      throw new SerializeError('`title` is required for list items', options.path, id).withHelpUrl(\n        HELP_URL.TITLE_REQUIRED,\n      )\n    }\n\n    let schemaType = this.spec.schemaType\n    if (typeof schemaType === 'string') {\n      const type = this._context.schema.get(schemaType)\n      if (!type) {\n        throw new SerializeError(\n          `Could not find type \"${schemaType}\" in schema`,\n          options.path,\n          id,\n        ).withHelpUrl(HELP_URL.SCHEMA_TYPE_NOT_FOUND)\n      }\n\n      schemaType = type\n    }\n\n    const serializeOptions = {path: options.path.concat(id), hint: 'child'}\n    let listChild =\n      child instanceof ComponentBuilder ||\n      child instanceof DocumentListBuilder ||\n      child instanceof DocumentBuilder ||\n      child instanceof ListBuilder\n        ? child.serialize(serializeOptions)\n        : child\n\n    // In the case of a function, create a bound version that will pass the correct serialize\n    // context, so we may lazily resolve it at some point in the future without losing context\n    if (typeof listChild === 'function') {\n      const originalChild = listChild\n      listChild = (itemId, childOptions) => {\n        return originalChild(itemId, {...childOptions, serializeOptions})\n      }\n    }\n\n    return {\n      ...this.spec,\n      id: validateId(id, options.path, options.index),\n      schemaType,\n      child: listChild,\n      title,\n      type: 'listItem',\n    }\n  }\n\n  /** Clone list item builder\n   * @param withSpec - partial list item options. See {@link PartialListItem}\n   * @returns list item builder based on context and spec provided. See {@link ListItemBuilder}\n   */\n  clone(withSpec?: PartialListItem): ListItemBuilder {\n    const builder = new ListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n","import {type SchemaType} from '@sanity/types'\nimport {isRecord} from 'sanity'\n\nimport {DocumentBuilder} from './Document'\nimport {\n  type ListItem,\n  ListItemBuilder,\n  type ListItemInput,\n  type UnserializedListItem,\n} from './ListItem'\nimport {HELP_URL, SerializeError} from './SerializeError'\nimport {type SerializeOptions} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document list item input\n *\n * @public\n */\nexport interface DocumentListItemInput extends ListItemInput {\n  /** Document list item input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Interface for document list item\n *\n * @public\n */\nexport interface DocumentListItem extends ListItem {\n  /** Document schema type. See {@link SchemaType} */\n  schemaType: SchemaType\n  /** Document ID */\n  _id: string\n}\n\n/**\n * Partial document list item\n *\n * @public\n */\nexport type PartialDocumentListItem = Partial<UnserializedListItem>\n\nconst createDefaultChildResolver =\n  (context: StructureContext, spec: PartialDocumentListItem) => (documentId: string) => {\n    const schemaType =\n      spec.schemaType &&\n      (typeof spec.schemaType === 'string' ? spec.schemaType : spec.schemaType.name)\n\n    return schemaType\n      ? context.resolveDocumentNode({schemaType, documentId})\n      : new DocumentBuilder(context).id('documentEditor').documentId(documentId)\n  }\n\n/**\n * Class for building a document list item\n *\n * @public\n */\nexport class DocumentListItemBuilder extends ListItemBuilder {\n  /** Document list options. See {@link PartialDocumentListItem} */\n  protected spec: PartialDocumentListItem\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListItemInput,\n  ) {\n    super(_context, spec)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Serialize document list item\n   * @param options - serialization options. See {@link SerializeOptions}\n   * @returns document list item object based on path provided in options. See {@link DocumentListItem}\n   */\n  serialize(options: SerializeOptions = {path: []}): DocumentListItem {\n    const spec = super.serialize({...options, titleIsOptional: true})\n\n    if (!spec.schemaType) {\n      throw new SerializeError(\n        '`schemaType` is required for document list items',\n        options.path,\n        options.index,\n      ).withHelpUrl(HELP_URL.SCHEMA_TYPE_REQUIRED)\n    }\n\n    const child = spec.child || createDefaultChildResolver(this._context, spec)\n    return {...spec, child, schemaType: spec.schemaType, _id: spec.id}\n  }\n\n  /** Clone Document list item builder (allows for options overriding)\n   * @param withSpec - Document list item builder options. See {@link PartialDocumentListItem}\n   * @returns document list item builder. See {@link DocumentListItemBuilder}\n   */\n  clone(withSpec?: PartialDocumentListItem): DocumentListItemBuilder {\n    const builder = new DocumentListItemBuilder(this._context)\n    builder.spec = {...this.spec, ...(withSpec || {})}\n    return builder\n  }\n}\n\n/** @internal */\nexport function isDocumentListItem(item: unknown): item is DocumentListItem {\n  return isRecord(item) && typeof item.schemaType !== 'undefined' && typeof item._id === 'string'\n}\n","import {type SchemaType} from '@sanity/types'\n\nimport {DocumentListBuilder, type DocumentListInput, type PartialDocumentList} from './DocumentList'\nimport {type GenericListInput} from './GenericList'\nimport {DEFAULT_INTENT_HANDLER} from './Intent'\nimport {type Child} from './StructureNodes'\nimport {type StructureContext} from './types'\n\n/**\n * Interface for document type list input\n *\n * @public\n */\nexport interface DocumentTypeListInput extends Partial<GenericListInput> {\n  /** Document type list input schema type. See {@link SchemaType} */\n  schemaType: SchemaType | string\n}\n\n/**\n * Class for building a document type list\n *\n * @public\n */\nexport class DocumentTypeListBuilder extends DocumentListBuilder {\n  /** Document list options. See {@link PartialDocumentList} */\n  protected spec: PartialDocumentList\n\n  constructor(\n    /**\n     * Structure context. See {@link StructureContext}\n     */\n    protected _context: StructureContext,\n    spec?: DocumentListInput,\n  ) {\n    super(_context)\n    this.spec = spec ? spec : {}\n  }\n\n  /**\n   * Set Document type list child\n   * @param child - Child component. See {@link Child}\n   * @returns document type list builder based on child component provided without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  child(child: Child): DocumentTypeListBuilder {\n    return this.cloneWithoutDefaultIntentHandler({child})\n  }\n\n  /** Clone Document type list builder (allows for options overriding)\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder. See {@link DocumentTypeListBuilder}\n   */\n  clone(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    builder.spec = {...this.spec, ...parent.getSpec(), ...(withSpec || {})}\n    return builder\n  }\n\n  /** Clone Document type list builder (allows for options overriding) and remove default intent handler\n   * @param withSpec - Document type list builder options. See {@link PartialDocumentList}\n   * @returns document type list builder without default intent handler. See {@link DocumentTypeListBuilder}\n   */\n  cloneWithoutDefaultIntentHandler(withSpec?: PartialDocumentList): DocumentTypeListBuilder {\n    const parent = super.clone(withSpec)\n    const builder = new DocumentTypeListBuilder(this._context)\n    const canHandleIntent = this.spec.canHandleIntent\n    const shouldOverride = canHandleIntent && canHandleIntent.identity === DEFAULT_INTENT_HANDLER\n    const override = shouldOverride ? {canHandleIntent: undefined} : {}\n    builder.spec = {\n      ...parent.getSpec(),\n      ...this.spec,\n      ...(withSpec || {}),\n      ...override,\n    }\n    return builder\n  }\n}\n","import {StackCompactIcon, StackIcon} from '@sanity/icons'\nimport {type SchemaType} from '@sanity/types'\nimport {startCase} from 'lodash'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {type DocumentListBuilder} from './DocumentList'\nimport {DocumentTypeListBuilder, type DocumentTypeListInput} from './DocumentTypeList'\nimport {defaultIntentChecker} from './Intent'\nimport {type List} from './List'\nimport {type ListItem, ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {DEFAULT_SELECTED_ORDERING_OPTION} from './Sort'\nimport {type Collection} from './StructureNodes'\nimport {type StructureContext} from './types'\n\nconst BUNDLED_DOC_TYPES = ['sanity.imageAsset', 'sanity.fileAsset']\n\nfunction isBundledDocType(typeName: string) {\n  return BUNDLED_DOC_TYPES.includes(typeName)\n}\n\nfunction isDocumentType(schemaType: SchemaType) {\n  return schemaType.type?.name === 'document'\n}\n\nfunction isList(collection: Collection): collection is List {\n  return collection.type === 'list'\n}\n\nexport function getDocumentTypes({schema}: StructureContext): string[] {\n  return schema\n    .getTypeNames()\n    .filter((n) => {\n      const schemaType = schema.get(n)\n      return schemaType && isDocumentType(schemaType)\n    })\n    .filter((n) => !isBundledDocType(n))\n}\n\nexport function getDocumentTypeListItems(context: StructureContext): ListItemBuilder[] {\n  const types = getDocumentTypes(context)\n  return types.map((typeName) => getDocumentTypeListItem(context, typeName))\n}\n\nexport function getDocumentTypeListItem(\n  context: StructureContext,\n  typeName: string,\n): ListItemBuilder {\n  const {schema} = context\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new ListItemBuilder(context)\n    .id(typeName)\n    .title(title)\n    .schemaType(type)\n    .child((id, childContext) => {\n      const parent = childContext.parent as Collection\n      const parentItem = isList(parent)\n        ? (parent.items.find((item) => item.id === id) as ListItem)\n        : null\n\n      let list = getDocumentTypeList(context, typeName)\n      if (parentItem && parentItem.title) {\n        list = list.title(parentItem.title)\n      }\n\n      return list\n    })\n}\n\nexport function getDocumentTypeList(\n  context: StructureContext,\n  typeNameOrSpec: string | DocumentTypeListInput,\n): DocumentListBuilder {\n  const {schema, resolveDocumentNode} = context\n\n  const schemaType = typeof typeNameOrSpec === 'string' ? typeNameOrSpec : typeNameOrSpec.schemaType\n  const typeName = typeof schemaType === 'string' ? schemaType : schemaType.name\n  const spec: DocumentTypeListInput =\n    typeof typeNameOrSpec === 'string' ? {schemaType} : typeNameOrSpec\n\n  const type = schema.get(typeName)\n  if (!type) {\n    throw new Error(`Schema type with name \"${typeName}\" not found`)\n  }\n\n  const title = type.title || startCase(typeName)\n\n  return new DocumentTypeListBuilder(context)\n    .id(spec.id || typeName)\n    .title(spec.title || title)\n    .filter('_type == $type')\n    .params({type: typeName})\n    .schemaType(type)\n    .defaultOrdering(DEFAULT_SELECTED_ORDERING_OPTION.by)\n    .menuItemGroups(\n      spec.menuItemGroups || [\n        {\n          id: 'sorting',\n          title: 'Sort',\n          i18n: {title: {key: 'menu-item-groups.actions-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'layout',\n          title: 'Layout',\n          i18n: {title: {key: 'menu-item-groups.layout-group', ns: structureLocaleNamespace}},\n        },\n        {\n          id: 'actions',\n          title: 'Actions',\n          i18n: {title: {key: 'menu-item-groups.sorting-group', ns: structureLocaleNamespace}},\n        },\n      ],\n    )\n    .child(\n      spec.child ||\n        ((documentId: string) => resolveDocumentNode({schemaType: typeName, documentId})),\n    )\n    .canHandleIntent(spec.canHandleIntent || defaultIntentChecker)\n    .menuItems(\n      spec.menuItems || [\n        // Create new (from action button) will be added in serialization step of GenericList\n\n        // Sort by <Y>\n        ...getOrderingMenuItemsForSchemaType(context, type),\n\n        // Display as <Z>\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.compact-view', ns: structureLocaleNamespace}})\n          .title('Compact view') // fallback title\n          .icon(StackCompactIcon)\n          .action('setLayout')\n          .params({layout: 'default'}),\n\n        new MenuItemBuilder(context)\n          .group('layout')\n          .i18n({title: {key: 'menu-items.layout.detailed-view', ns: structureLocaleNamespace}})\n          .title('Detailed view') // fallback title\n          .icon(StackIcon)\n          .action('setLayout')\n          .params({layout: 'detail'}),\n\n        // Create new (from menu) will be added in serialization step of GenericList\n      ],\n    )\n}\n","import {type SchemaType} from '@sanity/types'\nimport {uniqueId} from 'lodash'\nimport {isValidElementType} from 'react-is'\nimport {getConfigContextFromSource, getPublishedId, type Source} from 'sanity'\n\nimport {structureLocaleNamespace} from '../i18n'\nimport {ComponentBuilder, type ComponentInput} from './Component'\nimport {DocumentBuilder, documentFromEditor, documentFromEditorWithInitialValue} from './Document'\nimport {DocumentListBuilder} from './DocumentList'\nimport {DocumentListItemBuilder} from './DocumentListItem'\nimport {\n  getDocumentTypeList,\n  getDocumentTypeListItem,\n  getDocumentTypeListItems,\n} from './documentTypeListItems'\nimport {\n  defaultInitialValueTemplateItems,\n  InitialValueTemplateItemBuilder,\n  menuItemsFromInitialValueTemplateItems,\n} from './InitialValueTemplateItem'\nimport {ListBuilder} from './List'\nimport {ListItemBuilder} from './ListItem'\nimport {getOrderingMenuItem, getOrderingMenuItemsForSchemaType, MenuItemBuilder} from './MenuItem'\nimport {MenuItemGroupBuilder} from './MenuItemGroup'\nimport {type Divider} from './StructureNodes'\nimport {\n  type DefaultDocumentNodeResolver,\n  type StructureBuilder,\n  type StructureContext,\n  type UserComponent,\n} from './types'\nimport * as views from './views'\n\n/** @internal */\nexport interface StructureBuilderOptions {\n  source: Source\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n}\n\nfunction hasIcon(schemaType?: SchemaType | string): boolean {\n  if (!schemaType || typeof schemaType === 'string') {\n    return false\n  }\n\n  return Boolean(schemaType.icon)\n}\n\nfunction getDefaultStructure(context: StructureContext): ListBuilder {\n  const items = getDocumentTypeListItems(context)\n  return new ListBuilder(context)\n    .id('__root__')\n    .title('Content')\n    .i18n({title: {key: 'default-definition.content-title', ns: structureLocaleNamespace}})\n    .items(items)\n    .showIcons(items.some((item) => hasIcon(item.getSchemaType())))\n}\n\n/** @internal */\nexport function createStructureBuilder({\n  defaultDocumentNode,\n  source,\n}: StructureBuilderOptions): StructureBuilder {\n  const configContext = getConfigContextFromSource(source)\n  const context: StructureContext = {\n    ...source,\n    getStructureBuilder: () => structureBuilder,\n    resolveDocumentNode: (options) => {\n      let builder =\n        defaultDocumentNode?.(structureBuilder, {...options, ...configContext}) ||\n        new DocumentBuilder(context)\n\n      if (!builder.getId()) {\n        builder = builder.id('documentEditor')\n      }\n\n      if (options.documentId) {\n        builder = builder.documentId(getPublishedId(options.documentId))\n      }\n\n      return builder.schemaType(options.schemaType)\n    },\n  }\n\n  const structureBuilder: StructureBuilder = {\n    defaults: () => getDefaultStructure(context),\n    documentTypeList: (...args) => getDocumentTypeList(context, ...args),\n    documentTypeListItem: (...args) => getDocumentTypeListItem(context, ...args),\n    documentTypeListItems: (...args) => getDocumentTypeListItems(context, ...args),\n    document: (...args) => new DocumentBuilder(context, ...args),\n    documentWithInitialValueTemplate: (...args) =>\n      documentFromEditorWithInitialValue(context, ...args),\n    defaultDocument: context.resolveDocumentNode,\n\n    list: (...args) => new ListBuilder(context, ...args),\n    listItem: (...args) => new ListItemBuilder(context, ...args),\n\n    menuItem: (...args) => new MenuItemBuilder(context, ...args),\n    menuItemGroup: (...args) => new MenuItemGroupBuilder(context, ...args),\n    menuItemsFromInitialValueTemplateItems: (...args) =>\n      menuItemsFromInitialValueTemplateItems(context, ...args),\n\n    documentList: (...args) => new DocumentListBuilder(context, ...args),\n    documentListItem: (...args) => new DocumentListItemBuilder(context, ...args),\n\n    orderingMenuItem: (...args) => getOrderingMenuItem(context, ...args),\n    orderingMenuItemsForType: (...args) => getOrderingMenuItemsForSchemaType(context, ...args),\n\n    editor: (...args) => documentFromEditor(context, ...args),\n\n    defaultInitialValueTemplateItems: (...args) =>\n      defaultInitialValueTemplateItems(context, ...args),\n\n    initialValueTemplateItem: (\n      templateId: string,\n      parameters?: Record<string, unknown>,\n    ): InitialValueTemplateItemBuilder =>\n      new InitialValueTemplateItemBuilder(context, {\n        id: templateId,\n        parameters,\n        templateId,\n      }),\n\n    component: (spec?: ComponentInput | UserComponent) => {\n      return isValidElementType(spec)\n        ? new ComponentBuilder().component(spec as UserComponent)\n        : new ComponentBuilder(spec as ComponentInput)\n    },\n\n    divider: (): Divider => ({id: uniqueId('__divider__'), type: 'divider'}),\n\n    view: views,\n    context,\n  }\n\n  return structureBuilder\n}\n","import {type DocumentBadgeComponent} from 'sanity'\n\n/** @internal */\nexport const LiveEditBadge: DocumentBadgeComponent = (props) => {\n  const {liveEditSchemaType, version} = props\n\n  if (liveEditSchemaType && !version) {\n    return {\n      label: 'Live',\n      color: 'danger',\n    }\n  }\n\n  return null\n}\nLiveEditBadge.displayName = 'LiveEditBadge'\n","import {uuid} from '@sanity/uuid'\n\nimport {EMPTY_PARAMS, type LOADING_PANE} from './constants'\nimport {type PaneNode, type RouterPanes} from './types'\n\nconst state: {\n  activePanes: Array<PaneNode | typeof LOADING_PANE>\n} = {activePanes: []}\n\nexport function setActivePanes(panes: Array<PaneNode | typeof LOADING_PANE>): void {\n  state.activePanes = panes\n}\n\n/**\n * This function looks at the _active panes_ to resolve an intent. this type of\n * intent resolution is faster and does not cause the panes to reset\n *\n * @internal\n */\nexport function getIntentState(\n  intent: string,\n  params: Record<string, string>,\n  routerState: {panes?: RouterPanes} | undefined,\n  payload: unknown,\n): {panes: RouterPanes} | {intent: string; params: Record<string, string>; payload: unknown} {\n  const panes = routerState?.panes || []\n  const activePanes = state.activePanes || []\n  const editDocumentId = params.id || uuid()\n\n  // Loop through open panes and see if any of them can handle the intent\n  for (let i = activePanes.length - 1; i >= 0; i--) {\n    const pane = activePanes[i]\n\n    if (typeof pane !== 'object') continue\n\n    // NOTE: if you update this logic, please also update the similar handler in\n    // `resolveIntent.ts`\n    if (\n      pane.canHandleIntent?.(intent, params, {\n        pane,\n        index: i,\n      }) ||\n      // see `resolveIntent.ts` for more info\n      (pane.type === 'documentList' &&\n        pane.schemaTypeName === params.type &&\n        pane.options.filter === '_type == $type')\n    ) {\n      const paneParams = getPaneParams(intent, params)\n\n      return {\n        panes: panes\n          .slice(0, i)\n          .concat([[{id: editDocumentId, params: paneParams, payload}]]) as RouterPanes,\n      }\n    }\n  }\n\n  return {intent: intent, params, payload}\n}\n\nfunction getPaneParams(\n  intent: string,\n  {template, version}: Record<string, string>,\n): {template?: string; version?: string} {\n  if (intent !== 'create') return EMPTY_PARAMS\n  if (template && version) return {template, version}\n  if (template) return {template}\n  if (version) return {version}\n  return EMPTY_PARAMS\n}\n","import {type ObjectDiff} from '@sanity/diff'\nimport {BoundaryElementProvider, Box, Card, Flex, Text} from '@sanity/ui'\nimport {useMemo, useState} from 'react'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TimelineMenu} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nexport function ChangesInspector({showChanges}: {showChanges: boolean}): React.JSX.Element {\n  const {documentId, schemaType, timelineError, timelineStore, value} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const rev = useTimelineSelector(timelineStore, (state) => state.revTime)\n  const diff = useTimelineSelector(timelineStore, (state) => state.diff)\n  const onOlderRevision = useTimelineSelector(timelineStore, (state) => state.onOlderRevision)\n  const selectionState = useTimelineSelector(timelineStore, (state) => state.selectionState)\n  const sinceTime = useTimelineSelector(timelineStore, (state) => state.sinceTime)\n  const loading = selectionState === 'loading'\n  const isComparingCurrent = !onOlderRevision\n\n  // Note that we are using the studio core namespace here, as changes theoretically should\n  // be part of Sanity core (needs to be moved from structure at some point)\n  const {t: structureT} = useTranslation(structureLocaleNamespace)\n\n  const documentContext: DocumentChangeContextInstance = useMemo(\n    () => ({\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent,\n      value,\n      showFromValue: true,\n    }),\n    [documentId, diff, isComparingCurrent, schemaType, value],\n  )\n\n  if (selectedReleaseId) {\n    return (\n      <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n        <Card flex={1} padding={2} paddingTop={0}>\n          <TimelineError versionError />\n        </Card>\n      </Flex>\n    )\n  }\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {structureT('changes.from.label')}\n          </Text>\n\n          <TimelineMenu mode=\"since\" chunk={sinceTime} placement=\"bottom-start\" />\n          <Text size={1} muted>\n            {structureT('changes.to.label')}\n          </Text>\n          <TimelineMenu chunk={rev} mode=\"rev\" placement=\"bottom-end\" />\n        </Grid>\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  diff={diff}\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={loading}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  diff,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  diff: ObjectDiff<any> | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <NoChanges />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!diff) {\n    return <NoChanges />\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={diff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {Card, Flex} from '@sanity/ui'\nimport {type MouseEvent, useCallback} from 'react'\nimport {\n  type DocumentGroupEvent,\n  Event,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  useTranslation,\n} from 'sanity'\n\nimport {Tooltip} from '../../../../../ui-components'\n\nexport interface TimelineItemProps {\n  event: DocumentGroupEvent\n  isSelected: boolean\n  onSelect: (chunk: DocumentGroupEvent) => void\n  optionsMenu?: React.ReactNode\n}\n\nconst getIsSelectable = (event: DocumentGroupEvent) => {\n  return (\n    !isDeleteDocumentVersionEvent(event) &&\n    !isDeleteDocumentGroupEvent(event) &&\n    !isUnpublishDocumentEvent(event) &&\n    !isScheduleDocumentVersionEvent(event) &&\n    !isUnscheduleDocumentVersionEvent(event)\n  )\n}\n\nexport function EventTimelineItem({event, isSelected, onSelect, optionsMenu}: TimelineItemProps) {\n  const {t} = useTranslation('studio')\n  const isSelectable = getIsSelectable(event)\n  const handleClick = useCallback(\n    (evt: MouseEvent<HTMLDivElement>) => {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (isSelectable) {\n        onSelect(event)\n      }\n    },\n    [onSelect, event, isSelectable],\n  )\n  return (\n    <Tooltip content={isSelectable ? '' : t('changes.not-selectable')} disabled={isSelectable}>\n      <Flex gap={1}>\n        <Card\n          as={isSelectable ? 'button' : 'div'}\n          onClick={handleClick}\n          padding={2}\n          pressed={isSelected}\n          radius={2}\n          data-ui=\"timelineItem\"\n          data-testid=\"timeline-item-button\"\n          data-chunk-timestamp={event.timestamp}\n          style={{\n            cursor: isSelectable ? 'pointer' : 'default',\n          }}\n        >\n          <Event event={event} showChangesBy=\"tooltip\" />\n        </Card>\n        {optionsMenu}\n      </Flex>\n    </Tooltip>\n  )\n}\n","import {\n  Flex,\n  Menu,\n  // eslint-disable-next-line no-restricted-imports\n  MenuItem,\n  Text,\n  usePortal,\n} from '@sanity/ui'\nimport {useCallback} from 'react'\nimport {\n  ContextMenuButton,\n  getReleaseIdFromReleaseDocumentId,\n  getReleaseTone,\n  getVersionFromId,\n  type PublishDocumentVersionEvent,\n  RELEASES_INTENT,\n  Translate,\n  useSetPerspective,\n  useTranslation,\n  VersionInlineBadge,\n} from 'sanity'\nimport {IntentLink} from 'sanity/router'\nimport {usePaneRouter} from 'sanity/structure'\n\nimport {MenuButton} from '../../../../../ui-components'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {TIMELINE_MENU_PORTAL} from '../timelineMenu'\n\nexport function PublishedEventMenu({event}: {event: PublishDocumentVersionEvent}) {\n  const {t} = useTranslation(structureLocaleNamespace)\n  const portalContext = usePortal()\n  const {params, setParams} = usePaneRouter()\n  const setPerspective = useSetPerspective()\n\n  const handleOpenReleaseDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId || '@lastPublished',\n      since: undefined,\n      historyEvent: event.id,\n      historyVersion: getVersionFromId(event.versionId),\n    })\n  }, [setParams, params, event])\n\n  const handleOpenDraftDocument = useCallback(() => {\n    setParams({\n      ...params,\n      rev: event.versionRevisionId,\n      preserveRev: 'true',\n      since: undefined,\n    })\n    setTimeout(() => {\n      // A bug is generated when we change the perspective and the params at the same time\n      // Resetting the params to the value it had before, because the paneRouter uses the previous value\n      setPerspective('drafts')\n    }, 100)\n  }, [setParams, params, event.versionRevisionId, setPerspective])\n\n  const VersionBadge = ({children}: {children: React.ReactNode}) => {\n    return (\n      <VersionInlineBadge $tone={event.release ? getReleaseTone(event.release) : undefined}>\n        {children}\n      </VersionInlineBadge>\n    )\n  }\n  return (\n    <MenuButton\n      id={`timeline-item-menu-button-${event.versionId}`}\n      button={\n        <ContextMenuButton\n          aria-label={t('timeline-item.menu-button.aria-label')}\n          tooltipProps={{content: t('timeline-item.menu-button.tooltip')}}\n        />\n      }\n      menu={\n        <Menu padding={1}>\n          {event.release ? (\n            <>\n              <IntentLink\n                intent={RELEASES_INTENT}\n                params={{id: getReleaseIdFromReleaseDocumentId(event.release._id)}}\n                style={{textDecoration: 'none'}}\n              >\n                <MenuItem padding={3}>\n                  <Flex align={'center'} justify=\"flex-start\">\n                    <Text size={1} style={{textDecoration: 'none'}}>\n                      <Translate\n                        components={{\n                          VersionBadge: ({children}) => <VersionBadge>{children}</VersionBadge>,\n                        }}\n                        i18nKey=\"events.open.release\"\n                        values={{\n                          releaseTitle:\n                            event.release.metadata.title ||\n                            t('release.placeholder-untitled-release'),\n                        }}\n                        t={t}\n                      />\n                    </Text>\n                  </Flex>\n                </MenuItem>\n              </IntentLink>\n              <MenuItem onClick={handleOpenReleaseDocument}>\n                <Flex align={'center'} justify=\"flex-start\">\n                  <Text size={1}>\n                    <Translate\n                      components={{\n                        VersionBadge: ({children}) => <VersionBadge>{children}</VersionBadge>,\n                      }}\n                      i18nKey=\"events.inspect.release\"\n                      values={{\n                        releaseTitle:\n                          event.release.metadata.title || t('release.placeholder-untitled-release'),\n                      }}\n                      t={t}\n                    />\n                  </Text>\n                </Flex>\n              </MenuItem>\n            </>\n          ) : (\n            <MenuItem onClick={handleOpenDraftDocument} disabled={!event.versionRevisionId}>\n              <Flex align={'center'}>\n                <Text size={1}>\n                  <Translate\n                    components={{\n                      VersionBadge: ({children}) => (\n                        <VersionInlineBadge $tone=\"caution\">{children}</VersionInlineBadge>\n                      ),\n                    }}\n                    i18nKey=\"events.open.draft\"\n                    t={t}\n                  />\n                </Text>\n              </Flex>\n            </MenuItem>\n          )}\n        </Menu>\n      }\n      popover={{\n        // when used inside the timeline menu we want to keep the element inside the popover, to avoid closing the popover when clicking expand.\n        portal: portalContext.elements?.[TIMELINE_MENU_PORTAL] ? TIMELINE_MENU_PORTAL : true,\n        placement: 'bottom',\n        fallbackPlacements: ['bottom-end', 'bottom-start'],\n      }}\n    />\n  )\n}\n","import {Box, Flex, Spinner, Stack, Text} from '@sanity/ui'\nimport {motion, type Variants} from 'framer-motion'\nimport {useCallback, useEffect, useMemo, useState} from 'react'\nimport {\n  CommandList,\n  type CommandListRenderItemCallback,\n  type DocumentGroupEvent,\n  getDocumentVariantType,\n  isCreateDocumentVersionEvent,\n  isEditDocumentVersionEvent,\n  isPublishDocumentVersionEvent,\n  LoadingBlock,\n  useTranslation,\n} from 'sanity'\n\nimport {ExpandableTimelineItemButton} from '../expandableTimelineItemButton'\nimport {ListWrapper, Root} from '../timeline.styled'\nimport {EventTimelineItem} from './EventTimelineItem'\nimport {PublishedEventMenu} from './PublishedEventMenu'\n\ninterface TimelineProps {\n  events: DocumentGroupEvent[]\n  hasMoreEvents: boolean | null\n  selectedEventId?: string\n  onLoadMore: () => void\n  onSelect: (event: DocumentGroupEvent) => void\n  fetchEventChildren: (event: DocumentGroupEvent) => Promise<void>\n  /**\n   * The list needs a predefined max height for the scroller to work.\n   */\n  listMaxHeight?: string\n}\n\nconst TimelineItemWrapper = motion.create(Box)\nconst CHILDREN_ITEMS_VARIANTS: Variants = {\n  initial: {\n    opacity: 0,\n  },\n  animate: {\n    opacity: 1,\n  },\n  exit: {\n    opacity: 0,\n  },\n}\n\nconst ITEM_HEIGHT = 57\n\nexport const TIMELINE_LIST_WRAPPER_ID = 'timeline-list-wrapper'\n\nexport const EventsTimeline = ({\n  events: allEvents,\n  hasMoreEvents,\n  selectedEventId,\n  onLoadMore,\n  onSelect,\n  listMaxHeight = 'calc(100vh - 280px)',\n  fetchEventChildren,\n}: TimelineProps) => {\n  const [mounted, setMounted] = useState(false)\n  const {t} = useTranslation('studio')\n  const [expandedParents, setExpandedParents] = useState<Set<string>>(() => {\n    if (selectedEventId) {\n      // Find that event and if it has a parent, expand the parent.\n      const selectedEvent = allEvents.find((event) => event.id === selectedEventId)\n      if (selectedEvent && 'parentId' in selectedEvent && selectedEvent.parentId) {\n        return new Set([selectedEvent.parentId])\n      }\n    }\n    return new Set()\n  })\n  const [expandingParents, setExpandingParents] = useState<Set<string>>(new Set())\n\n  const events = useMemo(() => {\n    return allEvents.filter((event) => {\n      if (isCreateDocumentVersionEvent(event) && event.parentId) {\n        // Check if it's the last event in the list, in that case, we want to show it\n        const isLastEvent = allEvents[allEvents.length - 1].id === event.id\n        if (isLastEvent) return true\n        return expandedParents.has(event.parentId)\n      }\n      if (isEditDocumentVersionEvent(event) && event.parentId) {\n        return expandedParents.has(event.parentId)\n      }\n      return true\n    })\n  }, [expandedParents, allEvents])\n\n  const handleExpandParent = useCallback(\n    (event: DocumentGroupEvent) => async () => {\n      const parentId = event.id\n\n      let isExpanding = false\n      setExpandedParents((prev) => {\n        const next = new Set(prev)\n\n        if (prev.has(parentId)) next.delete(parentId)\n        else {\n          isExpanding = true\n          next.add(parentId)\n        }\n\n        return next\n      })\n      if (isExpanding) {\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.add(parentId)\n          return next\n        })\n        await fetchEventChildren(event)\n        setExpandingParents((prev) => {\n          const next = new Set(prev)\n          next.delete(parentId)\n          return next\n        })\n      }\n    },\n    [fetchEventChildren, setExpandingParents],\n  )\n\n  const handleSelectChunk = useCallback(\n    (event: DocumentGroupEvent) => {\n      onSelect(event)\n    },\n    [onSelect],\n  )\n\n  const renderOptionsMenu = useCallback(\n    (event: DocumentGroupEvent) => {\n      const documentVariantType = getDocumentVariantType(event.documentId)\n      if (isPublishDocumentVersionEvent(event) && documentVariantType === 'published') {\n        return <PublishedEventMenu event={event} />\n      }\n      if (\n        isPublishDocumentVersionEvent(event) &&\n        documentVariantType === 'draft' &&\n        event.creationEvent\n      ) {\n        return (\n          <ExpandableTimelineItemButton\n            isExpanded={expandedParents.has(event.id)}\n            onExpand={handleExpandParent(event)}\n          />\n        )\n      }\n      return null\n    },\n    [expandedParents, handleExpandParent],\n  )\n\n  const renderItem = useCallback<CommandListRenderItemCallback<DocumentGroupEvent[][number]>>(\n    (event, {activeIndex}) => {\n      /**\n       * The create version event will be present while expanding (loading the edits), so we are attaching to it the loading block at the top.\n       * - publishEvent (expanding?)\n       * --- loadingBlock  ~createEvent~\n       * */\n      const showExpandingLoader =\n        isCreateDocumentVersionEvent(event) &&\n        event.parentId &&\n        expandingParents.has(event.parentId)\n\n      const isLastEvent = activeIndex === events.length - 1\n      if (showExpandingLoader) {\n        return (\n          <TimelineItemWrapper\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{duration: 0.2, delay: 0.2}}\n          >\n            {/* We need this item to match the same height as the rest of the list items, which is 57px */}\n            <Flex align=\"center\" justify=\"center\" style={{height: ITEM_HEIGHT}}>\n              <Spinner />\n            </Flex>\n          </TimelineItemWrapper>\n        )\n      }\n      return (\n        <TimelineItemWrapper\n          paddingBottom={1}\n          paddingRight={1}\n          key={event.timestamp}\n          animate=\"animate\"\n          exit=\"exit\"\n          initial=\"initial\"\n          variants={'parentId' in event ? CHILDREN_ITEMS_VARIANTS : undefined}\n          paddingLeft={\n            (isEditDocumentVersionEvent(event) || isCreateDocumentVersionEvent(event)) &&\n            event.parentId &&\n            !isLastEvent\n              ? 4\n              : 1\n          }\n        >\n          <EventTimelineItem\n            event={event}\n            isSelected={event.id === selectedEventId}\n            onSelect={handleSelectChunk}\n            optionsMenu={renderOptionsMenu(event)}\n          />\n\n          {isLastEvent && hasMoreEvents && <LoadingBlock />}\n        </TimelineItemWrapper>\n      )\n    },\n    [\n      expandingParents,\n      selectedEventId,\n      handleSelectChunk,\n      renderOptionsMenu,\n      events.length,\n      hasMoreEvents,\n    ],\n  )\n\n  useEffect(() => setMounted(true), [])\n  const selectedIndex = events.findIndex((event) => event.id === selectedEventId)\n\n  return (\n    <Root\n      /**\n       * We delay initial rendering if `selectedIndex` is present.\n       * This is a _temporary_ workaround to allow the virtual <CommandList>\n       * to scroll to a specific index prior to being displayed.\n       *\n       * Without this, there'll be a noticeable 'flash' where the virtual list\n       * will render with its child items at the top and then scroll into position.\n       */\n      $visible={!selectedIndex || mounted}\n      data-ui=\"timeline\"\n    >\n      {events.length > 0 ? (\n        <ListWrapper direction=\"column\" $maxHeight={listMaxHeight} id={TIMELINE_LIST_WRAPPER_ID}>\n          <CommandList\n            activeItemDataAttr=\"data-hovered\"\n            ariaLabel={t('timeline.list.aria-label')}\n            autoFocus=\"list\"\n            initialIndex={selectedIndex}\n            initialScrollAlign=\"center\"\n            itemHeight={ITEM_HEIGHT}\n            items={events}\n            onEndReached={onLoadMore}\n            onEndReachedIndexOffset={20}\n            overscan={5}\n            renderItem={renderItem}\n            wrapAround={false}\n          />\n        </ListWrapper>\n      ) : (\n        <Stack padding={3} space={3}>\n          <Text size={1} weight=\"medium\">\n            {t('timeline.error.no-document-history-title')}\n          </Text>\n          <Text muted size={1}>\n            {t('timeline.error.no-document-history-description')}\n          </Text>\n        </Stack>\n      )}\n    </Root>\n  )\n}\n\nEventsTimeline.displayName = 'EventsTimeline'\n","import {ChevronDownIcon} from '@sanity/icons'\nimport {\n  Flex,\n  type Placement,\n  PortalProvider,\n  useClickOutsideEvent,\n  useGlobalKeyDown,\n  useToast,\n} from '@sanity/ui'\nimport {useCallback, useMemo, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  TIMELINE_ITEM_I18N_KEY_MAPPING,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Popover} from '../../../../../ui-components'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {TimelineError} from '../TimelineError'\nimport {EventsTimeline} from './EventsTimeline'\n\ninterface TimelineMenuProps {\n  event: DocumentGroupEvent | null\n  events: DocumentGroupEvent[]\n  mode: 'rev' | 'since'\n  placement?: Placement\n}\n\nconst Root = styled(Popover)`\n  overflow: hidden;\n  overflow: clip;\n`\n\nexport const TIMELINE_MENU_PORTAL = 'timeline-menu'\n\nconst formatParams = {\n  timestamp: {dateStyle: 'medium', timeStyle: 'short'},\n}\n\nexport function EventsTimelineMenu({event, events, mode, placement}: TimelineMenuProps) {\n  const {setTimelineRange} = useDocumentPane()\n  const [open, setOpen] = useState(false)\n  const [button, setButton] = useState<HTMLButtonElement | null>(null)\n  const [popoverRef, setPopoverRef] = useState<HTMLElement | null>(null)\n  const toast = useToast()\n  const {\n    nextCursor,\n    loading,\n    error: eventsError,\n    findRangeForRevision,\n    findRangeForSince,\n    loadMoreEvents,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n\n  const handleOpen = useCallback(() => {\n    setOpen(true)\n  }, [])\n\n  const handleClose = useCallback(() => {\n    setOpen(false)\n  }, [])\n\n  const handleGlobalKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (open && (e.key === 'Escape' || e.key === 'Tab')) {\n        handleClose()\n        button?.focus()\n      }\n    },\n    [button, handleClose, open],\n  )\n\n  useGlobalKeyDown(handleGlobalKeyDown)\n  useClickOutsideEvent(open && handleClose, () => [button, popoverRef])\n\n  const selectRev = useCallback(\n    (revEvent: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(revEvent) ||\n          isDeleteDocumentGroupEvent(revEvent) ||\n          isUnpublishDocumentEvent(revEvent) ||\n          isScheduleDocumentVersionEvent(revEvent) ||\n          isUnscheduleDocumentVersionEvent(revEvent)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(revEvent?.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision, handleClose],\n  )\n\n  const selectSince = useCallback(\n    (sinceEvent: DocumentGroupEvent) => {\n      try {\n        const [since, rev] = findRangeForSince(sinceEvent.id)\n        setTimelineRange(since, rev)\n        handleClose()\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [findRangeForSince, setTimelineRange, toast, t, handleClose],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    if (!loading && nextCursor) {\n      loadMoreEvents()\n    }\n  }, [loading, loadMoreEvents, nextCursor])\n\n  const content = useMemo(() => {\n    if (eventsError) return <TimelineError />\n\n    return (\n      <EventsTimeline\n        events={events}\n        fetchEventChildren={expandEvent}\n        hasMoreEvents={Boolean(nextCursor)}\n        selectedEventId={event?.id}\n        onLoadMore={handleLoadMore}\n        onSelect={mode === 'rev' ? selectRev : selectSince}\n      />\n    )\n  }, [\n    eventsError,\n    mode,\n    expandEvent,\n    events,\n    nextCursor,\n    event?.id,\n    handleLoadMore,\n    selectSince,\n    selectRev,\n  ])\n\n  const revLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : t('timeline.latest-revision')\n\n  // eslint-disable-next-line no-nested-ternary\n  const sinceLabel = event\n    ? t(TIMELINE_ITEM_I18N_KEY_MAPPING[event.type], {\n        context: 'timestamp',\n        timestamp: new Date(event.timestamp),\n        formatParams,\n      })\n    : events.length > 0\n      ? t('timeline.since-version-missing')\n      : t('timeline.no-previous-events')\n\n  const buttonLabel = mode === 'rev' ? revLabel : sinceLabel\n\n  return (\n    <PortalProvider __unstable_elements={{[TIMELINE_MENU_PORTAL]: popoverRef}}>\n      <Root\n        data-testid=\"timeline-menu\"\n        constrainSize\n        content={open && content}\n        data-ui=\"versionMenu\"\n        open={open}\n        placement={placement}\n        matchReferenceWidth\n        portal\n        ref={setPopoverRef}\n      >\n        <Flex width={'fill'}>\n          <Button\n            data-testid={open ? 'timeline-menu-close-button' : 'timeline-menu-open-button'}\n            disabled={loading || !events.length}\n            mode=\"ghost\"\n            onClick={open ? handleClose : handleOpen}\n            ref={setButton}\n            selected={open}\n            width=\"fill\"\n            tooltipProps={null}\n            justify={'space-between'}\n            style={{\n              maxWidth: '100%',\n            }}\n            iconRight={ChevronDownIcon}\n            text={loading ? t('timeline.loading-history') : buttonLabel}\n          />\n        </Flex>\n      </Root>\n    </PortalProvider>\n  )\n}\n","import {BoundaryElementProvider, Box, Card, Flex, Spinner, Text} from '@sanity/ui'\nimport {motion} from 'framer-motion'\nimport {type ReactElement, useMemo, useState} from 'react'\nimport {useObservable} from 'react-rx'\nimport {\n  ChangeFieldWrapper,\n  ChangeList,\n  ChangesError,\n  type DocumentChangeContextInstance,\n  LoadingBlock,\n  NoChanges,\n  type ObjectSchemaType,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {DocumentChangeContext} from 'sanity/_singletons'\nimport {styled} from 'styled-components'\n\nimport {EventsTimelineMenu} from '../../timeline/events/EventsTimelineMenu'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nconst Grid = styled(Box)`\n  &:not([hidden]) {\n    display: grid;\n  }\n  grid-template-columns: 48px 1fr;\n  align-items: center;\n  gap: 0.25em;\n`\n\nconst SpinnerContainer = styled(Flex)`\n  width: 100%;\n  position: absolute;\n  bottom: -4px;\n`\n\nconst DIFF_INITIAL_VALUE = {\n  diff: null,\n  loading: true,\n}\nexport function EventsInspector({showChanges}: {showChanges: boolean}): ReactElement {\n  const {documentId, schemaType, timelineError, value, formState} = useDocumentPane()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n\n  const {events, revision, sinceRevision, getChangesList} = useEvents()\n\n  const isComparingCurrent = !revision?.revisionId\n  const changesList$ = useMemo(() => getChangesList(), [getChangesList])\n  const {diff, loading: diffLoading} = useObservable(changesList$, DIFF_INITIAL_VALUE)\n\n  const {t} = useTranslation('studio')\n\n  const documentContext: DocumentChangeContextInstance = useMemo(() => {\n    return {\n      documentId,\n      schemaType,\n      FieldWrapper: ChangeFieldWrapper,\n      rootDiff: diff,\n      isComparingCurrent: isComparingCurrent && !formState?.readOnly,\n      value,\n      showFromValue: true,\n    }\n  }, [diff, documentId, isComparingCurrent, formState?.readOnly, schemaType, value])\n\n  const [sinceEvent, toEvent] = useMemo(() => {\n    if (!events) return [null, null]\n    return [\n      events.find((e) => e.id === sinceRevision?.revisionId) || null,\n      events.find((e) => e.id === revision?.revisionId) || events[0],\n    ]\n  }, [events, revision?.revisionId, sinceRevision?.revisionId])\n\n  const sinceEvents = useMemo(() => {\n    // The sinceEvents need to account the toEvent showing only events that are older than the toEvent\n    if (!toEvent) return events.slice(1)\n    return events.slice(events.indexOf(toEvent) + 1).map((event) => {\n      // If the to event has a parent id, we need to remove the parent id from the since events or they won't be rendered, as they have no parent to expand.\n      if ('parentId' in toEvent && 'parentId' in event && event.parentId === toEvent.parentId) {\n        return {...event, parentId: undefined}\n      }\n      return event\n    })\n  }, [events, toEvent])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <Box padding={3} style={{position: 'relative'}}>\n        <Grid paddingX={2} paddingBottom={2}>\n          <Text size={1} muted>\n            {t('changes.inspector.from-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={sinceEvent || null}\n            events={sinceEvents}\n            mode=\"since\"\n            placement=\"bottom-start\"\n          />\n          <Text size={1} muted>\n            {t('changes.inspector.to-label')}\n          </Text>\n          <EventsTimelineMenu\n            event={toEvent || null}\n            events={events}\n            mode=\"rev\"\n            placement=\"bottom-end\"\n          />\n        </Grid>\n        {diffLoading && (\n          <motion.div\n            animate={{opacity: 1}}\n            initial={{opacity: 0}}\n            transition={{delay: 0.2, duration: 0.2}}\n          >\n            <SpinnerContainer justify=\"center\" align=\"center\" gap={2}>\n              <Text muted size={0}>\n                {t('changes.loading-changes')}\n              </Text>\n              <Spinner size={0} />\n            </SpinnerContainer>\n          </motion.div>\n        )}\n      </Box>\n\n      <Card flex={1} paddingX={2} paddingY={2}>\n        <BoundaryElementProvider element={scrollRef}>\n          <Scroller data-ui=\"Scroller\" ref={setScrollRef}>\n            <Box flex={1} paddingX={3} height=\"fill\">\n              {showChanges && (\n                <Content\n                  documentContext={documentContext}\n                  error={timelineError}\n                  loading={revision?.loading || sinceRevision?.loading || false}\n                  schemaType={schemaType}\n                />\n              )}\n            </Box>\n          </Scroller>\n        </BoundaryElementProvider>\n      </Card>\n    </Flex>\n  )\n}\n\nfunction Content({\n  error,\n  documentContext,\n  loading,\n  schemaType,\n}: {\n  error?: Error | null\n  documentContext: DocumentChangeContextInstance\n  loading: boolean\n  schemaType: ObjectSchemaType\n}) {\n  if (error) {\n    return <ChangesError />\n  }\n\n  if (loading) {\n    return <LoadingBlock showText />\n  }\n\n  if (!documentContext.rootDiff) {\n    return (\n      <motion.div\n        animate={{opacity: 1}}\n        initial={{opacity: 0}}\n        transition={{delay: 0.2, duration: 0.2}}\n      >\n        <NoChanges />\n      </motion.div>\n    )\n  }\n\n  return (\n    <DocumentChangeContext.Provider value={documentContext}>\n      <ChangeList diff={documentContext.rootDiff} schemaType={schemaType} />\n    </DocumentChangeContext.Provider>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type DocumentGroupEvent,\n  isDeleteDocumentGroupEvent,\n  isDeleteDocumentVersionEvent,\n  isScheduleDocumentVersionEvent,\n  isUnpublishDocumentEvent,\n  isUnscheduleDocumentVersionEvent,\n  LoadingBlock,\n  ScrollContainer,\n  useEvents,\n  useTranslation,\n} from 'sanity'\nimport {useDocumentPane} from 'sanity/structure'\nimport {styled} from 'styled-components'\n\nimport {EventsTimeline} from '../../timeline/events/EventsTimeline'\nimport {TimelineError} from '../../timeline/TimelineError'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function EventsSelector({showList}: {showList: boolean}) {\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n  const {setTimelineRange} = useDocumentPane()\n  const getScrollerRef = useCallback(\n    (el: HTMLDivElement | null) => {\n      if (!listHeight && el) {\n        /**\n         * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n         * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n         * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n         */\n        setListHeight(el.clientHeight ? el.clientHeight - 1 : 0)\n        setScrollRef(el)\n      }\n    },\n    [listHeight],\n  )\n  const {\n    events,\n    nextCursor,\n    loading,\n    error,\n    revision,\n    loadMoreEvents,\n    findRangeForRevision,\n    expandEvent,\n  } = useEvents()\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n\n  const selectRev = useCallback(\n    (event: DocumentGroupEvent) => {\n      try {\n        if (\n          isDeleteDocumentVersionEvent(event) ||\n          isDeleteDocumentGroupEvent(event) ||\n          isUnpublishDocumentEvent(event) ||\n          isScheduleDocumentVersionEvent(event) ||\n          isUnscheduleDocumentVersionEvent(event)\n        ) {\n          console.error('Event is not selectable')\n          return\n        }\n        const [since, rev] = findRangeForRevision(event.id)\n        setTimelineRange(since, rev)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [t, toast, setTimelineRange, findRangeForRevision],\n  )\n\n  const initialLoad = loading && !events.length\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {error ? (\n          <TimelineError />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList &&\n              !initialLoad ? (\n                <EventsTimeline\n                  events={events}\n                  fetchEventChildren={expandEvent}\n                  hasMoreEvents={Boolean(nextCursor)}\n                  // If we have a revision, we select it, otherwise we select the first event\n                  selectedEventId={revision?.revisionId || events[0]?.id}\n                  onLoadMore={loadMoreEvents}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n              {loading && <LoadingBlock />}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {BoundaryElementProvider, Card, Flex, useToast} from '@sanity/ui'\nimport {useCallback, useState} from 'react'\nimport {\n  type Chunk,\n  ScrollContainer,\n  usePerspective,\n  useTimelineSelector,\n  useTranslation,\n} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Timeline} from '../../timeline'\nimport {TimelineError} from '../../timeline/TimelineError'\nimport {useDocumentPane} from '../../useDocumentPane'\n\nconst Scroller = styled(ScrollContainer)`\n  height: 100%;\n  overflow: auto;\n  position: relative;\n  scroll-behavior: smooth;\n`\n\nexport function HistorySelector({showList}: {showList: boolean}) {\n  const {timelineError, setTimelineRange, timelineStore} = useDocumentPane()\n  const {selectedReleaseId} = usePerspective()\n  const [scrollRef, setScrollRef] = useState<HTMLDivElement | null>(null)\n  const [listHeight, setListHeight] = useState(0)\n\n  const getScrollerRef = useCallback((el: HTMLDivElement | null) => {\n    if (!el?.clientHeight) return\n    /**\n     * Hacky solution, the list height needs to be defined, it cannot be obtained from the parent using a `max-height: 100%`\n     * Because the scroller won't work properly and it won't scroll to the selected element on mount.\n     * To fix this, this component will set the list height to the height of the parent element - 1px, to avoid a double scroll line.\n     */\n    setListHeight(el.clientHeight - 1)\n    setScrollRef(el)\n  }, [])\n\n  const chunks = useTimelineSelector(timelineStore, (state) => state.chunks)\n  const realRevChunk = useTimelineSelector(timelineStore, (state) => state.realRevChunk)\n  const hasMoreChunks = useTimelineSelector(timelineStore, (state) => state.hasMoreChunks)\n  const loading = useTimelineSelector(timelineStore, (state) => state.isLoading)\n\n  const {t} = useTranslation('studio')\n  const toast = useToast()\n  const selectRev = useCallback(\n    (revChunk: Chunk) => {\n      try {\n        const [sinceId, revId] = timelineStore?.findRangeForRev(revChunk) || [null, null]\n        setTimelineRange(sinceId, revId)\n      } catch (err) {\n        toast.push({\n          closable: true,\n          description: err.message,\n          status: 'error',\n          title: t('timeline.error.unable-to-load-revision'),\n        })\n      }\n    },\n    [setTimelineRange, t, timelineStore, toast],\n  )\n\n  const handleLoadMore = useCallback(() => {\n    // If updated, be sure to update the TimeLineMenu component as well\n    if (!loading) {\n      timelineStore?.loadMore()\n    }\n  }, [loading, timelineStore])\n\n  return (\n    <Flex data-testid=\"review-changes-pane\" direction=\"column\" height=\"fill\">\n      <Card flex={1} padding={2} paddingTop={0}>\n        {timelineError || selectedReleaseId ? (\n          <TimelineError versionError={Boolean(selectedReleaseId)} />\n        ) : (\n          <BoundaryElementProvider element={scrollRef}>\n            <Scroller data-ui=\"Scroller\" ref={getScrollerRef}>\n              {listHeight &&\n              // This forces the list to unmount and remount, which is needed to reset the scroll position\n              showList ? (\n                <Timeline\n                  chunks={chunks}\n                  hasMoreChunks={hasMoreChunks}\n                  lastChunk={realRevChunk}\n                  onLoadMore={handleLoadMore}\n                  onSelect={selectRev}\n                  listMaxHeight={`${listHeight}px`}\n                />\n              ) : null}\n            </Scroller>\n          </BoundaryElementProvider>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n","import {CloseIcon} from '@sanity/icons'\nimport {Card, Flex, TabList, TabPanel} from '@sanity/ui'\nimport {type DocumentInspectorProps, useSource, useTranslation} from 'sanity'\nimport {styled} from 'styled-components'\n\nimport {Button, Tab} from '../../../../../ui-components'\nimport {usePaneRouter} from '../../../../components/paneRouter/usePaneRouter'\nimport {structureLocaleNamespace} from '../../../../i18n'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesInspector} from './ChangesInspector'\nimport {EventsInspector} from './EventsInspector'\nimport {EventsSelector} from './EventsSelector'\nimport {HistorySelector} from './HistorySelector'\n\nconst FadeInFlex = styled(Flex)`\n  opacity: 0;\n  transition: opacity 200ms;\n  &[data-ready] {\n    opacity: 1;\n  }\n`\nconst TABS = ['history', 'review'] as const\nconst isValidTab = (tab: string | undefined): tab is (typeof TABS)[number] =>\n  // @ts-expect-error TS doesn't understand the type guard\n  tab && TABS.includes(tab)\n\nexport function ChangesTabs(props: DocumentInspectorProps) {\n  const {params, setParams} = usePaneRouter()\n  const source = useSource()\n\n  const {t} = useTranslation(structureLocaleNamespace)\n  const isReady = params?.inspect === HISTORY_INSPECTOR_NAME\n\n  const paneRouterTab = isValidTab(params?.changesInspectorTab)\n    ? params.changesInspectorTab\n    : TABS[0]\n\n  const setPaneRouterTab = (tab: (typeof TABS)[number]) =>\n    setParams({\n      ...params,\n      changesInspectorTab: tab,\n      // Reset the since when changing the tab, as it's not relevant for the history tab\n      since: tab === 'history' ? undefined : params?.since,\n    })\n\n  return (\n    <FadeInFlex direction=\"column\" padding={0} height=\"fill\" data-ready={isReady ? '' : undefined}>\n      <Card paddingBottom={1}>\n        <Flex align=\"center\" padding={3} gap={2}>\n          <TabList space={1} flex={1}>\n            <Tab\n              aria-controls=\"history-panel\"\n              id=\"history-tab\"\n              label={t('changes.tab.history')}\n              onClick={() => setPaneRouterTab('history')}\n              selected={paneRouterTab === 'history'}\n            />\n            <Tab\n              aria-controls=\"review-changes-panel\"\n              id=\"changes-tab\"\n              label={t('changes.tab.review-changes')}\n              onClick={() => setPaneRouterTab('review')}\n              selected={paneRouterTab === 'review'}\n            />\n          </TabList>\n          <Button\n            aria-label={t('changes.action.close-label')}\n            icon={CloseIcon}\n            mode=\"bleed\"\n            onClick={props.onClose}\n            tooltipProps={{content: t('document-inspector.close-button.tooltip')}}\n          />\n        </Flex>\n      </Card>\n\n      <TabPanel\n        aria-labelledby=\"history-tab\"\n        height=\"fill\"\n        hidden={paneRouterTab !== 'history'}\n        id=\"history-panel\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <EventsSelector showList={paneRouterTab === 'history'} />\n        ) : (\n          <HistorySelector showList={paneRouterTab === 'history'} />\n        )}\n      </TabPanel>\n\n      <TabPanel\n        aria-labelledby=\"review-tab\"\n        hidden={paneRouterTab !== 'review'}\n        id=\"review-panel\"\n        height=\"fill\"\n      >\n        {source.beta?.eventsAPI?.documents ? (\n          <>\n            {paneRouterTab === 'review' ? (\n              <EventsInspector showChanges={paneRouterTab === 'review'} />\n            ) : null}\n          </>\n        ) : (\n          <ChangesInspector showChanges={paneRouterTab === 'review'} />\n        )}\n      </TabPanel>\n    </FadeInFlex>\n  )\n}\n","import {RestoreIcon} from '@sanity/icons'\nimport {type DocumentInspector, useTranslation} from 'sanity'\n\nimport {useStructureTool} from '../../../../useStructureTool'\nimport {HISTORY_INSPECTOR_NAME} from '../../constants'\nimport {ChangesTabs} from './ChangesTabs'\n\nexport const changesInspector: DocumentInspector = {\n  name: HISTORY_INSPECTOR_NAME,\n  useMenuItem: () => {\n    const {features} = useStructureTool()\n    const {t} = useTranslation()\n\n    return {\n      hidden: !features.reviewChanges,\n      icon: RestoreIcon,\n      title: t('changes.title'),\n    }\n  },\n  component: ChangesTabs,\n  onClose: ({params}) => ({\n    params: {\n      ...params,\n      since: undefined,\n      rev: undefined,\n      changesInspectorTab: undefined,\n      historyVersion: undefined,\n    },\n  }),\n  onOpen: ({params}) => ({params: {...params, since: '@lastPublished'}}),\n}\n","/* eslint-disable no-loop-func */\n\nimport {type Path, type SanityDocument, type SchemaType} from '@sanity/types'\nimport {isArray, isRecord} from 'sanity'\n\nexport function getPathTitles(options: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}): Array<{name: string; title?: string}> {\n  const {path, schemaType, value} = options\n  const result: Array<{name: string; title?: string}> = []\n\n  let s = schemaType\n  let v: unknown = value\n\n  for (const segment of path) {\n    // field name\n    if (typeof segment === 'string') {\n      if (!isRecord(v) && v !== undefined) {\n        throw new Error(`Parent value is not an object, cannot get path segment: .${segment}`)\n      }\n\n      if (s.jsonType !== 'object') {\n        throw new Error(\n          `Parent type is not an object schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const field = s.fields.find((f) => f.name === segment)\n\n      if (!field) {\n        result.push({name: segment})\n        return result\n      }\n\n      s = field.type\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item index\n    if (typeof segment === 'number') {\n      if (!isArray(v) && v !== undefined) {\n        throw new Error(`Parent value is not an array, cannot get path segment: [${segment}]`)\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: [${segment}]`,\n        )\n      }\n\n      v = v?.[segment]\n\n      const itemType = s.of.find((ofType) => {\n        if (typeof v === 'string') {\n          return ofType.jsonType === 'string'\n        }\n\n        if (typeof v === 'number') {\n          return ofType.jsonType === 'number'\n        }\n\n        if (typeof v === 'boolean') {\n          return ofType.jsonType === 'boolean'\n        }\n\n        if (isRecord(v)) {\n          return ofType.name === v?._type\n        }\n\n        return false\n      })\n\n      if (!itemType) {\n        throw new Error(`Item type not found: [${segment}]`)\n      }\n\n      s = itemType\n\n      result.push(s)\n\n      continue\n    }\n\n    // array item key\n    if (isRecord(segment) && segment._key) {\n      if (!isArray(v)) {\n        throw new Error(\n          `Parent value is not an array, cannot get path segment: [_key == ${segment}]`,\n        )\n      }\n\n      if (s.jsonType !== 'array') {\n        throw new Error(\n          `Parent type is not an array schema type, cannot get path segment: .${segment}`,\n        )\n      }\n\n      const values = v ?? []\n\n      v = values.find((i) => isRecord(i) && i._key === segment._key)\n\n      if (!isRecord(v)) {\n        throw new Error(`Array item not found: [_key == ${segment._key}]`)\n      }\n\n      const ofType = s.of.find((i) => isRecord(v) && i.name === v?._type)\n\n      if (!ofType) {\n        throw new Error(`Array item type not found: .${v?._type}`)\n      }\n\n      s = ofType\n\n      result.push(s)\n\n      continue\n    }\n\n    throw new Error(`Invalid path segment: ${JSON.stringify(segment)}`)\n  }\n\n  return result\n}\n","import {\n  ErrorOutlineIcon,\n  type IconComponent,\n  InfoOutlineIcon,\n  WarningOutlineIcon,\n} from '@sanity/icons'\nimport {\n  type ObjectSchemaType,\n  type Path,\n  type SanityDocument,\n  type SchemaType,\n  type ValidationMarker,\n} from '@sanity/types'\nimport {Box, Card, type CardTone, Flex, Stack, Text} from '@sanity/ui'\nimport {type ErrorInfo, Fragment, useCallback, useMemo, useState} from 'react'\nimport {type DocumentInspectorProps, useTranslation} from 'sanity'\n\nimport {ErrorBoundary} from '../../../../../ui-components'\nimport {DocumentInspectorHeader} from '../../documentInspector'\nimport {useDocumentPane} from '../../useDocumentPane'\nimport {getPathTitles} from './getPathTitles'\n\nconst MARKER_ICON: Record<'error' | 'warning' | 'info', IconComponent> = {\n  error: ErrorOutlineIcon,\n  warning: WarningOutlineIcon,\n  info: InfoOutlineIcon,\n}\n\nconst MARKER_TONE: Record<'error' | 'warning' | 'info', CardTone> = {\n  error: 'critical',\n  warning: 'caution',\n  info: 'primary',\n}\n\nexport function ValidationInspector(props: DocumentInspectorProps) {\n  const {onClose} = props\n  const {onFocus, onPathOpen, schemaType, validation, value} = useDocumentPane()\n  const {t} = useTranslation('validation')\n\n  const handleOpen = useCallback(\n    (path: Path) => {\n      onPathOpen(path)\n      onFocus(path)\n    },\n    [onFocus, onPathOpen],\n  )\n\n  return (\n    <Flex direction=\"column\" height=\"fill\" overflow=\"hidden\">\n      <DocumentInspectorHeader\n        as=\"header\"\n        closeButtonLabel={t('panel.close-button-aria-label')}\n        flex=\"none\"\n        onClose={onClose}\n        title={t('panel.title')}\n      />\n\n      <Card flex={1} overflow=\"auto\" padding={3}>\n        {validation.length === 0 && (\n          <Box padding={2}>\n            <Text muted size={1}>\n              {t('panel.no-errors-message')}\n            </Text>\n          </Box>\n        )}\n\n        {validation.length > 0 && (\n          <Stack space={2}>\n            {validation.map((marker, i) => (\n              <ValidationCard\n                // eslint-disable-next-line react/no-array-index-key\n                key={i}\n                marker={marker}\n                onOpen={handleOpen}\n                schemaType={schemaType}\n                value={value}\n              />\n            ))}\n          </Stack>\n        )}\n      </Card>\n    </Flex>\n  )\n}\n\nfunction ValidationCard(props: {\n  marker: ValidationMarker\n  onOpen: (path: Path) => void\n  schemaType: ObjectSchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {marker, onOpen, schemaType, value} = props\n  const handleOpen = useCallback(() => onOpen(marker.path), [marker, onOpen])\n  const [errorInfo, setErrorInfo] = useState<{error: Error; info: ErrorInfo} | null>(null)\n  const Icon = MARKER_ICON[marker.level]\n\n  return (\n    <ErrorBoundary onCatch={setErrorInfo}>\n      {errorInfo && (\n        <Card padding={3} radius={2} tone=\"critical\">\n          <Text size={1}>{errorInfo.error.message}</Text>\n        </Card>\n      )}\n\n      {!errorInfo && (\n        <Card\n          __unstable_focusRing\n          as=\"button\"\n          onClick={handleOpen}\n          padding={3}\n          radius={2}\n          tone={MARKER_TONE[marker.level]}\n        >\n          <Flex align=\"flex-start\" gap={3}>\n            <Box flex=\"none\">\n              <Text size={1}>\n                <Icon />\n              </Text>\n            </Box>\n\n            <Stack flex={1} space={2}>\n              <DocumentNodePathBreadcrumbs\n                path={marker.path}\n                schemaType={schemaType}\n                value={value}\n              />\n\n              <Text muted size={1}>\n                {marker.message}\n              </Text>\n            </Stack>\n          </Flex>\n        </Card>\n      )}\n    </ErrorBoundary>\n  )\n}\n\nfunction DocumentNodePathBreadcrumbs(props: {\n  path: Path\n  schemaType: SchemaType\n  value: Partial<SanityDocument> | null\n}) {\n  const {path, schemaType, value} = props\n\n  const pathTitles = useMemo(() => {\n    try {\n      return getPathTitles({path, schemaType, value})\n    } catch (e) {\n      console.error(e)\n    }\n    return null\n  }, [path, schemaType, value])\n\n  if (!pathTitles?.length) return null\n\n  return (\n    <Text size={1}>\n      {pathTitles.map((t, i) => (\n        <Fragment key={i}>\n          {i > 0 && <span style={{color: 'var(--card-muted-fg-color)', opacity: 0.5}}> / </span>}\n          <span style={{fontWeight: 500}}>{t.title || t.name}</span>\n        </Fragment>\n      ))}\n    </Text>\n  )\n}\n","import {CheckmarkCircleIcon, ErrorOutlineIcon, WarningOutlineIcon} from '@sanity/icons'\nimport {useMemo} from 'react'\nimport {\n  type DocumentInspector,\n  type DocumentInspectorMenuItem,\n  type DocumentInspectorUseMenuItemProps,\n  type FormNodeValidation,\n  isValidationError,\n  isValidationWarning,\n  usePerspective,\n  useTranslation,\n  useValidationStatus,\n} from 'sanity'\n\nimport {VALIDATION_INSPECTOR_NAME} from '../../constants'\nimport {ValidationInspector} from './ValidationInspector'\n\nfunction useMenuItem(props: DocumentInspectorUseMenuItemProps): DocumentInspectorMenuItem {\n  const {documentId, documentType} = props\n  const {t} = useTranslation('validation')\n  const {selectedReleaseId} = usePerspective()\n  const {validation: validationMarkers} = useValidationStatus(\n    documentId,\n    documentType,\n    selectedReleaseId,\n  )\n\n  const validation: FormNodeValidation[] = useMemo(\n    () =>\n      validationMarkers.map((item) => ({\n        level: item.level,\n        message: item.message,\n        path: item.path,\n      })),\n    [validationMarkers],\n  )\n\n  const hasErrors = validation.some(isValidationError)\n  const hasWarnings = validation.some(isValidationWarning)\n\n  const icon = useMemo(() => {\n    if (hasErrors) return ErrorOutlineIcon\n    if (hasWarnings) return WarningOutlineIcon\n    return CheckmarkCircleIcon\n  }, [hasErrors, hasWarnings])\n\n  const tone = useMemo(() => {\n    if (hasErrors) return 'critical'\n    if (hasWarnings) return 'caution'\n    return 'positive'\n  }, [hasErrors, hasWarnings])\n\n  return {\n    hidden: validation.length === 0,\n    icon,\n    title: t('panel.title'),\n    tone,\n    showAsAction: true,\n  }\n}\n\nexport const validationInspector: DocumentInspector = {\n  name: VALIDATION_INSPECTOR_NAME,\n  component: ValidationInspector,\n  useMenuItem,\n}\n","import {omit} from 'lodash'\nimport {decodeJsonParams, encodeJsonParams, route} from 'sanity/router'\n\nimport {type RouterPaneGroup, type RouterPanes, type RouterPaneSibling} from './types'\n\nconst EMPTY_PARAMS = {}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToState(params: string): Record<string, unknown> {\n  try {\n    return JSON.parse(decodeURIComponent(params))\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn('Failed to parse JSON parameters')\n    return {}\n  }\n}\n\nexport function encodePanesSegment(panes: RouterPanes): string {\n  return (panes || [])\n    .map((group) => group.map(encodeChunks).join('|'))\n    .map(encodeURIComponent)\n    .join(';')\n}\n\n/**\n * @internal\n */\nexport function legacyEditParamsToPath(params: Record<string, unknown>): string {\n  return JSON.stringify(params)\n}\n\n// http://localhost:3333/intent/create/template=book-by-author;type=book/eyJhdXRob3JJZCI6Imdycm0ifQ==\n\n/**\n * @internal\n */\nexport function toState(pathSegment: string): RouterPaneGroup[] {\n  return parsePanesSegment(decodeURIComponent(pathSegment))\n}\n\n/**\n * @internal\n */\nexport function toPath(panes: RouterPaneGroup[]): string {\n  return encodePanesSegment(panes)\n}\n\nexport const router = route.create('/', [\n  // \"Asynchronous intent resolving\" route\n  route.intents('/intent'),\n\n  // Legacy fallback route, will be redirected to new format\n  route.create('/edit/:type/:editDocumentId', [\n    route.create({\n      path: '/:params',\n      transform: {params: {toState: legacyEditParamsToState, toPath: legacyEditParamsToPath}},\n    }),\n  ]),\n\n  // The regular path - when the intent can be resolved to a specific pane\n  route.create({\n    path: '/:panes',\n    // Legacy URLs, used to handle redirects\n    children: [route.create('/:action', route.create('/:legacyEditDocumentId'))],\n    transform: {\n      panes: {toState, toPath},\n    },\n  }),\n])\n\n// old: authors;knut,{\"template\":\"diaryEntry\"}\n// new: authors;knut,view=diff,eyJyZXYxIjoiYWJjMTIzIiwicmV2MiI6ImRlZjQ1NiJ9|latest-posts\n\nconst panePattern = /^([.a-z0-9_-]+),?({.*?})?(?:(;|$))/i\nconst isParam = (str: string) => /^[a-z0-9]+=[^=]+/i.test(str)\nconst isPayloadLike = (str: string) => /^[A-Za-z0-9\\-_]+(?:={0,2})$/.test(str)\nconst exclusiveParams = ['view', 'since', 'rev', 'inspect', 'comment']\n\ntype Truthy<T> = T extends false\n  ? never\n  : T extends ''\n    ? never\n    : T extends 0\n      ? never\n      : T extends 0n\n        ? never\n        : T extends null | undefined\n          ? NonNullable<T>\n          : T\nconst isTruthy = Boolean as (t: unknown) => boolean as <T>(t: T) => t is Truthy<T>\n\nfunction parseChunks(chunks: string[], initial: RouterPaneSibling): RouterPaneSibling {\n  const sibling: RouterPaneSibling = {...initial, params: EMPTY_PARAMS, payload: undefined}\n  return chunks.reduce((pane, chunk) => {\n    if (isParam(chunk)) {\n      const key = chunk.slice(0, chunk.indexOf('='))\n      const value = chunk.slice(key.length + 1)\n      pane.params = {...pane.params, [decodeURIComponent(key)]: decodeURIComponent(value)}\n    } else if (isPayloadLike(chunk)) {\n      pane.payload = tryParseBase64Payload(chunk)\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('Unknown pane segment: %s - skipping', chunk)\n    }\n\n    return pane\n  }, sibling)\n}\n\nfunction encodeChunks(pane: RouterPaneSibling, index: number, group: RouterPaneGroup): string {\n  const {payload, params = {}, id} = pane\n  const [firstSibling] = group\n  const paneIsFirstSibling = pane === firstSibling\n  const sameAsFirst = index !== 0 && id === firstSibling.id\n  const encodedPayload =\n    typeof payload === 'undefined' ? undefined : encodeJsonParams(payload as any)\n\n  const encodedParams = Object.entries(params)\n    .filter((entry): entry is [string, string] => {\n      const [key, value] = entry\n      if (!value) return false\n      if (paneIsFirstSibling) return true\n\n      // omit the value if it's the same as the value from the first sibling\n      const valueFromFirstSibling = firstSibling.params?.[key]\n      if (value === valueFromFirstSibling && !exclusiveParams.includes(key)) return false\n      return true\n    })\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n\n  return (\n    [sameAsFirst ? '' : id]\n      .concat([encodedParams.length > 0 && encodedParams, encodedPayload].filter(isTruthy).flat())\n      .join(',') || ','\n  )\n}\n\nexport function parsePanesSegment(str: string): RouterPanes {\n  if (str.indexOf(',{') !== -1) {\n    return parseOldPanesSegment(str)\n  }\n\n  return str\n    .split(';')\n    .map((group) => {\n      const [firstSibling, ...restOfSiblings] = group.split('|').map((segment) => {\n        const [id, ...chunks] = segment.split(',')\n        return parseChunks(chunks, {id})\n      })\n\n      return [\n        firstSibling,\n        ...restOfSiblings.map((sibling) => ({\n          ...firstSibling,\n          ...sibling,\n          id: sibling.id || firstSibling.id,\n          params: {...omit(firstSibling.params, exclusiveParams), ...sibling.params},\n          payload: sibling.payload || firstSibling.payload,\n        })),\n      ]\n    })\n    .filter((group) => group.length > 0)\n}\n\nfunction parseOldPanesSegment(str: string): RouterPanes {\n  const chunks: RouterPaneGroup = []\n\n  let buffer = str\n  while (buffer.length) {\n    const [match, id, payloadChunk] = buffer.match(panePattern) || []\n    if (!match) {\n      buffer = buffer.slice(1)\n      continue\n    }\n\n    const payload = payloadChunk && tryParsePayload(payloadChunk)\n    chunks.push({id, payload})\n\n    buffer = buffer.slice(match.length)\n  }\n\n  return [chunks]\n}\n\nfunction tryParsePayload(json: string) {\n  try {\n    return JSON.parse(json)\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n\nfunction tryParseBase64Payload(data: string): unknown {\n  try {\n    return data ? decodeJsonParams(data) : undefined\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(`Failed to parse parameters: ${err.message}`)\n    return undefined\n  }\n}\n","import {MasterDetailIcon} from '@sanity/icons'\nimport {lazy} from 'react'\nimport {definePlugin} from 'sanity'\n\nimport {\n  DeleteAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  HistoryRestoreAction,\n  PublishAction,\n  UnpublishAction,\n} from './documentActions'\nimport {LiveEditBadge} from './documentBadges'\nimport {getIntentState} from './getIntentState'\nimport {structureUsEnglishLocaleBundle} from './i18n'\nimport {changesInspector} from './panes/document/inspectors/changes'\nimport {validationInspector} from './panes/document/inspectors/validation'\nimport {router} from './router'\nimport {type StructureToolOptions} from './types'\n\nconst documentActions = [\n  PublishAction,\n  UnpublishAction,\n  DiscardChangesAction,\n  DuplicateAction,\n  DeleteAction,\n  HistoryRestoreAction,\n]\n\nconst documentBadges = [LiveEditBadge]\n\nconst inspectors = [validationInspector, changesInspector]\n\n/**\n * The structureTool is a studio plugin which adds the “structure tool” – a tool within\n * Sanity Studio in which content editors can drill down to specific documents to edit them.\n * You can configure your Studio's structure tool(s).\n *\n * @public\n * @param options - Options for the structure tool. See {@link StructureToolOptions}\n * @example Minimal example\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n *\n * export default defineConfig((\n *  // ...\n *  plugins: [\n *    structureTool() // use defaults\n *  ]\n * })\n * ```\n *\n * @example To customise your structure tool\n * ```ts\n * // sanity.config.ts\n * import { defineConfig } from 'sanity'\n * import { structureTool } from 'sanity/structure'\n * import { FaCar } from 'react-icons'\n\n * export default defineConfig((\n *\t // ...\n *   plugins: [\n *    structureTool({\n *      name: 'cars',\n *      title: 'Cars',\n *      icon: FaCar,\n *      structure: (S) => S.documentTypeList('car'),\n *      defaultDocumentNode: (S) =>\n *        S.document().views([\n *          S.view.form(),\n *          S.view.component(Preview).title('Preview')\n *        ])\n *    })\n *  ]\n * })\n * ```\n * */\nexport const structureTool = definePlugin<StructureToolOptions | void>((options) => {\n  const icon = options?.icon || MasterDetailIcon\n\n  return {\n    name: 'sanity/structure',\n    document: {\n      actions: (prevActions) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document actions already exist in the Studio config\n        return Array.from(new Set([...prevActions, ...documentActions]))\n      },\n      badges: (prevBadges) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the document badges already exist in the Studio config\n        return Array.from(new Set([...prevBadges, ...documentBadges]))\n      },\n      inspectors: (prevInspectors) => {\n        // NOTE: since it's possible to have several structure tools in one Studio,\n        // we need to check whether the inspectors already exist in the Studio config\n        return Array.from(new Set([...prevInspectors, ...inspectors]))\n      },\n    },\n\n    tools: [\n      {\n        name: options?.name || 'structure',\n        title: options?.title || 'Structure',\n        icon,\n        component: lazy(() => import('./components/structureTool')),\n        canHandleIntent: (intent, params) => {\n          if (intent === 'create') return canHandleCreateIntent(params)\n          if (intent === 'edit') return canHandleEditIntent(params)\n          return false\n        },\n        getIntentState,\n        // Controlled by sanity/src/structure/components/structureTool/StructureTitle.tsx\n        controlsDocumentTitle: true,\n        options,\n        router,\n        __internalApplicationType: 'sanity/structure',\n      },\n    ],\n\n    i18n: {\n      bundles: [structureUsEnglishLocaleBundle],\n    },\n  }\n})\n\nfunction canHandleCreateIntent(params: Record<string, unknown>) {\n  // We can't handle create intents without a `type` parameter\n  if (!('type' in params)) {\n    return false\n  }\n\n  // We can handle any create intent as long as it has a `type` parameter,\n  // but we also know how to deal with templates, where other tools might not\n  return 'template' in params ? {template: true} : true\n}\n\nfunction canHandleEditIntent(params: Record<string, unknown>) {\n  // We can't handle edit intents without an `id` parameter\n  if (!('id' in params)) {\n    return false\n  }\n\n  // We can handle any edit intent with a document ID, but we're best at `structure` mode\n  // This ensures that other tools that can handle modes such as `presentation` or `batch`\n  // can take precedence over the structure tool\n  return 'mode' in params ? {mode: params.mode === 'structure'} : true\n}\n","import {type ReactNode, useMemo, useState} from 'react'\nimport {useConfigContextFromSource, useDocumentStore, useSource} from 'sanity'\nimport {StructureToolContext} from 'sanity/_singletons'\n\nimport {createStructureBuilder, type DefaultDocumentNodeResolver} from './structureBuilder'\nimport {\n  type StructureResolver,\n  type StructureToolContextValue,\n  type UnresolvedPaneNode,\n} from './types'\n\n/** @internal */\nexport interface StructureToolProviderProps {\n  structure?: StructureResolver\n  defaultDocumentNode?: DefaultDocumentNodeResolver\n  children: ReactNode\n}\n\n/** @internal */\nexport function StructureToolProvider({\n  defaultDocumentNode,\n  structure: resolveStructure,\n  children,\n}: StructureToolProviderProps): React.JSX.Element {\n  const [layoutCollapsed, setLayoutCollapsed] = useState(false)\n  const source = useSource()\n  const configContext = useConfigContextFromSource(source)\n  const documentStore = useDocumentStore()\n\n  const S = useMemo(() => {\n    return createStructureBuilder({\n      defaultDocumentNode,\n      source,\n    })\n  }, [defaultDocumentNode, source])\n\n  const rootPaneNode = useMemo(() => {\n    // TODO: unify types and remove cast\n    if (resolveStructure)\n      return resolveStructure(S, {\n        ...configContext,\n        documentStore,\n      }) as UnresolvedPaneNode\n    return S.defaults() as UnresolvedPaneNode\n  }, [S, resolveStructure, configContext, documentStore])\n\n  const features: StructureToolContextValue['features'] = useMemo(\n    () => ({\n      backButton: layoutCollapsed,\n      resizablePanes: !layoutCollapsed,\n      reviewChanges: !layoutCollapsed,\n      splitPanes: !layoutCollapsed,\n      splitViews: !layoutCollapsed,\n    }),\n    [layoutCollapsed],\n  )\n\n  const structureTool: StructureToolContextValue = useMemo(() => {\n    return {\n      features,\n      layoutCollapsed,\n      setLayoutCollapsed,\n      rootPaneNode,\n      structureContext: S.context,\n    }\n  }, [features, layoutCollapsed, rootPaneNode, S.context])\n\n  return (\n    <StructureToolContext.Provider value={structureTool}>{children}</StructureToolContext.Provider>\n  )\n}\n"],"names":["structureLocaleNamespace","structureUsEnglishLocaleBundle","defineLocaleResourceBundle","locale","namespace","resources","DocTitle","props","$","_c","document","documentValue","schema","useSchema","t0","_type","get","schemaType","t","useTranslation","t1","value","error","useValuePreview","t2","t3","message","errorMessage","title","color","ChevronWrapper","styled","Box","CrossDatasetReferencesDetails","details","CrossDatasetReferencesSummary","summary","Table","table","theme","rem","sanity","space","DocumentIdFlex","Flex","OtherReferenceCount","difference","totalCount","references","length","count","Symbol","for","t4","t5","PaneItemPreview","icon","layout","presence","versionsInfo","useDocumentVersionInfo","_id","perspectiveStack","usePerspective","documentPreviewStore","getPreviewStateObservable","previewStateObservable","snapshot","isLoading","original","previewIsLoading","useObservable","draft","published","versions","status","tooltip","getPreviewValueWithFallback","fallback","t6","BackLink","forwardRef","ref","routerPanesState","groupIndex","useContext","PaneRouterContext","slice","panes","state","usePaneLayout","pane","PaneLayoutContext","Error","ChildLink","childId","childParameters","childPayload","rest","id","params","payload","ParameterizedLink","currentPanes","siblingIndex","nextParams","useUnique","nextPayload","currentGroup","currentSibling","nextSibling","nextGroup","nextPanes","nextState","t7","ReferenceChildLink","children","documentId","documentType","parentRefPath","template","pathToString","type","usePaneRouter","EMPTY_ARRAY","ReferencePreviewLink","onClick","getPublishedId","documentPresence","useDocumentPresence","useDocumentPreviewStore","name","linkProps","ConfirmDeleteDialogBody","crossDatasetReferences","internalReferences","documentTitle","action","datasetNames","hasUnknownDatasetNames","onReferenceLinkClick","toast","useToast","item","UnknownIcon","renderPreviewItem","DocumentTitle","T0","T1","T2","t10","t11","t12","t8","t9","normalizedDatasetNames","datasetSubtitle","datasets","join","context","t13","t14","t15","t16","Card","map","item_0","borderTop","undefined","documentCount","minWidth","filter","_temp","t17","index","projectId","datasetName","CopyIcon","content","navigator","clipboard","writeText","catch","push","reference","isClientError","e","POLL_INTERVAL","visiblePoll$","getVisiblePoll$","fromEvent","pipe","startWith","visibilityState","distinctUntilChanged","switchMap","visible","timer","EMPTY","shareReplay","refCount","bufferSize","getDocumentExistence","versionedClient","draftId","getDraftId","publishedId","requestOptions","uri","getDataUrl","json","query","excludeContent","tag","observable","request","omitted","nonExistant","doc","reason","some","fetchCrossDatasetReferences","checkDocumentId","of","currentDataset","config","dataset","url","catchError","statusCode","useInternalReferences","createHookFromObservableFactory","documentStore","listenQuery","fetch","listen","transitions","throttleTime","useCrossDatasetReferences","useReferringDocuments","useClient","DEFAULT_STUDIO_CLIENT_OPTIONS","useDocumentStore","isInternalReferencesLoading","isCrossDatasetReferencesLoading","Array","from","Set","Boolean","sort","projectIds","_temp2","_temp3","_temp4","crossDatasetReference_1","crossDatasetReference","crossDatasetReference_0","DialogBody","LoadingContainer","attrs","align","direction","justify","ConfirmDeleteDialog","onCancel","onConfirm","dialogId","useId","showConfirmButton","text","cancelButton","confirmButton","ConfirmDeleteDialogContainer","setError","useState","handleRetry","tone","Delay","ms","ready","setReady","timeoutId","setTimeout","clearTimeout","useEffect","PANE_DEBUG","PANE_COLLAPSED_WIDTH","PANE_DEFAULT_MIN_WIDTH","Root","Layer","PaneDivider","disabled","element","resize","dragging","setDragging","event","preventDefault","startX","pageX","handleMouseMove","deltaX","handleMouseUp","e_0","window","removeEventListener","addEventListener","handleMouseDown","Pane","forwardedRef","currentMaxWidthProp","currentMinWidthProp","maxWidthProp","minWidthProp","restProps","currentMinWidth","currentMaxWidth","flex","maxWidth","selected","flexProp","rootElement","setRootElement","collapse","collapsed","layoutCollapsed","expand","expandedElement","mount","p","find","indexOf","paneIndex","nextPane","isLast","expanded","nextCollapsed","useRef","current","useImperativeHandle","refValue","setRef","useLayoutEffect","handleCollapse","handleExpand","contextValue","bb0","bb1","hidden","divider","Infinity","t18","style","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","displayName","usePane","PaneContext","PaneContent","as","overflow","padding","toLowerCaseNoSpaces","str","toLocaleLowerCase","replaceAll","MENU_GROUP_POPOVER_PROPS","constrainSize","placement","portal","PaneMenuButtonItem","isAfterGroup","node","getI18nText","useGetI18nText","child","childIndex","key","child_0","childIndex_0","PaneContextMenuItemResolver","intent","PaneContextMenuItem","tooltipContent","useI18nText","hotkey","split","iconRight","CheckmarkIcon","onAction","PaneContextIntentMenuItem","intentLink","useIntentLink","handleClick","href","CONTEXT_MENU_POPOVER_PROPS","nodesHasTone","nodes","PaneContextMenuButton","actionsNodes","hasCritical","hasCaution","nodeIndex","RootCard","PaneFooter","$border","css","Layout","TitleCard","fg","bg","card","enabled","TitleTextSkeleton","TextSkeleton","TitleText","Text","PaneHeader","actions","backButton","border","contentAfter","loading","subActions","tabs","tabIndex","paneElement","paneRect","useElementRect","height","innerHeight","width","layoutStyle","handleTitleClick","handleLayoutClick","showTabsOrSubActions","getDisabledReason","disabledReason","ariaLabel","isDisabled","PaneHeaderActionButton","warn","PaneHeaderMenuItemActionButton","hotkeys","PaneHeaderActionIntentButton","PaneHeaderMenuGroupActionButton","idx","_calcPaneResize","cache","left","right","sum","leftMinWidth","rightMinWidth","leftMaxWidth","Math","min","rightMaxWidth","minDeltaX","rightMinDeltaX","maxDeltaX","leftMaxDeltaX","_deltaX","max","leftW","rightW","leftFlex","rightFlex","_getDOMPath","el","path","parentElement","childNodes","unshift","EMPTY_PATH","_sortElements","elements","WeakMap","set","_sortByElementPath","a","b","_a","_b","len","i","aIndex","bIndex","createPaneLayoutController","observers","optionsMap","userCollapsedElementSet","rootWidth","resizeDataMap","Map","resizing","add","_notifyObservers","delete","options","splice","leftElement","leftIndex","leftOptions","rightElement","rightOptions","offsetWidth","leftResizeData","rightResizeData","nextRootElement","setRootWidth","nextRootWidth","subscribe","observer","_elements","dataMap","lastElement","collapsedWidth","remaingWidth","userCollapsed","has","sizeCollapsed","resizeData","data","PaneLayout","onCollapse","onExpand","controller","setState","paneLayout","isMenuNodeButton","renderAsButton","isNotMenuNodeButton","negate","resolveMenuNodes","fieldActions","menuItems","menuItemGroups","keyOffset","mapFieldActionToPaneMenuNode","groups","itemGroup","g","i18n","ungroupedItems","group","shortcut","actionHandler","showAsAction","childIdx","IntentButton","linkRef","searchParams","Link","InsufficientPermissionsMessageTooltip","reveal","currentUser","useCurrentUser","POPOVER_PROPS","getIntent","templates","version","typeName","templateId","baseParams","initialDocumentId","parameters","PaneHeaderCreateButton","templateItems","useTemplates","selectedReleaseId","selectedPerspective","isReleaseActive","useIsReleaseActive","tCore","templatePermissions","isTemplatePermissionsLoading","useTemplatePermissions","every","nothingGranted","reduce","permissionsById","AddIcon","isPublishedPerspective","disabledByPerspectiveTooltipProps","firstItem","granted","itemIndex","disabled_0","intent_0","acc","permission_0","permission","isNonNullable","hashObject","sortObject","v","isArray","Object","entries","keyA","keyB","localeCompare","JSON","stringify","parse","PaneHeaderActions","memo","initialValueTemplateItems","initialValueTemplateItemsFromStructure","actionHandlers","EMPTY_OBJECT","handleAction","useCallback","console","handler","menuNodes","useMemo","actionNodes","contextMenuNodes","initialValueTemplateItemFromMenuItems","menuItemIndex","intentParams","templateParams","description","combinedInitialValueTemplates","uniqBy","MissingSchemaType","Code","getIconWithFallback","defaultIcon","PaneItem","pressed","margin","marginBottom","marginTop","hasSchemaType","clicked","setClicked","isSanityDocument","DocumentIcon","opacity","FolderIcon","preview","metaKey","preloading","setPreload","timeoutRef","startTransition","handleMouseEnter","handleMouseLeave","PreloadDocumentPane","useEditState","RenderActionCollectionState","actionProps","onActionComplete","RenderBadgeCollectionState","badges","badgeProps","useCreatePathSyncChannel","Subject","DIFF_VIEW_SEARCH_PARAMETER","DIFF_VIEW_PREVIOUS_DOCUMENT_SEARCH_PARAMETER","DIFF_VIEW_NEXT_DOCUMENT_SEARCH_PARAMETER","DIFF_SEARCH_PARAM_DELIMITER","useDiffViewRouter","navigate","routerState","useRouter","mode","previousDocument","nextDocument","next","fromPairs","_searchParams","toPairs","navigateDiffView","exitDiffView","includes","diffViewModes","isDiffViewMode","maybeDiffViewMode","useDiffViewState","onParamsError","URLSearchParams","anyParamSet","param","parseParams","result","errors","isActive","previousDocumentType","previousDocumentId","nextDocumentType","nextDocumentId","documents","previous","useScrollMirror","existentElements","scrollMirror","ScrollMirror","destroy","VersionModeHeaderLayout","header","VersionModeHeaderLayoutSection","div","VersionModeHeader","documentVersions","useDocumentVersions","activeReleases","useActiveReleases","releasesIds","flatMap","getVersionFromId","releases","release","releaseId","getReleaseIdFromReleaseDocumentId","onSelectPreviousRelease","selectedDocumentId","onSelectNextRelease","justifySelf","Button","CloseIcon","VersionMenu","onSelectRelease","role","findRelease","tStructure","getMenuButtonProps","VersionMenuItem","onSelect","isSelected","getVersionId","MenuItem","getReleaseTone","metadata","releaseType","formatRelativeLocalePublishDate","isReleaseScheduledOrScheduling","isReleaseDocument","isPublishedId","isDraftId","DialogLayout","pickDocumentLayoutComponent","plugin","components","unstable_layout","usePathSyncChannel","syncChannel","source","state_0","deepEquals","Scroller","DiffViewPaneLayout","Container","UiContainer","DiffViewPane","scrollElement","compareDocument","containerElement","portalElement","setPortalElement","boundaryElement","setBoundaryElement","pick","defaultComponent","DocumentLayout","useMiddlewareComponents","isInteractive","onOpenReviewChanges","noop","onSetFocus","isReviewChangesOpen","DiffViewDocument","compareValue","useCompareValue","patchChannel","perspectiveName","selectedPerspectiveName","comparisonValue","useDocumentForm","collapsedFieldSets","collapsedPaths","documentForm","formState","onBlur","onChange","onFocus","onProgrammaticFocus","onSetActiveFieldGroup","onSetCollapsedFieldSet","onSetCollapsedPath","pathSyncChannel","onPathOpen","subscription","unsubscribe","focusPath","changed","focused","validation","members","isVersionId","compareDocumentEditState","createPatchChannel","EditReferenceLinkComponent","_documentId","DiffView","previousPaneElement","setPreviousPaneElement","nextPaneElement","setNextPaneElement","referenceInputOptionsContext","ReferenceInputOptionsContext","disableNew","diffViewReferenceInputOptionsContext","DiffViewDocumentLayout","input","ErrorPane","paneKey","getWaitMessages","thresholds","messageKey","isDev","src","merge","threshold","mapTo","delay","DEFAULT_MESSAGE_KEY","Content","LoadingPane","messageProp","resolvedMessage","currentMessage","setCurrentMessage","sub","contentElement","setContentElement","mounted","setMounted","_raf2","DELAY","useDocumentPane","documentPane","DocumentPaneContext","CommentsWrapper","CommentsProviderWrapper","useCommentsEnabled","connectionState","inspector","openInspector","setParams","createPathWithParams","selectedCommentId","comment","paramsRef","commentId","inspect","COMMENTS_INSPECTOR_NAME","location","origin","getCommentLink","handleClearSelectedComment","handleOpenCommentsInspector","useFilteredReleases","displayed","archivedReleases","useArchivedReleases","isCreatingDocument","_createdAt","notCurrentReleases","currentReleases","inCreation","versionDocExists","historyVersion","archivedRelease","r","useDocumentIdStack","editState","filteredReleases","systemStack","releaseStack","concat","stack","findIndex","id_0","position","previousId","nextId","useStructureTool","structureTool","StructureToolContext","DOCUMENT_PANEL_MIN_WIDTH","DOCUMENT_PANEL_INITIAL_MIN_WIDTH","DOCUMENT_INSPECTOR_MIN_WIDTH","DOCUMENT_INSPECTOR_MAX_WIDTH","EMPTY_PARAMS","INSPECT_ACTION_PREFIX","DEFAULT_MENU_ITEM_GROUPS","HISTORY_INSPECTOR_NAME","VALIDATION_INSPECTOR_NAME","DocumentInspectorMenuItemsResolver","inspectors","onMenuItems","setMenuItems","newFieldActions","setMenuItem","prev","InspectorMenuItems","useMenuItem","defineInspectorMenuItemComponent","InspectorMenuItem","menuItem","useDocumentTitle","subscribed","IGNORE_OPS","DocumentOperationResults","pushToast","documentPaneValue","documentTitleInfo","titleError","useDocumentOperationEvent","prevEvent","paneRouter","op","documentTitleBase","cleanupId","closable","duration","Strong","closeCurrentAndAfter","isLiveEditEnabled","liveEdit","zIndex","lineHeight","DocumentInspectorHeader","closeButtonLabel","forwardedAs","onClose","DocumentInspectorPanel","closeInspector","features","handleClose","Component","component","resizablePanes","STRUCTURE_TOOL_NAMESPACE","useStructureToolSetting","defaultValue","keyValueStore","useKeyValueStore","keyValueStoreKey","getKey","value_0","newValue","setKey","VIEW_MODE_PARSED","VIEW_MODE_RAW","VIEW_MODES","lru","LRU","maxSize","isExpanded","keyPath","cached","isRecord","toggleExpanded","selectElement","sel","getSelection","range","createRange","removeAllRanges","selectNodeContents","addRange","select","currentTarget","maybeSelectAll","keyCode","ctrlKey","isDocumentLike","isString","JSONInspectorWrapper","fonts","code","family","sizes","fontSize","syntax","property","constant","string","boolean","number","Search","target","handleChange","SearchIcon","InspectDialog","onInspectClose","dialogIdPrefix","viewModeId","onViewModeChange","viewMode","setParsedViewMode","setRawViewMode","bottom","outline","ignoreCase","Banner","Icon","paddingY","DeletedDocumentBanners","isDeleted","isDeleting","isDraftPerspective","DeletedDocumentBanner","lastNonDeletedRevId","restore","useDocumentOperation","navigateIntent","execute","handleRestore","ReadOnlyIcon","ArchivedReleaseBanner","DocumentRemoveIcon","DeprecatedDocumentTypeBanner","isDeprecatedSchemaType","deprecated","ErrorOutlineIcon","AskToEditDialogOpened","defineEvent","AskToEditRequestSent","MAX_NOTE_LENGTH","RequestPermissionDialog","onRequestSubmitted","telemtry","useTelemetry","useProjectId","apiVersion","client","zOffset","useZIndex","isSubmitting","setIsSubmitting","note","setNote","msgError","setMsgError","hasTooManyRequests","setHasTooManyRequests","hasBeenDenied","setHasBeenDenied","adminRole","roles","requestedRole","method","body","requestUrl","then","log","err","response","errMessage","finally","onSubmit","fullscreen","role_0","appliesToUsers","LOADING_STATE","EMPTY_STATE","DECLINED_STATE","PENDING_STATE","EXPIRED_STATE","useRoleRequestsStatus","checkRoleRequests","checkRoleRequests$","requests","projectRequests","resourceId","declinedRequest","isAfter","addWeeks","Date","createdAt","isBefore","InsufficientPermissionBanner","requiredPermission","roleRequestStatus","requestStatusLoading","requestStatusError","requestSent","setRequestSent","requestPending","currentUserRoles","isOnlyViewer","showRequestPermissionDialog","setShowRequestPermissionDialog","listFormat","useListFormat","telemetry","roleTitles","formatToParts","Roles","part","ReferenceChangedBanner","replaceCurrent","routerReferenceId","parentSibling","parentId","hasHistoryOpen","rev","pathFromString","referenceInfoObservable","parentRefPathSegment","keyedSegmentIndex","unstable_observePathsDocumentPair","debounceTime","availability","pathGet","_ref","referenceInfo","handleReloadReference","available","SyncIcon","WarningOutlineIcon","LONG_ENOUGH_BUT_NOT_TOO_LONG","useConditionalToast","TOAST_DELAY","AddToReleaseBanner","currentRelease","LATEST","createVersion","useVersionOperations","versionCreateState","setVersionCreateState","lastUpdate","handleAddToRelease","now","useCurrentTime","getTime","getVersionInlineBadge","VersionBadge","updateIntervalMs","currentTime","setCurrentTime","intervalId","setInterval","clearInterval","ArchivedReleaseDocumentBanner","handleGoBack","historyEvent","since","CreateLinkedBanner","documentLinkedBannerContent","CreateLinkedBannerContent","useSanityCreateConfig","getSanityCreateLinkMetadata","createLinkMetadata","ResolvedLiveEdit","DraftLiveEditBanner","isPublishing","setPublishing","isDiscarding","setDiscarding","publish","discardChanges","liveEditResolveType","handlePublish","handleDiscard","OpenReleaseToEditBanner","isPinnedDraftOrPublished","onlyHasVersions","useOnlyHasVersions","OpenReleaseToEditBannerInner","setPerspective","useSetPerspective","currentVersion","documentVersionsTitleList","handleGoToEdit","ScheduledReleaseBanner","date","UnpublishedDocumentBanner","willBeUnpublished","isGoingToUnpublish","UnpublishIcon","TitleContainer","Stack","heading","FormHeader","isSingleton","__experimental_formPreviewTitle","ev","FormView","margins","openPath","isLocked","transactionSyncLock","pair","documentEvents","tap","prepareMutationEvent","prepareRebaseEvent","hasRev","_rev","patches","handleInitialValue","useEffectEvent","formRef","setFormRef","focusedFirstDescendant","setFocusedFirstDescendant","focusFirstDescendant","readOnly","mutations","mut","patch","fromMutationPatches","remotePatches","remoteMutations","localPatches","localMutations","DelayedDiv","show","DocumentHeaderTabs","parentRef","activeViewId","views","tabList","setTabList","parentSize","useElementSize","tabListSize","parentWidth","tabListWidth","tabPanelId","view","activeTab","ChevronDownIcon","view_0","view_1","index_0","DocumentHeaderMenuItem","label","viewId","setView","DocumentHeaderTab","DocumentHeaderTitle","DocumentPanelSubHeader","setParentRef","showTabs","showBackButton","ArrowLeftIcon","DocumentBox","ScrollContainer","$disabled","DocumentPanel","footerHeight","headerHeight","isInspectOpen","setDocumentPanelPortalElement","footer","permissions","isPermissionsLoading","isSanityCreateLinked","showCreateBanner","parentPortal","usePortal","_portalElement","documentScrollElement","setDocumentScrollElement","formContainerElement","activeView","splitPanes","formViewHidden","ActiveViewComponent","historical","activeViewNode","isLiveEdit","scrollTo","inspectDialog","showInspector","isSystemBundle","isPinnedDraftOrPublish","banners","showFormView","_DEBUG","freeze","LOADING_PANE","DOCUMENT_PANEL_PORTAL_ELEMENT","POPOVER_FALLBACK_PLACEMENTS","DIALOG_WIDTH_TO_UI_WIDTH","small","medium","large","full","ConfirmDialog","dialog","referenceElement","ConfirmDialogContent","cancelButtonIcon","cancelButtonText","confirmButtonIcon","confirmButtonText","isTopLayer","useLayer","useGlobalKeyDown","useClickOutsideEvent","Grid","ModalDialog","showCloseButton","Dialog","PopoverDialog","PopoverDialogContent","DocumentActionPortalProvider","ActionStateDialog","modalId","unknownModal","ActionDialogWrapper","actionStates","actionIndex","setActionIndex","currentAction","ActionMenuButton","idPrefix","setReferenceElement","preventOverflow","popoverProps","actionState","renderActionDialog","ActionMenuListItem","onHandle","String","replace","tooltipProps","s","toUpperCase","DISABLED_REASON_TITLE_KEY","NOTHING_TO_DELETE","NOT_READY","DeleteAction","onComplete","setIsDeleting","paneSetIsDeleting","deleteOp","isConfirmDialogOpen","setConfirmDialogOpen","handleCancel","handleConfirm","handle","useDocumentPairPermissions","TrashIcon","DISABLED_REASON_KEY","NO_CHANGES","NOT_PUBLISHED","DiscardChangesAction","isPublished","ResetIcon","NOTHING_TO_DUPLICATE","DuplicateAction","duplicate","isDuplicating","setDuplicating","dupeId","uuid","duplicateSuccess","firstValueFrom","operationEvents","HistoryRestoreAction","revision","isRevisionInitial","isRevisionLatest","RevertIcon","DocumentPublished","LIVE_EDIT_ENABLED","ALREADY_PUBLISHED","publishedAt","AlreadyPublished","useTemporalPhrase","timeSincePublished","useRelativeTime","PublishAction","publishState","setPublishState","validationStatus","useValidationStatus","syncState","useSyncState","changesOpen","isValidationErrorMarker","hasValidationErrors","publishScheduled","setPublishScheduled","isSyncing","isValidating","_updatedAt","hasDraft","doPublish","validationComplete","didPublish","publishedImmediately","previouslyPublished","PublishIcon","UnpublishAction","unpublish","isDraft","DocumentStatusBarActionsInner","showMenu","states","__internal_tasks","useSource","firstActionState","menuActionStates","buttonElement","setButtonElement","sideMenuItems","canShowAction","footerAction","DocumentStatusBarActions","allActions","renderDocumentStatusBarActions","HistoryStatusBarActions","revisionId","isRestoreAction","historyActions","toLowerCase","TooltipContent","intendedPublishAt","DATE_TIME_FORMAT","dateStyle","timeStyle","DocumentPerspectiveList","dateTimeFormat","useDateTimeFormat","handlePerspectiveChange","perspective","isPublishedChipDisabled","getReleaseChipState","isReleaseHistoryMatch","isPublishSelected","isDraftSelected","displayedId","isDraftDisabled","format","menuReleaseId","releasesLoading","fromRelease","isVersion","releaseState","HorizontalScroller","getTheme_v2","rgba","DocumentPanelHeader","_props","onMenuAction","onPaneClose","onPaneSplit","unstable_languageFilter","hasGroupSiblings","useFieldActions","menuButtonNodes","showSplitPaneButton","splitViews","showSplitPaneCloseButton","showPaneGroupCloseButton","renderPaneActions","renderedActions","LanguageFilterComponent","SplitVerticalIcon","DocumentPanelHeaderActionDialogDeferred","useDeferredValue","DocumentPanelHeaderActionDialog","SpacerButton","size","pointerEvents","visibility","BADGE_TONES","primary","success","warning","danger","DocumentBadgesInner","DocumentBadgesDeferred","DocumentBadges","renderDocumentBadges","badge","whiteSpace","TIMELINE_ICON_COMPONENTS","create","discardDraft","initial","editDraft","EditIcon","editLive","getTimelineEventIconComponent","hideScrollbarOnExpand","listWrapper","getElementById","TIMELINE_LIST_WRAPPER_ID","firstChildren","scrollHeight","clientHeight","currentStyle","getComputedStyle","overflowY","FlipIcon","ChevronLeftIcon","ExpandableTimelineItemButton","stopPropagation","handleExpandClick","StackWrapper","ListWrapper","$maxHeight","$visible","TIMELINE_ITEM_I18N_KEY_MAPPING","UserAvatarStack","maxLength","userIds","withTooltip","userId","IconBox","$color","avatar","TIMELINE_ITEM_EVENT_TONE","withinSelection","RELATIVE_TIME_OPTIONS","minimal","NameSkeleton","Skeleton","font","UserLine","user","useUser","collaborators","TimelineItem","chunk","optionsMenu","endTimestamp","timestamp","IconComponent","authors","authorUserIds","collaboratorsUsersIds","isSelectable","dateFormat","updatedTimeAgo","parsedDate","formattedTimestamp","evt","isNonPublishChunk","isPublishChunk","getPreviousPublishAction","chunks","previousPublish","addChunksMetadata","forEach","Timeline","hasMoreChunks","lastChunk","selectedChunk","onLoadMore","listMaxHeight","selectedChunkId","chunksWithMetadata","expandedParents","setExpandedParents","filteredChunks","handleExpandParent","selectedIndex","handleSelectChunk","timelineChunk","c","renderItem","activeIndex","TimelineError","versionError","Popover","TIMELINE_MENU_PORTAL","TimelineMenu","setTimelineRange","timelineError","timelineStore","open","setOpen","button","setButton","popoverRef","setPopoverRef","useTimelineSelector","realRevChunk","sinceTime","handleOpen","handleGlobalKeyDown","focus","selectRev","revChunk","sinceId","revId","findRangeForRev","selectSince","sinceChunk","findRangeForSince","handleLoadMore","loadMore","formatParams","revLabel","sinceLabel","buttonLabel","StyledMotionPath","motion","Circle","Arrows","Checkmark","rotateAnimation","keyframes","RotateGroup","root","syncing","scale","transition","saved","changes","circle","strokeDasharray","strokeDashoffset","arrows","checkmark","pathLength","AnimatedStatusIcon","STATUS_DICTIONARY","i18nKey","DocumentStatusPulse","currentStatus","MotionButton","MotionBox","ButtonSkeleton","DocumentStatusButton","author","translationKey","onHistoryOpen","onHistoryClose","relativeTime","FallbackStatus","createDocumentVersion","editDocumentVersion","EventsStatus","events","useEvents","TimelineStatus","TIMELINE_ITEM_I18N_KEY_MAPPING_LEGACY","SYNCING_TIMEOUT","SAVED_TIMEOUT","DocumentStatusLine","setStatus","eventsEnabled","beta","eventsAPI","lastUpdated","timerId","timerId_0","StatusText","RevisionStatusLine","useResizeObserver","onResize","resizeObserver","observe","unobserve","CONTAINER_BREAKPOINT","AnimatedCard","DocumentStatusBar","actionsBoxRef","onDocumentChange","CreateLinkedActions","documentLinkedActions","showingRevision","setCollapsed","contentRect","handleResize","isReady","shouldRender","flexShrink","marginLeft","KeyboardShortcutResponder","actionsBoxElement","onActionStart","onKeyDown","rootRef","As","activeAction","matchingStates","isHotkey","matchingState","handleKeyDown","DocumentActionShortcuts","setActiveIndex","renderDocumentActionShortcuts","getInspectorItems","currentInspector","hasValue","inspectorMenuItems","getInspectItem","JsonIcon","getCompareVersionsItem","documentIdStack","TransferIcon","getProductionPreviewItem","previewUrl","EarthAmericasIcon","getMenuItems","inspectorItems","items","LinkIcon","DocumentLayoutError","DIALOG_PROVIDER_POSITION","DocumentLayoutFooter","documentPanelPortalElement","setFooterElement","setActionsBoxElement","zOffsets","isInitialValueLoading","portalElements","startInCreateBanner","StartInCreateBanner","ShowWhenPaneOpen","StyledChangeConnectorRoot","ChangeConnectorRoot","inspectOpen","paneParams","footerElement","headerElement","setHeaderElement","setInspectorMenuItems","rootFieldActionNodes","setRootFieldActionNodes","footerRect","headerRect","handleKeyUp","onConnectorSetFocus","paneDialog","changesInspectorTab","useDocumentLayoutComponent","DocumentURLCopied","getInitialValueTemplateOpts","opts","panePayload","structureNodeTemplate","templateName","urlTemplate","typeTemplates","useDocumentPaneInitialValue","paneOptions","templateParameters","initialValueRaw","useInitialValue","useDocumentPaneInspector","inspectorsResolver","inspectorName","setInspectorName","inspectParamRef","historyInspector","closeInspectorName","nextInspectorName","nextInspector","currentParams","onOpen","handleHistoryClose","handleHistoryOpen","reviewChanges","toggleLegacyInspect","toggle","omit","handleLegacyInspectClose","handleInspectorAction","usePreviewUrl","resolveProductionUrl","BehaviorSubject","subject","asObservable","DocumentPaneProvider","onFocusPath","forcedVersion","historyStore","store","timelineReady","revisionDocument","onOlderRevision","sinceDocument","isPristine","setDocumentMeta","useCopyPaste","documentActions","documentBadges","unstable_fieldActions","fieldActionsResolver","languageFilterResolver","setPaneParams","viewsProp","documentIdRaw","diffViewRouter","initialValue","getIsDeleted","getComparisonValue","getIsReadOnly","getDisplayed","formReady","formStateRef","initialFocusPath","getFormDocumentValue","getDocumentVersionType","actionsPerspective","documentActionsProps","versionType","versionName","languageFilter","newSince","newRev","handlePaneClose","closeCurrent","handlePaneSplit","duplicateCurrent","handleMenuAction","toString","startsWith","restParams","pathFromUrl","resolveKeyedPath","DocumentEventsPane","usePaneOptions","showingPublishedOnDraft","eventsStore","useEventsStore","sinceRevision","historyStoreProps","isDeleteDocumentGroupEvent","isDeleteDocumentVersionEvent","DocumentPaneWithLegacyTimelineStore","setTimelineError","onError","useTimelineStore","revTime","sinceAttributes","timelineDisplayed","_temp5","_temp6","_temp7","state_1","state_2","state_3","state_4","state_5","DocumentPaneProviderWrapper","useResetHistoryParams","isMounted","_perspective","preserveRev","updateHistoryParams","DocumentPane","parentSourceName","DocumentPaneInner","resolveNewDocumentOptions","isLoaded","isDocumentLoaded","useDocumentType","mergeDocumentType","providerProps","handleEditReference","childParams","routerPanesStateLength","activePath","PARTIAL_PAGE_LIMIT","FULL_LIST_LIMIT","DEFAULT_ORDERING","by","field","EMPTY_RECORD","RootBox","$opacity","CommandListBox","SKELETON_ITEMS","keys","LoadingView","num","DocumentListPaneContent","childItemId","filterIsSimpleTypeConstraint","hasMaxItems","hasSearchQuery","isLazyLoading","loadingVariant","onEndReached","onRetry","paneTitle","searchInputElement","showIcons","setShouldRender","handleEndReached","isLastItem","showSpinner","showMaxItemsMessage","limit","noDocumentsContent","mainContent","removePublishedWithDrafts","collate","entry","hasPublished","applyOrderingFunctions","order","orderBy","mapWith","fieldType","tryResolveSchemaTypeForPath","fieldExtendsType","jsonType","baseType","pathSegments","PathUtils","fromString","segment","getFieldTypeByName","isKeySegment","isIndexSegment","memberType","otherType","isReferenceSchemaType","refType","otherRefType","to","fieldName","fields","ofType","findTypes","base","types","isSplat","findStaticTypesInFilter","IMPLICIT_SCHEMA_TYPE_FIELDS","joinReferences","strict","head","tail","schemaField","refTypes","tailFields","tailWrapper","getExtendedProjection","ordering","swr","createSWR","listenSearchQuery","searchQuery","staticTypeNames","maxFieldDepth","searchStrategy","sortBy","extendedProjection","events$","defer","includeAllVersions","includeResult","mergeMap","throwError","share","welcome$","mutationAndReconnect$","partition","swrKey","take","asyncScheduler","leading","trailing","exhaustMapWithTrailing","typeNames","getSearchableTypes","search","createSearch","strategy","maxDepth","doFetch","__unstable_extendedProjection","comments","skipSortByScore","hits","hit","fromCache","INITIAL_QUERY_STATE","isLoadingFullList","useDocumentList","searchFilter","paramsProp","sortOrder","useWorkspace","useSearchMaxFieldDepth","typeNameFromFilter","onRetry$","observableCallback","onFetchFullList$","onLoadFullList","queryResults$","listenSearchQueryArgs","partialList$","fullList$","withLatestFrom","takeUntil","caught$","safeError","scan","nonErrorThrownWarning","thrown","rotate","fadeIn","AnimatedSpinnerIcon","SpinnerIcon","SubtleSpinnerIcon","DelayedSubtleSpinnerIcon","DocumentListPane","sortOrderRaw","displayOptions","useShallowUnique","staticTypes","setSearchQuery","searchInputValue","setSearchInputValue","setSearchInputElement","sortWithOrderingFn","documentListIsLoading","trim","handleQueryChange","useObservableEvent","event$","debounce","handleClearSearch","handleSearchKeyDown","enableSearchSpinner","setEnableSearchSpinner","textInputIcon","initialValueTemplates","setLayout","setSortOrder","StructurePaneHeader","DocumentSheetListSelect","row","selectedAnchor","setSelectedAnchor","meta","handleOnClick","shiftKey","shiftClickIndex","lowerIndex","upperIndex","additionalSelectedRows","getRowModel","flatRows","currentSelectedRows","getSelectedRowModel","rows","setRowSelection","nextSelectedRows","rowId","isRowCurrentlySelected","getIsSelected","toggleSelected","paddingLeft","getCanSelect","useDocumentSheetListContext","DocumentSheetListContext","DocumentSheetListProvider","selectedAnchorCellDetails","setSelectedAnchorCellDetails","selectedRangeCellIndexes","setSelectedRangeCellIndexes","clearAndSetFocusSelection","nextAnchorDetails","activeElement","HTMLElement","blur","resetFocusSelection","changeSelectionColumn","visibleColumns","getVisibleLeafColumns","columnIndexAfterMove","col","colId","rowIndex","changeSelectionRange","previousSelection","anchorIndex","getNextIndex","startingIndex","firstSelectedIndex","lastIndexSelected","nextIndex","setSelectedAnchorCell","handleEscapePress","nextAnchorCellDetails","handleUpDownKey","isShiftKey","offset","newSelectedCellRowIndex","handleAnchorKeydown","handleAnchorClick","contains","focusAnchorCell","anchorCellDetails","getStateByCellId","submitFocusedCell","DataCell","td","PinnedDataCell","SheetListCellInner","getValue","column","cellId","renderValue","setRenderValue","isDirty","setIsDirty","inputRef","cellState","handleOnFocus","patchDocument","handleProgrammaticFocus","HTMLInputElement","handleOnMouseDown","detail","handleOnEnterDown","handleOnChange","handleOnBlur","handlePaste","clipboardData","getData","handleCopy","getBorderStyle","inputProps","boxShadow","SheetListCell","cell","isPinned","getIsPinned","Cell","borderWidth","getIsLastColumn","getStart","borderRight","getSize","flexRender","columnDef","getContext","VISIBLE_COLUMN_LIMIT","PreviewCell","displayValue","columnHelper","createColumnHelper","SUPPORTED_FIELDS","getColsFromSchemaType","parentalField","tableColumns","nextCol","accessor","enableHiding","info","isObjectSchemaType","columns","isAccessorKeyColumnDef","isGroupColumnDef","flatColumns","cols","useDocumentSheetColumns","documentSchemaType","display","getIsSomeRowsSelected","getToggleAllPageRowsSelectedHandler","initialColumnsVisibility","accCols","countAllowedVisible","visibilityKey","ColumnsControl","isVisibleLimitReached","getCanHide","setInitialColumns","resetColumnVisibility","handleColumnOnChange","toggleVisibility","getColumnVisibilityDisabled","isColumnVisible","getIsVisible","isSingleColumnVisible","maxHeight","getAllLeafColumns","SearchContainer","DocumentSheetListFilter","useSearchState","filtersVisible","Header","th","PinnedHeader","HoverMenu","DocumentSheetListHeader","headerGroup","headerTitle","depth","parent","HeaderTag","canShowHeaderMenu","boxSizing","EllipsisHorizontalIcon","DocumentSheetListPaginator","setPageIndex","getCanPreviousPage","DoubleChevronLeftIcon","previousPage","getState","pagination","pageIndex","getPageCount","nextPage","getCanNextPage","ChevronRightIcon","DoubleChevronRightIcon","pageSize","setPageSize","Number","createDocumentsSet","documentsReducer","nextDocumentResult","_","restDocuments","updatedDocument","LISTEN_OPTIONS","useDocumentSheetListStore","QUERY","dispatch","useReducer","setIsLoading","res","initialFetch","handleListenerEvent","err_0","listener$","uniques","values","dataAsArray","useDocumentSheetList","h","PaneContainer","TableContainer","DocumentSheetListPaneInner","totalRows","useReactTable","getCoreRowModel","getFilteredRowModel","getPaginationRowModel","autoResetPageIndex","initialState","columnPinning","columnVisibility","getRowId","fieldId","renderRow","getVisibleCells","rowsCount","getHeaderGroups","headers","DocumentSheetListPane","schemaTypeName","isDocumentSchemaType","addSelectedStateToMenuItems","isEqual","setPrevious","shallowEquals","defaultLayout","defaultOrdering","sourceName","defaultSortOrder","menuItemsWithSelectedState","isSheetListLayout","SerializeError","constructor","parentPath","pathSegment","hint","withHelpUrl","helpId","HELP_URL","ORDER_BY_UPDATED_AT","ns","ORDER_BY_CREATED_AT","DEFAULT_SELECTED_ORDERING_OPTION","DEFAULT_ORDERING_OPTIONS","maybeSerializeMenuItem","MenuItemBuilder","serialize","_context","spec","clone","getAction","getTitle","getI18n","getGroup","getIcon","getParams","getShowAsAction","TITLE_REQUIRED","ACTION_OR_INTENT_REQUIRED","ACTION_AND_INTENT_MUTUALLY_EXCLUSIVE","withSpec","builder","getOrderingMenuItem","SortIcon","getOrderingMenuItemsForSchemaType","orderings","maybeSerializeMenuItemGroup","MenuItemGroupBuilder","_title","_i18n","getId","ID_REQUIRED","disallowedPattern","validateId","disallowedChar","match","getStructureNodeId","camelCased","camelCase","test","getSlug","ComponentBuilder","getChild","getComponent","getOptions","getMenuItemGroups","canHandleIntent","componentOptions","resolveTypeForDocument","getClient","GenericViewBuilder","kebabCase","isSerializable","maybeSerializeView","isComponentSpec","ComponentViewBuilder","componentOrSpec","userComponent","COMPONENT_REQUIRED","FormViewBuilder","form","createDocumentChildResolver","resolveDocumentNode","itemId","currentSegment","DocumentBuilder","paneId","getDocumentId","getSchemaType","initialValueTemplate","getInitialValueTemplate","getInitialValueTemplateParameters","getViews","urlId","DOCUMENT_ID_REQUIRED","viewIds","dupes","uniq","getDocumentOptions","documentFromEditor","documentFromEditorWithInitialValue","InitialValueTemplateItemBuilder","getDescription","getTemplateId","getParameters","subtitle","defaultInitialValueTemplateItems","getStructureBuilder","getTypeNames","tpl","initialValueTemplateItem","maybeSerializeInitialValueTemplateItem","menuItemsFromInitialValueTemplateItems","DEFAULT_INTENT_HANDLER","defaultIntentChecker","intentName","isEdit","isCreate","typedSpec","paneFilter","getTypeNamesFromFilter","identity","layoutOptions","noChildResolver","shallowIntentChecker","GenericListBuilder","initialValueTemplatesSpecified","getDefaultLayout","getCanHandleIntent","getShowIcons","getInitialValueTemplates","validateFilter","QUERY_PROVIDED_FOR_FILTER","createDocumentChildResolverForItem","parentItem","Promise","resolve","DocumentListBuilder","getApiVersion","getFilter","getDefaultOrdering","FILTER_REQUIRED","generateHelpUrl","API_VERSION_REQUIRED_FOR_CUSTOM_FILTER","inferInitialValueTemplates","inferTypeName","getSpec","option","getTypeNamesFromEqualityFilter","getTypeNamesFromInTypesFilter","pattern","matches","exec","candidate","getArgType","thing","ListBuilder","isPromise","isListItem","defaultCanHandleIntent","isDocumentListItem","resolveChildForItem","maybeSerializeListItem","ListItemBuilder","listItem","gotWhat","helpText","INVALID_LIST_ITEM","getItems","LIST_ITEMS_MUST_BE_ARRAY","serializedItems","val","dupeIds","dupeDesc","LIST_ITEM_IDS_MUST_BE_UNIQUE","showIcon","getShowIcon","titleIsOptional","SCHEMA_TYPE_NOT_FOUND","serializeOptions","listChild","originalChild","childOptions","createDefaultChildResolver","DocumentListItemBuilder","SCHEMA_TYPE_REQUIRED","DocumentTypeListBuilder","cloneWithoutDefaultIntentHandler","override","BUNDLED_DOC_TYPES","isBundledDocType","isDocumentType","isList","collection","getDocumentTypes","n","getDocumentTypeListItems","getDocumentTypeListItem","startCase","childContext","list","getDocumentTypeList","typeNameOrSpec","StackCompactIcon","StackIcon","hasIcon","getDefaultStructure","createStructureBuilder","defaultDocumentNode","configContext","getConfigContextFromSource","structureBuilder","defaults","documentTypeList","args","documentTypeListItem","documentTypeListItems","documentWithInitialValueTemplate","defaultDocument","menuItemGroup","documentList","documentListItem","orderingMenuItem","orderingMenuItemsForType","editor","isValidElementType","uniqueId","LiveEditBadge","liveEditSchemaType","activePanes","setActivePanes","getIntentState","editDocumentId","getPaneParams","ChangesInspector","showChanges","scrollRef","setScrollRef","diff","selectionState","isComparingCurrent","structureT","FieldWrapper","ChangeFieldWrapper","rootDiff","showFromValue","documentContext","getIsSelectable","isUnpublishDocumentEvent","isScheduleDocumentVersionEvent","isUnscheduleDocumentVersionEvent","EventTimelineItem","cursor","PublishedEventMenu","portalContext","versionId","versionRevisionId","handleOpenReleaseDocument","handleOpenDraftDocument","RELEASES_INTENT","textDecoration","children_0","releaseTitle","children_1","fallbackPlacements","children_2","TimelineItemWrapper","CHILDREN_ITEMS_VARIANTS","animate","exit","ITEM_HEIGHT","EventsTimeline","allEvents","hasMoreEvents","selectedEventId","fetchEventChildren","selectedEvent","expandingParents","setExpandingParents","isCreateDocumentVersionEvent","isEditDocumentVersionEvent","isExpanding","renderOptionsMenu","documentVariantType","getDocumentVariantType","isPublishDocumentVersionEvent","creationEvent","showExpandingLoader","isLastEvent","EventsTimelineMenu","nextCursor","eventsError","findRangeForRevision","loadMoreEvents","expandEvent","revEvent","sinceEvent","SpinnerContainer","DIFF_INITIAL_VALUE","EventsInspector","getChangesList","changesList$","diffLoading","toEvent","sinceEvents","EventsSelector","showList","listHeight","setListHeight","getScrollerRef","initialLoad","HistorySelector","FadeInFlex","TABS","isValidTab","tab","ChangesTabs","paneRouterTab","setPaneRouterTab","changesInspector","RestoreIcon","getPathTitles","f","itemType","_key","MARKER_ICON","InfoOutlineIcon","MARKER_TONE","ValidationInspector","marker","ValidationCard","errorInfo","setErrorInfo","level","DocumentNodePathBreadcrumbs","pathTitles","Fragment","fontWeight","validationMarkers","hasErrors","isValidationError","hasWarnings","isValidationWarning","CheckmarkCircleIcon","validationInspector","legacyEditParamsToState","decodeURIComponent","encodePanesSegment","encodeChunks","encodeURIComponent","legacyEditParamsToPath","toState","parsePanesSegment","toPath","router","route","intents","transform","panePattern","isParam","isPayloadLike","exclusiveParams","isTruthy","parseChunks","sibling","tryParseBase64Payload","firstSibling","paneIsFirstSibling","sameAsFirst","encodedPayload","encodeJsonParams","encodedParams","valueFromFirstSibling","flat","parseOldPanesSegment","restOfSiblings","buffer","payloadChunk","tryParsePayload","decodeJsonParams","definePlugin","MasterDetailIcon","prevActions","prevBadges","prevInspectors","tools","lazy","canHandleCreateIntent","canHandleEditIntent","controlsDocumentTitle","__internalApplicationType","bundles","StructureToolProvider","structure","resolveStructure","setLayoutCollapsed","useConfigContextFromSource","S","rootPaneNode","structureContext"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218],"debugId":null}}]
}