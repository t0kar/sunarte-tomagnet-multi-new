{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"QRCodeSVG.mjs","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/presentation/preview/qrcodegen.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/sanity/src/presentation/preview/QRCodeSVG.tsx"],"sourcesContent":["/**\n * \\@license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n/* eslint-disable no-empty-function,no-negated-condition,unicorn/prefer-string-slice,unused-imports/no-unused-vars,no-param-reassign,no-bitwise,max-params */\n\ntype bit = number\ntype byte = number\ntype int = number\n\n/*---- QR Code symbol class ----*/\n\n/*\n * A QR Code symbol, which is a type of two-dimension barcode.\n * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n * Instances of this class represent an immutable square grid of dark and light cells.\n * The class provides static factory functions to create a QR Code from text or binary data.\n * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n *\n * Ways to create a QR Code object:\n * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n * - Low level: Custom-make the array of data codeword bytes (including\n *   segment headers and final padding, excluding error correction codewords),\n *   supply the appropriate version number, and call the QrCode() constructor.\n * (Note that all ways require supplying the desired error correction level.)\n */\nexport class QrCode {\n  /*-- Static factory functions (high level) --*/\n\n  // Returns a QR Code representing the given Unicode text string at the given error correction level.\n  // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n  // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n  // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n  // ecl argument if it can be done without increasing the version.\n  public static encodeText(text: string, ecl: Ecc): QrCode {\n    const segs: Array<QrSegment> = QrSegment.makeSegments(text)\n    return QrCode.encodeSegments(segs, ecl)\n  }\n\n  // Returns a QR Code representing the given binary data at the given error correction level.\n  // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n  // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n  // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n  public static encodeBinary(data: Readonly<Array<byte>>, ecl: Ecc): QrCode {\n    const seg: QrSegment = QrSegment.makeBytes(data)\n    return QrCode.encodeSegments([seg], ecl)\n  }\n\n  /*-- Static factory functions (mid level) --*/\n\n  // Returns a QR Code representing the given segments with the given encoding parameters.\n  // The smallest possible QR Code version within the given range is automatically\n  // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n  // may be higher than the ecl argument if it can be done without increasing the\n  // version. The mask number is either between 0 to 7 (inclusive) to force that\n  // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n  // This function allows the user to create a custom sequence of segments that switches\n  // between modes (such as alphanumeric and byte) to encode text in less space.\n  // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n  public static encodeSegments(\n    segs: Readonly<Array<QrSegment>>,\n    ecl: Ecc,\n    minVersion: int = 1,\n    maxVersion: int = 40,\n    mask: int = -1,\n    boostEcl: boolean = true,\n  ): QrCode {\n    if (\n      !(\n        QrCode.MIN_VERSION <= minVersion &&\n        minVersion <= maxVersion &&\n        maxVersion <= QrCode.MAX_VERSION\n      ) ||\n      mask < -1 ||\n      mask > 7\n    )\n      throw new RangeError('Invalid value')\n\n    // Find the minimal version number to use\n    let version: int\n    let dataUsedBits: int\n    for (version = minVersion; ; version++) {\n      const dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8 // Number of data bits available\n      const usedBits: number = QrSegment.getTotalBits(segs, version)\n      if (usedBits <= dataCapacityBits) {\n        dataUsedBits = usedBits\n        break // This version number is found to be suitable\n      }\n      if (version >= maxVersion)\n        // All versions in the range could not fit the given data\n        throw new RangeError('Data too long')\n    }\n\n    // Increase the error correction level while the data still fits in the current version number\n    for (const newEcl of [Ecc.MEDIUM, Ecc.QUARTILE, Ecc.HIGH]) {\n      // From low to high\n      if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl\n    }\n\n    // Concatenate all segments to create the data bit string\n    const bb: Array<bit> = []\n    for (const seg of segs) {\n      appendBits(seg.mode.modeBits, 4, bb)\n      appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb)\n      for (const b of seg.getData()) bb.push(b)\n    }\n    assert(bb.length == dataUsedBits)\n\n    // Add terminator and pad up to a byte if applicable\n    const dataCapacityBits: int = QrCode.getNumDataCodewords(version, ecl) * 8\n    assert(bb.length <= dataCapacityBits)\n    appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb)\n    appendBits(0, (8 - (bb.length % 8)) % 8, bb)\n    assert(bb.length % 8 == 0)\n\n    // Pad with alternating bytes until data capacity is reached\n    for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11)\n      appendBits(padByte, 8, bb)\n\n    // Pack bits into bytes in big endian\n    const dataCodewords: Array<byte> = []\n    while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0)\n    bb.forEach((b: bit, i: int) => (dataCodewords[i >>> 3] |= b << (7 - (i & 7))))\n\n    // Create the QR Code object\n    return new QrCode(version, ecl, dataCodewords, mask)\n  }\n\n  /*-- Fields --*/\n\n  // The width and height of this QR Code, measured in modules, between\n  // 21 and 177 (inclusive). This is equal to version * 4 + 17.\n  public readonly size: int\n\n  // The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).\n  // Even if a QR Code is created with automatic masking requested (mask = -1),\n  // the resulting object still has a mask value between 0 and 7.\n  public readonly mask: int\n\n  // The modules of this QR Code (false = light, true = dark).\n  // Immutable after constructor finishes. Accessed through getModule().\n  private readonly modules: Array<Array<boolean>> = []\n\n  // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n  private readonly isFunction: Array<Array<boolean>> = []\n\n  /*-- Constructor (low level) and fields --*/\n\n  // Creates a new QR Code with the given version number,\n  // error correction level, data codeword bytes, and mask number.\n  // This is a low-level API that most users should not use directly.\n  // A mid-level API is the encodeSegments() function.\n  public constructor(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    public readonly version: int,\n\n    // The error correction level used in this QR Code.\n    public readonly errorCorrectionLevel: Ecc,\n\n    dataCodewords: Readonly<Array<byte>>,\n\n    msk: int,\n  ) {\n    // Check scalar arguments\n    if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION)\n      throw new RangeError('Version value out of range')\n    if (msk < -1 || msk > 7) throw new RangeError('Mask value out of range')\n    this.size = version * 4 + 17\n\n    // Initialize both grids to be size*size arrays of Boolean false\n    const row: Array<boolean> = []\n    for (let i = 0; i < this.size; i++) row.push(false)\n    for (let i = 0; i < this.size; i++) {\n      this.modules.push(row.slice()) // Initially all light\n      this.isFunction.push(row.slice())\n    }\n\n    // Compute ECC, draw modules\n    this.drawFunctionPatterns()\n    const allCodewords: Array<byte> = this.addEccAndInterleave(dataCodewords)\n    this.drawCodewords(allCodewords)\n\n    // Do masking\n    if (msk == -1) {\n      // Automatically choose best mask\n      let minPenalty: int = 1000000000\n      for (let i = 0; i < 8; i++) {\n        this.applyMask(i)\n        this.drawFormatBits(i)\n        const penalty: int = this.getPenaltyScore()\n        if (penalty < minPenalty) {\n          msk = i\n          minPenalty = penalty\n        }\n        this.applyMask(i) // Undoes the mask due to XOR\n      }\n    }\n    assert(0 <= msk && msk <= 7)\n    this.mask = msk\n    this.applyMask(msk) // Apply the final choice of mask\n    this.drawFormatBits(msk) // Overwrite old format bits\n\n    this.isFunction = []\n  }\n\n  /*-- Accessor methods --*/\n\n  // Returns the color of the module (pixel) at the given coordinates, which is false\n  // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n  // If the given coordinates are out of bounds, then false (light) is returned.\n  public getModule(x: int, y: int): boolean {\n    return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x]\n  }\n\n  // Modified to expose modules for easy access\n  public getModules(): boolean[][] {\n    return this.modules\n  }\n\n  /*-- Private helper methods for constructor: Drawing function modules --*/\n\n  // Reads this object's version field, and draws and marks all function modules.\n  private drawFunctionPatterns(): void {\n    // Draw horizontal and vertical timing patterns\n    for (let i = 0; i < this.size; i++) {\n      this.setFunctionModule(6, i, i % 2 == 0)\n      this.setFunctionModule(i, 6, i % 2 == 0)\n    }\n\n    // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n    this.drawFinderPattern(3, 3)\n    this.drawFinderPattern(this.size - 4, 3)\n    this.drawFinderPattern(3, this.size - 4)\n\n    // Draw numerous alignment patterns\n    const alignPatPos: Array<int> = this.getAlignmentPatternPositions()\n    const numAlign: int = alignPatPos.length\n    for (let i = 0; i < numAlign; i++) {\n      for (let j = 0; j < numAlign; j++) {\n        // Don't draw on the three finder corners\n        if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))\n          this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j])\n      }\n    }\n\n    // Draw configuration data\n    this.drawFormatBits(0) // Dummy mask value; overwritten later in the constructor\n    this.drawVersion()\n  }\n\n  // Draws two copies of the format bits (with its own error correction code)\n  // based on the given mask and this object's error correction level field.\n  private drawFormatBits(mask: int): void {\n    // Calculate error correction code and pack bits\n    const data: int = (this.errorCorrectionLevel.formatBits << 3) | mask // errCorrLvl is uint2, mask is uint3\n    let rem: int = data\n    for (let i = 0; i < 10; i++) rem = (rem << 1) ^ ((rem >>> 9) * 0x537)\n    const bits = ((data << 10) | rem) ^ 0x5412 // uint15\n    assert(bits >>> 15 == 0)\n\n    // Draw first copy\n    for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i))\n    this.setFunctionModule(8, 7, getBit(bits, 6))\n    this.setFunctionModule(8, 8, getBit(bits, 7))\n    this.setFunctionModule(7, 8, getBit(bits, 8))\n    for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i))\n\n    // Draw second copy\n    for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i))\n    for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i))\n    this.setFunctionModule(8, this.size - 8, true) // Always dark\n  }\n\n  // Draws two copies of the version bits (with its own error correction code),\n  // based on this object's version field, iff 7 <= version <= 40.\n  private drawVersion(): void {\n    if (this.version < 7) return\n\n    // Calculate error correction code and pack bits\n    let rem: int = this.version // version is uint6, in the range [7, 40]\n    for (let i = 0; i < 12; i++) rem = (rem << 1) ^ ((rem >>> 11) * 0x1f25)\n    const bits: int = (this.version << 12) | rem // uint18\n    assert(bits >>> 18 == 0)\n\n    // Draw two copies\n    for (let i = 0; i < 18; i++) {\n      const color: boolean = getBit(bits, i)\n      const a: int = this.size - 11 + (i % 3)\n      const b: int = Math.floor(i / 3)\n      this.setFunctionModule(a, b, color)\n      this.setFunctionModule(b, a, color)\n    }\n  }\n\n  // Draws a 9*9 finder pattern including the border separator,\n  // with the center module at (x, y). Modules can be out of bounds.\n  private drawFinderPattern(x: int, y: int): void {\n    for (let dy = -4; dy <= 4; dy++) {\n      for (let dx = -4; dx <= 4; dx++) {\n        const dist: int = Math.max(Math.abs(dx), Math.abs(dy)) // Chebyshev/infinity norm\n        const xx: int = x + dx\n        const yy: int = y + dy\n        if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n          this.setFunctionModule(xx, yy, dist != 2 && dist != 4)\n      }\n    }\n  }\n\n  // Draws a 5*5 alignment pattern, with the center module\n  // at (x, y). All modules must be in bounds.\n  private drawAlignmentPattern(x: int, y: int): void {\n    for (let dy = -2; dy <= 2; dy++) {\n      for (let dx = -2; dx <= 2; dx++)\n        this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1)\n    }\n  }\n\n  // Sets the color of a module and marks it as a function module.\n  // Only used by the constructor. Coordinates must be in bounds.\n  private setFunctionModule(x: int, y: int, isDark: boolean): void {\n    this.modules[y][x] = isDark\n    this.isFunction[y][x] = true\n  }\n\n  /*-- Private helper methods for constructor: Codewords and masking --*/\n\n  // Returns a new byte string representing the given data with the appropriate error correction\n  // codewords appended to it, based on this object's version and error correction level.\n  private addEccAndInterleave(data: Readonly<Array<byte>>): Array<byte> {\n    const ver: int = this.version\n    const ecl: Ecc = this.errorCorrectionLevel\n    if (data.length != QrCode.getNumDataCodewords(ver, ecl))\n      throw new RangeError('Invalid argument')\n\n    // Calculate parameter numbers\n    const numBlocks: int = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver]\n    const blockEccLen: int = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver]\n    const rawCodewords: int = Math.floor(QrCode.getNumRawDataModules(ver) / 8)\n    const numShortBlocks: int = numBlocks - (rawCodewords % numBlocks)\n    const shortBlockLen: int = Math.floor(rawCodewords / numBlocks)\n\n    // Split data into blocks and append ECC to each block\n    const blocks: Array<Array<byte>> = []\n    const rsDiv: Array<byte> = QrCode.reedSolomonComputeDivisor(blockEccLen)\n    for (let i = 0, k = 0; i < numBlocks; i++) {\n      const dat: Array<byte> = data.slice(\n        k,\n        k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1),\n      )\n      k += dat.length\n      const ecc: Array<byte> = QrCode.reedSolomonComputeRemainder(dat, rsDiv)\n      if (i < numShortBlocks) dat.push(0)\n      blocks.push(dat.concat(ecc))\n    }\n\n    // Interleave (not concatenate) the bytes from every block into a single sequence\n    const result: Array<byte> = []\n    for (let i = 0; i < blocks[0].length; i++) {\n      blocks.forEach((block, j) => {\n        // Skip the padding byte in short blocks\n        if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i])\n      })\n    }\n    assert(result.length == rawCodewords)\n    return result\n  }\n\n  // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n  // data area of this QR Code. Function modules need to be marked off before this is called.\n  private drawCodewords(data: Readonly<Array<byte>>): void {\n    if (data.length != Math.floor(QrCode.getNumRawDataModules(this.version) / 8))\n      throw new RangeError('Invalid argument')\n    let i: int = 0 // Bit index into the data\n    // Do the funny zigzag scan\n    for (let right = this.size - 1; right >= 1; right -= 2) {\n      // Index of right column in each column pair\n      if (right == 6) right = 5\n      for (let vert = 0; vert < this.size; vert++) {\n        // Vertical counter\n        for (let j = 0; j < 2; j++) {\n          const x: int = right - j // Actual x coordinate\n          const upward: boolean = ((right + 1) & 2) == 0\n          const y: int = upward ? this.size - 1 - vert : vert // Actual y coordinate\n          if (!this.isFunction[y][x] && i < data.length * 8) {\n            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7))\n            i++\n          }\n          // If this QR Code has any remainder bits (0 to 7), they were assigned as\n          // 0/false/light by the constructor and are left unchanged by this method\n        }\n      }\n    }\n    assert(i == data.length * 8)\n  }\n\n  // XORs the codeword modules in this QR Code with the given mask pattern.\n  // The function modules must be marked and the codeword bits must be drawn\n  // before masking. Due to the arithmetic of XOR, calling applyMask() with\n  // the same mask value a second time will undo the mask. A final well-formed\n  // QR Code needs exactly one (not zero, two, etc.) mask applied.\n  private applyMask(mask: int): void {\n    if (mask < 0 || mask > 7) throw new RangeError('Mask value out of range')\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let invert: boolean\n        switch (mask) {\n          case 0:\n            invert = (x + y) % 2 == 0\n            break\n          case 1:\n            invert = y % 2 == 0\n            break\n          case 2:\n            invert = x % 3 == 0\n            break\n          case 3:\n            invert = (x + y) % 3 == 0\n            break\n          case 4:\n            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0\n            break\n          case 5:\n            invert = ((x * y) % 2) + ((x * y) % 3) == 0\n            break\n          case 6:\n            invert = (((x * y) % 2) + ((x * y) % 3)) % 2 == 0\n            break\n          case 7:\n            invert = (((x + y) % 2) + ((x * y) % 3)) % 2 == 0\n            break\n          default:\n            throw new Error('Unreachable')\n        }\n        if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x]\n      }\n    }\n  }\n\n  // Calculates and returns the penalty score based on state of this QR Code's current modules.\n  // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n  private getPenaltyScore(): int {\n    let result: int = 0\n\n    // Adjacent modules in row having same color, and finder-like patterns\n    for (let y = 0; y < this.size; y++) {\n      let runColor = false\n      let runX = 0\n      const runHistory = [0, 0, 0, 0, 0, 0, 0]\n      for (let x = 0; x < this.size; x++) {\n        if (this.modules[y][x] == runColor) {\n          runX++\n          if (runX == 5) result += QrCode.PENALTY_N1\n          else if (runX > 5) result++\n        } else {\n          this.finderPenaltyAddHistory(runX, runHistory)\n          if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3\n          runColor = this.modules[y][x]\n          runX = 1\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3\n    }\n    // Adjacent modules in column having same color, and finder-like patterns\n    for (let x = 0; x < this.size; x++) {\n      let runColor = false\n      let runY = 0\n      const runHistory = [0, 0, 0, 0, 0, 0, 0]\n      for (let y = 0; y < this.size; y++) {\n        if (this.modules[y][x] == runColor) {\n          runY++\n          if (runY == 5) result += QrCode.PENALTY_N1\n          else if (runY > 5) result++\n        } else {\n          this.finderPenaltyAddHistory(runY, runHistory)\n          if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3\n          runColor = this.modules[y][x]\n          runY = 1\n        }\n      }\n      result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3\n    }\n\n    // 2*2 blocks of modules having same color\n    for (let y = 0; y < this.size - 1; y++) {\n      for (let x = 0; x < this.size - 1; x++) {\n        const color: boolean = this.modules[y][x]\n        if (\n          color == this.modules[y][x + 1] &&\n          color == this.modules[y + 1][x] &&\n          color == this.modules[y + 1][x + 1]\n        )\n          result += QrCode.PENALTY_N2\n      }\n    }\n\n    // Balance of dark and light modules\n    let dark: int = 0\n    for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark)\n    const total: int = this.size * this.size // Note that size is odd, so dark/total != 1/2\n    // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n    const k: int = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1\n    assert(0 <= k && k <= 9)\n    result += k * QrCode.PENALTY_N4\n    assert(0 <= result && result <= 2568888) // Non-tight upper bound based on default values of PENALTY_N1, ..., N4\n    return result\n  }\n\n  /*-- Private helper functions --*/\n\n  // Returns an ascending list of positions of alignment patterns for this version number.\n  // Each position is in the range [0,177), and are used on both the x and y axes.\n  // This could be implemented as lookup table of 40 variable-length lists of integers.\n  private getAlignmentPatternPositions(): Array<int> {\n    if (this.version == 1) return []\n\n    const numAlign: int = Math.floor(this.version / 7) + 2\n    const step: int =\n      this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2\n    const result: Array<int> = [6]\n    for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos)\n    return result\n  }\n\n  // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n  // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n  // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n  private static getNumRawDataModules(ver: int): int {\n    if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION)\n      throw new RangeError('Version number out of range')\n    let result: int = (16 * ver + 128) * ver + 64\n    if (ver >= 2) {\n      const numAlign: int = Math.floor(ver / 7) + 2\n      result -= (25 * numAlign - 10) * numAlign - 55\n      if (ver >= 7) result -= 36\n    }\n    assert(208 <= result && result <= 29648)\n    return result\n  }\n\n  // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n  // QR Code of the given version number and error correction level, with remainder bits discarded.\n  // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n  private static getNumDataCodewords(ver: int, ecl: Ecc): int {\n    return (\n      Math.floor(QrCode.getNumRawDataModules(ver) / 8) -\n      QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] *\n        QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver]\n    )\n  }\n\n  // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n  // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n  private static reedSolomonComputeDivisor(degree: int): Array<byte> {\n    if (degree < 1 || degree > 255) throw new RangeError('Degree out of range')\n    // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n    // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n    const result: Array<byte> = []\n    for (let i = 0; i < degree - 1; i++) result.push(0)\n    result.push(1) // Start off with the monomial x^0\n\n    // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n    // and drop the highest monomial term which is always 1x^degree.\n    // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n    let root = 1\n    for (let i = 0; i < degree; i++) {\n      // Multiply the current product by (x - r^i)\n      for (let j = 0; j < result.length; j++) {\n        result[j] = QrCode.reedSolomonMultiply(result[j], root)\n        if (j + 1 < result.length) result[j] ^= result[j + 1]\n      }\n      root = QrCode.reedSolomonMultiply(root, 0x02)\n    }\n    return result\n  }\n\n  // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n  private static reedSolomonComputeRemainder(\n    data: Readonly<Array<byte>>,\n    divisor: Readonly<Array<byte>>,\n  ): Array<byte> {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const result: Array<byte> = divisor.map((_) => 0)\n    for (const b of data) {\n      // Polynomial division\n      const factor: byte = b ^ (result.shift() as byte)\n      result.push(0)\n      divisor.forEach((coef, i) => (result[i] ^= QrCode.reedSolomonMultiply(coef, factor)))\n    }\n    return result\n  }\n\n  // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n  // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n  private static reedSolomonMultiply(x: byte, y: byte): byte {\n    if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError('Byte out of range')\n    // Russian peasant multiplication\n    let z: int = 0\n    for (let i = 7; i >= 0; i--) {\n      z = (z << 1) ^ ((z >>> 7) * 0x11d)\n      z ^= ((y >>> i) & 1) * x\n    }\n    assert(z >>> 8 == 0)\n    return z as byte\n  }\n\n  // Can only be called immediately after a light run is added, and\n  // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n  private finderPenaltyCountPatterns(runHistory: Readonly<Array<int>>): int {\n    const n: int = runHistory[1]\n    assert(n <= this.size * 3)\n    const core: boolean =\n      n > 0 &&\n      runHistory[2] == n &&\n      runHistory[3] == n * 3 &&\n      runHistory[4] == n &&\n      runHistory[5] == n\n    return (\n      (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) +\n      (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0)\n    )\n  }\n\n  // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n  private finderPenaltyTerminateAndCount(\n    currentRunColor: boolean,\n    currentRunLength: int,\n    runHistory: Array<int>,\n  ): int {\n    if (currentRunColor) {\n      // Terminate dark run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory)\n      currentRunLength = 0\n    }\n    currentRunLength += this.size // Add light border to final run\n    this.finderPenaltyAddHistory(currentRunLength, runHistory)\n    return this.finderPenaltyCountPatterns(runHistory)\n  }\n\n  // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n  private finderPenaltyAddHistory(currentRunLength: int, runHistory: Array<int>): void {\n    if (runHistory[0] == 0) currentRunLength += this.size // Add light border to initial run\n    runHistory.pop()\n    runHistory.unshift(currentRunLength)\n  }\n\n  /*-- Constants and tables --*/\n\n  // The minimum version number supported in the QR Code Model 2 standard.\n  public static readonly MIN_VERSION: int = 1\n  // The maximum version number supported in the QR Code Model 2 standard.\n  public static readonly MAX_VERSION: int = 40\n\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  private static readonly PENALTY_N1: int = 3\n  private static readonly PENALTY_N2: int = 3\n  private static readonly PENALTY_N3: int = 40\n  private static readonly PENALTY_N4: int = 10\n\n  private static readonly ECC_CODEWORDS_PER_BLOCK: Array<Array<int>> = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [\n      -1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30,\n      30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n    ], // Low\n    [\n      -1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28,\n      28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n    ], // Medium\n    [\n      -1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30,\n      30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n    ], // Quartile\n    [\n      -1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24,\n      30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n    ], // High\n  ]\n\n  private static readonly NUM_ERROR_CORRECTION_BLOCKS: Array<Array<int>> = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [\n      -1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13,\n      14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25,\n    ], // Low\n    [\n      -1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23,\n      25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49,\n    ], // Medium\n    [\n      -1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29,\n      34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68,\n    ], // Quartile\n    [\n      -1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35,\n      37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81,\n    ], // High\n  ]\n}\n\n// Appends the given number of low-order bits of the given value\n// to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\nfunction appendBits(val: int, len: int, bb: Array<bit>): void {\n  if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError('Value out of range')\n  for (\n    let i = len - 1;\n    i >= 0;\n    i-- // Append bit by bit\n  )\n    bb.push((val >>> i) & 1)\n}\n\n// Returns true iff the i'th bit of x is set to 1.\nfunction getBit(x: int, i: int): boolean {\n  return ((x >>> i) & 1) != 0\n}\n\n// Throws an exception if the given condition is false.\nfunction assert(cond: boolean): void {\n  if (!cond) throw new Error('Assertion error')\n}\n\n/*---- Data segment class ----*/\n\n/*\n * A segment of character/binary/control data in a QR Code symbol.\n * Instances of this class are immutable.\n * The mid-level way to create a segment is to take the payload data\n * and call a static factory function such as QrSegment.makeNumeric().\n * The low-level way to create a segment is to custom-make the bit buffer\n * and call the QrSegment() constructor with appropriate values.\n * This segment class imposes no length restrictions, but QR Codes have restrictions.\n * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n */\n\nexport class QrSegment {\n  /*-- Static factory functions (mid level) --*/\n\n  // Returns a segment representing the given binary data encoded in\n  // byte mode. All input byte arrays are acceptable. Any text string\n  // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n  public static makeBytes(data: Readonly<Array<byte>>): QrSegment {\n    const bb: Array<bit> = []\n    for (const b of data) appendBits(b, 8, bb)\n    return new QrSegment(Mode.BYTE, data.length, bb)\n  }\n\n  // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n  public static makeNumeric(digits: string): QrSegment {\n    if (!QrSegment.isNumeric(digits)) throw new RangeError('String contains non-numeric characters')\n    const bb: Array<bit> = []\n    for (let i = 0; i < digits.length; ) {\n      // Consume up to 3 digits per iteration\n      const n: int = Math.min(digits.length - i, 3)\n      appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb)\n      i += n\n    }\n    return new QrSegment(Mode.NUMERIC, digits.length, bb)\n  }\n\n  // Returns a segment representing the given text string encoded in alphanumeric mode.\n  // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n  // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n  public static makeAlphanumeric(text: string): QrSegment {\n    if (!QrSegment.isAlphanumeric(text))\n      throw new RangeError('String contains unencodable characters in alphanumeric mode')\n    const bb: Array<bit> = []\n    let i: int\n    for (i = 0; i + 2 <= text.length; i += 2) {\n      // Process groups of 2\n      let temp: int = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45\n      temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1))\n      appendBits(temp, 11, bb)\n    }\n    if (i < text.length)\n      // 1 character remaining\n      appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb)\n    return new QrSegment(Mode.ALPHANUMERIC, text.length, bb)\n  }\n\n  // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n  // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n  public static makeSegments(text: string): Array<QrSegment> {\n    // Select the most efficient segment encoding automatically\n    if (text == '') return []\n    else if (QrSegment.isNumeric(text)) return [QrSegment.makeNumeric(text)]\n    else if (QrSegment.isAlphanumeric(text)) return [QrSegment.makeAlphanumeric(text)]\n    return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))]\n  }\n\n  // Returns a segment representing an Extended Channel Interpretation\n  // (ECI) designator with the given assignment value.\n  public static makeEci(assignVal: int): QrSegment {\n    const bb: Array<bit> = []\n    if (assignVal < 0) throw new RangeError('ECI assignment value out of range')\n    else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb)\n    else if (assignVal < 1 << 14) {\n      appendBits(0b10, 2, bb)\n      appendBits(assignVal, 14, bb)\n    } else if (assignVal < 1000000) {\n      appendBits(0b110, 3, bb)\n      appendBits(assignVal, 21, bb)\n    } else throw new RangeError('ECI assignment value out of range')\n    return new QrSegment(Mode.ECI, 0, bb)\n  }\n\n  // Tests whether the given string can be encoded as a segment in numeric mode.\n  // A string is encodable iff each character is in the range 0 to 9.\n  public static isNumeric(text: string): boolean {\n    return QrSegment.NUMERIC_REGEX.test(text)\n  }\n\n  // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n  // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n  // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n  public static isAlphanumeric(text: string): boolean {\n    return QrSegment.ALPHANUMERIC_REGEX.test(text)\n  }\n\n  /*-- Constructor (low level) and fields --*/\n\n  // Creates a new QR Code segment with the given attributes and data.\n  // The character count (numChars) must agree with the mode and the bit buffer length,\n  // but the constraint isn't checked. The given bit buffer is cloned and stored.\n  public constructor(\n    // The mode indicator of this segment.\n    public readonly mode: Mode,\n\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    public readonly numChars: int,\n\n    // The data bits of this segment. Accessed through getData().\n    private readonly bitData: Array<bit>,\n  ) {\n    if (numChars < 0) throw new RangeError('Invalid argument')\n    this.bitData = bitData.slice() // Make defensive copy\n  }\n\n  /*-- Methods --*/\n\n  // Returns a new copy of the data bits of this segment.\n  public getData(): Array<bit> {\n    return this.bitData.slice() // Make defensive copy\n  }\n\n  // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n  // the given version. The result is infinity if a segment has too many characters to fit its length field.\n  public static getTotalBits(segs: Readonly<Array<QrSegment>>, version: int): number {\n    let result: number = 0\n    for (const seg of segs) {\n      const ccbits: int = seg.mode.numCharCountBits(version)\n      if (seg.numChars >= 1 << ccbits) return Infinity // The segment's length doesn't fit the field's bit width\n      result += 4 + ccbits + seg.bitData.length\n    }\n    return result\n  }\n\n  // Returns a new array of bytes representing the given string encoded in UTF-8.\n  private static toUtf8ByteArray(str: string): Array<byte> {\n    str = encodeURI(str)\n    const result: Array<byte> = []\n    for (let i = 0; i < str.length; i++) {\n      if (str.charAt(i) != '%') result.push(str.charCodeAt(i))\n      else {\n        result.push(parseInt(str.substring(i + 1, i + 3), 16))\n        i += 2\n      }\n    }\n    return result\n  }\n\n  /*-- Constants --*/\n\n  // Describes precisely all strings that are encodable in numeric mode.\n  private static readonly NUMERIC_REGEX: RegExp = /^[0-9]*$/\n\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  private static readonly ALPHANUMERIC_REGEX: RegExp = /^[A-Z0-9 $%*+./:-]*$/\n\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  private static readonly ALPHANUMERIC_CHARSET: string =\n    '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:'\n}\n\n/*\n * The error correction level in a QR Code symbol. Immutable.\n */\nexport class Ecc {\n  /*-- Constants --*/\n\n  public static readonly LOW = new Ecc(0, 1) // The QR Code can tolerate about  7% erroneous codewords\n  public static readonly MEDIUM = new Ecc(1, 0) // The QR Code can tolerate about 15% erroneous codewords\n  public static readonly QUARTILE = new Ecc(2, 3) // The QR Code can tolerate about 25% erroneous codewords\n  public static readonly HIGH = new Ecc(3, 2) // The QR Code can tolerate about 30% erroneous codewords\n\n  /*-- Constructor and fields --*/\n\n  private constructor(\n    // In the range 0 to 3 (unsigned 2-bit integer).\n    public readonly ordinal: int,\n    // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n    public readonly formatBits: int,\n  ) {}\n}\n\n/*\n * Describes how a segment's data bits are interpreted. Immutable.\n */\nexport class Mode {\n  /*-- Constants --*/\n\n  public static readonly NUMERIC = new Mode(0x1, [10, 12, 14])\n  public static readonly ALPHANUMERIC = new Mode(0x2, [9, 11, 13])\n  public static readonly BYTE = new Mode(0x4, [8, 16, 16])\n  public static readonly KANJI = new Mode(0x8, [8, 10, 12])\n  public static readonly ECI = new Mode(0x7, [0, 0, 0])\n\n  /*-- Constructor and fields --*/\n\n  private constructor(\n    // The mode indicator bits, which is a uint4 value (range 0 to 15).\n    public readonly modeBits: int,\n    // Number of character count bits for three different version ranges.\n    private readonly numBitsCharCount: [int, int, int],\n  ) {}\n\n  /*-- Method --*/\n\n  // (Package-private) Returns the bit width of the character count field for a segment in\n  // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n  public numCharCountBits(ver: int): int {\n    return this.numBitsCharCount[Math.floor((ver + 7) / 17)]\n  }\n}\n","/**\n * This component is a fork of the `qrcode.react` package, original licensing can be found below.\n * \\@license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\n\n/* eslint-disable @typescript-eslint/no-shadow,no-eq-null,prefer-arrow-callback */\n\nimport {motion} from 'framer-motion'\nimport {memo, useMemo} from 'react'\n\nimport {Ecc, QrCode, QrSegment} from './qrcodegen'\n\ntype Modules = Array<Array<boolean>>\ntype Excavation = {x: number; y: number; w: number; h: number}\ntype ErrorCorrectionLevel = 'L' | 'M' | 'Q' | 'H'\n\ntype ERROR_LEVEL_MAPPED_TYPE = {\n  [index in ErrorCorrectionLevel]: Ecc\n}\n\nconst ERROR_LEVEL_MAP: ERROR_LEVEL_MAPPED_TYPE = {\n  L: Ecc.LOW,\n  M: Ecc.MEDIUM,\n  Q: Ecc.QUARTILE,\n  H: Ecc.HIGH,\n} as const\n\ntype QRProps = {\n  /**\n   * The value to encode into the QR Code.\n   */\n  value: string\n  /**\n   * The size, in pixels, to render the QR Code.\n   * @defaultValue 128\n   */\n  size?: number\n  /**\n   * The Error Correction Level to use.\n   * @see https://www.qrcode.com/en/about/error_correction.html\n   * @defaultValue L\n   */\n  level?: ErrorCorrectionLevel\n  /**\n   * @defaultValue #000000\n   */\n  color?: string\n  /**\n   * The title to assign to the QR Code. Used for accessibility reasons.\n   */\n  title?: string\n  /**\n   * The minimum version used when encoding the QR Code. Valid values are 1-40\n   * with higher values resulting in more complex QR Codes. The optimal\n   * (lowest) version is determined for the `value` provided, using `minVersion`\n   * as the lower bound.\n   * @defaultValue 1\n   */\n  minVersion?: number\n  logoSize?: number\n}\n\nconst DEFAULT_SIZE = 128\nconst DEFAULT_LEVEL: ErrorCorrectionLevel = 'L'\nconst DEFAULT_FGCOLOR = '#000000'\nconst DEFAULT_INCLUDEMARGIN = false\nconst DEFAULT_MINVERSION = 1\n\nconst SPEC_MARGIN_SIZE = 4\nconst DEFAULT_MARGIN_SIZE = 0\n\nfunction generatePath(modules: Modules, margin: number = 0): string {\n  const ops: Array<string> = []\n  modules.forEach(function (row, y) {\n    let start: number | null = null\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        // M0 0h7v1H0z injects the space with the move and drops the comma,\n        // saving a char per operation\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`)\n        start = null\n        return\n      }\n\n      // end of row, clean up or skip\n      if (x === row.length - 1) {\n        if (!cell) {\n          // We would have closed the op above already so this can only mean\n          // 2+ light modules in a row.\n          return\n        }\n        if (start === null) {\n          // Just a single dark module.\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`)\n        } else {\n          // Otherwise finish the current line.\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`)\n        }\n        return\n      }\n\n      if (cell && start === null) {\n        start = x\n      }\n    })\n  })\n  return ops.join('')\n}\n\n// We could just do this in generatePath, except that we want to support\n// non-Path2D canvas, so we need to keep it an explicit step.\nfunction excavateModules(modules: Modules, excavation: Excavation): Modules {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell\n      }\n      return false\n    })\n  })\n}\n\nfunction getImageSettings(\n  cells: Modules,\n  size: number,\n  margin: number,\n  logoSize?: number,\n): null | {\n  x: number\n  y: number\n  h: number\n  w: number\n  excavation: Excavation | null\n} {\n  if (!logoSize) {\n    return null\n  }\n  const numCells = cells.length + margin * 2\n  const scale = numCells / size\n  const w = logoSize * scale\n  const h = logoSize * scale\n  const x = cells.length / 2 - w / 2\n  const y = cells.length / 2 - h / 2\n\n  const floorX = Math.floor(x)\n  const floorY = Math.floor(y)\n  const ceilW = Math.ceil(w + x - floorX)\n  const ceilH = Math.ceil(h + y - floorY)\n  const excavation = {x: floorX, y: floorY, w: ceilW, h: ceilH}\n\n  return {x, y, h, w, excavation}\n}\n\nfunction getMarginSize(includeMargin: boolean, marginSize?: number): number {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0)\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE\n}\n\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  logoSize,\n  size,\n}: {\n  value: string\n  level: ErrorCorrectionLevel\n  minVersion: number\n  includeMargin: boolean\n  marginSize?: number\n  logoSize?: number\n  size: number\n}) {\n  const qrcode = useMemo(() => {\n    const segments = QrSegment.makeSegments(value)\n    return QrCode.encodeSegments(segments, ERROR_LEVEL_MAP[level], minVersion)\n  }, [value, level, minVersion])\n\n  const {cells, margin, numCells, calculatedImageSettings} = useMemo(() => {\n    const cells = qrcode.getModules()\n\n    const margin = getMarginSize(includeMargin, marginSize)\n    const numCells = cells.length + margin * 2\n    const calculatedImageSettings = getImageSettings(cells, size, margin, logoSize)\n    return {\n      cells,\n      margin,\n      numCells,\n      calculatedImageSettings,\n    }\n  }, [qrcode, size, logoSize, includeMargin, marginSize])\n\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings,\n  }\n}\n\nfunction QRCodeSVGComponent(props: QRProps) {\n  const {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    color = DEFAULT_FGCOLOR,\n    minVersion = DEFAULT_MINVERSION,\n    title,\n    logoSize,\n  } = props\n  const marginSize: number | undefined = undefined\n\n  const {margin, cells, numCells, calculatedImageSettings} = useQRCode({\n    value,\n    level,\n    minVersion,\n    includeMargin: DEFAULT_INCLUDEMARGIN,\n    marginSize,\n    logoSize,\n    size,\n  })\n\n  const cellsToDraw = useMemo(\n    () =>\n      logoSize && calculatedImageSettings?.excavation\n        ? excavateModules(cells, calculatedImageSettings.excavation)\n        : cells,\n    [calculatedImageSettings?.excavation, cells, logoSize],\n  )\n\n  // Drawing strategy: instead of a rect per module, we're going to create a\n  // single path for the dark modules and layer that on top of a light rect,\n  // for a total of 2 DOM nodes. We pay a bit more in string concat but that's\n  // way faster than DOM ops.\n  // For level 1, 441 nodes -> 2\n  // For level 40, 31329 -> 2\n  const fgPath = generatePath(cellsToDraw, margin)\n\n  return (\n    <svg height={size} width={size} viewBox={`0 0 ${numCells} ${numCells}`} role=\"img\">\n      {!!title && <title>{title}</title>}\n      <motion.path\n        fill={color}\n        d={fgPath}\n        shapeRendering=\"crispEdges\"\n        initial={{opacity: 0}}\n        animate={{opacity: 2}}\n        exit={{opacity: -1}}\n      />\n    </svg>\n  )\n}\nconst QRCodeSVG = memo(QRCodeSVGComponent)\nQRCodeSVG.displayName = 'Memo(QRCodeSVG)'\n\nexport default QRCodeSVG\n"],"names":["QrCode","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","mask","boostEcl","MIN_VERSION","MAX_VERSION","RangeError","version","dataUsedBits","dataCapacityBits","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","b","getData","push","length","assert","Math","min","padByte","dataCodewords","forEach","i","modules","isFunction","constructor","errorCorrectionLevel","msk","size","row","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","a","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","cond","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substring","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","bitData","ccbits","Infinity","str","encodeURI","charCodeAt","LOW","KANJI","numBitsCharCount","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","DEFAULT_MINVERSION","SPEC_MARGIN_SIZE","DEFAULT_MARGIN_SIZE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","logoSize","scale","floorX","floorY","ceilW","ceilH","getMarginSize","includeMargin","marginSize","useQRCode","value","level","qrcode","useMemo","segments","numCells","calculatedImageSettings","QRCodeSVGComponent","props","title","undefined","cellsToDraw","fgPath","opacity","QRCodeSVG","memo","displayName"],"mappings":"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","ignoreList":[0,1],"debugId":null}}]
}