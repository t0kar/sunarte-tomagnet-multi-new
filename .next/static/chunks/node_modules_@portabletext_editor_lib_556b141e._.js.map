{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"parse-blocks.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/asserters.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/parse-blocks.ts"],"sourcesContent":["import type {TypedObject} from '@sanity/types'\n\nexport function isTypedObject(object: unknown): object is TypedObject {\n  return isRecord(object) && typeof object._type === 'string'\n}\n\nfunction isRecord(value: unknown): value is Record<string, unknown> {\n  return !!value && (typeof value === 'object' || typeof value === 'function')\n}\n","import type {\n  PortableTextBlock,\n  PortableTextObject,\n  PortableTextSpan,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {isTypedObject} from './asserters'\n\nexport function parseBlocks({\n  context,\n  blocks,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  blocks: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): Array<PortableTextBlock> {\n  if (!Array.isArray(blocks)) {\n    return []\n  }\n\n  return blocks.flatMap((block) => {\n    const parsedBlock = parseBlock({context, block, options})\n\n    return parsedBlock ? [parsedBlock] : []\n  })\n}\n\nexport function parseBlock({\n  context,\n  block,\n  options,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  block: unknown\n  options: {\n    refreshKeys: boolean\n  }\n}): PortableTextBlock | undefined {\n  return (\n    parseTextBlock({block, context, options}) ??\n    parseBlockObject({blockObject: block, context, options})\n  )\n}\n\nfunction parseBlockObject({\n  blockObject,\n  context,\n  options,\n}: {\n  blockObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(blockObject)) {\n    return undefined\n  }\n\n  if (\n    blockObject._type === context.schema.block.name ||\n    blockObject._type === 'block' ||\n    !context.schema.blockObjects.some(({name}) => name === blockObject._type)\n  ) {\n    return undefined\n  }\n\n  return {\n    ...blockObject,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof blockObject._key === 'string'\n        ? blockObject._key\n        : context.keyGenerator(),\n  }\n}\n\nexport function isTextBlock(\n  schema: EditorSchema,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return (\n    parseTextBlock({\n      block,\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nfunction parseTextBlock({\n  block,\n  context,\n  options,\n}: {\n  block: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextTextBlock | undefined {\n  if (!isTypedObject(block)) {\n    return undefined\n  }\n\n  if (block._type !== context.schema.block.name) {\n    return undefined\n  }\n\n  const _key = options.refreshKeys\n    ? context.keyGenerator()\n    : typeof block._key === 'string'\n      ? block._key\n      : context.keyGenerator()\n\n  const unparsedMarkDefs: Array<unknown> = Array.isArray(block.markDefs)\n    ? block.markDefs\n    : []\n  const markDefKeyMap = new Map<string, string>()\n  const markDefs = unparsedMarkDefs.flatMap((markDef) => {\n    if (!isTypedObject(markDef)) {\n      return []\n    }\n\n    if (typeof markDef._key !== 'string') {\n      return []\n    }\n\n    if (\n      context.schema.annotations.some(\n        (annotation) => annotation.name === markDef._type,\n      )\n    ) {\n      const _key = options.refreshKeys ? context.keyGenerator() : markDef._key\n      markDefKeyMap.set(markDef._key, _key)\n\n      return [\n        {\n          ...markDef,\n          _key,\n        },\n      ]\n    }\n\n    return []\n  })\n\n  const unparsedChildren: Array<unknown> = Array.isArray(block.children)\n    ? block.children\n    : []\n\n  const children = unparsedChildren\n    .map(\n      (child) =>\n        parseSpan({span: child, context, markDefKeyMap, options}) ??\n        parseInlineObject({inlineObject: child, context, options}),\n    )\n    .filter((child) => child !== undefined)\n\n  const parsedBlock: PortableTextTextBlock = {\n    // Spread the entire block to allow custom properties on it\n    ...block,\n    _key,\n    children:\n      children.length > 0\n        ? children\n        : [\n            {\n              _key: context.keyGenerator(),\n              _type: context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n    markDefs,\n  }\n\n  /**\n   * Reset text block .style if it's somehow set to an invalid type\n   */\n  if (\n    typeof parsedBlock.style !== 'string' ||\n    !context.schema.styles.find((style) => style.value === block.style)\n  ) {\n    const defaultStyle = context.schema.styles.at(0)?.value\n\n    if (defaultStyle !== undefined) {\n      parsedBlock.style = defaultStyle\n    } else {\n      delete parsedBlock.style\n    }\n  }\n\n  /**\n   * Reset text block .listItem if it's somehow set to an invalid type\n   */\n  if (\n    typeof parsedBlock.listItem !== 'string' ||\n    !context.schema.lists.find((list) => list.value === block.listItem)\n  ) {\n    delete parsedBlock.listItem\n  }\n\n  /**\n   * Reset text block .level if it's somehow set to an invalid type\n   */\n  if (typeof parsedBlock.level !== 'number') {\n    delete parsedBlock.level\n  }\n\n  return parsedBlock\n}\n\nexport function isSpan(\n  schema: EditorSchema,\n  child: PortableTextSpan | PortableTextObject,\n): child is PortableTextSpan {\n  return (\n    parseSpan({\n      span: child,\n      markDefKeyMap: new Map(),\n      context: {schema, keyGenerator: () => ''},\n      options: {refreshKeys: false},\n    }) !== undefined\n  )\n}\n\nexport function parseSpan({\n  span,\n  context,\n  markDefKeyMap,\n  options,\n}: {\n  span: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  markDefKeyMap: Map<string, string>\n  options: {refreshKeys: boolean}\n}): PortableTextSpan | undefined {\n  if (!isTypedObject(span)) {\n    return undefined\n  }\n\n  // In reality, the span schema name is always 'span', but we only the check here anyway\n  if (span._type !== context.schema.span.name || span._type !== 'span') {\n    return undefined\n  }\n\n  const unparsedMarks: Array<unknown> = Array.isArray(span.marks)\n    ? span.marks\n    : []\n  const marks = unparsedMarks.flatMap((mark) => {\n    if (typeof mark !== 'string') {\n      return []\n    }\n\n    const markDefKey = markDefKeyMap.get(mark)\n\n    if (markDefKey !== undefined) {\n      return [markDefKey]\n    }\n\n    if (\n      context.schema.decorators.some((decorator) => decorator.value === mark)\n    ) {\n      return [mark]\n    }\n\n    return []\n  })\n\n  return {\n    // Spread the entire span to allow custom properties on it\n    ...span,\n    _type: 'span',\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof span._key === 'string'\n        ? span._key\n        : context.keyGenerator(),\n    text: typeof span.text === 'string' ? span.text : '',\n    marks,\n  }\n}\n\nfunction parseInlineObject({\n  inlineObject,\n  context,\n  options,\n}: {\n  inlineObject: unknown\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  options: {refreshKeys: boolean}\n}): PortableTextObject | undefined {\n  if (!isTypedObject(inlineObject)) {\n    return undefined\n  }\n\n  if (\n    inlineObject._type === context.schema.span.name ||\n    inlineObject._type === 'span' ||\n    // Respect the schema definition and don't parse inline objects that are not defined\n    !context.schema.inlineObjects.some(({name}) => name === inlineObject._type)\n  ) {\n    return undefined\n  }\n\n  return {\n    // Spread the entire inline object to allow custom properties on it\n    ...inlineObject,\n    _key: options.refreshKeys\n      ? context.keyGenerator()\n      : typeof inlineObject._key === 'string'\n        ? inlineObject._key\n        : context.keyGenerator(),\n  }\n}\n"],"names":["isTypedObject","object","isRecord","_type","value","parseBlocks","context","blocks","options","Array","isArray","flatMap","block","parsedBlock","parseBlock","parseTextBlock","parseBlockObject","blockObject","schema","name","blockObjects","some","_key","refreshKeys","keyGenerator","isTextBlock","undefined","unparsedMarkDefs","markDefs","markDefKeyMap","Map","markDef","annotations","annotation","set","children","map","child","parseSpan","span","parseInlineObject","inlineObject","filter","length","text","marks","style","styles","find","defaultStyle","at","listItem","lists","list","level","mark","markDefKey","get","decorators","decorator","inlineObjects"],"mappings":"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","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"file":"util.slice-blocks.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.is-keyed-segment.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.block-offset.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.get-block-end-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.get-block-start-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.get-text-block-text.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.is-empty-text-block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.is-equal-selection-points.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.is-span.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.reverse-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.slice-blocks.ts"],"sourcesContent":["import type {KeyedSegment} from '@sanity/types'\n\n/**\n * @public\n */\nexport function isKeyedSegment(segment: unknown): segment is KeyedSegment {\n  return typeof segment === 'object' && segment !== null && '_key' in segment\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function blockOffsetToSpanSelectionPoint({\n  value,\n  blockOffset,\n  direction,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}) {\n  let offsetLeft = blockOffset.offset\n  let selectionPoint:\n    | {path: [KeyedSegment, 'children', KeyedSegment]; offset: number}\n    | undefined\n  let skippedInlineObject = false\n\n  for (const block of value) {\n    if (block._key !== blockOffset.path[0]._key) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (direction === 'forward') {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (offsetLeft <= child.text.length) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: offsetLeft,\n          }\n          break\n        }\n\n        offsetLeft -= child.text.length\n\n        continue\n      }\n\n      if (!isPortableTextSpan(child)) {\n        skippedInlineObject = true\n        continue\n      }\n\n      if (offsetLeft === 0 && selectionPoint && !skippedInlineObject) {\n        if (skippedInlineObject) {\n          selectionPoint = {\n            path: [...blockOffset.path, 'children', {_key: child._key}],\n            offset: 0,\n          }\n        }\n        break\n      }\n\n      if (offsetLeft > child.text.length) {\n        offsetLeft -= child.text.length\n        continue\n      }\n\n      if (offsetLeft <= child.text.length) {\n        selectionPoint = {\n          path: [...blockOffset.path, 'children', {_key: child._key}],\n          offset: offsetLeft,\n        }\n\n        offsetLeft -= child.text.length\n\n        if (offsetLeft !== 0) {\n          break\n        }\n      }\n    }\n  }\n\n  return selectionPoint\n}\n\n/**\n * @public\n */\nexport function spanSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const spanKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !spanKey) {\n    return undefined\n  }\n\n  for (const block of value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (!isPortableTextSpan(child)) {\n        continue\n      }\n\n      if (child._key === spanKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      offset += child.text.length\n    }\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockEndPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    const lastChild = node.children[node.children.length - 1]\n\n    if (lastChild) {\n      return {\n        path: [...path, 'children', {_key: lastChild._key}],\n        offset: isPortableTextSpan(lastChild) ? lastChild.text.length : 0,\n      }\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import {\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function getBlockStartPoint({\n  node,\n  path,\n}: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelectionPoint {\n  if (isPortableTextTextBlock(node)) {\n    return {\n      path: [...path, 'children', {_key: node.children[0]._key}],\n      offset: 0,\n    }\n  }\n\n  return {\n    path,\n    offset: 0,\n  }\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\n\n/**\n * @public\n */\nexport function getTextBlockText(block: PortableTextTextBlock) {\n  return block.children.map((child) => child.text ?? '').join('')\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport {getTextBlockText} from './util.get-text-block-text'\n\n/**\n * @public\n */\nexport function isEmptyTextBlock(block: PortableTextBlock) {\n  if (!isPortableTextTextBlock(block)) {\n    return false\n  }\n\n  const onlyText = block.children.every(isPortableTextSpan)\n  const blockText = getTextBlockText(block)\n\n  return onlyText && blockText === ''\n}\n","import type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function isEqualSelectionPoints(\n  a: EditorSelectionPoint,\n  b: EditorSelectionPoint,\n) {\n  return (\n    a.offset === b.offset && JSON.stringify(a.path) === JSON.stringify(b.path)\n  )\n}\n","import type {PortableTextChild, PortableTextSpan} from '@sanity/types'\nimport type {EditorContext} from '..'\n\n/**\n * @public\n */\nexport function isSpan(\n  context: Pick<EditorContext, 'schema'>,\n  child: PortableTextChild,\n): child is PortableTextSpan {\n  return child._type === context.schema.span.name\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function reverseSelection<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n>(selection: TEditorSelection): TEditorSelection {\n  if (!selection) {\n    return selection\n  }\n\n  if (selection.backward) {\n    return {\n      anchor: selection.focus,\n      focus: selection.anchor,\n      backward: false,\n    } as TEditorSelection\n  }\n\n  return {\n    anchor: selection.focus,\n    focus: selection.anchor,\n    backward: true,\n  } as TEditorSelection\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {EditorSelection} from '..'\n\n/**\n * @public\n */\nexport function sliceBlocks({\n  blocks,\n  selection,\n}: {\n  blocks: Array<PortableTextBlock>\n  selection: EditorSelection\n}): Array<PortableTextBlock> {\n  const slice: Array<PortableTextBlock> = []\n\n  if (!selection) {\n    return slice\n  }\n\n  let startBlock: PortableTextBlock | undefined\n  const middleBlocks: PortableTextBlock[] = []\n  let endBlock: PortableTextBlock | undefined\n\n  const startPoint = selection.backward ? selection.focus : selection.anchor\n  const endPoint = selection.backward ? selection.anchor : selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n  const startChildKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endChildKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return slice\n  }\n\n  for (const block of blocks) {\n    if (!isPortableTextTextBlock(block)) {\n      if (block._key === startBlockKey && block._key === endBlockKey) {\n        startBlock = block\n        break\n      }\n    }\n\n    if (block._key === startBlockKey) {\n      if (!isPortableTextTextBlock(block)) {\n        startBlock = block\n        continue\n      }\n\n      if (startChildKey) {\n        for (const child of block.children) {\n          if (child._key === startChildKey) {\n            if (isPortableTextSpan(child)) {\n              const text =\n                child._key === endChildKey\n                  ? child.text.slice(startPoint.offset, endPoint.offset)\n                  : child.text.slice(startPoint.offset)\n\n              startBlock = {\n                ...block,\n                children: [\n                  {\n                    ...child,\n                    text,\n                  },\n                ],\n              }\n            } else {\n              startBlock = {\n                ...block,\n                children: [child],\n              }\n            }\n\n            if (startChildKey === endChildKey) {\n              break\n            }\n            continue\n          }\n\n          if (startBlock && isPortableTextTextBlock(startBlock)) {\n            if (\n              endChildKey &&\n              child._key === endChildKey &&\n              isPortableTextSpan(child)\n            ) {\n              startBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n            } else {\n              startBlock.children.push(child)\n            }\n\n            if (\n              block._key === endBlockKey &&\n              endChildKey &&\n              child._key === endChildKey\n            ) {\n              break\n            }\n          }\n        }\n\n        if (startBlockKey === endBlockKey) {\n          break\n        }\n\n        continue\n      }\n\n      startBlock = block\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n    }\n\n    if (block._key === endBlockKey) {\n      if (!isPortableTextTextBlock(block)) {\n        endBlock = block\n        break\n      }\n\n      if (endChildKey) {\n        endBlock = {\n          ...block,\n          children: [],\n        }\n\n        for (const child of block.children) {\n          if (endBlock && isPortableTextTextBlock(endBlock)) {\n            if (child._key === endChildKey && isPortableTextSpan(child)) {\n              endBlock.children.push({\n                ...child,\n                text: child.text.slice(0, endPoint.offset),\n              })\n\n              break\n            }\n\n            endBlock.children.push(child)\n\n            if (endChildKey && child._key === endChildKey) {\n              break\n            }\n          }\n        }\n\n        break\n      }\n\n      endBlock = block\n\n      break\n    }\n\n    if (startBlock) {\n      middleBlocks.push(block)\n    }\n  }\n\n  return [\n    ...(startBlock ? [startBlock] : []),\n    ...middleBlocks,\n    ...(endBlock ? [endBlock] : []),\n  ]\n}\n"],"names":["isKeyedSegment","segment","blockOffsetToSpanSelectionPoint","value","blockOffset","direction","offsetLeft","offset","selectionPoint","skippedInlineObject","block","_key","path","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","spanSelectionPointToBlockOffset","blockKey","undefined","spanKey","getBlockEndPoint","node","lastChild","getBlockStartPoint","getTextBlockText","map","join","isEmptyTextBlock","onlyText","every","blockText","isEqualSelectionPoints","a","b","JSON","stringify","isSpan","context","_type","schema","span","name","reverseSelection","selection","backward","anchor","focus","sliceBlocks","blocks","slice","startBlock","middleBlocks","endBlock","startPoint","endPoint","startBlockKey","isKeySegment","endBlockKey","startChildKey","endChildKey","push"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"file":"util.selection-point-to-block-offset.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-block-selection-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.block-offset-to-selection-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.block-offsets-to-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.child-selection-point-to-block-offset.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.selection-point-to-block-offset.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\n\n/**\n * @public\n */\nexport function blockOffsetToBlockSelectionPoint({\n  value,\n  blockOffset,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n}): EditorSelectionPoint | undefined {\n  let selectionPoint: EditorSelectionPoint | undefined\n\n  for (const block of value) {\n    if (block._key === blockOffset.path[0]._key) {\n      selectionPoint = {\n        path: [{_key: block._key}],\n        offset: blockOffset.offset,\n      }\n      break\n    }\n  }\n\n  return selectionPoint\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {blockOffsetToSpanSelectionPoint} from './util.block-offset'\nimport {blockOffsetToBlockSelectionPoint} from './util.block-offset-to-block-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetToSelectionPoint({\n  value,\n  blockOffset,\n  direction,\n}: {\n  value: Array<PortableTextBlock>\n  blockOffset: BlockOffset\n  direction: 'forward' | 'backward'\n}): EditorSelectionPoint | undefined {\n  const spanSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value,\n    blockOffset,\n    direction,\n  })\n\n  if (!spanSelectionPoint) {\n    return blockOffsetToBlockSelectionPoint({\n      value,\n      blockOffset,\n    })\n  }\n\n  return spanSelectionPoint\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelection} from '..'\nimport type {BlockOffset} from '../types/block-offset'\nimport {blockOffsetToSelectionPoint} from './util.block-offset-to-selection-point'\n\n/**\n * @public\n */\nexport function blockOffsetsToSelection({\n  value,\n  offsets,\n  backward,\n}: {\n  value: Array<PortableTextBlock>\n  offsets: {anchor: BlockOffset; focus: BlockOffset}\n  backward?: boolean\n}): EditorSelection {\n  const anchor = blockOffsetToSelectionPoint({\n    value,\n    blockOffset: offsets.anchor,\n    direction: backward ? 'backward' : 'forward',\n  })\n  const focus = blockOffsetToSelectionPoint({\n    value,\n    blockOffset: offsets.focus,\n    direction: backward ? 'forward' : 'backward',\n  })\n\n  if (!anchor || !focus) {\n    return null\n  }\n\n  return {\n    anchor,\n    focus,\n    backward,\n  }\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function childSelectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  let offset = 0\n\n  const blockKey = isKeyedSegment(selectionPoint.path[0])\n    ? selectionPoint.path[0]._key\n    : undefined\n  const childKey = isKeyedSegment(selectionPoint.path[2])\n    ? selectionPoint.path[2]._key\n    : undefined\n\n  if (!blockKey || !childKey) {\n    return undefined\n  }\n\n  for (const block of value) {\n    if (block._key !== blockKey) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    for (const child of block.children) {\n      if (child._key === childKey) {\n        return {\n          path: [{_key: block._key}],\n          offset: offset + selectionPoint.offset,\n        }\n      }\n\n      if (isPortableTextSpan(child)) {\n        offset += child.text.length\n      }\n    }\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {childSelectionPointToBlockOffset} from './util.child-selection-point-to-block-offset'\nimport {isKeyedSegment} from './util.is-keyed-segment'\n\n/**\n * @public\n */\nexport function selectionPointToBlockOffset({\n  value,\n  selectionPoint,\n}: {\n  value: Array<PortableTextBlock>\n  selectionPoint: EditorSelectionPoint\n}): BlockOffset | undefined {\n  if (\n    selectionPoint.path.length === 1 &&\n    isKeyedSegment(selectionPoint.path[0])\n  ) {\n    return {\n      path: [{_key: selectionPoint.path[0]._key}],\n      offset: selectionPoint.offset,\n    }\n  }\n\n  return childSelectionPointToBlockOffset({\n    value,\n    selectionPoint,\n  })\n}\n"],"names":["blockOffsetToBlockSelectionPoint","value","blockOffset","selectionPoint","block","_key","path","offset","blockOffsetToSelectionPoint","direction","blockOffsetToSpanSelectionPoint","blockOffsetsToSelection","offsets","backward","anchor","focus","childSelectionPointToBlockOffset","blockKey","isKeyedSegment","undefined","childKey","isPortableTextTextBlock","child","children","isPortableTextSpan","text","length","selectionPointToBlockOffset"],"mappings":";;;;;;;;;;;AAOO,SAASA,iCAAiC,EAC/CC,KAAAA,EACAC,WAAAA,EAIF,EAAqC;IAC/BC,IAAAA;IAEJ,KAAA,MAAWC,SAASH,MAClB,IAAIG,MAAMC,IAAAA,KAASH,YAAYI,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,EAAM;QAC1B,iBAAA;YACfC,MAAM;gBAAC;oBAACD,MAAMD,MAAMC,IAAAA;gBAAAA,CAAK;aAAA;YACzBE,QAAQL,YAAYK,MAAAA;QACtB;QACA;IAAA;IAIGJ,OAAAA;AACT;AClBO,SAASK,4BAA4B,EAC1CP,KAAAA,EACAC,WAAAA,EACAO,SAAAA,EAKF,EAAqC;IAOnC,0MAN2BC,kCAAAA,EAAgC;QACzDT;QACAC;QACAO;IAAAA,CACD,KAGQT,iCAAiC;QACtCC;QACAC;IAAAA,CACD;AAIL;ACxBO,SAASS,wBAAwB,EACtCV,KAAAA,EACAW,OAAAA,EACAC,QAAAA,EAKF,EAAoB;IAClB,MAAMC,SAASN,4BAA4B;QACzCP;QACAC,aAAaU,QAAQE,MAAAA;QACrBL,WAAWI,WAAW,aAAa;IAAA,CACpC,GACKE,QAAQP,4BAA4B;QACxCP;QACAC,aAAaU,QAAQG,KAAAA;QACrBN,WAAWI,WAAW,YAAY;IAAA,CACnC;IAED,OAAI,CAACC,UAAU,CAACC,QACP,OAGF;QACLD;QACAC;QACAF;IACF;AACF;ACzBO,SAASG,iCAAiC,EAC/Cf,KAAAA,EACAE,cAAAA,EAIF,EAA4B;IAC1B,IAAII,SAAS;IAEPU,MAAAA,8MAAWC,iBAAAA,EAAef,eAAeG,IAAAA,CAAK,CAAC,CAAC,IAClDH,eAAeG,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,GACvBc,KAAAA,GACEC,8MAAWF,iBAAAA,EAAef,eAAeG,IAAAA,CAAK,CAAC,CAAC,IAClDH,eAAeG,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA,GACvBc,KAAAA;IAEA,IAAA,CAAA,CAAA,CAACF,YAAY,CAACG,QAAAA,GAAAA;QAIlB,KAAA,MAAWhB,SAASH,MAClB,IAAIG,MAAMC,IAAAA,KAASY,sKAIdI,0BAAAA,EAAwBjB,KAAK,GAIvBkB,KAAAA,MAAAA,SAASlB,MAAMmB,QAAAA,CAAU;YAClC,IAAID,MAAMjB,IAAAA,KAASe,UACV,OAAA;gBACLd,MAAM;oBAAC;wBAACD,MAAMD,MAAMC,IAAAA;oBAAAA,CAAK;iBAAA;gBACzBE,QAAQA,SAASJ,eAAeI,MAAAA;YAClC;YAGEiB,CAAAA,GAAAA,qJAAAA,CAAAA,qBAAAA,EAAmBF,KAAK,KAAA,CAC1Bf,UAAUe,MAAMG,IAAAA,CAAKC,MAAAA;QAAAA;IAAAA;AAI7B;AC7CO,SAASC,4BAA4B,EAC1C1B,KAAAA,EACAE,cAAAA,EAIF,EAA4B;IAExBA,OAAAA,eAAeG,IAAAA,CAAKoB,MAAAA,KAAW,wMAC/BR,iBAAAA,EAAef,eAAeG,IAAAA,CAAK,CAAC,CAAC,IAE9B;QACLA,MAAM;YAAC;gBAACD,MAAMF,eAAeG,IAAAA,CAAK,CAAC,CAAA,CAAED,IAAAA;YAAAA,CAAK;SAAA;QAC1CE,QAAQJ,eAAeI,MAAAA;IAAAA,IAIpBS,iCAAiC;QACtCf;QACAE;IAAAA,CACD;AACH","ignoreList":[0,1,2,3,4],"debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"file":"selector.is-overlapping-selection.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-collapsed.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.guards.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selectors.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-end-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-start-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-next-inline-object.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-previous-inline-object.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-slice.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-selection-text.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-selection-expanded.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-caret-word-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-end-of-block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-at-the-start-of-block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-point-after-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-point-before-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-overlapping-selection.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const isSelectionCollapsed: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  return (\n    JSON.stringify(snapshot.context.selection.anchor.path) ===\n      JSON.stringify(snapshot.context.selection.focus.path) &&\n    snapshot.context.selection?.anchor.offset ===\n      snapshot.context.selection?.focus.offset\n  )\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\n\n/**\n * @alpha\n */\nexport type BehaviorGuards = ReturnType<typeof createGuards>\n\nexport function createGuards({schema}: {schema: EditorSchema}) {\n  function isListBlock(block: unknown): block is PortableTextListBlock {\n    return isPortableTextListBlock(block) && block._type === schema.block.name\n  }\n\n  function isTextBlock(block: unknown): block is PortableTextTextBlock {\n    return isPortableTextTextBlock(block) && block._type === schema.block.name\n  }\n\n  return {isListBlock, isTextBlock}\n}\n","import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextBlock,\n  type PortableTextListBlock,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getFocusBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const key = snapshot.context.selection\n    ? isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const guards = createGuards(snapshot.context)\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && guards.isListBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusTextBlock: EditorSelector<\n  {node: PortableTextTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isPortableTextTextBlock(focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusChild: EditorSelector<\n  | {\n      node: PortableTextObject | PortableTextSpan\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusTextBlock(snapshot)\n\n  if (!focusBlock) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection\n    ? isKeySegment(snapshot.context.selection.focus.path[2])\n      ? snapshot.context.selection.focus.path[2]._key\n      : undefined\n    : undefined\n\n  const node = key\n    ? focusBlock.node.children.find((span) => span._key === key)\n    : undefined\n\n  return node && key\n    ? {node, path: [...focusBlock.path, 'children', {_key: key}]}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFocusSpan: EditorSelector<\n  | {node: PortableTextSpan; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: [KeyedSegment]}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: [KeyedSegment]}> =\n    []\n  const startKey = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: [KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const key = snapshot.context.selection.backward\n    ? isKeySegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeySegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  const node = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  return node && key ? {node, path: [{_key: key}]} : undefined\n}\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  let previousBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n> = (snapshot) => {\n  let nextBlock: {node: PortableTextBlock; path: [KeyedSegment]} | undefined\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionStartPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import {\n  isKeySegment,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan} from '../utils'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getPreviousInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: [KeyedSegment, 'children', KeyedSegment]\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartPointChildKey =\n    selectionStartPoint && isKeySegment(selectionStartPoint.path[2])\n      ? selectionStartPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionStartPointChildKey) {\n    return undefined\n  }\n\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: [KeyedSegment, 'children', KeyedSegment]\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionStartPointChildKey) {\n      break\n    }\n\n    if (!isSpan(snapshot.context, child)) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n    }\n  }\n\n  return inlineObject\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {sliceBlocks} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedSlice: EditorSelector<Array<PortableTextBlock>> = (\n  snapshot,\n) => {\n  return sliceBlocks({\n    blocks: snapshot.context.value,\n    selection: snapshot.context.selection,\n  })\n}\n","import {isPortableTextSpan, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSlice} from './selector.get-selected-slice'\n\n/**\n * @public\n */\nexport const getSelectionText: EditorSelector<string> = (snapshot) => {\n  const selectedSlice = getSelectedSlice(snapshot)\n\n  return selectedSlice.reduce((text, block) => {\n    if (!isPortableTextTextBlock(block)) {\n      return text\n    }\n\n    return (\n      text +\n      block.children.reduce((text, child) => {\n        if (isPortableTextSpan(child)) {\n          return text + child.text\n        }\n\n        return text\n      }, '')\n    )\n  }, '')\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const isSelectionExpanded: EditorSelector<boolean> = (snapshot) => {\n  return !isSelectionCollapsed(snapshot)\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  getBlockEndPoint,\n  getBlockStartPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint(focusTextBlock)\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint(focusTextBlock)\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value: snapshot.context.value,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    value: snapshot.context.value,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint(block)\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: [KeyedSegment]\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint(block)\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import {isKeySegment, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {reverseSelection} from '../utils/util.reverse-selection'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selection = snapshot.context.selection.backward\n      ? reverseSelection(snapshot.context.selection)\n      : snapshot.context.selection\n\n    const pointBlockKey = isKeySegment(point.path[0])\n      ? point.path[0]._key\n      : undefined\n    const pointChildKey = isKeySegment(point.path[2])\n      ? point.path[2]._key\n      : undefined\n\n    const endBlockKey = isKeySegment(selection.focus.path[0])\n      ? selection.focus.path[0]._key\n      : undefined\n    const endChildKey = isKeySegment(selection.focus.path[2])\n      ? selection.focus.path[2]._key\n      : undefined\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    let after = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === endBlockKey) {\n        if (block._key !== pointBlockKey) {\n          after = true\n          break\n        }\n\n        // Both the point and the selection end in this block\n\n        if (!isPortableTextTextBlock(block)) {\n          break\n        }\n\n        if (!pointChildKey || !endChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === endChildKey) {\n            if (child._key !== pointChildKey) {\n              after = true\n              break\n            }\n\n            // Both the point and the selection end in this child\n\n            after = point.offset > selection.focus.offset\n            break\n          }\n\n          if (child._key === pointChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === pointBlockKey) {\n        break\n      }\n    }\n\n    return after\n  }\n}\n","import {isKeySegment, isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {reverseSelection} from '../utils/util.reverse-selection'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selection = snapshot.context.selection.backward\n      ? reverseSelection(snapshot.context.selection)\n      : snapshot.context.selection\n\n    const pointBlockKey = isKeySegment(point.path[0])\n      ? point.path[0]._key\n      : undefined\n    const pointChildKey = isKeySegment(point.path[2])\n      ? point.path[2]._key\n      : undefined\n\n    const startBlockKey = isKeySegment(selection.anchor.path[0])\n      ? selection.anchor.path[0]._key\n      : undefined\n    const startChildKey = isKeySegment(selection.anchor.path[2])\n      ? selection.anchor.path[2]._key\n      : undefined\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    let before = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === pointBlockKey) {\n        if (block._key !== startBlockKey) {\n          before = true\n          break\n        }\n\n        // Both the point and the selection start in this block\n\n        if (!isPortableTextTextBlock(block)) {\n          break\n        }\n\n        if (!pointChildKey || !startChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === pointChildKey) {\n            if (child._key !== startChildKey) {\n              before = true\n              break\n            }\n\n            // Both the point and the selection start in this child\n\n            before = point.offset < selection.anchor.offset\n            break\n          }\n\n          if (child._key === startChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === startBlockKey) {\n        break\n      }\n    }\n\n    return before\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n"],"names":["isSelectionCollapsed","snapshot","context","selection","JSON","stringify","anchor","path","focus","offset","createGuards","schema","isListBlock","block","isPortableTextListBlock","_type","name","isTextBlock","isPortableTextTextBlock","getFocusBlock","key","isKeySegment","_key","undefined","node","value","find","getFocusListBlock","guards","focusBlock","getFocusTextBlock","getFocusBlockObject","getFocusChild","children","span","getFocusSpan","focusChild","isPortableTextSpan","getFirstBlock","getLastBlock","length","getSelectedBlocks","selectedBlocks","startKey","backward","endKey","push","getSelectionStartBlock","getSelectionEndBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","getSelectionEndPoint","getSelectionStartPoint","getNextInlineObject","focusTextBlock","selectionEndPoint","selectionEndPointChildKey","endPointChildFound","inlineObject","child","isSpan","getPreviousInlineObject","selectionStartPoint","selectionStartPointChildKey","getSelectedSlice","sliceBlocks","blocks","getSelectionText","reduce","text","isSelectionExpanded","getCaretWordSelection","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","split","at","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","reverseSelection","pointBlockKey","pointChildKey","endBlockKey","endChildKey","after","isPointBeforeSelection","startBlockKey","startChildKey","before","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","endPointEqualToOriginalStartPoint","isEqualSelectionPoints","startPointEqualToOriginalEndPoint"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],"debugId":null}},
    {"offset": {"line": 938, "column": 0}, "map": {"version":3,"file":"selector.is-selecting-entire-blocks.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-spans.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-active-annotations.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-active-list-item.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-active-style.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-selected-text-blocks.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-trimmed-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-active-annotation.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-active-decorator.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-active-list-item.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-active-style.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import {\n  isKeySegment,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type KeyedSegment,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: [KeyedSegment, 'children', KeyedSegment]\n  }> = []\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlockKey = isKeySegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : undefined\n  const endBlockKey = isKeySegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : undefined\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startSpanKey = isKeySegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : undefined\n  const endSpanKey = isKeySegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : undefined\n\n  let startBlockFound = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isPortableTextSpan(child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import {isPortableTextTextBlock, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const selectedSpans = getSelectedSpans(snapshot)\n  const focusSpan = getFocusSpan(snapshot)\n\n  if (selectedSpans.length === 0 || !focusSpan) {\n    return []\n  }\n\n  if (selectedSpans.length === 1 && isSelectionCollapsed(snapshot)) {\n    if (snapshot.context.selection.focus.offset === 0) {\n      return []\n    }\n    if (\n      snapshot.context.selection.focus.offset === focusSpan.node.text.length\n    ) {\n      return []\n    }\n  }\n\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isPortableTextTextBlock(block.node) ? (block.node.markDefs ?? []) : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    selectedSpans.some((span) => span.node.marks?.includes(markDef._key)),\n  )\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(snapshot.context)\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport {createGuards} from '../behavior-actions/behavior.guards'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const guards = createGuards(snapshot.context)\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter(guards.isTextBlock)\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import type {KeyedSegment, PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {isKeyedSegment} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: [KeyedSegment]}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: [KeyedSegment]\n  }> = []\n  const startKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n  const endKey = snapshot.context.selection.backward\n    ? isKeyedSegment(snapshot.context.selection.anchor.path[0])\n      ? snapshot.context.selection.anchor.path[0]._key\n      : undefined\n    : isKeyedSegment(snapshot.context.selection.focus.path[0])\n      ? snapshot.context.selection.focus.path[0]._key\n      : undefined\n\n  if (!startKey || !endKey) {\n    return selectedTextBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      if (isTextBlock(snapshot.context.schema, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      if (isTextBlock(snapshot.context.schema, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context.schema, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import {\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextSpan,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {isEmptyTextBlock, isKeyedSegment} from '../utils'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {getFocusTextBlock} from './selectors'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return snapshot.context.selection\n  }\n\n  const startBlockKey = isKeyedSegment(startPoint.path[0])\n    ? startPoint.path[0]._key\n    : null\n  const startChildKey = isKeyedSegment(startPoint.path[2])\n    ? startPoint.path[2]._key\n    : null\n  const endBlockKey = isKeyedSegment(endPoint.path[0])\n    ? endPoint.path[0]._key\n    : null\n  const endChildKey = isKeyedSegment(endPoint.path[2])\n    ? endPoint.path[2]._key\n    : null\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (isPortableTextTextBlock(block) && isEmptyTextBlock(block)) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isPortableTextTextBlock(block)) {\n      continue\n    }\n\n    if (block._key === endBlockKey && isEmptyTextBlock(block)) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isPortableTextSpan(child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isPortableTextSpan(child) && block.children.length === 1\n\n        if (\n          (isPortableTextSpan(child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isPortableTextSpan(child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isPortableTextSpan(child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (focusTextBlock && !isEmptyTextBlock(focusTextBlock.node)) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\nimport {getFocusSpan, getSelectedBlocks} from './selectors'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const focusSpan = getFocusSpan(snapshot)\n\n    const selectedSpans = isSelectionExpanded(snapshot)\n      ? getSelectedSpans(snapshot)\n      : focusSpan\n        ? [focusSpan]\n        : []\n\n    if (selectedSpans.length === 0) {\n      return false\n    }\n\n    if (\n      selectedSpans.some(\n        (span) => !span.node.marks || span.node.marks?.length === 0,\n      )\n    ) {\n      return false\n    }\n\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isPortableTextTextBlock(block.node) ? (block.node.markDefs ?? []) : [],\n    )\n\n    return selectedSpans.every((span) => {\n      const spanMarkDefs =\n        span.node.marks?.flatMap((mark) => {\n          const markDef = selectionMarkDefs.find(\n            (markDef) => markDef._key === mark,\n          )\n\n          return markDef ? [markDef._type] : []\n        }) ?? []\n\n      return spanMarkDefs.includes(annotation)\n    })\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    return snapshot.context.activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock, getSelectionStartBlock} from './selectors'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint(startBlock)\n  const endBlockEndPoint = utils.getBlockEndPoint(endBlock)\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["getSelectedSpans","snapshot","context","selection","selectedSpans","startPoint","backward","focus","anchor","endPoint","startBlockKey","isKeySegment","path","_key","undefined","endBlockKey","startSpanKey","endSpanKey","startBlockFound","block","value","isPortableTextTextBlock","child","children","isPortableTextSpan","offset","text","length","push","node","getActiveAnnotations","selectedBlocks","getSelectedBlocks","focusSpan","getFocusSpan","isSelectionCollapsed","flatMap","markDefs","filter","markDef","some","span","marks","includes","getActiveListItem","guards","createGuards","selectedTextBlocks","map","isTextBlock","firstTextBlock","at","firstListItem","listItem","every","getActiveStyle","firstStyle","style","getSelectedTextBlocks","startKey","isKeyedSegment","endKey","schema","getTrimmedSelection","getSelectionStartPoint","getSelectionEndPoint","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","lonelySpan","trimmedSelection","focusTextBlock","getFocusTextBlock","isActiveAnnotation","annotation","isSelectionExpanded","selectionMarkDefs","mark","find","_type","isActiveDecorator","decorator","activeDecorators","isActiveListItem","isActiveStyle","isSelectingEntireBlocks","startBlock","getSelectionStartBlock","endBlock","getSelectionEndBlock","startBlockStartPoint","utils","endBlockEndPoint"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10],"debugId":null}},
    {"offset": {"line": 1252, "column": 0}, "map": {"version":3,"file":"behavior.core.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/is-hotkey.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.types.behavior.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.types.action.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.annotations.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.block-objects.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.decorators.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.dnd.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.insert-break.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.lists.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.core.ts"],"sourcesContent":["export interface KeyboardEventLike {\n  key: string\n  keyCode?: number\n  altKey: boolean\n  ctrlKey: boolean\n  metaKey: boolean\n  shiftKey: boolean\n}\n\ninterface HotKey {\n  keyCode?: number | undefined\n  key?: string | undefined\n  altKey: boolean | null\n  ctrlKey: boolean | null\n  metaKey: boolean | null\n  shiftKey: boolean | null\n}\n\nconst IS_MAC =\n  typeof window !== 'undefined' &&\n  /Mac|iPod|iPhone|iPad/.test(window.navigator.userAgent)\n\ntype Modifier = 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\nconst modifiers: Record<string, Modifier | undefined> = {\n  alt: 'altKey',\n  control: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n}\n\nconst aliases: Record<string, string | undefined> = {\n  add: '+',\n  break: 'pause',\n  cmd: 'meta',\n  command: 'meta',\n  ctl: 'control',\n  ctrl: 'control',\n  del: 'delete',\n  down: 'arrowdown',\n  esc: 'escape',\n  ins: 'insert',\n  left: 'arrowleft',\n  mod: IS_MAC ? 'meta' : 'control',\n  opt: 'alt',\n  option: 'alt',\n  return: 'enter',\n  right: 'arrowright',\n  space: ' ',\n  spacebar: ' ',\n  up: 'arrowup',\n  win: 'meta',\n  windows: 'meta',\n}\n\nconst keyCodes: Record<string, number | undefined> = {\n  'backspace': 8,\n  'tab': 9,\n  'enter': 13,\n  'shift': 16,\n  'control': 17,\n  'alt': 18,\n  'pause': 19,\n  'capslock': 20,\n  'escape': 27,\n  ' ': 32,\n  'pageup': 33,\n  'pagedown': 34,\n  'end': 35,\n  'home': 36,\n  'arrowleft': 37,\n  'arrowup': 38,\n  'arrowright': 39,\n  'arrowdown': 40,\n  'insert': 45,\n  'delete': 46,\n  'meta': 91,\n  'numlock': 144,\n  'scrolllock': 145,\n  ';': 186,\n  '=': 187,\n  ',': 188,\n  '-': 189,\n  '.': 190,\n  '/': 191,\n  '`': 192,\n  '[': 219,\n  '\\\\': 220,\n  ']': 221,\n  \"'\": 222,\n  'f1': 112,\n  'f2': 113,\n  'f3': 114,\n  'f4': 115,\n  'f5': 116,\n  'f6': 117,\n  'f7': 118,\n  'f8': 119,\n  'f9': 120,\n  'f10': 121,\n  'f11': 122,\n  'f12': 123,\n  'f13': 124,\n  'f14': 125,\n  'f15': 126,\n  'f16': 127,\n  'f17': 128,\n  'f18': 129,\n  'f19': 130,\n  'f20': 131,\n}\n\nexport function isHotkey(hotkey: string, event: KeyboardEventLike): boolean {\n  return compareHotkey(parseHotkey(hotkey), event)\n}\n\nfunction parseHotkey(hotkey: string): HotKey {\n  // Ensure that all the modifiers are set to false unless the hotkey has them.\n  const parsedHotkey: HotKey = {\n    altKey: false,\n    ctrlKey: false,\n    metaKey: false,\n    shiftKey: false,\n  }\n\n  // Special case to handle the `+` key since we use it as a separator.\n  const hotkeySegments = hotkey.replace('++', '+add').split('+')\n\n  for (const rawHotkeySegment of hotkeySegments) {\n    const optional =\n      rawHotkeySegment.endsWith('?') && rawHotkeySegment.length > 1\n    const hotkeySegment = optional\n      ? rawHotkeySegment.slice(0, -1)\n      : rawHotkeySegment\n    const keyName = toKeyName(hotkeySegment)\n    const modifier = modifiers[keyName]\n    const alias = aliases[hotkeySegment]\n    const code = keyCodes[keyName]\n\n    if (\n      hotkeySegment.length > 1 &&\n      modifier === undefined &&\n      alias === undefined &&\n      code === undefined\n    ) {\n      throw new TypeError(`Unknown modifier: \"${hotkeySegment}\"`)\n    }\n\n    if (hotkeySegments.length === 1 || modifier === undefined) {\n      parsedHotkey.key = keyName\n      parsedHotkey.keyCode = toKeyCode(hotkeySegment)\n    }\n\n    if (modifier !== undefined) {\n      parsedHotkey[modifier] = optional ? null : true\n    }\n  }\n\n  return parsedHotkey\n}\n\nfunction compareHotkey(\n  parsedHotkey: HotKey,\n  event: KeyboardEventLike,\n): boolean {\n  const matchingModifiers =\n    (parsedHotkey.altKey != null\n      ? parsedHotkey.altKey === event.altKey\n      : true) &&\n    (parsedHotkey.ctrlKey != null\n      ? parsedHotkey.ctrlKey === event.ctrlKey\n      : true) &&\n    (parsedHotkey.metaKey != null\n      ? parsedHotkey.metaKey === event.metaKey\n      : true) &&\n    (parsedHotkey.shiftKey != null\n      ? parsedHotkey.shiftKey === event.shiftKey\n      : true)\n\n  if (!matchingModifiers) {\n    return false\n  }\n\n  if (parsedHotkey.keyCode !== undefined && event.keyCode !== undefined) {\n    if (parsedHotkey.keyCode === 91 && event.keyCode === 93) {\n      return true\n    }\n\n    return parsedHotkey.keyCode === event.keyCode\n  }\n\n  return (\n    parsedHotkey.keyCode === event.keyCode ||\n    parsedHotkey.key === event.key.toLowerCase()\n  )\n}\n\nfunction toKeyCode(name: string): number {\n  const keyName = toKeyName(name)\n  const keyCode = keyCodes[keyName] ?? keyName.toUpperCase().charCodeAt(0)\n\n  return keyCode\n}\n\nfunction toKeyName(name: string): string {\n  const keyName = name.toLowerCase()\n\n  return aliases[keyName] ?? keyName\n}\n","import type {BehaviorActionSet} from './behavior.types.action'\nimport type {\n  BehaviorEvent,\n  BehaviorEventTypeNamespace,\n  CustomBehaviorEvent,\n  ResolveBehaviorEvent,\n} from './behavior.types.event'\nimport type {BehaviorGuard} from './behavior.types.guard'\n\n/**\n * @beta\n */\nexport type Behavior<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] =\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends\n    ResolveBehaviorEvent<TBehaviorEventType> = ResolveBehaviorEvent<TBehaviorEventType>,\n> = {\n  /**\n   * The internal editor event that triggers this behavior.\n   */\n  on: TBehaviorEventType\n  /**\n   * Predicate function that determines if the behavior should be executed.\n   * Returning a non-nullable value from the guard will pass the value to the\n   * actions and execute them.\n   */\n  guard?: BehaviorGuard<TBehaviorEvent, TGuardResponse>\n  /**\n   * Array of behavior action sets.\n   */\n  actions: Array<BehaviorActionSet<TBehaviorEvent, TGuardResponse>>\n}\n\n/**\n * @beta\n *\n * @example\n *\n * ```tsx\n * const noLowerCaseA = defineBehavior({\n *   on: 'insert.text',\n *   guard: ({event, snapshot}) => event.text === 'a',\n *   actions: [({event, snapshot}) => [{type: 'insert.text', text: 'A'}]],\n * })\n * ```\n *\n */\nexport function defineBehavior<\n  TPayload extends Record<string, unknown>,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = CustomBehaviorEvent['type'],\n  TGuardResponse = true,\n>(\n  behavior: Behavior<\n    TBehaviorEventType,\n    TGuardResponse,\n    ResolveBehaviorEvent<TBehaviorEventType, TPayload>\n  >,\n): Behavior\nexport function defineBehavior<\n  TPayload extends never = never,\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'] = BehaviorEvent['type'],\n  TGuardResponse = true,\n  TBehaviorEvent extends ResolveBehaviorEvent<\n    TBehaviorEventType,\n    TPayload\n  > = ResolveBehaviorEvent<TBehaviorEventType, TPayload>,\n>(\n  behavior: Behavior<TBehaviorEventType, TGuardResponse, TBehaviorEvent>,\n): Behavior {\n  return behavior as unknown as Behavior\n}\n","import type {EditorContext, EditorSnapshot} from '../editor/editor-snapshot'\nimport type {OmitFromUnion, PickFromUnion} from '../type-utils'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {\n  CustomBehaviorEvent,\n  InternalBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from './behavior.types.event'\n\n/**\n * @beta\n */\nexport type BehaviorAction =\n  | SyntheticBehaviorEvent\n  | {\n      type: 'raise'\n      event:\n        | InternalBehaviorEvent\n        | SyntheticBehaviorEvent\n        | CustomBehaviorEvent\n    }\n  | {\n      type: 'noop'\n    }\n  | {\n      type: 'effect'\n      effect: () => void\n    }\n\n/**\n * @beta\n */\nexport function raise(\n  event: InternalBehaviorEvent | SyntheticBehaviorEvent | CustomBehaviorEvent,\n): PickFromUnion<BehaviorAction, 'type', 'raise'> {\n  return {type: 'raise', event}\n}\n\n/**\n * @beta\n */\nexport type BehaviorActionSet<TBehaviorEvent, TGuardResponse> = (\n  payload: {\n    /**\n     * @deprecated\n     * Use `snapshot` instead\n     */\n    context: EditorContext\n    snapshot: EditorSnapshot\n    event: TBehaviorEvent\n  },\n  guardResponse: TGuardResponse,\n) => Array<BehaviorAction>\n\nexport type InternalBehaviorAction = OmitFromUnion<\n  BehaviorAction,\n  'type',\n  'raise'\n> & {\n  editor: PortableTextSlateEditor\n}\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst addAnnotationOnCollapsedSelection = defineBehavior({\n  on: 'annotation.add',\n  guard: ({snapshot}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const caretWordSelection = selectors.getCaretWordSelection(snapshot)\n\n    if (\n      !caretWordSelection ||\n      !selectors.isSelectionExpanded({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: caretWordSelection,\n        },\n      })\n    ) {\n      return false\n    }\n\n    return {caretWordSelection}\n  },\n  actions: [\n    ({event}, {caretWordSelection}) => [\n      raise({type: 'select', selection: caretWordSelection}),\n      raise({type: 'annotation.add', annotation: event.annotation}),\n    ],\n  ],\n})\n\nexport const coreAnnotationBehaviors = {\n  addAnnotationOnCollapsedSelection,\n}\n","import {isPortableTextTextBlock} from '@sanity/types'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst arrowDownOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowDown = isHotkey('ArrowDown', event.originEvent)\n\n    if (!isArrowDown) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return focusBlockObject && !nextBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst arrowUpOnLonelyBlockObject = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isArrowUp = isHotkey('ArrowUp', event.originEvent)\n\n    if (!isArrowUp) {\n      return false\n    }\n\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    if (!collapsedSelection) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return focusBlockObject && !previousBlock\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst breakingBlockObject = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const collapsedSelection = selectors.isSelectionCollapsed(snapshot)\n\n    return collapsedSelection && focusBlockObject !== undefined\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst clickingAboveLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'start' &&\n      focusBlockObject &&\n      !previousBlock\n    )\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'before',\n      }),\n    ],\n  ],\n})\n\nconst clickingBelowLonelyBlockObject = defineBehavior({\n  on: 'mouse.click',\n  guard: ({snapshot, event}) => {\n    if (!selectors.isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const focusBlockObject = selectors.getFocusBlockObject(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    return (\n      event.position.isEditor &&\n      event.position.block === 'end' &&\n      focusBlockObject &&\n      !nextBlock\n    )\n  },\n  actions: [\n    ({snapshot}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockAfterBlockObject = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const previousBlock = selectors.getPreviousBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !previousBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(previousBlock.node)\n    ) {\n      return {focusTextBlock, previousBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, previousBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        selection: {\n          anchor: {path: previousBlock.path, offset: 0},\n          focus: {path: previousBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nconst deletingEmptyTextBlockBeforeBlockObject = defineBehavior({\n  on: 'delete.forward',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const nextBlock = selectors.getNextBlock(snapshot)\n\n    if (!focusTextBlock || !selectionCollapsed || !nextBlock) {\n      return false\n    }\n\n    if (\n      isEmptyTextBlock(focusTextBlock.node) &&\n      !isPortableTextTextBlock(nextBlock.node)\n    ) {\n      return {focusTextBlock, nextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, nextBlock}) => [\n      raise({\n        type: 'delete.block',\n        at: focusTextBlock.path,\n      }),\n      raise({\n        type: 'select',\n        selection: {\n          anchor: {path: nextBlock.path, offset: 0},\n          focus: {path: nextBlock.path, offset: 0},\n        },\n      }),\n    ],\n  ],\n})\n\nexport const coreBlockObjectBehaviors = {\n  arrowDownOnLonelyBlockObject,\n  arrowUpOnLonelyBlockObject,\n  breakingBlockObject,\n  clickingAboveLonelyBlockObject,\n  clickingBelowLonelyBlockObject,\n  deletingEmptyTextBlockAfterBlockObject,\n  deletingEmptyTextBlockBeforeBlockObject,\n}\n","import {isHotkey} from '../internal-utils/is-hotkey'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDecoratorBehaviors = {\n  strongShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+b', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.value === 'strong',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'strong'})]],\n  }),\n  emShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+i', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.value === 'em',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'em'})]],\n  }),\n  underlineShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey('mod+u', event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.value === 'underline',\n      ),\n    actions: [\n      () => [raise({type: 'decorator.toggle', decorator: 'underline'})],\n    ],\n  }),\n  codeShortcut: defineBehavior({\n    on: 'keyboard.keydown',\n    guard: ({snapshot, event}) =>\n      isHotkey(\"mod+'\", event.originEvent) &&\n      snapshot.context.schema.decorators.some(\n        (decorator) => decorator.value === 'code',\n      ),\n    actions: [() => [raise({type: 'decorator.toggle', decorator: 'code'})]],\n  }),\n}\n","import * as selectors from '../selectors'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const coreDndBehaviors = [\n  /**\n   * When dragging over the drag origin, we don't want to show the caret in the\n   * text.\n   */\n  defineBehavior({\n    on: 'drag.dragover',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const draggingOverDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(event.position.selection)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      return draggingOverDragOrigin\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n]\n","import * as selectors from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst breakingAtTheEndOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const atTheEndOfBlock =\n      selectors.isAtTheEndOfBlock(focusTextBlock)(snapshot)\n\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    if (atTheEndOfBlock) {\n      return {focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    ({snapshot}, {focusListItem, focusLevel}) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              text: '',\n              marks: [],\n            },\n          ],\n          markDefs: [],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.value,\n        },\n        placement: 'after',\n      }),\n    ],\n  ],\n})\n\nconst breakingAtTheStartOfTextBlock = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n    if (!snapshot.context.selection || !focusTextBlock || !selectionCollapsed) {\n      return false\n    }\n\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    const focusDecorators = focusSpan?.node.marks?.filter(\n      (mark) =>\n        snapshot.context.schema.decorators.some(\n          (decorator) => decorator.value === mark,\n        ) ?? [],\n    )\n    const focusAnnotations =\n      focusSpan?.node.marks?.filter(\n        (mark) =>\n          !snapshot.context.schema.decorators.some(\n            (decorator) => decorator.value === mark,\n          ),\n      ) ?? []\n    const focusListItem = focusTextBlock.node.listItem\n    const focusLevel = focusTextBlock.node.level\n\n    const atTheStartOfBlock =\n      selectors.isAtTheStartOfBlock(focusTextBlock)(snapshot)\n\n    if (atTheStartOfBlock) {\n      return {focusAnnotations, focusDecorators, focusListItem, focusLevel}\n    }\n\n    return false\n  },\n  actions: [\n    (\n      {snapshot},\n      {focusAnnotations, focusDecorators, focusListItem, focusLevel},\n    ) => [\n      raise({\n        type: 'insert.block',\n        block: {\n          _type: snapshot.context.schema.block.name,\n          children: [\n            {\n              _type: snapshot.context.schema.span.name,\n              marks: focusAnnotations.length === 0 ? focusDecorators : [],\n              text: '',\n            },\n          ],\n          listItem: focusListItem,\n          level: focusLevel,\n          style: snapshot.context.schema.styles[0]?.value,\n        },\n        placement: 'before',\n        select: 'none',\n      }),\n    ],\n  ],\n})\n\nexport const coreInsertBreakBehaviors = {\n  breakingAtTheEndOfTextBlock,\n  breakingAtTheStartOfTextBlock,\n}\n","import {createGuards} from '../behavior-actions/behavior.guards'\nimport {isHotkey} from '../internal-utils/is-hotkey'\nimport * as selectors from '../selectors'\nimport {isEmptyTextBlock} from '../utils/util.is-empty-text-block'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst MAX_LIST_LEVEL = 10\n\nconst clearListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (atTheBeginningOfBLock && focusTextBlock.node.level === 1) {\n      return {focusTextBlock}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst unindentListOnBackspace = defineBehavior({\n  on: 'delete.backward',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n    const focusSpan = selectors.getFocusSpan(snapshot)\n\n    if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n      return false\n    }\n\n    const atTheBeginningOfBLock =\n      focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n      snapshot.context.selection?.focus.offset === 0\n\n    if (\n      atTheBeginningOfBLock &&\n      focusTextBlock.node.level !== undefined &&\n      focusTextBlock.node.level > 1\n    ) {\n      return {focusTextBlock, level: focusTextBlock.node.level - 1}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {focusTextBlock, level}) => [\n      raise({\n        type: 'block.set',\n        props: {level},\n        at: focusTextBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst clearListOnEnter = defineBehavior({\n  on: 'insert.break',\n  guard: ({snapshot}) => {\n    const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n    const focusListBlock = selectors.getFocusListBlock(snapshot)\n\n    if (\n      !selectionCollapsed ||\n      !focusListBlock ||\n      !isEmptyTextBlock(focusListBlock.node)\n    ) {\n      return false\n    }\n\n    return {focusListBlock}\n  },\n  actions: [\n    (_, {focusListBlock}) => [\n      raise({\n        type: 'block.unset',\n        props: ['listItem', 'level'],\n        at: focusListBlock.path,\n      }),\n    ],\n  ],\n})\n\nconst indentListOnTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isTab = isHotkey('Tab', event.originEvent)\n\n    if (!isTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const guards = createGuards(snapshot.context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level + 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nconst unindentListOnShiftTab = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({snapshot, event}) => {\n    const isShiftTab = isHotkey('Shift+Tab', event.originEvent)\n\n    if (!isShiftTab) {\n      return false\n    }\n\n    const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n    const guards = createGuards(snapshot.context)\n    const selectedListBlocks = selectedBlocks.flatMap((block) =>\n      guards.isListBlock(block.node)\n        ? [\n            {\n              node: block.node,\n              path: block.path,\n            },\n          ]\n        : [],\n    )\n\n    if (selectedListBlocks.length === selectedBlocks.length) {\n      return {selectedListBlocks}\n    }\n\n    return false\n  },\n  actions: [\n    (_, {selectedListBlocks}) =>\n      selectedListBlocks.map((selectedListBlock) =>\n        raise({\n          type: 'block.set',\n          props: {\n            level: Math.min(\n              MAX_LIST_LEVEL,\n              Math.max(1, selectedListBlock.node.level - 1),\n            ),\n          },\n          at: selectedListBlock.path,\n        }),\n      ),\n  ],\n})\n\nexport const coreListBehaviors = {\n  clearListOnBackspace,\n  unindentListOnBackspace,\n  clearListOnEnter,\n  indentListOnTab,\n  unindentListOnShiftTab,\n}\n","import {coreAnnotationBehaviors} from './behavior.core.annotations'\nimport {coreBlockObjectBehaviors} from './behavior.core.block-objects'\nimport {coreDecoratorBehaviors} from './behavior.core.decorators'\nimport {coreDndBehaviors} from './behavior.core.dnd'\nimport {coreInsertBreakBehaviors} from './behavior.core.insert-break'\nimport {coreListBehaviors} from './behavior.core.lists'\n\n/**\n * @beta\n */\nexport const coreBehaviors = [\n  coreAnnotationBehaviors.addAnnotationOnCollapsedSelection,\n  coreDecoratorBehaviors.strongShortcut,\n  coreDecoratorBehaviors.emShortcut,\n  coreDecoratorBehaviors.underlineShortcut,\n  coreDecoratorBehaviors.codeShortcut,\n  ...coreDndBehaviors,\n  coreBlockObjectBehaviors.clickingAboveLonelyBlockObject,\n  coreBlockObjectBehaviors.clickingBelowLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowDownOnLonelyBlockObject,\n  coreBlockObjectBehaviors.arrowUpOnLonelyBlockObject,\n  coreBlockObjectBehaviors.breakingBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockAfterBlockObject,\n  coreBlockObjectBehaviors.deletingEmptyTextBlockBeforeBlockObject,\n  coreListBehaviors.clearListOnBackspace,\n  coreListBehaviors.unindentListOnBackspace,\n  coreListBehaviors.clearListOnEnter,\n  coreListBehaviors.indentListOnTab,\n  coreListBehaviors.unindentListOnShiftTab,\n  coreInsertBreakBehaviors.breakingAtTheEndOfTextBlock,\n  coreInsertBreakBehaviors.breakingAtTheStartOfTextBlock,\n]\n"],"names":["IS_MAC","window","test","navigator","userAgent","modifiers","alt","control","meta","shift","aliases","add","break","cmd","command","ctl","ctrl","del","down","esc","ins","left","mod","opt","option","return","right","space","spacebar","up","win","windows","keyCodes","isHotkey","hotkey","event","compareHotkey","parseHotkey","parsedHotkey","altKey","ctrlKey","metaKey","shiftKey","hotkeySegments","replace","split","rawHotkeySegment","optional","endsWith","length","hotkeySegment","slice","keyName","toKeyName","modifier","alias","code","undefined","TypeError","key","keyCode","toKeyCode","toLowerCase","name","toUpperCase","charCodeAt","defineBehavior","behavior","raise","type","addAnnotationOnCollapsedSelection","on","guard","snapshot","selectors","caretWordSelection","context","selection","actions","annotation","coreAnnotationBehaviors","arrowDownOnLonelyBlockObject","originEvent","focusBlockObject","nextBlock","block","_type","schema","placement","arrowUpOnLonelyBlockObject","previousBlock","breakingBlockObject","clickingAboveLonelyBlockObject","position","isEditor","clickingBelowLonelyBlockObject","deletingEmptyTextBlockAfterBlockObject","focusTextBlock","selectionCollapsed","isEmptyTextBlock","node","isPortableTextTextBlock","_","at","path","anchor","offset","focus","deletingEmptyTextBlockBeforeBlockObject","coreBlockObjectBehaviors","coreDecoratorBehaviors","strongShortcut","decorators","some","decorator","value","emShortcut","underlineShortcut","codeShortcut","coreDndBehaviors","dragOrigin","beta","internalDrag","origin","breakingAtTheEndOfTextBlock","atTheEndOfBlock","focusListItem","listItem","focusLevel","level","children","span","text","marks","markDefs","style","styles","breakingAtTheStartOfTextBlock","focusSpan","focusDecorators","filter","mark","focusAnnotations","select","coreInsertBreakBehaviors","MAX_LIST_LEVEL","clearListOnBackspace","_key","props","unindentListOnBackspace","clearListOnEnter","focusListBlock","indentListOnTab","selectedBlocks","guards","createGuards","selectedListBlocks","flatMap","isListBlock","map","selectedListBlock","Math","min","max","unindentListOnShiftTab","coreListBehaviors","coreBehaviors"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9],"debugId":null}},
    {"offset": {"line": 1855, "column": 0}, "map": {"version":3,"file":"editor-provider.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/create-editor-schema.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/define-schema.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/debug.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/paths.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/ranges.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/values.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/slate-utils.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/weakMaps.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/editor-actor-context.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditor.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/schema.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/mutation-machine.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/validateValue.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/withChanges.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/withoutPatching.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/node_modules/.pnpm/%40sanity%2Bdiff-match-patch%403.2.0/node_modules/%40sanity/diff-match-patch/dist/index.js","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/withUndoRedo.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/key-generator.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/with-applying-behavior-actions.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithUndoRedo.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/sync-machine.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/components/Synchronizer.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/converters/converter.json.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/converters/converter.portable-text.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/converters/converter.text-html.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/converters/converter.text-plain.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/converters/converters.core.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/operationToPatches.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-break.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/node_modules/.pnpm/%40portabletext%2Btoolkit%402.0.17/node_modules/%40portabletext/toolkit/dist/index.js","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/sibling-utils.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextMarkModel.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithEditableAPI.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.block.set.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.block.unset.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.blur.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.decorator.add.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.backward.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.forward.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.delete.text.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.effect.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.focus.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-inline-object.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert-span.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert.block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.insert.text.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.move.block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.move.block-down.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.move.block-up.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.noop.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.action.select.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behavior-actions/behavior.actions.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/create-with-event-listeners.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithMaxBlocks.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithObjectKeys.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/applyPatch.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithPatches.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithPlaceholderBlock.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextBlockStyle.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithPortableTextSelections.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithSchemaTypes.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithUtils.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/with-plugins.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/create-slate-editor.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/key-is.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.default.raise-soft-break.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.internal.annotation.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.internal.decorator.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.internal.insert.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.internal.list-item.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.internal.select.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.internal.style.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.default.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.types.event.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.perform-event.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/get-active-decorators.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/editor-snapshot.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/editor-machine.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/get-value.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/editor-selector.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/create-editor.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/hooks/usePortableTextEditorSelection.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/PortableTextEditor.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/editor-provider.tsx"],"sourcesContent":["import type {\n  ArraySchemaType,\n  BlockSchemaType,\n  ObjectSchemaType,\n  PortableTextBlock,\n  SchemaType,\n  SpanSchemaType,\n} from '@sanity/types'\nimport type {EditorSchema} from './define-schema'\n\nexport function createEditorSchema(\n  portableTextType: ArraySchemaType<PortableTextBlock>,\n): EditorSchema {\n  if (!portableTextType) {\n    throw new Error(\"Parameter 'portabletextType' missing (required)\")\n  }\n  const blockType = portableTextType.of?.find(findBlockType) as\n    | BlockSchemaType\n    | undefined\n  if (!blockType) {\n    throw new Error('Block type is not defined in this schema (required)')\n  }\n  const childrenField = blockType.fields?.find(\n    (field) => field.name === 'children',\n  ) as {type: ArraySchemaType} | undefined\n  if (!childrenField) {\n    throw new Error('Children field for block type found in schema (required)')\n  }\n  const ofType = childrenField.type.of\n  if (!ofType) {\n    throw new Error(\n      'Valid types for block children not found in schema (required)',\n    )\n  }\n  const spanType = ofType.find((memberType) => memberType.name === 'span') as\n    | ObjectSchemaType\n    | undefined\n  if (!spanType) {\n    throw new Error('Span type not found in schema (required)')\n  }\n  const inlineObjectTypes = (ofType.filter(\n    (memberType) => memberType.name !== 'span',\n  ) || []) as ObjectSchemaType[]\n  const blockObjectTypes = (portableTextType.of?.filter(\n    (field) => field.name !== blockType.name,\n  ) || []) as ObjectSchemaType[]\n  return {\n    styles: resolveEnabledStyles(blockType),\n    decorators: resolveEnabledDecorators(spanType),\n    lists: resolveEnabledListItems(blockType),\n    block: blockType,\n    span: spanType,\n    portableText: portableTextType,\n    inlineObjects: inlineObjectTypes,\n    blockObjects: blockObjectTypes,\n    annotations: (spanType as SpanSchemaType).annotations,\n  }\n}\n\nfunction resolveEnabledStyles(blockType: ObjectSchemaType) {\n  const styleField = blockType.fields?.find(\n    (btField) => btField.name === 'style',\n  )\n  if (!styleField) {\n    throw new Error(\n      \"A field with name 'style' is not defined in the block type (required).\",\n    )\n  }\n  const textStyles =\n    styleField.type.options?.list &&\n    styleField.type.options.list?.filter(\n      (style: {value: string}) => style.value,\n    )\n  if (!textStyles || textStyles.length === 0) {\n    throw new Error(\n      'The style fields need at least one style ' +\n        \"defined. I.e: {title: 'Normal', value: 'normal'}.\",\n    )\n  }\n  return textStyles\n}\n\nfunction resolveEnabledDecorators(spanType: ObjectSchemaType) {\n  return (spanType as any).decorators\n}\n\nfunction resolveEnabledListItems(blockType: ObjectSchemaType) {\n  const listField = blockType.fields?.find(\n    (btField) => btField.name === 'listItem',\n  )\n  if (!listField) {\n    throw new Error(\n      \"A field with name 'listItem' is not defined in the block type (required).\",\n    )\n  }\n  const listItems =\n    listField.type.options?.list &&\n    listField.type.options.list.filter((list: {value: string}) => list.value)\n  if (!listItems) {\n    throw new Error('The list field need at least to be an empty array')\n  }\n  return listItems\n}\n\nfunction findBlockType(type: SchemaType): BlockSchemaType | null {\n  if (type.type) {\n    return findBlockType(type.type)\n  }\n\n  if (type.name === 'block') {\n    return type as BlockSchemaType\n  }\n\n  return null\n}\n","import {Schema as SanitySchema} from '@sanity/schema'\nimport {defineField, defineType, type ObjectSchemaType} from '@sanity/types'\nimport startCase from 'lodash.startcase'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\n\n/**\n * @public\n */\nexport type BaseDefinition = {\n  name: string\n  title?: string\n}\n\n/**\n * @public\n */\nexport type SchemaDefinition<\n  TBaseDefinition extends BaseDefinition = BaseDefinition,\n> = {\n  decorators?: ReadonlyArray<TBaseDefinition>\n  blockObjects?: ReadonlyArray<TBaseDefinition>\n  inlineObjects?: ReadonlyArray<TBaseDefinition>\n  annotations?: ReadonlyArray<TBaseDefinition>\n  lists?: ReadonlyArray<TBaseDefinition>\n  styles?: ReadonlyArray<TBaseDefinition>\n}\n\n/**\n * @public\n * A helper wrapper that adds editor support, such as autocomplete and type checking, for a schema definition.\n * @example\n * ```ts\n * import { defineSchema } from '@portabletext/editor'\n *\n * const schemaDefinition = defineSchema({\n *  decorators: [{name: 'strong'}, {name: 'em'}, {name: 'underline'}],\n *  annotations: [{name: 'link'}],\n *  styles: [\n *    {name: 'normal'},\n *    {name: 'h1'},\n *    {name: 'h2'},\n *    {name: 'h3'},\n *    {name: 'blockquote'},\n *  ],\n *  lists: [],\n *  inlineObjects: [],\n *  blockObjects: [],\n * }\n * ```\n */\nexport function defineSchema<const TSchemaDefinition extends SchemaDefinition>(\n  definition: TSchemaDefinition,\n): TSchemaDefinition {\n  return definition\n}\n\n/**\n * @public\n */\nexport type EditorSchema = PortableTextMemberSchemaTypes\n\nexport function compileSchemaDefinition<\n  TSchemaDefinition extends SchemaDefinition,\n>(definition?: TSchemaDefinition) {\n  const blockObjects =\n    definition?.blockObjects?.map((blockObject) =>\n      defineType({\n        type: 'object',\n        // Very naive way to work around `SanitySchema.compile` adding default\n        // fields to objects with the name `image`\n        name: blockObject.name === 'image' ? 'tmp-image' : blockObject.name,\n        title:\n          blockObject.name === 'image' && blockObject.title === undefined\n            ? 'Image'\n            : blockObject.title,\n        fields: [],\n      }),\n    ) ?? []\n  const inlineObjects =\n    definition?.inlineObjects?.map((inlineObject) =>\n      defineType({\n        type: 'object',\n        name: inlineObject.name,\n        title: inlineObject.title,\n        fields: [],\n      }),\n    ) ?? []\n\n  const portableTextSchema = defineField({\n    type: 'array',\n    name: 'portable-text',\n    of: [\n      ...blockObjects.map((blockObject) => ({type: blockObject.name})),\n      {\n        type: 'block',\n        name: 'block',\n        of: inlineObjects.map((inlineObject) => ({type: inlineObject.name})),\n        marks: {\n          decorators:\n            definition?.decorators?.map((decorator) => ({\n              title: decorator.title ?? startCase(decorator.name),\n              value: decorator.name,\n            })) ?? [],\n          annotations:\n            definition?.annotations?.map((annotation) => ({\n              name: annotation.name,\n              type: 'object',\n              title: annotation.title,\n            })) ?? [],\n        },\n        lists:\n          definition?.lists?.map((list) => ({\n            value: list.name,\n            title: list.title ?? startCase(list.name),\n          })) ?? [],\n        styles:\n          definition?.styles?.map((style) => ({\n            value: style.name,\n            title: style.title ?? startCase(style.name),\n          })) ?? [],\n      },\n    ],\n  })\n\n  const schema = SanitySchema.compile({\n    types: [portableTextSchema, ...blockObjects, ...inlineObjects],\n  }).get('portable-text')\n\n  const pteSchema = createEditorSchema(schema)\n\n  return {\n    ...pteSchema,\n    blockObjects: pteSchema.blockObjects.map((blockObject) =>\n      blockObject.name === 'tmp-image'\n        ? ({\n            ...blockObject,\n            name: 'image',\n            type: {\n              ...blockObject.type,\n              name: 'image',\n            },\n          } as ObjectSchemaType)\n        : blockObject,\n    ),\n  } satisfies EditorSchema\n}\n","import debug from 'debug'\n\nconst rootName = 'sanity-pte:'\n\nexport default debug(rootName)\nexport function debugWithName(name: string): debug.Debugger {\n  const namespace = `${rootName}${name}`\n  if (debug && debug.enabled(namespace)) {\n    return debug(namespace)\n  }\n  return debug(rootName)\n}\n","import {isKeySegment, type Path} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {\n  Editor,\n  Element,\n  type Descendant,\n  type Point,\n  type Path as SlatePath,\n} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\nimport type {ObjectWithKeyAndType} from './ranges'\n\nexport function createKeyedPath(\n  point: Point,\n  value: ObjectWithKeyAndType[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n): Path | null {\n  const blockPath = [point.path[0]]\n  if (!value) {\n    return null\n  }\n  const block = value[blockPath[0]]\n  if (!block) {\n    return null\n  }\n  const keyedBlockPath = [{_key: block._key}]\n  if (block._type !== types.block.name) {\n    return keyedBlockPath as Path\n  }\n  let keyedChildPath: Path | undefined\n  const childPath = point.path.slice(0, 2)\n  const child = Array.isArray(block.children) && block.children[childPath[1]]\n  if (child) {\n    keyedChildPath = ['children', {_key: child._key}]\n  }\n  return (\n    keyedChildPath ? [...keyedBlockPath, ...keyedChildPath] : keyedBlockPath\n  ) as Path\n}\n\nexport function toSlatePath(path: Path, editor: Editor): SlatePath {\n  if (!editor) {\n    return []\n  }\n  const [block, blockPath] = Array.from(\n    Editor.nodes(editor, {\n      at: [],\n      match: (n) =>\n        isKeySegment(path[0]) && (n as Descendant)._key === path[0]._key,\n    }),\n  )[0] || [undefined, undefined]\n\n  if (!block || !Element.isElement(block)) {\n    return []\n  }\n\n  if (editor.isVoid(block)) {\n    return [blockPath[0], 0]\n  }\n\n  const childPath = [path[2]]\n  const childIndex = block.children.findIndex((child) =>\n    isEqual([{_key: child._key}], childPath),\n  )\n\n  if (childIndex >= 0 && block.children[childIndex]) {\n    const child = block.children[childIndex]\n    if (Element.isElement(child) && editor.isVoid(child)) {\n      return blockPath.concat(childIndex).concat(0)\n    }\n    return blockPath.concat(childIndex)\n  }\n\n  return [blockPath[0], 0]\n}\n","import {Point, Range, type BaseRange, type Editor, type Operation} from 'slate'\nimport type {\n  EditorSelection,\n  EditorSelectionPoint,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {createKeyedPath, toSlatePath} from './paths'\n\nexport interface ObjectWithKeyAndType {\n  _key: string\n  _type: string\n  children?: ObjectWithKeyAndType[]\n}\n\nexport function toPortableTextRange(\n  value: ObjectWithKeyAndType[] | undefined,\n  range: BaseRange | Partial<BaseRange> | null,\n  types: PortableTextMemberSchemaTypes,\n): EditorSelection {\n  if (!range) {\n    return null\n  }\n  let anchor: EditorSelectionPoint | null = null\n  let focus: EditorSelectionPoint | null = null\n  const anchorPath = range.anchor && createKeyedPath(range.anchor, value, types)\n  if (anchorPath && range.anchor) {\n    anchor = {\n      path: anchorPath,\n      offset: range.anchor.offset,\n    }\n  }\n  const focusPath = range.focus && createKeyedPath(range.focus, value, types)\n  if (focusPath && range.focus) {\n    focus = {\n      path: focusPath,\n      offset: range.focus.offset,\n    }\n  }\n  const backward = Boolean(\n    Range.isRange(range) ? Range.isBackward(range) : undefined,\n  )\n  return anchor && focus ? {anchor, focus, backward} : null\n}\n\nexport function toSlateRange(\n  selection: EditorSelection,\n  editor: Editor,\n): Range | null {\n  if (!selection || !editor) {\n    return null\n  }\n  const anchor = {\n    path: toSlatePath(selection.anchor.path, editor),\n    offset: selection.anchor.offset,\n  }\n  const focus = {\n    path: toSlatePath(selection.focus.path, editor),\n    offset: selection.focus.offset,\n  }\n  if (focus.path.length === 0 || anchor.path.length === 0) {\n    return null\n  }\n  const range = anchor && focus ? {anchor, focus} : null\n  return range\n}\n\nexport function moveRangeByOperation(\n  range: Range,\n  operation: Operation,\n): Range | null {\n  const anchor = Point.transform(range.anchor, operation)\n  const focus = Point.transform(range.focus, operation)\n\n  if (anchor === null || focus === null) {\n    return null\n  }\n\n  if (Point.equals(anchor, range.anchor) && Point.equals(focus, range.focus)) {\n    return range\n  }\n\n  return {anchor, focus}\n}\n","import type {\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Element, Text, type Descendant, type Node} from 'slate'\nimport type {PortableTextMemberSchemaTypes} from '../types/editor'\n\nexport const EMPTY_MARKDEFS: PortableTextObject[] = []\n\nexport const VOID_CHILD_KEY = 'void-child'\n\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\nfunction keepObjectEquality(\n  object: PortableTextBlock | PortableTextChild,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild>,\n) {\n  const value = keyMap[object._key]\n  if (value && isEqual(object, value)) {\n    return value\n  }\n  keyMap[object._key] = object\n  return object\n}\n\nexport function toSlateValue(\n  value: PortableTextBlock[] | undefined,\n  {schemaTypes}: {schemaTypes: PortableTextMemberSchemaTypes},\n  keyMap: Record<string, any> = {},\n): Descendant[] {\n  if (value && Array.isArray(value)) {\n    return value.map((block) => {\n      const {_type, _key, ...rest} = block\n      const isPortableText = block && block._type === schemaTypes.block.name\n      if (isPortableText) {\n        const textBlock = block as PortableTextTextBlock\n        let hasInlines = false\n        const hasMissingStyle = typeof textBlock.style === 'undefined'\n        const hasMissingMarkDefs = typeof textBlock.markDefs === 'undefined'\n        const hasMissingChildren = typeof textBlock.children === 'undefined'\n\n        const children = (textBlock.children || []).map((child) => {\n          const {_type: cType, _key: cKey, ...cRest} = child\n          // Return 'slate' version of inline object where the actual\n          // value is stored in the `value` property.\n          // In slate, inline objects are represented as regular\n          // children with actual text node in order to be able to\n          // be selected the same way as the rest of the (text) content.\n          if (cType !== 'span') {\n            hasInlines = true\n            return keepObjectEquality(\n              {\n                _type: cType,\n                _key: cKey,\n                children: [\n                  {\n                    _key: VOID_CHILD_KEY,\n                    _type: 'span',\n                    text: '',\n                    marks: [],\n                  },\n                ],\n                value: cRest,\n                __inline: true,\n              },\n              keyMap,\n            )\n          }\n          // Original child object (span)\n          return child\n        })\n        // Return original block\n        if (\n          !hasMissingStyle &&\n          !hasMissingMarkDefs &&\n          !hasMissingChildren &&\n          !hasInlines &&\n          Element.isElement(block)\n        ) {\n          // Original object\n          return block\n        }\n        // TODO: remove this when we have a better way to handle missing style\n        if (hasMissingStyle) {\n          rest.style = schemaTypes.styles[0].value\n        }\n        return keepObjectEquality({_type, _key, ...rest, children}, keyMap)\n      }\n      return keepObjectEquality(\n        {\n          _type,\n          _key,\n          children: [\n            {\n              _key: VOID_CHILD_KEY,\n              _type: 'span',\n              text: '',\n              marks: [],\n            },\n          ],\n          value: rest,\n        },\n        keyMap,\n      )\n    }) as Descendant[]\n  }\n  return []\n}\n\nexport function fromSlateValue(\n  value: Descendant[],\n  textBlockType: string,\n  keyMap: Record<string, PortableTextBlock | PortableTextChild> = {},\n): PortableTextBlock[] {\n  return value.map((block) => {\n    const {_key, _type} = block\n    if (!_key || !_type) {\n      throw new Error('Not a valid block')\n    }\n    if (\n      _type === textBlockType &&\n      'children' in block &&\n      Array.isArray(block.children) &&\n      _key\n    ) {\n      let hasInlines = false\n      const children = block.children.map((child) => {\n        const {_type: _cType} = child\n        if ('value' in child && _cType !== 'span') {\n          hasInlines = true\n          const {\n            value: v,\n            _key: k,\n            _type: t,\n            __inline: _i,\n            children: _c,\n            ...rest\n          } = child\n          return keepObjectEquality(\n            {...rest, ...v, _key: k as string, _type: t as string},\n            keyMap,\n          )\n        }\n        return child\n      })\n      if (!hasInlines) {\n        return block as PortableTextBlock // Original object\n      }\n      return keepObjectEquality(\n        {...block, children, _key, _type},\n        keyMap,\n      ) as PortableTextBlock\n    }\n    const blockValue = 'value' in block && block.value\n    return keepObjectEquality(\n      {_key, _type, ...(typeof blockValue === 'object' ? blockValue : {})},\n      keyMap,\n    ) as PortableTextBlock\n  })\n}\n\nexport function isEqualToEmptyEditor(\n  children: Descendant[] | PortableTextBlock[],\n  schemaTypes: PortableTextMemberSchemaTypes,\n): boolean {\n  return (\n    children === undefined ||\n    (children && Array.isArray(children) && children.length === 0) ||\n    (children &&\n      Array.isArray(children) &&\n      children.length === 1 &&\n      Element.isElement(children[0]) &&\n      children[0]._type === schemaTypes.block.name &&\n      'style' in children[0] &&\n      children[0].style === schemaTypes.styles[0].value &&\n      !('listItem' in children[0]) &&\n      Array.isArray(children[0].children) &&\n      children[0].children.length === 1 &&\n      Text.isText(children[0].children[0]) &&\n      children[0].children[0]._type === 'span' &&\n      !children[0].children[0].marks?.join('') &&\n      children[0].children[0].text === '')\n  )\n}\n\nexport function findBlockAndIndexFromPath(\n  firstPathSegment: PathSegment,\n  children: (Node | Partial<Node>)[],\n): [Element | undefined, number | undefined] {\n  let blockIndex = -1\n  const isNumber = Number.isInteger(Number(firstPathSegment))\n  if (isNumber) {\n    blockIndex = Number(firstPathSegment)\n  } else if (children) {\n    blockIndex = children.findIndex(\n      (blk) =>\n        Element.isElement(blk) && isEqual({_key: blk._key}, firstPathSegment),\n    )\n  }\n  if (blockIndex > -1) {\n    return [children[blockIndex] as Element, blockIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function findChildAndIndexFromPath(\n  secondPathSegment: PathSegment,\n  block: Element,\n): [Element | Text | undefined, number] {\n  let childIndex = -1\n  const isNumber = Number.isInteger(Number(secondPathSegment))\n  if (isNumber) {\n    childIndex = Number(secondPathSegment)\n  } else {\n    childIndex = block.children.findIndex((child) =>\n      isEqual({_key: child._key}, secondPathSegment),\n    )\n  }\n  if (childIndex > -1) {\n    return [block.children[childIndex] as Element | Text, childIndex]\n  }\n  return [undefined, -1]\n}\n\nexport function getValueOrInitialValue(\n  value: unknown,\n  initialValue: PortableTextBlock[],\n): PortableTextBlock[] | undefined {\n  if (value && Array.isArray(value) && value.length > 0) {\n    return value\n  }\n  return initialValue\n}\n","import {Editor, Element, Node, type Path} from 'slate'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {fromSlateValue} from './values'\n\nexport function getFocusBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  if (!editor.selection) {\n    return [undefined, undefined]\n  }\n\n  const focusBlock = Array.from(\n    Editor.nodes(editor, {\n      at: editor.selection.focus.path.slice(0, 1),\n      match: (n) => !Editor.isEditor(n),\n    }),\n  ).at(0)\n\n  return focusBlock ?? [undefined, undefined]\n}\n\nexport function getFocusChild({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n  const childIndex = editor.selection?.focus.path.at(1)\n\n  if (!focusBlock || !focusBlockPath || childIndex === undefined) {\n    return [undefined, undefined]\n  }\n\n  const focusChild = Node.child(focusBlock, childIndex)\n\n  return focusChild\n    ? [focusChild, [...focusBlockPath, childIndex]]\n    : [undefined, undefined]\n}\n\nexport function getFirstBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const firstPoint = Editor.start(editor, [])\n  const firstBlockPath = firstPoint.path.at(0)\n\n  return firstBlockPath !== undefined\n    ? (Editor.node(editor, [firstBlockPath]) ?? [undefined, undefined])\n    : [undefined, undefined]\n}\n\nexport function getLastBlock({\n  editor,\n}: {\n  editor: PortableTextSlateEditor\n}): [node: Node, path: Path] | [undefined, undefined] {\n  const lastPoint = Editor.end(editor, [])\n  const lastBlockPath = lastPoint.path.at(0)\n  return lastBlockPath !== undefined\n    ? (Editor.node(editor, [lastBlockPath]) ?? [undefined, undefined])\n    : [undefined, undefined]\n}\n\nexport function getNodeBlock({\n  editor,\n  schema,\n  node,\n}: {\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n  node: Node\n}) {\n  if (Editor.isEditor(node)) {\n    return undefined\n  }\n\n  if (isBlockElement({editor, schema}, node)) {\n    return elementToBlock({schema, element: node})\n  }\n\n  const parent = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      at: [],\n      match: (n) =>\n        isBlockElement({editor, schema}, n) &&\n        n.children.some((child) => child._key === node._key),\n    }),\n  )\n    .at(0)\n    ?.at(0)\n\n  return Element.isElement(parent)\n    ? elementToBlock({\n        schema,\n        element: parent,\n      })\n    : undefined\n}\n\nfunction elementToBlock({\n  schema,\n  element,\n}: {\n  schema: EditorSchema\n  element: Element\n}) {\n  return fromSlateValue([element], schema.block.name)?.at(0)\n}\n\nfunction isBlockElement(\n  {editor, schema}: {editor: PortableTextSlateEditor; schema: EditorSchema},\n  node: Node,\n): node is Element {\n  return (\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    (schema.block.name === node._type ||\n      schema.blockObjects.some(\n        (blockObject) => blockObject.name === node._type,\n      ))\n  )\n}\n\nexport function isListItemActive({\n  editor,\n  listItem,\n}: {\n  editor: Editor\n  listItem: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(\n      ([node]) => editor.isListBlock(node) && node.listItem === listItem,\n    )\n  }\n\n  return false\n}\n\nexport function isStyleActive({\n  editor,\n  style,\n}: {\n  editor: Editor\n  style: string\n}): boolean {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedBlocks = [\n    ...Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    }),\n  ]\n\n  if (selectedBlocks.length > 0) {\n    return selectedBlocks.every(([node]) => node.style === style)\n  }\n\n  return false\n}\n","import type {Editor, Range} from 'slate'\nimport type {EditorSelection} from '..'\n\n// Is the editor currently receiving remote changes that are being applied to the content?\nexport const IS_PROCESSING_REMOTE_CHANGES: WeakMap<Editor, boolean> =\n  new WeakMap()\n\nexport const KEY_TO_SLATE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\nexport const KEY_TO_VALUE_ELEMENT: WeakMap<Editor, any | undefined> =\n  new WeakMap()\n\n// Keep object relation to slate range in the portable-text-range\nexport const SLATE_TO_PORTABLE_TEXT_RANGE = new WeakMap<\n  Range,\n  EditorSelection\n>()\n","import {createContext} from 'react'\nimport type {EditorActor} from './editor-machine'\n\nexport const EditorActorContext = createContext<EditorActor>({} as EditorActor)\n","import {createContext, useContext} from 'react'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\n/**\n * A React context for sharing the editor object.\n */\nexport const PortableTextEditorContext =\n  createContext<PortableTextEditor | null>(null)\n\n/**\n * @deprecated Use `useEditor` to get the current editor instance.\n * @public\n * Get the current editor object from the React context.\n */\nexport const usePortableTextEditor = (): PortableTextEditor => {\n  const editor = useContext(PortableTextEditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`usePortableTextEditor\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n\n  return editor\n}\n","import {Schema} from '@sanity/schema'\n\nexport function compileType(rawType: any) {\n  return Schema.compile({\n    name: 'blockTypeSchema',\n    types: [rawType],\n  }).get(rawType.name)\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {Editor} from 'slate'\nimport {\n  and,\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  fromCallback,\n  not,\n  setup,\n  stateIn,\n  type AnyEventObject,\n} from 'xstate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\n/**\n * Makes sure editor mutation events are debounced\n */\nexport const mutationMachine = setup({\n  types: {\n    context: {} as {\n      pendingMutations: Array<{\n        actionId?: string\n        value: Array<PortableTextBlock> | undefined\n        patches: Array<Patch>\n      }>\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'patch'\n          patch: Patch\n          actionId?: string\n          value: Array<PortableTextBlock>\n        }\n      | {\n          type: 'typing'\n        }\n      | {\n          type: 'not typing'\n        },\n    input: {} as {\n      schema: EditorSchema\n      slateEditor: PortableTextSlateEditor\n    },\n    emitted: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n          patches: Array<Patch>\n          snapshot: Array<PortableTextBlock> | undefined\n        },\n  },\n  actions: {\n    'emit has pending patches': emit({type: 'has pending patches'}),\n    'emit mutations': enqueueActions(({context, enqueue}) => {\n      for (const bulk of context.pendingMutations) {\n        enqueue.emit({\n          type: 'mutation',\n          patches: bulk.patches,\n          snapshot: bulk.value,\n        })\n      }\n    }),\n    'clear pending mutations': assign({\n      pendingMutations: [],\n    }),\n    'defer patch': assign({\n      pendingMutations: ({context, event}) => {\n        assertEvent(event, 'patch')\n\n        if (context.pendingMutations.length === 0) {\n          return [\n            {\n              actionId: event.actionId,\n              value: event.value,\n              patches: [event.patch],\n            },\n          ]\n        }\n\n        const lastBulk = context.pendingMutations.at(-1)\n\n        if (lastBulk && lastBulk.actionId === event.actionId) {\n          return context.pendingMutations.slice(0, -1).concat({\n            value: event.value,\n            actionId: lastBulk.actionId,\n            patches: [...lastBulk.patches, event.patch],\n          })\n        }\n\n        return context.pendingMutations.concat({\n          value: event.value,\n          actionId: event.actionId,\n          patches: [event.patch],\n        })\n      },\n    }),\n  },\n  actors: {\n    'type listener': fromCallback<\n      AnyEventObject,\n      {slateEditor: PortableTextSlateEditor},\n      {type: 'typing'} | {type: 'not typing'}\n    >(({input, sendBack}) => {\n      const originalApply = input.slateEditor.apply\n\n      input.slateEditor.apply = (op) => {\n        if (op.type === 'insert_text' || op.type === 'remove_text') {\n          sendBack({type: 'typing'})\n        } else {\n          sendBack({type: 'not typing'})\n        }\n        originalApply(op)\n      }\n\n      return () => {\n        input.slateEditor.apply = originalApply\n      }\n    }),\n  },\n  guards: {\n    'is typing': stateIn({typing: 'typing'}),\n    'no pending mutations': ({context}) =>\n      context.pendingMutations.length === 0,\n    'slate is normalizing': ({context}) =>\n      Editor.isNormalizing(context.slateEditor),\n  },\n  delays: {\n    'mutation debounce': process.env.NODE_ENV === 'test' ? 250 : 0,\n    'type debounce': process.env.NODE_ENV === 'test' ? 0 : 250,\n  },\n}).createMachine({\n  id: 'mutation',\n  context: ({input}) => ({\n    pendingMutations: [],\n    schema: input.schema,\n    slateEditor: input.slateEditor,\n  }),\n  type: 'parallel',\n  states: {\n    typing: {\n      initial: 'idle',\n      invoke: {\n        src: 'type listener',\n        input: ({context}) => ({slateEditor: context.slateEditor}),\n      },\n      states: {\n        idle: {\n          on: {\n            typing: {\n              target: 'typing',\n            },\n          },\n        },\n        typing: {\n          after: {\n            'type debounce': {\n              target: 'idle',\n            },\n          },\n          on: {\n            'not typing': {\n              target: 'idle',\n            },\n            'typing': {\n              target: 'typing',\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n    mutations: {\n      initial: 'idle',\n      states: {\n        'idle': {\n          on: {\n            patch: {\n              actions: ['defer patch', 'emit has pending patches'],\n              target: 'emitting mutations',\n            },\n          },\n        },\n        'emitting mutations': {\n          after: {\n            'mutation debounce': [\n              {\n                guard: and([not('is typing'), 'slate is normalizing']),\n                target: 'idle',\n                actions: ['emit mutations', 'clear pending mutations'],\n              },\n              {\n                target: 'emitting mutations',\n                reenter: true,\n              },\n            ],\n          },\n          on: {\n            patch: {\n              target: 'emitting mutations',\n              actions: ['defer patch'],\n              reenter: true,\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {insert, set, setIfMissing, unset} from '@portabletext/patches'\nimport {\n  isPortableTextTextBlock,\n  type PortableTextBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {flatten, isPlainObject, uniq} from 'lodash'\nimport type {\n  InvalidValueResolution,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\n\nexport interface Validation {\n  valid: boolean\n  resolution: InvalidValueResolution | null\n  value: PortableTextBlock[] | undefined\n}\n\nexport function validateValue(\n  value: PortableTextBlock[] | undefined,\n  types: PortableTextMemberSchemaTypes,\n  keyGenerator: () => string,\n): Validation {\n  let resolution: InvalidValueResolution | null = null\n  let valid = true\n  const validChildTypes = [\n    types.span.name,\n    ...types.inlineObjects.map((t) => t.name),\n  ]\n  const validBlockTypes = [\n    types.block.name,\n    ...types.blockObjects.map((t) => t.name),\n  ]\n\n  // Undefined is allowed\n  if (value === undefined) {\n    return {valid: true, resolution: null, value}\n  }\n  // Only lengthy arrays are allowed in the editor.\n  if (!Array.isArray(value) || value.length === 0) {\n    return {\n      valid: false,\n      resolution: {\n        patches: [unset([])],\n        description:\n          'Editor value must be an array of Portable Text blocks, or undefined.',\n        action: 'Unset the value',\n        item: value,\n\n        i18n: {\n          description:\n            'inputs.portable-text.invalid-value.not-an-array.description',\n          action: 'inputs.portable-text.invalid-value.not-an-array.action',\n        },\n      },\n      value,\n    }\n  }\n  if (\n    value.some((blk: PortableTextBlock, index: number): boolean => {\n      // Is the block an object?\n      if (!isPlainObject(blk)) {\n        resolution = {\n          patches: [unset([index])],\n          description: `Block must be an object, got ${String(blk)}`,\n          action: `Unset invalid item`,\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.not-an-object.description',\n            action: 'inputs.portable-text.invalid-value.not-an-object.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has a _key prop\n      if (!blk._key || typeof blk._key !== 'string') {\n        resolution = {\n          patches: [set({...blk, _key: keyGenerator()}, [index])],\n          description: `Block at index ${index} is missing required _key.`,\n          action: 'Set the block with a random _key value',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.missing-key.description',\n            action: 'inputs.portable-text.invalid-value.missing-key.action',\n            values: {index},\n          },\n        }\n        return true\n      }\n      // Test that every block has valid _type\n      if (!blk._type || !validBlockTypes.includes(blk._type)) {\n        // Special case where block type is set to default 'block', but the block type is named something else according to the schema.\n        if (blk._type === 'block') {\n          const currentBlockTypeName = types.block.name\n          resolution = {\n            patches: [\n              set({...blk, _type: currentBlockTypeName}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' has invalid type name '${blk._type}'. According to the schema, the block type name is '${currentBlockTypeName}'`,\n            action: `Use type '${currentBlockTypeName}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.incorrect-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.incorrect-block-type.action',\n              values: {key: blk._key, expectedTypeName: currentBlockTypeName},\n            },\n          }\n          return true\n        }\n\n        // If the block has no `_type`, but aside from that is a valid Portable Text block\n        if (\n          !blk._type &&\n          isPortableTextTextBlock({...blk, _type: types.block.name})\n        ) {\n          resolution = {\n            patches: [\n              set({...blk, _type: types.block.name}, [{_key: blk._key}]),\n            ],\n            description: `Block with _key '${blk._key}' is missing a type name. According to the schema, the block type name is '${types.block.name}'`,\n            action: `Use type '${types.block.name}'`,\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-block-type.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-block-type.action',\n              values: {key: blk._key, expectedTypeName: types.block.name},\n            },\n          }\n          return true\n        }\n\n        if (!blk._type) {\n          resolution = {\n            patches: [unset([{_key: blk._key}])],\n            description: `Block with _key '${blk._key}' is missing an _type property`,\n            action: 'Remove the block',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-type.description',\n              action: 'inputs.portable-text.invalid-value.missing-type.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        resolution = {\n          patches: [unset([{_key: blk._key}])],\n          description: `Block with _key '${blk._key}' has invalid _type '${blk._type}'`,\n          action: 'Remove the block',\n          item: blk,\n\n          i18n: {\n            description:\n              'inputs.portable-text.invalid-value.disallowed-type.description',\n            action: 'inputs.portable-text.invalid-value.disallowed-type.action',\n            values: {key: blk._key, typeName: blk._type},\n          },\n        }\n        return true\n      }\n\n      // Test regular text blocks\n      if (blk._type === types.block.name) {\n        const textBlock = blk as PortableTextTextBlock\n        // Test that it has a valid children property (array)\n        if (textBlock.children && !Array.isArray(textBlock.children)) {\n          resolution = {\n            patches: [set({children: []}, [{_key: textBlock._key}])],\n            description: `Text block with _key '${textBlock._key}' has a invalid required property 'children'.`,\n            action: 'Reset the children property',\n            item: textBlock,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.description',\n              action:\n                'inputs.portable-text.invalid-value.missing-or-invalid-children.action',\n              values: {key: textBlock._key},\n            },\n          }\n          return true\n        }\n        // Test that children is set and lengthy\n        if (\n          textBlock.children === undefined ||\n          (Array.isArray(textBlock.children) && textBlock.children.length === 0)\n        ) {\n          const newSpan = {\n            _type: types.span.name,\n            _key: keyGenerator(),\n            text: '',\n            marks: [],\n          }\n          resolution = {\n            autoResolve: true,\n            patches: [\n              setIfMissing([], [{_key: blk._key}, 'children']),\n              insert([newSpan], 'after', [{_key: blk._key}, 'children', 0]),\n            ],\n            description: `Children for text block with _key '${blk._key}' is empty.`,\n            action: 'Insert an empty text',\n            item: blk,\n\n            i18n: {\n              description:\n                'inputs.portable-text.invalid-value.empty-children.description',\n              action:\n                'inputs.portable-text.invalid-value.empty-children.action',\n              values: {key: blk._key},\n            },\n          }\n          return true\n        }\n\n        const allUsedMarks = uniq(\n          flatten(\n            textBlock.children\n              .filter((cld) => cld._type === types.span.name)\n              .map((cld) => cld.marks || []),\n          ) as string[],\n        )\n\n        // Test that all markDefs are in use (remove orphaned markDefs)\n        if (Array.isArray(blk.markDefs) && blk.markDefs.length > 0) {\n          const unusedMarkDefs: string[] = uniq(\n            blk.markDefs\n              .map((def) => def._key)\n              .filter((key) => !allUsedMarks.includes(key)),\n          )\n          if (unusedMarkDefs.length > 0) {\n            resolution = {\n              autoResolve: true,\n              patches: unusedMarkDefs.map((markDefKey) =>\n                unset([{_key: blk._key}, 'markDefs', {_key: markDefKey}]),\n              ),\n              description: `Block contains orphaned data (unused mark definitions): ${unusedMarkDefs.join(\n                ', ',\n              )}.`,\n              action: 'Remove unused mark definition item',\n              item: blk,\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-mark-defs.action',\n                values: {\n                  key: blk._key,\n                  unusedMarkDefs: unusedMarkDefs.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test that every annotation mark used has a definition\n        const annotationMarks = allUsedMarks.filter(\n          (mark) => !types.decorators.map((dec) => dec.value).includes(mark),\n        )\n        const orphanedMarks = annotationMarks.filter(\n          (mark) =>\n            textBlock.markDefs === undefined ||\n            !textBlock.markDefs.find((def) => def._key === mark),\n        )\n        if (orphanedMarks.length > 0) {\n          const spanChildren = textBlock.children.filter(\n            (cld) =>\n              cld._type === types.span.name &&\n              Array.isArray(cld.marks) &&\n              cld.marks.some((mark) => orphanedMarks.includes(mark)),\n          ) as PortableTextSpan[]\n          if (spanChildren) {\n            const orphaned = orphanedMarks.join(', ')\n            resolution = {\n              autoResolve: true,\n              patches: spanChildren.map((child) => {\n                return set(\n                  (child.marks || []).filter(\n                    (cMrk) => !orphanedMarks.includes(cMrk),\n                  ),\n                  [{_key: blk._key}, 'children', {_key: child._key}, 'marks'],\n                )\n              }),\n              description: `Block with _key '${blk._key}' contains marks (${orphaned}) not supported by the current content model.`,\n              action: 'Remove invalid marks',\n              item: blk,\n\n              i18n: {\n                description:\n                  'inputs.portable-text.invalid-value.orphaned-marks.description',\n                action:\n                  'inputs.portable-text.invalid-value.orphaned-marks.action',\n                values: {\n                  key: blk._key,\n                  orphanedMarks: orphanedMarks.map((m) => m.toString()),\n                },\n              },\n            }\n            return true\n          }\n        }\n\n        // Test every child\n        if (\n          textBlock.children.some((child, cIndex: number) => {\n            if (!isPlainObject(child)) {\n              resolution = {\n                patches: [unset([{_key: blk._key}, 'children', cIndex])],\n                description: `Child at index '${cIndex}' in block with key '${blk._key}' is not an object.`,\n                action: 'Remove the item',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.non-object-child.description',\n                  action:\n                    'inputs.portable-text.invalid-value.non-object-child.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            if (!child._key || typeof child._key !== 'string') {\n              const newChild = {...child, _key: keyGenerator()}\n              resolution = {\n                autoResolve: true,\n                patches: [\n                  set(newChild, [{_key: blk._key}, 'children', cIndex]),\n                ],\n                description: `Child at index ${cIndex} is missing required _key in block with _key ${blk._key}.`,\n                action: 'Set a new random _key on the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-key.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-key.action',\n                  values: {key: blk._key, index: cIndex},\n                },\n              }\n              return true\n            }\n\n            // Verify that children have valid types\n            if (!child._type) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' is missing '_type' property.`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.missing-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.missing-child-type.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n\n            if (!validChildTypes.includes(child._type)) {\n              resolution = {\n                patches: [\n                  unset([{_key: blk._key}, 'children', {_key: child._key}]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has invalid '_type' property (${child._type}).`,\n                action: 'Remove the object',\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.description',\n                  action:\n                    'inputs.portable-text.invalid-value.disallowed-child-type.action',\n                  values: {\n                    key: blk._key,\n                    childKey: child._key,\n                    childType: child._type,\n                  },\n                },\n              }\n              return true\n            }\n\n            // Verify that spans have .text property that is a string\n            if (\n              child._type === types.span.name &&\n              typeof child.text !== 'string'\n            ) {\n              resolution = {\n                patches: [\n                  set({...child, text: ''}, [\n                    {_key: blk._key},\n                    'children',\n                    {_key: child._key},\n                  ]),\n                ],\n                description: `Child with _key '${child._key}' in block with key '${blk._key}' has missing or invalid text property!`,\n                action: `Write an empty text property to the object`,\n                item: blk,\n\n                i18n: {\n                  description:\n                    'inputs.portable-text.invalid-value.invalid-span-text.description',\n                  action:\n                    'inputs.portable-text.invalid-value.invalid-span-text.action',\n                  values: {key: blk._key, childKey: child._key},\n                },\n              }\n              return true\n            }\n            return false\n          })\n        ) {\n          valid = false\n        }\n      }\n      return false\n    })\n  ) {\n    valid = false\n  }\n  return {valid, resolution, value}\n}\n","import type {Editor} from 'slate'\nimport {IS_PROCESSING_REMOTE_CHANGES} from './weakMaps'\n\nexport function withRemoteChanges(editor: Editor, fn: () => void): void {\n  const prev = isChangingRemotely(editor) || false\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, true)\n  fn()\n  IS_PROCESSING_REMOTE_CHANGES.set(editor, prev)\n}\n\nexport function isChangingRemotely(editor: Editor): boolean | undefined {\n  return IS_PROCESSING_REMOTE_CHANGES.get(editor)\n}\n","import type {Editor} from 'slate'\n\nexport const PATCHING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withoutPatching(editor: Editor, fn: () => void): void {\n  const prev = isPatching(editor)\n  PATCHING.set(editor, false)\n  fn()\n  PATCHING.set(editor, prev)\n}\n\nexport function isPatching(editor: Editor): boolean | undefined {\n  return PATCHING.get(editor)\n}\n","function cloneDiff(diff2) {\n  const [type, patch] = diff2;\n  return [type, patch];\n}\nfunction getCommonOverlap(textA, textB) {\n  let text1 = textA, text2 = textB;\n  const text1Length = text1.length, text2Length = text2.length;\n  if (text1Length === 0 || text2Length === 0)\n    return 0;\n  text1Length > text2Length ? text1 = text1.substring(text1Length - text2Length) : text1Length < text2Length && (text2 = text2.substring(0, text1Length));\n  const textLength = Math.min(text1Length, text2Length);\n  if (text1 === text2)\n    return textLength;\n  let best = 0, length = 1;\n  for (let found = 0; found !== -1; ) {\n    const pattern = text1.substring(textLength - length);\n    if (found = text2.indexOf(pattern), found === -1)\n      return best;\n    length += found, (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) && (best = length, length++);\n  }\n  return best;\n}\nfunction getCommonPrefix(text1, text2) {\n  if (!text1 || !text2 || text1[0] !== text2[0])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerStart = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(pointerStart, pointerMid) === text2.substring(pointerStart, pointerMid) ? (pointerMin = pointerMid, pointerStart = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction getCommonSuffix(text1, text2) {\n  if (!text1 || !text2 || text1[text1.length - 1] !== text2[text2.length - 1])\n    return 0;\n  let pointerMin = 0, pointerMax = Math.min(text1.length, text2.length), pointerMid = pointerMax, pointerEnd = 0;\n  for (; pointerMin < pointerMid; )\n    text1.substring(text1.length - pointerMid, text1.length - pointerEnd) === text2.substring(text2.length - pointerMid, text2.length - pointerEnd) ? (pointerMin = pointerMid, pointerEnd = pointerMin) : pointerMax = pointerMid, pointerMid = Math.floor((pointerMax - pointerMin) / 2 + pointerMin);\n  return pointerMid;\n}\nfunction isHighSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 55296 && charCode <= 56319;\n}\nfunction isLowSurrogate(char) {\n  const charCode = char.charCodeAt(0);\n  return charCode >= 56320 && charCode <= 57343;\n}\nfunction bisect(text1, text2, deadline) {\n  const text1Length = text1.length, text2Length = text2.length, maxD = Math.ceil((text1Length + text2Length) / 2), vOffset = maxD, vLength = 2 * maxD, v1 = new Array(vLength), v2 = new Array(vLength);\n  for (let x = 0; x < vLength; x++)\n    v1[x] = -1, v2[x] = -1;\n  v1[vOffset + 1] = 0, v2[vOffset + 1] = 0;\n  const delta = text1Length - text2Length, front = delta % 2 !== 0;\n  let k1start = 0, k1end = 0, k2start = 0, k2end = 0;\n  for (let d = 0; d < maxD && !(Date.now() > deadline); d++) {\n    for (let k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      const k1Offset = vOffset + k1;\n      let x1;\n      k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1] ? x1 = v1[k1Offset + 1] : x1 = v1[k1Offset - 1] + 1;\n      let y1 = x1 - k1;\n      for (; x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1); )\n        x1++, y1++;\n      if (v1[k1Offset] = x1, x1 > text1Length)\n        k1end += 2;\n      else if (y1 > text2Length)\n        k1start += 2;\n      else if (front) {\n        const k2Offset = vOffset + delta - k1;\n        if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {\n          const x2 = text1Length - v2[k2Offset];\n          if (x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n    for (let k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      const k2Offset = vOffset + k2;\n      let x2;\n      k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1] ? x2 = v2[k2Offset + 1] : x2 = v2[k2Offset - 1] + 1;\n      let y2 = x2 - k2;\n      for (; x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1); )\n        x2++, y2++;\n      if (v2[k2Offset] = x2, x2 > text1Length)\n        k2end += 2;\n      else if (y2 > text2Length)\n        k2start += 2;\n      else if (!front) {\n        const k1Offset = vOffset + delta - k2;\n        if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {\n          const x1 = v1[k1Offset], y1 = vOffset + x1 - k1Offset;\n          if (x2 = text1Length - x2, x1 >= x2)\n            return bisectSplit(text1, text2, x1, y1, deadline);\n        }\n      }\n    }\n  }\n  return [\n    [DIFF_DELETE, text1],\n    [DIFF_INSERT, text2]\n  ];\n}\nfunction bisectSplit(text1, text2, x, y, deadline) {\n  const text1a = text1.substring(0, x), text2a = text2.substring(0, y), text1b = text1.substring(x), text2b = text2.substring(y), diffs = doDiff(text1a, text2a, { checkLines: !1, deadline }), diffsb = doDiff(text1b, text2b, { checkLines: !1, deadline });\n  return diffs.concat(diffsb);\n}\nfunction findHalfMatch(text1, text2, timeout = 1) {\n  if (timeout <= 0)\n    return null;\n  const longText = text1.length > text2.length ? text1 : text2, shortText = text1.length > text2.length ? text2 : text1;\n  if (longText.length < 4 || shortText.length * 2 < longText.length)\n    return null;\n  const halfMatch1 = halfMatchI(longText, shortText, Math.ceil(longText.length / 4)), halfMatch2 = halfMatchI(longText, shortText, Math.ceil(longText.length / 2));\n  let halfMatch;\n  if (halfMatch1 && halfMatch2)\n    halfMatch = halfMatch1[4].length > halfMatch2[4].length ? halfMatch1 : halfMatch2;\n  else {\n    if (!halfMatch1 && !halfMatch2)\n      return null;\n    halfMatch2 ? halfMatch1 || (halfMatch = halfMatch2) : halfMatch = halfMatch1;\n  }\n  if (!halfMatch)\n    throw new Error(\"Unable to find a half match.\");\n  let text1A, text1B, text2A, text2B;\n  text1.length > text2.length ? (text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3]) : (text2A = halfMatch[0], text2B = halfMatch[1], text1A = halfMatch[2], text1B = halfMatch[3]);\n  const midCommon = halfMatch[4];\n  return [text1A, text1B, text2A, text2B, midCommon];\n}\nfunction halfMatchI(longText, shortText, i) {\n  const seed = longText.slice(i, i + Math.floor(longText.length / 4));\n  let j = -1, bestCommon = \"\", bestLongTextA, bestLongTextB, bestShortTextA, bestShortTextB;\n  for (; (j = shortText.indexOf(seed, j + 1)) !== -1; ) {\n    const prefixLength = getCommonPrefix(longText.slice(i), shortText.slice(j)), suffixLength = getCommonSuffix(longText.slice(0, i), shortText.slice(0, j));\n    bestCommon.length < suffixLength + prefixLength && (bestCommon = shortText.slice(j - suffixLength, j) + shortText.slice(j, j + prefixLength), bestLongTextA = longText.slice(0, i - suffixLength), bestLongTextB = longText.slice(i + prefixLength), bestShortTextA = shortText.slice(0, j - suffixLength), bestShortTextB = shortText.slice(j + prefixLength));\n  }\n  return bestCommon.length * 2 >= longText.length ? [\n    bestLongTextA || \"\",\n    bestLongTextB || \"\",\n    bestShortTextA || \"\",\n    bestShortTextB || \"\",\n    bestCommon || \"\"\n  ] : null;\n}\nfunction charsToLines(diffs, lineArray) {\n  for (let x = 0; x < diffs.length; x++) {\n    const chars = diffs[x][1], text = [];\n    for (let y = 0; y < chars.length; y++)\n      text[y] = lineArray[chars.charCodeAt(y)];\n    diffs[x][1] = text.join(\"\");\n  }\n}\nfunction linesToChars(textA, textB) {\n  const lineArray = [], lineHash = {};\n  lineArray[0] = \"\";\n  function diffLinesToMunge(text) {\n    let chars = \"\", lineStart = 0, lineEnd = -1, lineArrayLength = lineArray.length;\n    for (; lineEnd < text.length - 1; ) {\n      lineEnd = text.indexOf(`\n`, lineStart), lineEnd === -1 && (lineEnd = text.length - 1);\n      let line = text.slice(lineStart, lineEnd + 1);\n      (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== void 0) ? chars += String.fromCharCode(lineHash[line]) : (lineArrayLength === maxLines && (line = text.slice(lineStart), lineEnd = text.length), chars += String.fromCharCode(lineArrayLength), lineHash[line] = lineArrayLength, lineArray[lineArrayLength++] = line), lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  let maxLines = 4e4;\n  const chars1 = diffLinesToMunge(textA);\n  maxLines = 65535;\n  const chars2 = diffLinesToMunge(textB);\n  return { chars1, chars2, lineArray };\n}\nfunction doLineModeDiff(textA, textB, opts) {\n  let text1 = textA, text2 = textB;\n  const a = linesToChars(text1, text2);\n  text1 = a.chars1, text2 = a.chars2;\n  const linearray = a.lineArray;\n  let diffs = doDiff(text1, text2, {\n    checkLines: !1,\n    deadline: opts.deadline\n  });\n  charsToLines(diffs, linearray), diffs = cleanupSemantic(diffs), diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\";\n  for (; pointer < diffs.length; ) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        if (countDelete >= 1 && countInsert >= 1) {\n          diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert), pointer = pointer - countDelete - countInsert;\n          const aa = doDiff(textDelete, textInsert, {\n            checkLines: !1,\n            deadline: opts.deadline\n          });\n          for (let j = aa.length - 1; j >= 0; j--)\n            diffs.splice(pointer, 0, aa[j]);\n          pointer += aa.length;\n        }\n        countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n    pointer++;\n  }\n  return diffs.pop(), diffs;\n}\nfunction computeDiff(text1, text2, opts) {\n  let diffs;\n  if (!text1)\n    return [[DIFF_INSERT, text2]];\n  if (!text2)\n    return [[DIFF_DELETE, text1]];\n  const longtext = text1.length > text2.length ? text1 : text2, shorttext = text1.length > text2.length ? text2 : text1, i = longtext.indexOf(shorttext);\n  if (i !== -1)\n    return diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ], text1.length > text2.length && (diffs[0][0] = DIFF_DELETE, diffs[2][0] = DIFF_DELETE), diffs;\n  if (shorttext.length === 1)\n    return [\n      [DIFF_DELETE, text1],\n      [DIFF_INSERT, text2]\n    ];\n  const halfMatch = findHalfMatch(text1, text2);\n  if (halfMatch) {\n    const text1A = halfMatch[0], text1B = halfMatch[1], text2A = halfMatch[2], text2B = halfMatch[3], midCommon = halfMatch[4], diffsA = doDiff(text1A, text2A, opts), diffsB = doDiff(text1B, text2B, opts);\n    return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);\n  }\n  return opts.checkLines && text1.length > 100 && text2.length > 100 ? doLineModeDiff(text1, text2, opts) : bisect(text1, text2, opts.deadline);\n}\nvar __defProp$2 = Object.defineProperty, __getOwnPropSymbols$2 = Object.getOwnPropertySymbols, __hasOwnProp$2 = Object.prototype.hasOwnProperty, __propIsEnum$2 = Object.prototype.propertyIsEnumerable, __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b))\n      __propIsEnum$2.call(b, prop) && __defNormalProp$2(a, prop, b[prop]);\n  return a;\n};\nconst DIFF_DELETE = -1, DIFF_INSERT = 1, DIFF_EQUAL = 0;\nfunction diff(textA, textB, opts) {\n  if (textA === null || textB === null)\n    throw new Error(\"Null input. (diff)\");\n  const diffs = doDiff(textA, textB, createInternalOpts(opts || {}));\n  return adjustDiffForSurrogatePairs(diffs), diffs;\n}\nfunction doDiff(textA, textB, options) {\n  let text1 = textA, text2 = textB;\n  if (text1 === text2)\n    return text1 ? [[DIFF_EQUAL, text1]] : [];\n  let commonlength = getCommonPrefix(text1, text2);\n  const commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength), text2 = text2.substring(commonlength), commonlength = getCommonSuffix(text1, text2);\n  const commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength), text2 = text2.substring(0, text2.length - commonlength);\n  let diffs = computeDiff(text1, text2, options);\n  return commonprefix && diffs.unshift([DIFF_EQUAL, commonprefix]), commonsuffix && diffs.push([DIFF_EQUAL, commonsuffix]), diffs = cleanupMerge(diffs), diffs;\n}\nfunction createDeadLine(timeout) {\n  let t = 1;\n  return typeof timeout < \"u\" && (t = timeout <= 0 ? Number.MAX_VALUE : timeout), Date.now() + t * 1e3;\n}\nfunction createInternalOpts(opts) {\n  return __spreadValues$2({\n    checkLines: !0,\n    deadline: createDeadLine(opts.timeout || 1)\n  }, opts);\n}\nfunction combineChar(data, char, dir) {\n  return dir === 1 ? data + char : char + data;\n}\nfunction splitChar(data, dir) {\n  return dir === 1 ? [data.substring(0, data.length - 1), data[data.length - 1]] : [data.substring(1), data[0]];\n}\nfunction hasSharedChar(diffs, i, j, dir) {\n  return dir === 1 ? diffs[i][1][diffs[i][1].length - 1] === diffs[j][1][diffs[j][1].length - 1] : diffs[i][1][0] === diffs[j][1][0];\n}\nfunction deisolateChar(diffs, i, dir) {\n  const inv = dir === 1 ? -1 : 1;\n  let insertIdx = null, deleteIdx = null, j = i + dir;\n  for (; j >= 0 && j < diffs.length && (insertIdx === null || deleteIdx === null); j += dir) {\n    const [op, text2] = diffs[j];\n    if (text2.length !== 0) {\n      if (op === DIFF_INSERT) {\n        insertIdx === null && (insertIdx = j);\n        continue;\n      } else if (op === DIFF_DELETE) {\n        deleteIdx === null && (deleteIdx = j);\n        continue;\n      } else if (op === DIFF_EQUAL) {\n        if (insertIdx === null && deleteIdx === null) {\n          const [rest, char2] = splitChar(diffs[i][1], dir);\n          diffs[i][1] = rest, diffs[j][1] = combineChar(diffs[j][1], char2, inv);\n          return;\n        }\n        break;\n      }\n    }\n  }\n  if (insertIdx !== null && deleteIdx !== null && hasSharedChar(diffs, insertIdx, deleteIdx, dir)) {\n    const [insertText, insertChar] = splitChar(diffs[insertIdx][1], inv), [deleteText] = splitChar(diffs[deleteIdx][1], inv);\n    diffs[insertIdx][1] = insertText, diffs[deleteIdx][1] = deleteText, diffs[i][1] = combineChar(diffs[i][1], insertChar, dir);\n    return;\n  }\n  const [text, char] = splitChar(diffs[i][1], dir);\n  diffs[i][1] = text, insertIdx === null ? (diffs.splice(j, 0, [DIFF_INSERT, char]), deleteIdx !== null && deleteIdx >= j && deleteIdx++) : diffs[insertIdx][1] = combineChar(diffs[insertIdx][1], char, inv), deleteIdx === null ? diffs.splice(j, 0, [DIFF_DELETE, char]) : diffs[deleteIdx][1] = combineChar(diffs[deleteIdx][1], char, inv);\n}\nfunction adjustDiffForSurrogatePairs(diffs) {\n  for (let i = 0; i < diffs.length; i++) {\n    const [diffType, diffText] = diffs[i];\n    if (diffText.length === 0) continue;\n    const firstChar = diffText[0], lastChar = diffText[diffText.length - 1];\n    isHighSurrogate(lastChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, 1), isLowSurrogate(firstChar) && diffType === DIFF_EQUAL && deisolateChar(diffs, i, -1);\n  }\n  for (let i = 0; i < diffs.length; i++)\n    diffs[i][1].length === 0 && diffs.splice(i, 1);\n}\nfunction cleanupSemantic(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (equalities[equalitiesLength++] = pointer, lengthInsertions1 = lengthInsertions2, lengthDeletions1 = lengthDeletions2, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = diffs[pointer][1]) : (diffs[pointer][0] === DIFF_INSERT ? lengthInsertions2 += diffs[pointer][1].length : lengthDeletions2 += diffs[pointer][1].length, lastEquality && lastEquality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastEquality.length <= Math.max(lengthInsertions2, lengthDeletions2) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, lengthInsertions1 = 0, lengthDeletions1 = 0, lengthInsertions2 = 0, lengthDeletions2 = 0, lastEquality = null, hasChanges = !0)), pointer++;\n  for (hasChanges && (diffs = cleanupMerge(diffs)), diffs = cleanupSemanticLossless(diffs), pointer = 1; pointer < diffs.length; ) {\n    if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {\n      const deletion = diffs[pointer - 1][1], insertion = diffs[pointer][1], overlapLength1 = getCommonOverlap(deletion, insertion), overlapLength2 = getCommonOverlap(insertion, deletion);\n      overlapLength1 >= overlapLength2 ? (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]), diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1), diffs[pointer + 1][1] = insertion.substring(overlapLength1), pointer++) : (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) && (diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]), diffs[pointer - 1][0] = DIFF_INSERT, diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2), diffs[pointer + 1][0] = DIFF_DELETE, diffs[pointer + 1][1] = deletion.substring(overlapLength2), pointer++), pointer++;\n    }\n    pointer++;\n  }\n  return diffs;\n}\nconst nonAlphaNumericRegex = /[^a-zA-Z0-9]/, whitespaceRegex = /\\s/, linebreakRegex = /[\\r\\n]/, blanklineEndRegex = /\\n\\r?\\n$/, blanklineStartRegex = /^\\r?\\n\\r?\\n/;\nfunction cleanupSemanticLossless(rawDiffs) {\n  const diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  function diffCleanupSemanticScore(one, two) {\n    if (!one || !two)\n      return 6;\n    const char1 = one.charAt(one.length - 1), char2 = two.charAt(0), nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex), nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex), whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex), whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex), lineBreak1 = whitespace1 && char1.match(linebreakRegex), lineBreak2 = whitespace2 && char2.match(linebreakRegex), blankLine1 = lineBreak1 && one.match(blanklineEndRegex), blankLine2 = lineBreak2 && two.match(blanklineStartRegex);\n    return blankLine1 || blankLine2 ? 5 : lineBreak1 || lineBreak2 ? 4 : nonAlphaNumeric1 && !whitespace1 && whitespace2 ? 3 : whitespace1 || whitespace2 ? 2 : nonAlphaNumeric1 || nonAlphaNumeric2 ? 1 : 0;\n  }\n  let pointer = 1;\n  for (; pointer < diffs.length - 1; ) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      let equality1 = diffs[pointer - 1][1], edit = diffs[pointer][1], equality2 = diffs[pointer + 1][1];\n      const commonOffset = getCommonSuffix(equality1, edit);\n      if (commonOffset) {\n        const commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset), edit = commonString + edit.substring(0, edit.length - commonOffset), equality2 = commonString + equality2;\n      }\n      let bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2, bestScore = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n      for (; edit.charAt(0) === equality2.charAt(0); ) {\n        equality1 += edit.charAt(0), edit = edit.substring(1) + equality2.charAt(0), equality2 = equality2.substring(1);\n        const score = diffCleanupSemanticScore(equality1, edit) + diffCleanupSemanticScore(edit, equality2);\n        score >= bestScore && (bestScore = score, bestEquality1 = equality1, bestEdit = edit, bestEquality2 = equality2);\n      }\n      diffs[pointer - 1][1] !== bestEquality1 && (bestEquality1 ? diffs[pointer - 1][1] = bestEquality1 : (diffs.splice(pointer - 1, 1), pointer--), diffs[pointer][1] = bestEdit, bestEquality2 ? diffs[pointer + 1][1] = bestEquality2 : (diffs.splice(pointer + 1, 1), pointer--));\n    }\n    pointer++;\n  }\n  return diffs;\n}\nfunction cleanupMerge(rawDiffs) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2));\n  diffs.push([DIFF_EQUAL, \"\"]);\n  let pointer = 0, countDelete = 0, countInsert = 0, textDelete = \"\", textInsert = \"\", commonlength;\n  for (; pointer < diffs.length; )\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        countInsert++, textInsert += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_DELETE:\n        countDelete++, textDelete += diffs[pointer][1], pointer++;\n        break;\n      case DIFF_EQUAL:\n        countDelete + countInsert > 1 ? (countDelete !== 0 && countInsert !== 0 && (commonlength = getCommonPrefix(textInsert, textDelete), commonlength !== 0 && (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL ? diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(\n          0,\n          commonlength\n        ) : (diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]), pointer++), textInsert = textInsert.substring(commonlength), textDelete = textDelete.substring(commonlength)), commonlength = getCommonSuffix(textInsert, textDelete), commonlength !== 0 && (diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1], textInsert = textInsert.substring(0, textInsert.length - commonlength), textDelete = textDelete.substring(0, textDelete.length - commonlength))), pointer -= countDelete + countInsert, diffs.splice(pointer, countDelete + countInsert), textDelete.length && (diffs.splice(pointer, 0, [DIFF_DELETE, textDelete]), pointer++), textInsert.length && (diffs.splice(pointer, 0, [DIFF_INSERT, textInsert]), pointer++), pointer++) : pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL ? (diffs[pointer - 1][1] += diffs[pointer][1], diffs.splice(pointer, 1)) : pointer++, countInsert = 0, countDelete = 0, textDelete = \"\", textInsert = \"\";\n        break;\n      default:\n        throw new Error(\"Unknown diff operation\");\n    }\n  diffs[diffs.length - 1][1] === \"\" && diffs.pop();\n  let hasChanges = !1;\n  for (pointer = 1; pointer < diffs.length - 1; )\n    diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL && (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1] ? (diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length), diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1], diffs.splice(pointer - 1, 1), hasChanges = !0) : diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1] && (diffs[pointer - 1][1] += diffs[pointer + 1][1], diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1], diffs.splice(pointer + 1, 1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nfunction trueCount(...args) {\n  return args.reduce((n, bool) => n + (bool ? 1 : 0), 0);\n}\nfunction cleanupEfficiency(rawDiffs, editCost = 4) {\n  let diffs = rawDiffs.map((diff2) => cloneDiff(diff2)), hasChanges = !1;\n  const equalities = [];\n  let equalitiesLength = 0, lastEquality = null, pointer = 0, preIns = !1, preDel = !1, postIns = !1, postDel = !1;\n  for (; pointer < diffs.length; )\n    diffs[pointer][0] === DIFF_EQUAL ? (diffs[pointer][1].length < editCost && (postIns || postDel) ? (equalities[equalitiesLength++] = pointer, preIns = postIns, preDel = postDel, lastEquality = diffs[pointer][1]) : (equalitiesLength = 0, lastEquality = null), postIns = !1, postDel = !1) : (diffs[pointer][0] === DIFF_DELETE ? postDel = !0 : postIns = !0, lastEquality && (preIns && preDel && postIns && postDel || lastEquality.length < editCost / 2 && trueCount(preIns, preDel, postIns, postDel) === 3) && (diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastEquality]), diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT, equalitiesLength--, lastEquality = null, preIns && preDel ? (postIns = !0, postDel = !0, equalitiesLength = 0) : (equalitiesLength--, pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1, postIns = !1, postDel = !1), hasChanges = !0)), pointer++;\n  return hasChanges && (diffs = cleanupMerge(diffs)), diffs;\n}\nvar __defProp$1 = Object.defineProperty, __getOwnPropSymbols$1 = Object.getOwnPropertySymbols, __hasOwnProp$1 = Object.prototype.hasOwnProperty, __propIsEnum$1 = Object.prototype.propertyIsEnumerable, __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b))\n      __propIsEnum$1.call(b, prop) && __defNormalProp$1(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTIONS = {\n  /**\n   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n   */\n  threshold: 0.5,\n  /**\n   * How far to search for a match (0 = exact location, 1000+ = broad match).\n   * A match this many characters away from the expected location will add\n   * 1.0 to the score (0.0 is a perfect match).\n   */\n  distance: 1e3\n};\nfunction applyDefaults(options) {\n  return __spreadValues$1(__spreadValues$1({}, DEFAULT_OPTIONS), options);\n}\nconst MAX_BITS$1 = 32;\nfunction bitap(text, pattern, loc, opts = {}) {\n  if (pattern.length > MAX_BITS$1)\n    throw new Error(\"Pattern too long for this browser.\");\n  const options = applyDefaults(opts), s = getAlphabetFromPattern(pattern);\n  function getBitapScore(e, x) {\n    const accuracy = e / pattern.length, proximity = Math.abs(loc - x);\n    return options.distance ? accuracy + proximity / options.distance : proximity ? 1 : accuracy;\n  }\n  let scoreThreshold = options.threshold, bestLoc = text.indexOf(pattern, loc);\n  bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold), bestLoc = text.lastIndexOf(pattern, loc + pattern.length), bestLoc !== -1 && (scoreThreshold = Math.min(getBitapScore(0, bestLoc), scoreThreshold)));\n  const matchmask = 1 << pattern.length - 1;\n  bestLoc = -1;\n  let binMin, binMid, binMax = pattern.length + text.length, lastRd = [];\n  for (let d = 0; d < pattern.length; d++) {\n    for (binMin = 0, binMid = binMax; binMin < binMid; )\n      getBitapScore(d, loc + binMid) <= scoreThreshold ? binMin = binMid : binMax = binMid, binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    binMax = binMid;\n    let start = Math.max(1, loc - binMid + 1);\n    const finish = Math.min(loc + binMid, text.length) + pattern.length, rd = new Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (let j = finish; j >= start; j--) {\n      const charMatch = s[text.charAt(j - 1)];\n      if (d === 0 ? rd[j] = (rd[j + 1] << 1 | 1) & charMatch : rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((lastRd[j + 1] | lastRd[j]) << 1 | 1) | lastRd[j + 1], rd[j] & matchmask) {\n        const score = getBitapScore(d, j - 1);\n        if (score <= scoreThreshold)\n          if (scoreThreshold = score, bestLoc = j - 1, bestLoc > loc)\n            start = Math.max(1, 2 * loc - bestLoc);\n          else\n            break;\n      }\n    }\n    if (getBitapScore(d + 1, loc) > scoreThreshold)\n      break;\n    lastRd = rd;\n  }\n  return bestLoc;\n}\nfunction getAlphabetFromPattern(pattern) {\n  const s = {};\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] = 0;\n  for (let i = 0; i < pattern.length; i++)\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  return s;\n}\nfunction match(text, pattern, searchLocation, options = {}) {\n  if (text === null || pattern === null || searchLocation === null)\n    throw new Error(\"Null input. (match())\");\n  const loc = Math.max(0, Math.min(searchLocation, text.length));\n  if (text === pattern)\n    return 0;\n  if (text.length) {\n    if (text.substring(loc, loc + pattern.length) === pattern)\n      return loc;\n  } else return -1;\n  return bitap(text, pattern, loc, options);\n}\nfunction diffText1(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_INSERT && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction diffText2(diffs) {\n  const text = [];\n  for (let x = 0; x < diffs.length; x++)\n    diffs[x][0] !== DIFF_DELETE && (text[x] = diffs[x][1]);\n  return text.join(\"\");\n}\nfunction levenshtein(diffs) {\n  let leven = 0, insertions = 0, deletions = 0;\n  for (let x = 0; x < diffs.length; x++) {\n    const op = diffs[x][0], data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        leven += Math.max(insertions, deletions), insertions = 0, deletions = 0;\n        break;\n      default:\n        throw new Error(\"Unknown diff operation.\");\n    }\n  }\n  return leven += Math.max(insertions, deletions), leven;\n}\nfunction xIndex(diffs, location) {\n  let chars1 = 0, chars2 = 0, lastChars1 = 0, lastChars2 = 0, x;\n  for (x = 0; x < diffs.length && (diffs[x][0] !== DIFF_INSERT && (chars1 += diffs[x][1].length), diffs[x][0] !== DIFF_DELETE && (chars2 += diffs[x][1].length), !(chars1 > location)); x++)\n    lastChars1 = chars1, lastChars2 = chars2;\n  return diffs.length !== x && diffs[x][0] === DIFF_DELETE ? lastChars2 : lastChars2 + (location - lastChars1);\n}\nfunction countUtf8Bytes(str) {\n  let bytes = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (typeof codePoint > \"u\")\n      throw new Error(\"Failed to get codepoint\");\n    bytes += utf8len(codePoint);\n  }\n  return bytes;\n}\nfunction adjustIndiciesToUcs2(patches, base, options = {}) {\n  let byteOffset = 0, idx = 0;\n  function advanceTo(target) {\n    for (; byteOffset < target; ) {\n      const codePoint = base.codePointAt(idx);\n      if (typeof codePoint > \"u\")\n        return idx;\n      byteOffset += utf8len(codePoint), codePoint > 65535 ? idx += 2 : idx += 1;\n    }\n    if (!options.allowExceedingIndices && byteOffset !== target)\n      throw new Error(\"Failed to determine byte offset\");\n    return idx;\n  }\n  const adjusted = [];\n  for (const patch of patches)\n    adjusted.push({\n      diffs: patch.diffs.map((diff2) => cloneDiff(diff2)),\n      start1: advanceTo(patch.start1),\n      start2: advanceTo(patch.start2),\n      utf8Start1: patch.utf8Start1,\n      utf8Start2: patch.utf8Start2,\n      length1: patch.length1,\n      length2: patch.length2,\n      utf8Length1: patch.utf8Length1,\n      utf8Length2: patch.utf8Length2\n    });\n  return adjusted;\n}\nfunction utf8len(codePoint) {\n  return codePoint <= 127 ? 1 : codePoint <= 2047 ? 2 : codePoint <= 65535 ? 3 : 4;\n}\nconst MAX_BITS = 32, DEFAULT_MARGIN = 4;\nfunction addPadding(patches, margin = DEFAULT_MARGIN) {\n  const paddingLength = margin;\n  let nullPadding = \"\";\n  for (let x = 1; x <= paddingLength; x++)\n    nullPadding += String.fromCharCode(x);\n  for (const p of patches)\n    p.start1 += paddingLength, p.start2 += paddingLength, p.utf8Start1 += paddingLength, p.utf8Start2 += paddingLength;\n  let patch = patches[0], diffs = patch.diffs;\n  if (diffs.length === 0 || diffs[0][0] !== DIFF_EQUAL)\n    diffs.unshift([DIFF_EQUAL, nullPadding]), patch.start1 -= paddingLength, patch.start2 -= paddingLength, patch.utf8Start1 -= paddingLength, patch.utf8Start2 -= paddingLength, patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[0][1].length) {\n    const firstDiffLength = diffs[0][1].length, extraLength = paddingLength - firstDiffLength;\n    diffs[0][1] = nullPadding.substring(firstDiffLength) + diffs[0][1], patch.start1 -= extraLength, patch.start2 -= extraLength, patch.utf8Start1 -= extraLength, patch.utf8Start2 -= extraLength, patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  if (patch = patches[patches.length - 1], diffs = patch.diffs, diffs.length === 0 || diffs[diffs.length - 1][0] !== DIFF_EQUAL)\n    diffs.push([DIFF_EQUAL, nullPadding]), patch.length1 += paddingLength, patch.length2 += paddingLength, patch.utf8Length1 += paddingLength, patch.utf8Length2 += paddingLength;\n  else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    const extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength), patch.length1 += extraLength, patch.length2 += extraLength, patch.utf8Length1 += extraLength, patch.utf8Length2 += extraLength;\n  }\n  return nullPadding;\n}\nfunction createPatchObject(start1, start2) {\n  return {\n    diffs: [],\n    start1,\n    start2,\n    utf8Start1: start1,\n    utf8Start2: start2,\n    length1: 0,\n    length2: 0,\n    utf8Length1: 0,\n    utf8Length2: 0\n  };\n}\nfunction splitMax(patches, margin = DEFAULT_MARGIN) {\n  const patchSize = MAX_BITS;\n  for (let x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patchSize)\n      continue;\n    const bigpatch = patches[x];\n    patches.splice(x--, 1);\n    let start1 = bigpatch.start1, start2 = bigpatch.start2, preContext = \"\";\n    for (; bigpatch.diffs.length !== 0; ) {\n      const patch = createPatchObject(start1 - preContext.length, start2 - preContext.length);\n      let empty = !0;\n      if (preContext !== \"\") {\n        const precontextByteCount = countUtf8Bytes(preContext);\n        patch.length1 = preContext.length, patch.utf8Length1 = precontextByteCount, patch.length2 = preContext.length, patch.utf8Length2 = precontextByteCount, patch.diffs.push([DIFF_EQUAL, preContext]);\n      }\n      for (; bigpatch.diffs.length !== 0 && patch.length1 < patchSize - margin; ) {\n        const diffType = bigpatch.diffs[0][0];\n        let diffText = bigpatch.diffs[0][1], diffTextByteCount = countUtf8Bytes(diffText);\n        if (diffType === DIFF_INSERT) {\n          patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length;\n          const diff2 = bigpatch.diffs.shift();\n          diff2 && patch.diffs.push(diff2), empty = !1;\n        } else diffType === DIFF_DELETE && patch.diffs.length === 1 && patch.diffs[0][0] === DIFF_EQUAL && diffText.length > 2 * patchSize ? (patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, empty = !1, patch.diffs.push([diffType, diffText]), bigpatch.diffs.shift()) : (diffText = diffText.substring(0, patchSize - patch.length1 - margin), diffTextByteCount = countUtf8Bytes(diffText), patch.length1 += diffText.length, patch.utf8Length1 += diffTextByteCount, start1 += diffText.length, diffType === DIFF_EQUAL ? (patch.length2 += diffText.length, patch.utf8Length2 += diffTextByteCount, start2 += diffText.length) : empty = !1, patch.diffs.push([diffType, diffText]), diffText === bigpatch.diffs[0][1] ? bigpatch.diffs.shift() : bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diffText.length));\n      }\n      preContext = diffText2(patch.diffs), preContext = preContext.substring(preContext.length - margin);\n      const postContext = diffText1(bigpatch.diffs).substring(0, margin), postContextByteCount = countUtf8Bytes(postContext);\n      postContext !== \"\" && (patch.length1 += postContext.length, patch.length2 += postContext.length, patch.utf8Length1 += postContextByteCount, patch.utf8Length2 += postContextByteCount, patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL ? patch.diffs[patch.diffs.length - 1][1] += postContext : patch.diffs.push([DIFF_EQUAL, postContext])), empty || patches.splice(++x, 0, patch);\n    }\n  }\n}\nfunction apply(patches, originalText, opts = {}) {\n  if (typeof patches == \"string\")\n    throw new Error(\"Patches must be an array - pass the patch to `parsePatch()` first\");\n  let text = originalText;\n  if (patches.length === 0)\n    return [text, []];\n  const parsed = adjustIndiciesToUcs2(patches, text, {\n    allowExceedingIndices: opts.allowExceedingIndices\n  }), margin = opts.margin || DEFAULT_MARGIN, deleteThreshold = opts.deleteThreshold || 0.4, nullPadding = addPadding(parsed, margin);\n  text = nullPadding + text + nullPadding, splitMax(parsed, margin);\n  let delta = 0;\n  const results = [];\n  for (let x = 0; x < parsed.length; x++) {\n    const expectedLoc = parsed[x].start2 + delta, text1 = diffText1(parsed[x].diffs);\n    let startLoc, endLoc = -1;\n    if (text1.length > MAX_BITS ? (startLoc = match(text, text1.substring(0, MAX_BITS), expectedLoc), startLoc !== -1 && (endLoc = match(\n      text,\n      text1.substring(text1.length - MAX_BITS),\n      expectedLoc + text1.length - MAX_BITS\n    ), (endLoc === -1 || startLoc >= endLoc) && (startLoc = -1))) : startLoc = match(text, text1, expectedLoc), startLoc === -1)\n      results[x] = !1, delta -= parsed[x].length2 - parsed[x].length1;\n    else {\n      results[x] = !0, delta = startLoc - expectedLoc;\n      let text2;\n      if (endLoc === -1 ? text2 = text.substring(startLoc, startLoc + text1.length) : text2 = text.substring(startLoc, endLoc + MAX_BITS), text1 === text2)\n        text = text.substring(0, startLoc) + diffText2(parsed[x].diffs) + text.substring(startLoc + text1.length);\n      else {\n        let diffs = diff(text1, text2, { checkLines: !1 });\n        if (text1.length > MAX_BITS && levenshtein(diffs) / text1.length > deleteThreshold)\n          results[x] = !1;\n        else {\n          diffs = cleanupSemanticLossless(diffs);\n          let index1 = 0, index2 = 0;\n          for (let y = 0; y < parsed[x].diffs.length; y++) {\n            const mod = parsed[x].diffs[y];\n            mod[0] !== DIFF_EQUAL && (index2 = xIndex(diffs, index1)), mod[0] === DIFF_INSERT ? text = text.substring(0, startLoc + index2) + mod[1] + text.substring(startLoc + index2) : mod[0] === DIFF_DELETE && (text = text.substring(0, startLoc + index2) + text.substring(startLoc + xIndex(diffs, index1 + mod[1].length))), mod[0] !== DIFF_DELETE && (index1 += mod[1].length);\n          }\n        }\n      }\n    }\n  }\n  return text = text.substring(nullPadding.length, text.length - nullPadding.length), [text, results];\n}\nvar __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: !0, configurable: !0, writable: !0, value }) : obj[key] = value, __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b))\n      __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n  return a;\n};\nconst DEFAULT_OPTS = {\n  margin: 4\n};\nfunction getDefaultOpts(opts = {}) {\n  return __spreadValues(__spreadValues({}, DEFAULT_OPTS), opts);\n}\nfunction make(a, b, options) {\n  if (typeof a == \"string\" && typeof b == \"string\") {\n    let diffs = diff(a, b, { checkLines: !0 });\n    return diffs.length > 2 && (diffs = cleanupSemantic(diffs), diffs = cleanupEfficiency(diffs)), _make(a, diffs, getDefaultOpts(options));\n  }\n  if (a && Array.isArray(a) && typeof b > \"u\")\n    return _make(diffText1(a), a, getDefaultOpts(options));\n  if (typeof a == \"string\" && b && Array.isArray(b))\n    return _make(a, b, getDefaultOpts(options));\n  throw new Error(\"Unknown call format to make()\");\n}\nfunction _make(textA, diffs, options) {\n  if (diffs.length === 0)\n    return [];\n  const patches = [];\n  let patch = createPatchObject(0, 0), patchDiffLength = 0, charCount1 = 0, charCount2 = 0, utf8Count1 = 0, utf8Count2 = 0, prepatchText = textA, postpatchText = textA;\n  for (let x = 0; x < diffs.length; x++) {\n    const currentDiff = diffs[x], [diffType, diffText] = currentDiff, diffTextLength = diffText.length, diffByteLength = countUtf8Bytes(diffText);\n    switch (!patchDiffLength && diffType !== DIFF_EQUAL && (patch.start1 = charCount1, patch.start2 = charCount2, patch.utf8Start1 = utf8Count1, patch.utf8Start2 = utf8Count2), diffType) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = currentDiff, patch.length2 += diffTextLength, patch.utf8Length2 += diffByteLength, postpatchText = postpatchText.substring(0, charCount2) + diffText + postpatchText.substring(charCount2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.diffs[patchDiffLength++] = currentDiff, postpatchText = postpatchText.substring(0, charCount2) + postpatchText.substring(charCount2 + diffTextLength);\n        break;\n      case DIFF_EQUAL:\n        diffTextLength <= 2 * options.margin && patchDiffLength && diffs.length !== x + 1 ? (patch.diffs[patchDiffLength++] = currentDiff, patch.length1 += diffTextLength, patch.length2 += diffTextLength, patch.utf8Length1 += diffByteLength, patch.utf8Length2 += diffByteLength) : diffTextLength >= 2 * options.margin && patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch), patch = createPatchObject(-1, -1), patchDiffLength = 0, prepatchText = postpatchText, charCount1 = charCount2, utf8Count1 = utf8Count2);\n        break;\n      default:\n        throw new Error(\"Unknown diff type\");\n    }\n    diffType !== DIFF_INSERT && (charCount1 += diffTextLength, utf8Count1 += diffByteLength), diffType !== DIFF_DELETE && (charCount2 += diffTextLength, utf8Count2 += diffByteLength);\n  }\n  return patchDiffLength && (addContext(patch, prepatchText, options), patches.push(patch)), patches;\n}\nfunction addContext(patch, text, opts) {\n  if (text.length === 0)\n    return;\n  let pattern = text.substring(patch.start2, patch.start2 + patch.length1), padding = 0;\n  for (; text.indexOf(pattern) !== text.lastIndexOf(pattern) && pattern.length < MAX_BITS - opts.margin - opts.margin; )\n    padding += opts.margin, pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  padding += opts.margin;\n  let prefixStart = patch.start2 - padding;\n  prefixStart >= 1 && isLowSurrogate(text[prefixStart]) && prefixStart--;\n  const prefix = text.substring(prefixStart, patch.start2);\n  prefix && patch.diffs.unshift([DIFF_EQUAL, prefix]);\n  const prefixLength = prefix.length, prefixUtf8Length = countUtf8Bytes(prefix);\n  let suffixEnd = patch.start2 + patch.length1 + padding;\n  suffixEnd < text.length && isLowSurrogate(text[suffixEnd]) && suffixEnd++;\n  const suffix = text.substring(patch.start2 + patch.length1, suffixEnd);\n  suffix && patch.diffs.push([DIFF_EQUAL, suffix]);\n  const suffixLength = suffix.length, suffixUtf8Length = countUtf8Bytes(suffix);\n  patch.start1 -= prefixLength, patch.start2 -= prefixLength, patch.utf8Start1 -= prefixUtf8Length, patch.utf8Start2 -= prefixUtf8Length, patch.length1 += prefixLength + suffixLength, patch.length2 += prefixLength + suffixLength, patch.utf8Length1 += prefixUtf8Length + suffixUtf8Length, patch.utf8Length2 += prefixUtf8Length + suffixUtf8Length;\n}\nconst patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\nfunction parse(textline) {\n  if (!textline)\n    return [];\n  const patches = [], lines = textline.split(`\n`);\n  let textPointer = 0;\n  for (; textPointer < lines.length; ) {\n    const m = lines[textPointer].match(patchHeader);\n    if (!m)\n      throw new Error(`Invalid patch string: ${lines[textPointer]}`);\n    const patch = createPatchObject(toInt(m[1]), toInt(m[3]));\n    for (patches.push(patch), m[2] === \"\" ? (patch.start1--, patch.utf8Start1--, patch.length1 = 1, patch.utf8Length1 = 1) : m[2] === \"0\" ? (patch.length1 = 0, patch.utf8Length1 = 0) : (patch.start1--, patch.utf8Start1--, patch.utf8Length1 = toInt(m[2]), patch.length1 = patch.utf8Length1), m[4] === \"\" ? (patch.start2--, patch.utf8Start2--, patch.length2 = 1, patch.utf8Length2 = 1) : m[4] === \"0\" ? (patch.length2 = 0, patch.utf8Length2 = 0) : (patch.start2--, patch.utf8Start2--, patch.utf8Length2 = toInt(m[4]), patch.length2 = patch.utf8Length2), textPointer++; textPointer < lines.length; ) {\n      const currentLine = lines[textPointer], sign = currentLine.charAt(0);\n      if (sign === \"@\")\n        break;\n      if (sign === \"\") {\n        textPointer++;\n        continue;\n      }\n      let line;\n      try {\n        line = decodeURI(currentLine.slice(1));\n      } catch (ex) {\n        throw new Error(`Illegal escape in parse: ${currentLine}`);\n      }\n      const utf8Diff = countUtf8Bytes(line) - line.length;\n      if (sign === \"-\")\n        patch.diffs.push([DIFF_DELETE, line]), patch.length1 -= utf8Diff;\n      else if (sign === \"+\")\n        patch.diffs.push([DIFF_INSERT, line]), patch.length2 -= utf8Diff;\n      else if (sign === \" \")\n        patch.diffs.push([DIFF_EQUAL, line]), patch.length1 -= utf8Diff, patch.length2 -= utf8Diff;\n      else\n        throw new Error(`Invalid patch mode \"${sign}\" in: ${line}`);\n      textPointer++;\n    }\n  }\n  return patches;\n}\nfunction toInt(num) {\n  return parseInt(num, 10);\n}\nfunction stringify(patches) {\n  return patches.map(stringifyPatch).join(\"\");\n}\nfunction stringifyPatch(patch) {\n  const { utf8Length1, utf8Length2, utf8Start1, utf8Start2, diffs } = patch;\n  let coords1;\n  utf8Length1 === 0 ? coords1 = `${utf8Start1},0` : utf8Length1 === 1 ? coords1 = `${utf8Start1 + 1}` : coords1 = `${utf8Start1 + 1},${utf8Length1}`;\n  let coords2;\n  utf8Length2 === 0 ? coords2 = `${utf8Start2},0` : utf8Length2 === 1 ? coords2 = `${utf8Start2 + 1}` : coords2 = `${utf8Start2 + 1},${utf8Length2}`;\n  const text = [`@@ -${coords1} +${coords2} @@\n`];\n  let op;\n  for (let x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n      default:\n        throw new Error(\"Unknown patch operation.\");\n    }\n    text[x + 1] = `${op + encodeURI(diffs[x][1])}\n`;\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n}\nexport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  adjustIndiciesToUcs2,\n  apply as applyPatches,\n  cleanupEfficiency,\n  cleanupSemantic,\n  diff as makeDiff,\n  make as makePatches,\n  match,\n  parse as parsePatch,\n  stringifyPatch,\n  stringify as stringifyPatches,\n  xIndex\n};\n//# sourceMappingURL=index.js.map\n","import type {Editor} from 'slate'\n\nconst IS_UDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\nconst IS_REDOING: WeakMap<Editor, boolean | undefined> = new WeakMap()\n\nexport function withUndoing(editor: Editor, fn: () => void) {\n  const prev = isUndoing(editor)\n  IS_UDOING.set(editor, true)\n  fn()\n  IS_UDOING.set(editor, prev)\n}\n\nexport function isUndoing(editor: Editor) {\n  return IS_UDOING.get(editor) ?? false\n}\n\nexport function setIsUndoing(editor: Editor, isUndoing: boolean) {\n  IS_UDOING.set(editor, isUndoing)\n}\n\nexport function withRedoing(editor: Editor, fn: () => void) {\n  const prev = isRedoing(editor)\n  IS_REDOING.set(editor, true)\n  fn()\n  IS_REDOING.set(editor, prev)\n}\n\nexport function isRedoing(editor: Editor) {\n  return IS_REDOING.get(editor) ?? false\n}\n\nexport function setIsRedoing(editor: Editor, isRedoing: boolean) {\n  IS_REDOING.set(editor, isRedoing)\n}\n","import getRandomValues from 'get-random-values-esm'\n\n/**\n * @public\n */\nexport const defaultKeyGenerator = (): string => randomKey(12)\n\nconst getByteHexTable = (() => {\n  let table: any[]\n  return () => {\n    if (table) {\n      return table\n    }\n\n    table = []\n    for (let i = 0; i < 256; ++i) {\n      table[i] = (i + 0x100).toString(16).slice(1)\n    }\n    return table\n  }\n})()\n\n// WHATWG crypto RNG - https://w3c.github.io/webcrypto/Overview.html\nfunction whatwgRNG(length = 16) {\n  const rnds8 = new Uint8Array(length)\n  getRandomValues(rnds8)\n  return rnds8\n}\n\nfunction randomKey(length?: number): string {\n  const table = getByteHexTable()\n  return whatwgRNG(length)\n    .reduce((str, n) => str + table[n], '')\n    .slice(0, length)\n}\n","import {Editor} from 'slate'\nimport {defaultKeyGenerator} from './key-generator'\n\nconst CURRENT_ACTION_ID: WeakMap<Editor, string | undefined> = new WeakMap()\n\nexport function withApplyingBehaviorActions(editor: Editor, fn: () => void) {\n  CURRENT_ACTION_ID.set(editor, defaultKeyGenerator())\n  Editor.withoutNormalizing(editor, fn)\n  CURRENT_ACTION_ID.set(editor, undefined)\n}\n\nexport function getCurrentActionId(editor: Editor) {\n  return CURRENT_ACTION_ID.get(editor)\n}\n\nexport function isApplyingBehaviorActions(editor: Editor) {\n  return getCurrentActionId(editor) !== undefined\n}\n\n////////\n\nconst CURRENT_BEHAVIOR_ACTION_SET: WeakMap<\n  Editor,\n  {actionSetId: string} | undefined\n> = new WeakMap()\n\nexport function withApplyingBehaviorActionSet(editor: Editor, fn: () => void) {\n  const current = CURRENT_BEHAVIOR_ACTION_SET.get(editor)\n\n  if (current) {\n    withApplyingBehaviorActions(editor, fn)\n    return\n  }\n\n  CURRENT_BEHAVIOR_ACTION_SET.set(\n    editor,\n    current ?? {\n      actionSetId: defaultKeyGenerator(),\n    },\n  )\n  withApplyingBehaviorActions(editor, fn)\n  CURRENT_BEHAVIOR_ACTION_SET.set(editor, undefined)\n}\n\nexport function getCurrentBehaviorActionSetId(editor: Editor) {\n  return CURRENT_BEHAVIOR_ACTION_SET.get(editor)?.actionSetId\n}\n","/**\n * This plugin will make the editor support undo/redo on the local state only.\n * The undo/redo steps are rebased against incoming patches since the step occurred.\n */\n\nimport type {Patch} from '@portabletext/patches'\nimport {\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {ObjectSchemaType, PortableTextBlock} from '@sanity/types'\nimport {flatten, isEqual} from 'lodash'\nimport {\n  Editor,\n  Operation,\n  Path,\n  Transforms,\n  type Descendant,\n  type SelectionOperation,\n} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {\n  isRedoing,\n  isUndoing,\n  setIsRedoing,\n  setIsUndoing,\n  withRedoing,\n  withUndoing,\n} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentBehaviorActionSetId} from '../with-applying-behavior-actions'\n\nconst debug = debugWithName('plugin:withUndoRedo')\nconst debugVerbose = debug.enabled && false\n\nconst SAVING = new WeakMap<Editor, boolean | undefined>()\nconst REMOTE_PATCHES = new WeakMap<\n  Editor,\n  {\n    patch: Patch\n    time: Date\n    snapshot: PortableTextBlock[] | undefined\n    previousSnapshot: PortableTextBlock[] | undefined\n  }[]\n>()\nconst UNDO_STEP_LIMIT = 1000\n\nconst isSaving = (editor: Editor): boolean | undefined => {\n  const state = SAVING.get(editor)\n  return state === undefined ? true : state\n}\n\nexport interface Options {\n  editorActor: EditorActor\n  blockSchemaType: ObjectSchemaType\n  subscriptions: Array<() => () => void>\n}\n\nconst getRemotePatches = (editor: Editor) => {\n  if (!REMOTE_PATCHES.get(editor)) {\n    REMOTE_PATCHES.set(editor, [])\n  }\n  return REMOTE_PATCHES.get(editor) || []\n}\n\nexport function createWithUndoRedo(\n  options: Options,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const {editorActor, blockSchemaType} = options\n\n  return (editor: PortableTextSlateEditor) => {\n    let previousSnapshot: PortableTextBlock[] | undefined = fromSlateValue(\n      editor.children,\n      blockSchemaType.name,\n    )\n    const remotePatches = getRemotePatches(editor)\n    let previousBehaviorActionSetId = getCurrentBehaviorActionSetId(editor)\n\n    options.subscriptions.push(() => {\n      debug('Subscribing to patches')\n      const sub = editorActor.on('patches', ({patches, snapshot}) => {\n        let reset = false\n        patches.forEach((patch) => {\n          if (!reset && patch.origin !== 'local' && remotePatches) {\n            if (patch.type === 'unset' && patch.path.length === 0) {\n              debug(\n                'Someone else cleared the content, resetting undo/redo history',\n              )\n              editor.history = {undos: [], redos: []}\n              remotePatches.splice(0, remotePatches.length)\n              SAVING.set(editor, true)\n              reset = true\n              return\n            }\n            remotePatches.push({\n              patch,\n              time: new Date(),\n              snapshot,\n              previousSnapshot,\n            })\n          }\n        })\n        previousSnapshot = snapshot\n      })\n      return () => {\n        debug('Unsubscribing to patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.history = {undos: [], redos: []}\n\n    const {apply} = editor\n\n    editor.apply = (op: Operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      const {operations, history} = editor\n      const {undos} = history\n      const step = undos[undos.length - 1]\n      const lastOp =\n        step && step.operations && step.operations[step.operations.length - 1]\n      const overwrite = shouldOverwrite(op, lastOp)\n      const save = isSaving(editor)\n\n      const currentBehaviorActionSetId = getCurrentBehaviorActionSetId(editor)\n\n      let merge =\n        currentBehaviorActionSetId !== undefined &&\n        previousBehaviorActionSetId === undefined\n          ? false\n          : currentBehaviorActionSetId !== undefined &&\n              previousBehaviorActionSetId !== undefined\n            ? currentBehaviorActionSetId === previousBehaviorActionSetId\n            : true\n\n      if (save) {\n        if (!step) {\n          merge = false\n        } else if (operations.length === 0) {\n          merge =\n            currentBehaviorActionSetId === undefined &&\n            previousBehaviorActionSetId === undefined\n              ? shouldMerge(op, lastOp) || overwrite\n              : merge\n        }\n\n        if (step && merge) {\n          step.operations.push(op)\n        } else {\n          const newStep = {\n            operations: [\n              ...(editor.selection === null\n                ? []\n                : [createSelectOperation(editor)]),\n              op,\n            ],\n            timestamp: new Date(),\n          }\n          undos.push(newStep)\n          debug('Created new undo step', step)\n        }\n\n        while (undos.length > UNDO_STEP_LIMIT) {\n          undos.shift()\n        }\n\n        if (shouldClear(op)) {\n          history.redos = []\n        }\n      }\n\n      previousBehaviorActionSetId = currentBehaviorActionSetId\n\n      apply(op)\n    }\n\n    // Plugin return\n    return editor\n  }\n}\n\nexport const historyUndoActionImplementation: BehaviorActionImplementation<\n  'history.undo'\n> = ({action}) => {\n  const editor = action.editor\n  const {undos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (undos.length > 0) {\n    const step = undos[undos.length - 1]\n    debug('Undoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      const reversedOperations = transformedOperations\n        .map(Operation.inverse)\n        .reverse()\n\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withUndoing(editor, () => {\n            withoutSaving(editor, () => {\n              reversedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform undo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsUndoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.redos.push(step)\n      editor.history.undos.pop()\n    }\n  }\n}\n\nexport const historyRedoActionImplementation: BehaviorActionImplementation<\n  'history.redo'\n> = ({action}) => {\n  const editor = action.editor\n  const {redos} = editor.history\n  const remotePatches = getRemotePatches(editor)\n\n  if (redos.length > 0) {\n    const step = redos[redos.length - 1]\n    debug('Redoing', step)\n    if (step.operations.length > 0) {\n      const otherPatches = remotePatches.filter(\n        (item) => item.time >= step.timestamp,\n      )\n      let transformedOperations = step.operations\n      otherPatches.forEach((item) => {\n        transformedOperations = flatten(\n          transformedOperations.map((op) =>\n            transformOperation(\n              editor,\n              item.patch,\n              op,\n              item.snapshot,\n              item.previousSnapshot,\n            ),\n          ),\n        )\n      })\n      try {\n        Editor.withoutNormalizing(editor, () => {\n          withRedoing(editor, () => {\n            withoutSaving(editor, () => {\n              transformedOperations.forEach((op) => {\n                editor.apply(op)\n              })\n            })\n          })\n        })\n      } catch (err) {\n        debug('Could not perform redo step', err)\n        remotePatches.splice(0, remotePatches.length)\n        Transforms.deselect(editor)\n        editor.history = {undos: [], redos: []}\n        SAVING.set(editor, true)\n        setIsRedoing(editor, false)\n        editor.onChange()\n        return\n      }\n      editor.history.undos.push(step)\n      editor.history.redos.pop()\n    }\n  }\n}\n\n/**\n * This will adjust the operation paths and offsets according to the\n * remote patches by other editors since the step operations was performed.\n */\nfunction transformOperation(\n  editor: PortableTextSlateEditor,\n  patch: Patch,\n  operation: Operation,\n  snapshot: PortableTextBlock[] | undefined,\n  previousSnapshot: PortableTextBlock[] | undefined,\n): Operation[] {\n  if (debugVerbose) {\n    debug(\n      `Adjusting '${operation.type}' operation paths for '${patch.type}' patch`,\n    )\n    debug(`Operation ${JSON.stringify(operation)}`)\n    debug(`Patch ${JSON.stringify(patch)}`)\n  }\n\n  const transformedOperation = {...operation}\n\n  if (patch.type === 'insert' && patch.path.length === 1) {\n    const insertBlockIndex = (snapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    debug(\n      `Adjusting block path (+${patch.items.length}) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n    )\n    return [\n      adjustBlockPath(\n        transformedOperation,\n        patch.items.length,\n        insertBlockIndex,\n      ),\n    ]\n  }\n\n  if (patch.type === 'unset' && patch.path.length === 1) {\n    const unsetBlockIndex = (previousSnapshot || []).findIndex((blk) =>\n      isEqual({_key: blk._key}, patch.path[0]),\n    )\n    // If this operation is targeting the same block that got removed, return empty\n    if (\n      'path' in transformedOperation &&\n      Array.isArray(transformedOperation.path) &&\n      transformedOperation.path[0] === unsetBlockIndex\n    ) {\n      debug('Skipping transformation that targeted removed block')\n      return []\n    }\n    if (debugVerbose) {\n      debug(`Selection ${JSON.stringify(editor.selection)}`)\n      debug(\n        `Adjusting block path (-1) for '${transformedOperation.type}' operation and patch '${patch.type}'`,\n      )\n    }\n    return [adjustBlockPath(transformedOperation, -1, unsetBlockIndex)]\n  }\n\n  // Someone reset the whole value\n  if (patch.type === 'unset' && patch.path.length === 0) {\n    debug(\n      `Adjusting selection for unset everything patch and ${operation.type} operation`,\n    )\n    return []\n  }\n\n  if (patch.type === 'diffMatchPatch') {\n    const operationTargetBlock = findOperationTargetBlock(\n      editor,\n      transformedOperation,\n    )\n    if (\n      !operationTargetBlock ||\n      !isEqual({_key: operationTargetBlock._key}, patch.path[0])\n    ) {\n      return [transformedOperation]\n    }\n    const diffPatches = parsePatch(patch.value)\n    diffPatches.forEach((diffPatch) => {\n      let adjustOffsetBy = 0\n      let changedOffset = diffPatch.utf8Start1\n      const {diffs} = diffPatch\n      diffs.forEach((diff, index) => {\n        const [diffType, text] = diff\n        if (diffType === DIFF_INSERT) {\n          adjustOffsetBy += text.length\n          changedOffset += text.length\n        } else if (diffType === DIFF_DELETE) {\n          adjustOffsetBy -= text.length\n          changedOffset -= text.length\n        } else if (diffType === DIFF_EQUAL) {\n          // Only up to the point where there are no other changes\n          if (!diffs.slice(index).every(([dType]) => dType === DIFF_EQUAL)) {\n            changedOffset += text.length\n          }\n        }\n      })\n      // Adjust accordingly if someone inserted text in the same node before us\n      if (transformedOperation.type === 'insert_text') {\n        if (changedOffset < transformedOperation.offset) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust accordingly if someone removed text in the same node before us\n      if (transformedOperation.type === 'remove_text') {\n        if (\n          changedOffset <=\n          transformedOperation.offset - transformedOperation.text.length\n        ) {\n          transformedOperation.offset += adjustOffsetBy\n        }\n      }\n      // Adjust set_selection operation's points to new offset\n      if (transformedOperation.type === 'set_selection') {\n        const currentFocus = transformedOperation.properties?.focus\n          ? {...transformedOperation.properties.focus}\n          : undefined\n        const currentAnchor = transformedOperation?.properties?.anchor\n          ? {...transformedOperation.properties.anchor}\n          : undefined\n        const newFocus = transformedOperation?.newProperties?.focus\n          ? {...transformedOperation.newProperties.focus}\n          : undefined\n        const newAnchor = transformedOperation?.newProperties?.anchor\n          ? {...transformedOperation.newProperties.anchor}\n          : undefined\n        if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n          const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n          points.forEach((point) => {\n            if (point && changedOffset < point.offset) {\n              point.offset += adjustOffsetBy\n            }\n          })\n          if (currentFocus && currentAnchor) {\n            transformedOperation.properties = {\n              focus: currentFocus,\n              anchor: currentAnchor,\n            }\n          }\n          if (newFocus && newAnchor) {\n            transformedOperation.newProperties = {\n              focus: newFocus,\n              anchor: newAnchor,\n            }\n          }\n        }\n      }\n    })\n    return [transformedOperation]\n  }\n  return [transformedOperation]\n}\n/**\n * Adjust the block path for a operation\n */\nfunction adjustBlockPath(\n  operation: Operation,\n  level: number,\n  blockIndex: number,\n): Operation {\n  const transformedOperation = {...operation}\n  if (\n    blockIndex >= 0 &&\n    transformedOperation.type !== 'set_selection' &&\n    Array.isArray(transformedOperation.path) &&\n    transformedOperation.path[0] >= blockIndex + level &&\n    transformedOperation.path[0] + level > -1\n  ) {\n    const newPath = [\n      transformedOperation.path[0] + level,\n      ...transformedOperation.path.slice(1),\n    ]\n    transformedOperation.path = newPath\n  }\n  if (transformedOperation.type === 'set_selection') {\n    const currentFocus = transformedOperation.properties?.focus\n      ? {...transformedOperation.properties.focus}\n      : undefined\n    const currentAnchor = transformedOperation?.properties?.anchor\n      ? {...transformedOperation.properties.anchor}\n      : undefined\n    const newFocus = transformedOperation?.newProperties?.focus\n      ? {...transformedOperation.newProperties.focus}\n      : undefined\n    const newAnchor = transformedOperation?.newProperties?.anchor\n      ? {...transformedOperation.newProperties.anchor}\n      : undefined\n    if ((currentFocus && currentAnchor) || (newFocus && newAnchor)) {\n      const points = [currentFocus, currentAnchor, newFocus, newAnchor]\n      points.forEach((point) => {\n        if (\n          point &&\n          point.path[0] >= blockIndex + level &&\n          point.path[0] + level > -1\n        ) {\n          point.path = [point.path[0] + level, ...point.path.slice(1)]\n        }\n      })\n      if (currentFocus && currentAnchor) {\n        transformedOperation.properties = {\n          focus: currentFocus,\n          anchor: currentAnchor,\n        }\n      }\n      if (newFocus && newAnchor) {\n        transformedOperation.newProperties = {\n          focus: newFocus,\n          anchor: newAnchor,\n        }\n      }\n    }\n  }\n  //   // Assign fresh point objects (we don't want to mutate the original ones)\n  return transformedOperation\n}\n\n// Helper functions for editor.apply above\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  // Text input\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path) &&\n    op.text !== ' ' // Tokenize between words\n  ) {\n    return true\n  }\n\n  // Text deletion\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  // Don't merge\n  return false\n}\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined,\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n\nexport function withoutSaving(editor: Editor, fn: () => void): void {\n  const prev = isSaving(editor)\n  SAVING.set(editor, false)\n  fn()\n  SAVING.set(editor, prev)\n}\n\nfunction createSelectOperation(editor: Editor): SelectionOperation {\n  return {\n    type: 'set_selection',\n    properties: {...editor.selection},\n    newProperties: {...editor.selection},\n  }\n}\n\nfunction findOperationTargetBlock(\n  editor: PortableTextSlateEditor,\n  operation: Operation,\n): Descendant | undefined {\n  let block: Descendant | undefined\n  if (operation.type === 'set_selection' && editor.selection) {\n    block = editor.children[editor.selection.focus.path[0]]\n  } else if ('path' in operation) {\n    block = editor.children[operation.path[0]]\n  }\n  return block\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport {Editor, Text, Transforms, type Descendant, type Node} from 'slate'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {debugWithName} from '../internal-utils/debug'\nimport {validateValue} from '../internal-utils/validateValue'\nimport {toSlateValue, VOID_CHILD_KEY} from '../internal-utils/values'\nimport {\n  isChangingRemotely,\n  withRemoteChanges,\n} from '../internal-utils/withChanges'\nimport {withoutPatching} from '../internal-utils/withoutPatching'\nimport type {PickFromUnion} from '../type-utils'\nimport type {\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {withoutSaving} from './plugins/createWithUndoRedo'\n\nconst debug = debugWithName('sync machine')\n\ntype SyncValueEvent =\n  | {\n      type: 'patch'\n      patch: Patch\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'done syncing'\n      value: Array<PortableTextBlock> | undefined\n    }\n\nconst syncValueCallback: CallbackLogicFunction<\n  AnyEventObject,\n  SyncValueEvent,\n  {\n    context: {\n      keyGenerator: () => string\n      previousValue: Array<PortableTextBlock> | undefined\n      readOnly: boolean\n      schema: EditorSchema\n    }\n    slateEditor: PortableTextSlateEditor\n    streamBlocks: boolean\n    value: Array<PortableTextBlock> | undefined\n  }\n> = ({sendBack, input}) => {\n  updateValue({\n    context: input.context,\n    sendBack,\n    slateEditor: input.slateEditor,\n    value: input.value,\n    streamBlocks: input.streamBlocks,\n  })\n}\n\nconst syncValueLogic = fromCallback(syncValueCallback)\n\n/**\n * Sync value with the editor state\n *\n * Normally nothing here should apply, and the editor and the real world are perfectly aligned.\n *\n * Inconsistencies could happen though, so we need to check the editor state when the value changes.\n *\n * For performance reasons, it makes sense to also do the content validation here, as we already\n * iterate over the value and can validate only the new content that is actually changed.\n *\n * @internal\n */\nexport const syncMachine = setup({\n  types: {\n    context: {} as {\n      initialValueSynced: boolean\n      isProcessingLocalChanges: boolean\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n      pendingValue: Array<PortableTextBlock> | undefined\n      previousValue: Array<PortableTextBlock> | undefined\n    },\n    input: {} as {\n      keyGenerator: () => string\n      schema: EditorSchema\n      readOnly: boolean\n      slateEditor: PortableTextSlateEditor\n    },\n    events: {} as\n      | {\n          type: 'has pending patches'\n        }\n      | {\n          type: 'mutation'\n        }\n      | {\n          type: 'update value'\n          value: Array<PortableTextBlock> | undefined\n        }\n      | {\n          type: 'update readOnly'\n          readOnly: boolean\n        }\n      | SyncValueEvent,\n    emitted: {} as\n      | PickFromUnion<\n          SyncValueEvent,\n          'type',\n          'invalid value' | 'patch' | 'value changed'\n        >\n      | {type: 'done syncing initial value'},\n  },\n  actions: {\n    'assign initial value synced': assign({\n      initialValueSynced: true,\n    }),\n    'assign readOnly': assign({\n      readOnly: ({event}) => {\n        assertEvent(event, 'update readOnly')\n        return event.readOnly\n      },\n    }),\n    'assign pending value': assign({\n      pendingValue: ({event}) => {\n        assertEvent(event, 'update value')\n        return event.value\n      },\n    }),\n    'clear pending value': assign({\n      pendingValue: undefined,\n    }),\n    'assign previous value': assign({\n      previousValue: ({event}) => {\n        assertEvent(event, 'done syncing')\n        return event.value\n      },\n    }),\n    'emit done syncing initial value': emit({\n      type: 'done syncing initial value',\n    }),\n  },\n  guards: {\n    'initial value synced': ({context}) => context.initialValueSynced,\n    'is busy': ({context}) => {\n      const editable = !context.readOnly\n      const isProcessingLocalChanges = context.isProcessingLocalChanges\n      const isChanging = isChangingRemotely(context.slateEditor) ?? false\n      const isBusy = editable && (isProcessingLocalChanges || isChanging)\n\n      debug('isBusy', {isBusy, editable, isProcessingLocalChanges, isChanging})\n\n      return isBusy\n    },\n    'value changed while syncing': ({context, event}) => {\n      assertEvent(event, 'done syncing')\n      return context.pendingValue !== event.value\n    },\n    'pending value equals previous value': ({context}) => {\n      return isEqual(context.pendingValue, context.previousValue)\n    },\n  },\n  actors: {\n    'sync value': syncValueLogic,\n  },\n}).createMachine({\n  id: 'sync',\n  context: ({input}) => ({\n    initialValueSynced: false,\n    isProcessingLocalChanges: false,\n    keyGenerator: input.keyGenerator,\n    schema: input.schema,\n    readOnly: input.readOnly,\n    slateEditor: input.slateEditor,\n    pendingValue: undefined,\n    previousValue: undefined,\n  }),\n  on: {\n    'has pending patches': {\n      actions: assign({\n        isProcessingLocalChanges: true,\n      }),\n    },\n    'mutation': {\n      actions: assign({\n        isProcessingLocalChanges: false,\n      }),\n    },\n    'update readOnly': {\n      actions: ['assign readOnly'],\n    },\n  },\n  type: 'parallel',\n  states: {\n    'setting up': {\n      initial: 'syncing initial value',\n      states: {\n        'syncing initial value': {\n          entry: [\n            () => {\n              debug('entry: syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing initial value')\n            },\n          ],\n          always: {\n            guard: 'initial value synced',\n            target: 'done syncing initial value',\n          },\n        },\n        'done syncing initial value': {\n          entry: [\n            'emit done syncing initial value',\n            () => {\n              debug('entry: done syncing initial value')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: done syncing initial value')\n            },\n          ],\n          type: 'final',\n        },\n      },\n    },\n    'syncing': {\n      initial: 'idle',\n      states: {\n        idle: {\n          entry: [\n            () => {\n              debug('entry: syncing->idle')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->idle')\n            },\n          ],\n          on: {\n            'update value': [\n              {\n                guard: 'is busy',\n                target: 'busy',\n                actions: ['assign pending value'],\n              },\n              {\n                target: 'syncing',\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        busy: {\n          entry: [\n            () => {\n              debug('entry: syncing->busy')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->busy')\n            },\n          ],\n          after: {\n            1000: [\n              {\n                guard: 'is busy',\n                target: '.',\n                reenter: true,\n                actions: [\n                  () => {\n                    debug('reenter: syncing->busy')\n                  },\n                ],\n              },\n              {\n                target: 'syncing',\n              },\n            ],\n          },\n          on: {\n            'update value': [\n              {\n                actions: ['assign pending value'],\n              },\n            ],\n          },\n        },\n        syncing: {\n          entry: [\n            () => {\n              debug('entry: syncing->syncing')\n            },\n          ],\n          exit: [\n            () => {\n              debug('exit: syncing->syncing')\n            },\n          ],\n          always: {\n            guard: 'pending value equals previous value',\n            target: 'idle',\n            actions: ['clear pending value', 'assign initial value synced'],\n          },\n          invoke: {\n            src: 'sync value',\n            id: 'sync value',\n            input: ({context}) => {\n              return {\n                context: {\n                  keyGenerator: context.keyGenerator,\n                  previousValue: context.previousValue,\n                  readOnly: context.readOnly,\n                  schema: context.schema,\n                },\n                slateEditor: context.slateEditor,\n                streamBlocks: !context.initialValueSynced,\n                value: context.pendingValue,\n              }\n            },\n          },\n          on: {\n            'update value': {\n              actions: ['assign pending value'],\n            },\n            'patch': {\n              actions: [emit(({event}) => event)],\n            },\n            'invalid value': {\n              actions: [emit(({event}) => event)],\n            },\n            'value changed': {\n              actions: [emit(({event}) => event)],\n            },\n            'done syncing': [\n              {\n                guard: 'value changed while syncing',\n                actions: [\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n                target: 'syncing',\n                reenter: true,\n              },\n              {\n                target: 'idle',\n                actions: [\n                  'clear pending value',\n                  'assign previous value',\n                  'assign initial value synced',\n                ],\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n})\n\nasync function updateValue({\n  context,\n  sendBack,\n  slateEditor,\n  streamBlocks,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  slateEditor: PortableTextSlateEditor\n  streamBlocks: boolean\n  value: PortableTextBlock[] | undefined\n}) {\n  let isChanged = false\n  let isValid = true\n\n  const hadSelection = !!slateEditor.selection\n\n  // If empty value, remove everything in the editor and insert a placeholder block\n  if (!value || value.length === 0) {\n    debug('Value is empty')\n    Editor.withoutNormalizing(slateEditor, () => {\n      withoutSaving(slateEditor, () => {\n        withoutPatching(slateEditor, () => {\n          if (hadSelection) {\n            Transforms.deselect(slateEditor)\n          }\n          const childrenLength = slateEditor.children.length\n          slateEditor.children.forEach((_, index) => {\n            Transforms.removeNodes(slateEditor, {\n              at: [childrenLength - 1 - index],\n            })\n          })\n          Transforms.insertNodes(\n            slateEditor,\n            slateEditor.pteCreateTextBlock({decorators: []}),\n            {at: [0]},\n          )\n          // Add a new selection in the top of the document\n          if (hadSelection) {\n            Transforms.select(slateEditor, [0, 0])\n          }\n        })\n      })\n    })\n    isChanged = true\n  }\n  // Remove, replace or add nodes according to what is changed.\n  if (value && value.length > 0) {\n    const slateValueFromProps = toSlateValue(value, {\n      schemaTypes: context.schema,\n    })\n\n    await new Promise<void>((resolve) => {\n      Editor.withoutNormalizing(slateEditor, () => {\n        withRemoteChanges(slateEditor, () => {\n          withoutPatching(slateEditor, async () => {\n            const childrenLength = slateEditor.children.length\n\n            // Remove blocks that have become superfluous\n            if (slateValueFromProps.length < childrenLength) {\n              for (\n                let i = childrenLength - 1;\n                i > slateValueFromProps.length - 1;\n                i--\n              ) {\n                Transforms.removeNodes(slateEditor, {\n                  at: [i],\n                })\n              }\n              isChanged = true\n            }\n\n            for await (const [currentBlock, currentBlockIndex] of getBlocks({\n              slateValue: slateValueFromProps,\n              streamBlocks,\n            })) {\n              // Go through all of the blocks and see if they need to be updated\n              const {blockChanged, blockValid} = syncBlock({\n                context,\n                sendBack,\n                block: currentBlock,\n                index: currentBlockIndex,\n                slateEditor,\n                value,\n              })\n              isChanged = blockChanged || isChanged\n              isValid = isValid && blockValid\n            }\n\n            resolve()\n          })\n        })\n      })\n    })\n  }\n\n  if (!isValid) {\n    debug('Invalid value, returning')\n    sendBack({type: 'done syncing', value})\n    return\n  }\n\n  if (isChanged) {\n    debug('Server value changed, syncing editor')\n    try {\n      slateEditor.onChange()\n    } catch (err) {\n      console.error(err)\n      sendBack({\n        type: 'invalid value',\n        resolution: null,\n        value,\n      })\n      sendBack({type: 'done syncing', value})\n      return\n    }\n    if (hadSelection && !slateEditor.selection) {\n      Transforms.select(slateEditor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n      slateEditor.onChange()\n    }\n    sendBack({type: 'value changed', value})\n  } else {\n    debug('Server value and editor value is equal, no need to sync.')\n  }\n\n  sendBack({type: 'done syncing', value})\n}\n\nasync function* getBlocks({\n  slateValue,\n  streamBlocks,\n}: {\n  slateValue: Array<Descendant>\n  streamBlocks: boolean\n}) {\n  let index = 0\n  for await (const block of slateValue) {\n    if (streamBlocks && index % 10 === 0) {\n      await new Promise<void>((resolve) => setTimeout(resolve, 0))\n    }\n    yield [block, index] as const\n    index++\n  }\n}\n\nfunction syncBlock({\n  context,\n  sendBack,\n  block,\n  index,\n  slateEditor,\n  value,\n}: {\n  context: {\n    keyGenerator: () => string\n    previousValue: Array<PortableTextBlock> | undefined\n    readOnly: boolean\n    schema: EditorSchema\n  }\n  sendBack: (event: SyncValueEvent) => void\n  block: Descendant\n  index: number\n  slateEditor: PortableTextSlateEditor\n  value: Array<PortableTextBlock>\n}) {\n  let blockChanged = false\n  let blockValid = true\n  const currentBlock = block\n  const currentBlockIndex = index\n  const oldBlock = slateEditor.children[currentBlockIndex]\n  const hasChanges = oldBlock && !isEqual(currentBlock, oldBlock)\n\n  Editor.withoutNormalizing(slateEditor, () => {\n    withRemoteChanges(slateEditor, () => {\n      withoutPatching(slateEditor, () => {\n        if (hasChanges && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          // Resolve validations that can be resolved automatically, without involving the user (but only if the value was changed)\n          if (\n            !validation.valid &&\n            validation.resolution?.autoResolve &&\n            validation.resolution?.patches.length > 0\n          ) {\n            // Only apply auto resolution if the value has been populated before and is different from the last one.\n            if (\n              !context.readOnly &&\n              context.previousValue &&\n              context.previousValue !== value\n            ) {\n              // Give a console warning about the fact that it did an auto resolution\n              console.warn(\n                `${validation.resolution.action} for block with _key '${validationValue[0]._key}'. ${validation.resolution?.description}`,\n              )\n              validation.resolution.patches.forEach((patch) => {\n                sendBack({type: 'patch', patch})\n              })\n            }\n          }\n          if (validation.valid || validation.resolution?.autoResolve) {\n            if (oldBlock._key === currentBlock._key) {\n              if (debug.enabled) debug('Updating block', oldBlock, currentBlock)\n              _updateBlock(\n                slateEditor,\n                currentBlock,\n                oldBlock,\n                currentBlockIndex,\n              )\n            } else {\n              if (debug.enabled)\n                debug('Replacing block', oldBlock, currentBlock)\n              _replaceBlock(slateEditor, currentBlock, currentBlockIndex)\n            }\n            blockChanged = true\n          } else {\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n\n        if (!oldBlock && blockValid) {\n          const validationValue = [value[currentBlockIndex]]\n          const validation = validateValue(\n            validationValue,\n            context.schema,\n            context.keyGenerator,\n          )\n          if (debug.enabled)\n            debug(\n              'Validating and inserting new block in the end of the value',\n              currentBlock,\n            )\n          if (validation.valid || validation.resolution?.autoResolve) {\n            Transforms.insertNodes(slateEditor, currentBlock, {\n              at: [currentBlockIndex],\n            })\n          } else {\n            debug('Invalid', validation)\n            sendBack({\n              type: 'invalid value',\n              resolution: validation.resolution,\n              value,\n            })\n            blockValid = false\n          }\n        }\n      })\n    })\n  })\n\n  return {blockChanged, blockValid}\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _replaceBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // While replacing the block and the current selection focus is on the replaced block,\n  // temporarily deselect the editor then optimistically try to restore the selection afterwards.\n  const currentSelection = slateEditor.selection\n  const selectionFocusOnBlock =\n    currentSelection && currentSelection.focus.path[0] === currentBlockIndex\n  if (selectionFocusOnBlock) {\n    Transforms.deselect(slateEditor)\n  }\n  Transforms.removeNodes(slateEditor, {at: [currentBlockIndex]})\n  Transforms.insertNodes(slateEditor, currentBlock, {at: [currentBlockIndex]})\n  slateEditor.onChange()\n  if (selectionFocusOnBlock) {\n    Transforms.select(slateEditor, currentSelection)\n  }\n}\n\n/**\n * This code is moved out of the above algorithm to keep complexity down.\n * @internal\n */\nfunction _updateBlock(\n  slateEditor: PortableTextSlateEditor,\n  currentBlock: Descendant,\n  oldBlock: Descendant,\n  currentBlockIndex: number,\n) {\n  // Update the root props on the block\n  Transforms.setNodes(slateEditor, currentBlock as Partial<Node>, {\n    at: [currentBlockIndex],\n  })\n  // Text block's need to have their children updated as well (setNode does not target a node's children)\n  if (\n    slateEditor.isTextBlock(currentBlock) &&\n    slateEditor.isTextBlock(oldBlock)\n  ) {\n    const oldBlockChildrenLength = oldBlock.children.length\n    if (currentBlock.children.length < oldBlockChildrenLength) {\n      // Remove any children that have become superfluous\n      Array.from(\n        Array(oldBlockChildrenLength - currentBlock.children.length),\n      ).forEach((_, index) => {\n        const childIndex = oldBlockChildrenLength - 1 - index\n        if (childIndex > 0) {\n          debug('Removing child')\n          Transforms.removeNodes(slateEditor, {\n            at: [currentBlockIndex, childIndex],\n          })\n        }\n      })\n    }\n    currentBlock.children.forEach(\n      (currentBlockChild, currentBlockChildIndex) => {\n        const oldBlockChild = oldBlock.children[currentBlockChildIndex]\n        const isChildChanged = !isEqual(currentBlockChild, oldBlockChild)\n        const isTextChanged = !isEqual(\n          currentBlockChild.text,\n          oldBlockChild?.text,\n        )\n        const path = [currentBlockIndex, currentBlockChildIndex]\n        if (isChildChanged) {\n          // Update if this is the same child\n          if (currentBlockChild._key === oldBlockChild?._key) {\n            debug('Updating changed child', currentBlockChild, oldBlockChild)\n            Transforms.setNodes(\n              slateEditor,\n              currentBlockChild as Partial<Node>,\n              {\n                at: path,\n              },\n            )\n            const isSpanNode =\n              Text.isText(currentBlockChild) &&\n              currentBlockChild._type === 'span' &&\n              Text.isText(oldBlockChild) &&\n              oldBlockChild._type === 'span'\n            if (isSpanNode && isTextChanged) {\n              Transforms.delete(slateEditor, {\n                at: {\n                  focus: {path, offset: 0},\n                  anchor: {path, offset: oldBlockChild.text.length},\n                },\n              })\n              Transforms.insertText(slateEditor, currentBlockChild.text, {\n                at: path,\n              })\n              slateEditor.onChange()\n            } else if (!isSpanNode) {\n              // If it's a inline block, also update the void text node key\n              debug('Updating changed inline object child', currentBlockChild)\n              Transforms.setNodes(\n                slateEditor,\n                {_key: VOID_CHILD_KEY},\n                {\n                  at: [...path, 0],\n                  voids: true,\n                },\n              )\n            }\n            // Replace the child if _key's are different\n          } else if (oldBlockChild) {\n            debug('Replacing child', currentBlockChild)\n            Transforms.removeNodes(slateEditor, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n            // Insert it if it didn't exist before\n          } else if (!oldBlockChild) {\n            debug('Inserting new child', currentBlockChild)\n            Transforms.insertNodes(slateEditor, currentBlockChild as Node, {\n              at: [currentBlockIndex, currentBlockChildIndex],\n            })\n            slateEditor.onChange()\n          }\n        }\n      },\n    )\n  }\n}\n","import {useActorRef, useSelector} from '@xstate/react'\nimport {useEffect} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {mutationMachine} from '../mutation-machine'\nimport {syncMachine} from '../sync-machine'\n\nconst debug = debugWithName('component:PortableTextEditor:Synchronizer')\n\n/**\n * @internal\n */\nexport interface SynchronizerProps {\n  editorActor: EditorActor\n  slateEditor: PortableTextSlateEditor\n}\n\n/**\n * Synchronizes the server value with the editor, and provides various contexts for the editor state.\n * @internal\n */\nexport function Synchronizer(props: SynchronizerProps) {\n  const {editorActor, slateEditor} = props\n\n  const value = useSelector(props.editorActor, (s) => s.context.value)\n  const readOnly = useSelector(props.editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const syncActorRef = useActorRef(syncMachine, {\n    input: {\n      keyGenerator: props.editorActor.getSnapshot().context.keyGenerator,\n      readOnly: props.editorActor\n        .getSnapshot()\n        .matches({'edit mode': 'read only'}),\n      schema: props.editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n  const mutationActorRef = useActorRef(mutationMachine, {\n    input: {\n      schema: editorActor.getSnapshot().context.schema,\n      slateEditor,\n    },\n  })\n\n  useEffect(() => {\n    const subscription = mutationActorRef.on('*', (event) => {\n      if (event.type === 'has pending patches') {\n        syncActorRef.send({type: 'has pending patches'})\n      }\n      if (event.type === 'mutation') {\n        syncActorRef.send({type: 'mutation'})\n        editorActor.send({\n          type: 'mutation',\n          patches: event.patches,\n          snapshot: event.snapshot,\n          value: event.snapshot,\n        })\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [mutationActorRef, syncActorRef, editorActor])\n\n  useEffect(() => {\n    const subscription = syncActorRef.on('*', (event) => {\n      switch (event.type) {\n        case 'invalid value':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.invalid value',\n          })\n          break\n        case 'value changed':\n          props.editorActor.send({\n            ...event,\n            type: 'notify.value changed',\n          })\n          break\n        case 'patch':\n          props.editorActor.send({\n            ...event,\n            type: 'internal.patch',\n            value: fromSlateValue(\n              slateEditor.children,\n              props.editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(slateEditor),\n            ),\n          })\n          break\n\n        default:\n          props.editorActor.send(event)\n      }\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, slateEditor, syncActorRef])\n\n  useEffect(() => {\n    syncActorRef.send({type: 'update readOnly', readOnly})\n  }, [syncActorRef, readOnly])\n\n  useEffect(() => {\n    debug('Value from props changed, syncing new value')\n    syncActorRef.send({type: 'update value', value})\n  }, [syncActorRef, value])\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to patch events')\n    const sub = editorActor.on('internal.patch', (event) => {\n      mutationActorRef.send({...event, type: 'patch'})\n    })\n    return () => {\n      debug('Unsubscribing to patch events')\n      sub.unsubscribe()\n    }\n  }, [editorActor, mutationActorRef, slateEditor])\n\n  return null\n}\n\nSynchronizer.displayName = 'Synchronizer'\n","import {defineConverter} from './converter.types'\n\nexport const converterJson = defineConverter({\n  mimeType: 'application/json',\n  serialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/json',\n        originEvent: event.originEvent,\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const serializationEvent = portableTextConverter.serialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...serializationEvent,\n      mimeType: 'application/json',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const portableTextConverter = snapshot.context.converters.find(\n      (converter) => converter.mimeType === 'application/x-portable-text',\n    )\n\n    if (!portableTextConverter) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/json',\n        reason: 'No application/x-portable-text Converter found',\n      }\n    }\n\n    const deserializationEvent = portableTextConverter.deserialize({\n      snapshot,\n      event,\n    })\n\n    return {\n      ...deserializationEvent,\n      mimeType: 'application/json',\n    }\n  },\n})\n","import {parseBlock} from '../internal-utils/parse-blocks'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterPortableText = defineConverter({\n  mimeType: 'application/x-portable-text',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    if (blocks.length === 0) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks serialized',\n        originEvent: event.originEvent,\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: JSON.stringify(blocks),\n      mimeType: 'application/x-portable-text',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = JSON.parse(event.data)\n\n    if (!Array.isArray(blocks)) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'Data is not an array',\n      }\n    }\n\n    const parsedBlocks = blocks.flatMap((block) => {\n      const parsedBlock = parseBlock({\n        context: snapshot.context,\n        block,\n        options: {\n          /**\n           * If we are dragging internally then we would like to keep the\n           * dropped portable text as is.\n           */\n          refreshKeys: !snapshot.beta.hasTag?.('dragging internally'),\n        },\n      })\n      return parsedBlock ? [parsedBlock] : []\n    })\n\n    if (parsedBlocks.length === 0 && blocks.length > 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'application/x-portable-text',\n        reason: 'No blocks were parsed',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: parsedBlocks,\n      mimeType: 'application/x-portable-text',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {toHTML} from '@portabletext/to-html'\nimport type {PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextHtml = defineConverter({\n  mimeType: 'text/html',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    const html = toHTML(blocks, {\n      onMissingComponent: false,\n      components: {\n        unknownType: ({children}) =>\n          children !== undefined ? `${children}` : '',\n      },\n    })\n\n    if (html === '') {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/html',\n        originEvent: event.originEvent,\n        reason: 'Serialized HTML is empty',\n      }\n    }\n\n    return {\n      type: 'serialization.success',\n      data: html,\n      mimeType: 'text/html',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const blocks = htmlToBlocks(\n      event.data,\n      snapshot.context.schema.portableText,\n      {\n        keyGenerator: snapshot.context.keyGenerator,\n        unstable_whitespaceOnPasteMode:\n          snapshot.context.schema.block.options.unstable_whitespaceOnPasteMode,\n      },\n    ) as Array<PortableTextBlock>\n\n    if (blocks.length === 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'text/html',\n        reason: 'No blocks deserialized',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/html',\n    }\n  },\n})\n","import {htmlToBlocks} from '@portabletext/block-tools'\nimport {isPortableTextTextBlock, type PortableTextBlock} from '@sanity/types'\nimport {sliceBlocks} from '../utils'\nimport {defineConverter} from './converter.types'\n\nexport const converterTextPlain = defineConverter({\n  mimeType: 'text/plain',\n  serialize: ({snapshot, event}) => {\n    const selection =\n      snapshot.beta.internalDrag?.origin.selection ?? snapshot.context.selection\n\n    if (!selection) {\n      return {\n        type: 'serialization.failure',\n        mimeType: 'text/plain',\n        originEvent: event.originEvent,\n        reason: 'No selection',\n      }\n    }\n\n    const blocks = sliceBlocks({\n      blocks: snapshot.context.value,\n      selection,\n    })\n\n    const data = blocks\n      .map((block) => {\n        if (isPortableTextTextBlock(block)) {\n          return block.children\n            .map((child) => {\n              if (child._type === snapshot.context.schema.span.name) {\n                return child.text\n              }\n\n              return snapshot.beta.hasTag('dragging internally')\n                ? `[${\n                    snapshot.context.schema.inlineObjects.find(\n                      (inlineObjectType) =>\n                        inlineObjectType.name === child._type,\n                    )?.title ?? 'Object'\n                  }]`\n                : ''\n            })\n            .join('')\n        }\n\n        return snapshot.beta.hasTag('dragging internally')\n          ? `[${\n              snapshot.context.schema.blockObjects.find(\n                (blockObjectType) => blockObjectType.name === block._type,\n              )?.title ?? 'Object'\n            }]`\n          : ''\n      })\n      .filter((block) => block !== '')\n      .join('\\n\\n')\n\n    return {\n      type: 'serialization.success',\n      data,\n      mimeType: 'text/plain',\n      originEvent: event.originEvent,\n    }\n  },\n  deserialize: ({snapshot, event}) => {\n    const html = escapeHtml(event.data)\n      .split(/\\n{2,}/)\n      .map((line) =>\n        line ? `<p>${line.replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>')}</p>` : '<p></p>',\n      )\n      .join('')\n\n    const textToHtml = `<html><body>${html}</body></html>`\n\n    const blocks = htmlToBlocks(\n      textToHtml,\n      snapshot.context.schema.portableText,\n      {\n        keyGenerator: snapshot.context.keyGenerator,\n      },\n    ) as Array<PortableTextBlock>\n\n    if (blocks.length === 0) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: 'text/plain',\n        reason: 'No blocks deserialized',\n      }\n    }\n\n    return {\n      type: 'deserialization.success',\n      data: blocks,\n      mimeType: 'text/plain',\n    }\n  },\n})\n\nconst entityMap: Record<string, string> = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;',\n}\n\nfunction escapeHtml(str: string) {\n  return String(str).replace(/[&<>\"'`=/]/g, (s: string) => entityMap[s])\n}\n","import {converterJson} from './converter.json'\nimport {converterPortableText} from './converter.portable-text'\nimport {converterTextHtml} from './converter.text-html'\nimport {converterTextPlain} from './converter.text-plain'\n\nexport const coreConverters = [\n  converterJson,\n  converterPortableText,\n  converterTextHtml,\n  converterTextPlain,\n]\n","import {\n  diffMatchPatch,\n  insert,\n  set,\n  setIfMissing,\n  unset,\n  type InsertPosition,\n  type Patch,\n} from '@portabletext/patches'\nimport type {Path, PortableTextSpan, PortableTextTextBlock} from '@sanity/types'\nimport {get, isUndefined, omitBy} from 'lodash'\nimport {\n  Text,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport type {PatchFunctions} from '../editor/plugins/createWithPatches'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {fromSlateValue} from './values'\n\nconst debug = debugWithName('operationToPatches')\n\nexport function createOperationToPatches(\n  types: PortableTextMemberSchemaTypes,\n): PatchFunctions {\n  const textBlockName = types.block.name\n  function insertTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    if (debug.enabled) {\n      debug('Operation', JSON.stringify(operation, null, 2))\n    }\n    const block =\n      editor.isTextBlock(editor.children[operation.path[0]]) &&\n      editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const textChild =\n      editor.isTextBlock(block) &&\n      editor.isTextSpan(block.children[operation.path[1]]) &&\n      (block.children[operation.path[1]] as PortableTextSpan)\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const prevBlock = beforeValue[operation.path[0]]\n    const prevChild =\n      editor.isTextBlock(prevBlock) && prevBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevChild) ? prevChild.text : ''\n    const patch = diffMatchPatch(prevText, textChild.text, path)\n    return patch.value.length ? [patch] : []\n  }\n\n  function removeTextPatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = editor && editor.children[operation.path[0]]\n    if (!block) {\n      throw new Error('Could not find block')\n    }\n    const child =\n      (editor.isTextBlock(block) && block.children[operation.path[1]]) ||\n      undefined\n    const textChild: PortableTextSpan | undefined = editor.isTextSpan(child)\n      ? child\n      : undefined\n    if (child && !textChild) {\n      throw new Error('Expected span')\n    }\n    if (!textChild) {\n      throw new Error('Could not find child')\n    }\n    const path: Path = [\n      {_key: block._key},\n      'children',\n      {_key: textChild._key},\n      'text',\n    ]\n    const beforeBlock = beforeValue[operation.path[0]]\n    const prevTextChild =\n      editor.isTextBlock(beforeBlock) && beforeBlock.children[operation.path[1]]\n    const prevText = editor.isTextSpan(prevTextChild) && prevTextChild.text\n    const patch = diffMatchPatch(prevText || '', textChild.text, path)\n    return patch.value ? [patch] : []\n  }\n\n  function setNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n  ) {\n    if (operation.path.length === 1) {\n      const block = editor.children[operation.path[0]]\n      if (typeof block._key !== 'string') {\n        throw new Error('Expected block to have a _key')\n      }\n      const setNode = omitBy(\n        {...editor.children[operation.path[0]], ...operation.newProperties},\n        isUndefined,\n      ) as unknown as Descendant\n      return [\n        set(fromSlateValue([setNode], textBlockName)[0], [{_key: block._key}]),\n      ]\n    } else if (operation.path.length === 2) {\n      const block = editor.children[operation.path[0]]\n      if (editor.isTextBlock(block)) {\n        const child = block.children[operation.path[1]]\n        if (child) {\n          const blockKey = block._key\n          const childKey = child._key\n          const patches: Patch[] = []\n          const keys = Object.keys(operation.newProperties)\n          keys.forEach((keyName) => {\n            // Special case for setting _key on a child. We have to target it by index and not the _key.\n            if (keys.length === 1 && keyName === '_key') {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  block.children.indexOf(child),\n                  keyName,\n                ]),\n              )\n            } else {\n              const val = get(operation.newProperties, keyName)\n              patches.push(\n                set(val, [\n                  {_key: blockKey},\n                  'children',\n                  {_key: childKey},\n                  keyName,\n                ]),\n              )\n            }\n          })\n          return patches\n        }\n        throw new Error('Could not find a valid child')\n      }\n      throw new Error('Could not find a valid block')\n    } else {\n      throw new Error(\n        `Unexpected path encountered: ${JSON.stringify(operation.path)}`,\n      )\n    }\n  }\n\n  function insertNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    beforeValue: Descendant[],\n  ): Patch[] {\n    const block = beforeValue[operation.path[0]]\n    const isTextBlock = editor.isTextBlock(block)\n    if (operation.path.length === 1) {\n      const position = operation.path[0] === 0 ? 'before' : 'after'\n      const beforeBlock = beforeValue[operation.path[0] - 1]\n      const targetKey =\n        operation.path[0] === 0 ? block?._key : beforeBlock?._key\n      if (targetKey) {\n        return [\n          insert(\n            [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n            position,\n            [{_key: targetKey}],\n          ),\n        ]\n      }\n      return [\n        setIfMissing(beforeValue, []),\n        insert(\n          [fromSlateValue([operation.node as Descendant], textBlockName)[0]],\n          'before',\n          [operation.path[0]],\n        ),\n      ]\n    } else if (\n      isTextBlock &&\n      operation.path.length === 2 &&\n      editor.children[operation.path[0]]\n    ) {\n      const position =\n        block.children.length === 0 || !block.children[operation.path[1] - 1]\n          ? 'before'\n          : 'after'\n      const node = {...operation.node} as Descendant\n      if (!node._type && Text.isText(node)) {\n        node._type = 'span'\n        node.marks = []\n      }\n      const blk = fromSlateValue(\n        [\n          {\n            _key: 'bogus',\n            _type: textBlockName,\n            children: [node],\n          },\n        ],\n        textBlockName,\n      )[0] as PortableTextTextBlock\n      const child = blk.children[0]\n      return [\n        insert([child], position, [\n          {_key: block._key},\n          'children',\n          block.children.length <= 1 || !block.children[operation.path[1] - 1]\n            ? 0\n            : {_key: block.children[operation.path[1] - 1]._key},\n        ]),\n      ]\n    }\n    debug(\n      'Something was inserted into a void block. Not producing editor patches.',\n    )\n    return []\n  }\n\n  function splitNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const splitBlock = editor.children[operation.path[0]]\n    if (!editor.isTextBlock(splitBlock)) {\n      throw new Error(\n        `Block with path ${JSON.stringify(\n          operation.path[0],\n        )} is not a text block and can't be split`,\n      )\n    }\n    if (operation.path.length === 1) {\n      const oldBlock = beforeValue[operation.path[0]]\n      if (editor.isTextBlock(oldBlock)) {\n        const targetValue = fromSlateValue(\n          [editor.children[operation.path[0] + 1]],\n          textBlockName,\n        )[0]\n        if (targetValue) {\n          patches.push(\n            insert([targetValue], 'after', [{_key: splitBlock._key}]),\n          )\n          const spansToUnset = oldBlock.children.slice(operation.position)\n          spansToUnset.forEach((span) => {\n            const path = [{_key: oldBlock._key}, 'children', {_key: span._key}]\n            patches.push(unset(path))\n          })\n        }\n      }\n      return patches\n    }\n    if (operation.path.length === 2) {\n      const splitSpan = splitBlock.children[operation.path[1]]\n      if (editor.isTextSpan(splitSpan)) {\n        const targetSpans = (\n          fromSlateValue(\n            [\n              {\n                ...splitBlock,\n                children: splitBlock.children.slice(\n                  operation.path[1] + 1,\n                  operation.path[1] + 2,\n                ),\n              } as Descendant,\n            ],\n            textBlockName,\n          )[0] as PortableTextTextBlock\n        ).children\n\n        patches.push(\n          insert(targetSpans, 'after', [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n          ]),\n        )\n        patches.push(\n          set(splitSpan.text, [\n            {_key: splitBlock._key},\n            'children',\n            {_key: splitSpan._key},\n            'text',\n          ]),\n        )\n      }\n      return patches\n    }\n    return patches\n  }\n\n  function removeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const block = beforeValue[operation.path[0]]\n    if (operation.path.length === 1) {\n      // Remove a single block\n      if (block && block._key) {\n        return [unset([{_key: block._key}])]\n      }\n      throw new Error('Block not found')\n    } else if (editor.isTextBlock(block) && operation.path.length === 2) {\n      const spanToRemove = block.children[operation.path[1]]\n\n      if (spanToRemove) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === operation.node._key,\n        )\n\n        if (spansMatchingKey.length > 1) {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${operation.node._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n          return []\n        }\n\n        return [\n          unset([{_key: block._key}, 'children', {_key: spanToRemove._key}]),\n        ]\n      }\n      debug('Span not found in editor trying to remove node')\n      return []\n    } else {\n      debug('Not creating patch inside object block')\n      return []\n    }\n  }\n\n  function mergeNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n\n    const block = beforeValue[operation.path[0]]\n    const updatedBlock = editor.children[operation.path[0]]\n\n    if (operation.path.length === 1) {\n      if (block?._key) {\n        const newBlock = fromSlateValue(\n          [editor.children[operation.path[0] - 1]],\n          textBlockName,\n        )[0]\n        patches.push(set(newBlock, [{_key: newBlock._key}]))\n        patches.push(unset([{_key: block._key}]))\n      } else {\n        throw new Error('Target key not found!')\n      }\n    } else if (\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(updatedBlock) &&\n      operation.path.length === 2\n    ) {\n      const updatedSpan =\n        updatedBlock.children[operation.path[1] - 1] &&\n        editor.isTextSpan(updatedBlock.children[operation.path[1] - 1])\n          ? updatedBlock.children[operation.path[1] - 1]\n          : undefined\n      const removedSpan =\n        block.children[operation.path[1]] &&\n        editor.isTextSpan(block.children[operation.path[1]])\n          ? block.children[operation.path[1]]\n          : undefined\n\n      if (updatedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === updatedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            set(updatedSpan.text, [\n              {_key: block._key},\n              'children',\n              {_key: updatedSpan._key},\n              'text',\n            ]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${updatedSpan._key}. It's ambiguous which one to update.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n\n      if (removedSpan) {\n        const spansMatchingKey = block.children.filter(\n          (span) => span._key === removedSpan._key,\n        )\n\n        if (spansMatchingKey.length === 1) {\n          patches.push(\n            unset([{_key: block._key}, 'children', {_key: removedSpan._key}]),\n          )\n        } else {\n          console.warn(\n            `Multiple spans have \\`_key\\` ${removedSpan._key}. It's ambiguous which one to remove.`,\n            JSON.stringify(block, null, 2),\n          )\n        }\n      }\n    } else {\n      debug(\"Void nodes can't be merged, not creating any patches\")\n    }\n    return patches\n  }\n\n  function moveNodePatch(\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    beforeValue: Descendant[],\n  ) {\n    const patches: Patch[] = []\n    const block = beforeValue[operation.path[0]]\n    const targetBlock = beforeValue[operation.newPath[0]]\n\n    if (!targetBlock) {\n      return patches\n    }\n\n    if (operation.path.length === 1) {\n      const position: InsertPosition =\n        operation.path[0] > operation.newPath[0] ? 'before' : 'after'\n      patches.push(unset([{_key: block._key}]))\n      patches.push(\n        insert([fromSlateValue([block], textBlockName)[0]], position, [\n          {_key: targetBlock._key},\n        ]),\n      )\n    } else if (\n      operation.path.length === 2 &&\n      editor.isTextBlock(block) &&\n      editor.isTextBlock(targetBlock)\n    ) {\n      const child = block.children[operation.path[1]]\n      const targetChild = targetBlock.children[operation.newPath[1]]\n      const position =\n        operation.newPath[1] === targetBlock.children.length\n          ? 'after'\n          : 'before'\n      const childToInsert = (\n        fromSlateValue([block], textBlockName)[0] as PortableTextTextBlock\n      ).children[operation.path[1]]\n      patches.push(unset([{_key: block._key}, 'children', {_key: child._key}]))\n      patches.push(\n        insert([childToInsert], position, [\n          {_key: targetBlock._key},\n          'children',\n          {_key: targetChild._key},\n        ]),\n      )\n    }\n    return patches\n  }\n\n  return {\n    insertNodePatch,\n    insertTextPatch,\n    mergeNodePatch,\n    moveNodePatch,\n    removeNodePatch,\n    removeTextPatch,\n    setNodePatch,\n    splitNodePatch,\n  }\n}\n","import {isEqual} from 'lodash'\nimport {Editor, insertText, Node, Path, Transforms} from 'slate'\nimport type {SlateTextBlock, VoidElement} from '../types/slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBreakActionImplementation: BehaviorActionImplementation<\n  'insert.break'\n> = ({context, action}) => {\n  const keyGenerator = context.keyGenerator\n  const schema = context.schema\n  const editor = action.editor\n\n  if (!editor.selection) {\n    return\n  }\n\n  const anchorBlockPath = editor.selection.anchor.path.slice(0, 1)\n  const focusBlockPath = editor.selection.focus.path.slice(0, 1)\n  const focusBlock = Node.descendant(editor, focusBlockPath) as\n    | SlateTextBlock\n    | VoidElement\n\n  if (editor.isTextBlock(focusBlock)) {\n    const selectionAcrossBlocks = anchorBlockPath[0] !== focusBlockPath[0]\n\n    if (!selectionAcrossBlocks) {\n      Transforms.splitNodes(editor, {\n        at: editor.selection,\n        always: true,\n      })\n\n      const [nextBlock, nextBlockPath] = Editor.node(\n        editor,\n        Path.next(focusBlockPath),\n        {depth: 1},\n      )\n\n      const nextChild = Node.child(nextBlock, 0)\n      const firstChildIsInlineObject = !editor.isTextSpan(nextChild)\n\n      if (firstChildIsInlineObject) {\n        // If the first child in the next block is an inline object then we\n        // add an empty span right before it to a place to put the cursor.\n        // This is a Slate constraint that we have to adhere to.\n        Transforms.insertNodes(\n          editor,\n          {\n            _key: context.keyGenerator(),\n            _type: 'span',\n            text: '',\n            marks: [],\n          },\n          {\n            at: [nextBlockPath[0], 0],\n          },\n        )\n      }\n\n      Transforms.setSelection(editor, {\n        anchor: {path: [...nextBlockPath, 0], offset: 0},\n        focus: {path: [...nextBlockPath, 0], offset: 0},\n      })\n\n      /**\n       * Assign new keys to markDefs that are now split across two blocks\n       */\n      if (\n        editor.isTextBlock(nextBlock) &&\n        nextBlock.markDefs &&\n        nextBlock.markDefs.length > 0\n      ) {\n        const newMarkDefKeys = new Map<string, string>()\n\n        const prevNodeSpans = Array.from(Node.children(editor, focusBlockPath))\n          .map((entry) => entry[0])\n          .filter((node) => editor.isTextSpan(node))\n        const children = Node.children(editor, nextBlockPath)\n\n        for (const [child, childPath] of children) {\n          if (!editor.isTextSpan(child)) {\n            continue\n          }\n\n          const marks = child.marks ?? []\n\n          // Go through the marks of the span and figure out if any of\n          // them refer to annotations that are also present in the\n          // previous block\n          for (const mark of marks) {\n            if (\n              schema.decorators.some((decorator) => decorator.value === mark)\n            ) {\n              continue\n            }\n\n            if (\n              prevNodeSpans.some((prevNodeSpan) =>\n                prevNodeSpan.marks?.includes(mark),\n              ) &&\n              !newMarkDefKeys.has(mark)\n            ) {\n              // This annotation is both present in the previous block\n              // and this block, so let's assign a new key to it\n              newMarkDefKeys.set(mark, keyGenerator())\n            }\n          }\n\n          const newMarks = marks.map((mark) => newMarkDefKeys.get(mark) ?? mark)\n\n          // No need to update the marks if they are the same\n          if (!isEqual(marks, newMarks)) {\n            Transforms.setNodes(\n              editor,\n              {marks: newMarks},\n              {\n                at: childPath,\n              },\n            )\n          }\n        }\n\n        // Time to update all the markDefs that need a new key because\n        // they've been split across blocks\n        const newMarkDefs = nextBlock.markDefs.map((markDef) => ({\n          ...markDef,\n          _key: newMarkDefKeys.get(markDef._key) ?? markDef._key,\n        }))\n\n        // No need to update the markDefs if they are the same\n        if (!isEqual(nextBlock.markDefs, newMarkDefs)) {\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {\n              at: nextBlockPath,\n              match: (node) => editor.isTextBlock(node),\n            },\n          )\n        }\n      }\n      return\n    }\n  }\n\n  Transforms.splitNodes(editor, {always: true})\n}\n\nexport const insertSoftBreakActionImplementation: BehaviorActionImplementation<\n  'insert.soft break'\n> = ({action}) => {\n  insertText(action.editor, '\\n')\n}\n","function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction isPortableTextSpan(node) {\n  return node._type === \"span\" && \"text\" in node && typeof node.text == \"string\" && (typeof node.marks > \"u\" || Array.isArray(node.marks) && node.marks.every(mark => typeof mark == \"string\"));\n}\nfunction isPortableTextBlock(node) {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type == \"string\" &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== \"@\" && (\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    !(\"markDefs\" in node) || !node.markDefs || Array.isArray(node.markDefs) &&\n    // Every mark definition needs to have an `_key` to be mappable in child spans\n    node.markDefs.every(def => typeof def._key == \"string\")) &&\n    // `children` is required and needs to be an array\n    \"children\" in node && Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every(child => typeof child == \"object\" && \"_type\" in child)\n  );\n}\nfunction isPortableTextListItemBlock(block) {\n  return isPortableTextBlock(block) && \"listItem\" in block && typeof block.listItem == \"string\" && (typeof block.level > \"u\" || typeof block.level == \"number\");\n}\nfunction isPortableTextToolkitList(block) {\n  return block._type === \"@list\";\n}\nfunction isPortableTextToolkitSpan(span) {\n  return span._type === \"@span\";\n}\nfunction isPortableTextToolkitTextNode(node) {\n  return node._type === \"@text\";\n}\nconst knownDecorators = [\"strong\", \"em\", \"code\", \"underline\", \"strike-through\"];\nfunction sortMarksByOccurences(span, index, blockChildren) {\n  if (!isPortableTextSpan(span) || !span.marks) return [];\n  if (!span.marks.length) return [];\n  const marks = span.marks.slice(),\n    occurences = {};\n  return marks.forEach(mark => {\n    occurences[mark] = 1;\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex];\n      if (sibling && isPortableTextSpan(sibling) && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) occurences[mark]++;else break;\n    }\n  }), marks.sort((markA, markB) => sortMarks(occurences, markA, markB));\n}\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA],\n    bOccurences = occurences[markB];\n  if (aOccurences !== bOccurences) return bOccurences - aOccurences;\n  const aKnownPos = knownDecorators.indexOf(markA),\n    bKnownPos = knownDecorators.indexOf(markB);\n  return aKnownPos !== bKnownPos ? aKnownPos - bKnownPos : markA.localeCompare(markB);\n}\nfunction buildMarksTree(block) {\n  var _a, _b;\n  const {\n      children\n    } = block,\n    markDefs = (_a = block.markDefs) != null ? _a : [];\n  if (!children || !children.length) return [];\n  const sortedMarks = children.map(sortMarksByOccurences),\n    rootNode = {\n      _type: \"@span\",\n      children: [],\n      markType: \"<unknown>\"\n    };\n  let nodeStack = [rootNode];\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i];\n    if (!span) continue;\n    const marksNeeded = sortedMarks[i] || [];\n    let pos = 1;\n    if (nodeStack.length > 1) for (pos; pos < nodeStack.length; pos++) {\n      const mark = ((_b = nodeStack[pos]) == null ? void 0 : _b.markKey) || \"\",\n        index = marksNeeded.indexOf(mark);\n      if (index === -1) break;\n      marksNeeded.splice(index, 1);\n    }\n    nodeStack = nodeStack.slice(0, pos);\n    let currentNode = nodeStack[nodeStack.length - 1];\n    if (currentNode) {\n      for (const markKey of marksNeeded) {\n        const markDef = markDefs == null ? void 0 : markDefs.find(def => def._key === markKey),\n          markType = markDef ? markDef._type : markKey,\n          node = {\n            _type: \"@span\",\n            _key: span._key,\n            children: [],\n            markDef,\n            markType,\n            markKey\n          };\n        currentNode.children.push(node), nodeStack.push(node), currentNode = node;\n      }\n      if (isPortableTextSpan(span)) {\n        const lines = span.text.split(`\n`);\n        for (let line = lines.length; line-- > 1;) lines.splice(line, 0, `\n`);\n        currentNode.children = currentNode.children.concat(lines.map(text => ({\n          _type: \"@text\",\n          text\n        })));\n      } else currentNode.children = currentNode.children.concat(span);\n    }\n  }\n  return rootNode.children;\n}\nfunction nestLists(blocks, mode) {\n  const tree = [];\n  let currentList;\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    if (block) {\n      if (!isPortableTextListItemBlock(block)) {\n        tree.push(block), currentList = void 0;\n        continue;\n      }\n      if (!currentList) {\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (blockMatchesList(block, currentList)) {\n        currentList.children.push(block);\n        continue;\n      }\n      if ((block.level || 1) > currentList.level) {\n        const newList = listFromBlock(block, i, mode);\n        if (mode === \"html\") {\n          const lastListItem = currentList.children[currentList.children.length - 1],\n            newLastChild = _objectSpread(_objectSpread({}, lastListItem), {}, {\n              children: [...lastListItem.children, newList]\n            });\n          currentList.children[currentList.children.length - 1] = newLastChild;\n        } else currentList.children.push(newList);\n        currentList = newList;\n        continue;\n      }\n      if ((block.level || 1) < currentList.level) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, block);\n        if (match) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        }\n        currentList = listFromBlock(block, i, mode), tree.push(currentList);\n        continue;\n      }\n      if (block.listItem !== currentList.listItem) {\n        const matchingBranch = tree[tree.length - 1],\n          match = matchingBranch && findListMatching(matchingBranch, {\n            level: block.level || 1\n          });\n        if (match && match.listItem === block.listItem) {\n          currentList = match, currentList.children.push(block);\n          continue;\n        } else {\n          currentList = listFromBlock(block, i, mode), tree.push(currentList);\n          continue;\n        }\n      }\n      console.warn(\"Unknown state encountered for block\", block), tree.push(block);\n    }\n  }\n  return tree;\n}\nfunction blockMatchesList(block, list) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem;\n}\nfunction listFromBlock(block, index, mode) {\n  return {\n    _type: \"@list\",\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block]\n  };\n}\nfunction findListMatching(rootNode, matching) {\n  const level = matching.level || 1,\n    style = matching.listItem || \"normal\",\n    filterOnType = typeof matching.listItem == \"string\";\n  if (isPortableTextToolkitList(rootNode) && (rootNode.level || 1) === level && filterOnType && (rootNode.listItem || \"normal\") === style) return rootNode;\n  if (!(\"children\" in rootNode)) return;\n  const node = rootNode.children[rootNode.children.length - 1];\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : void 0;\n}\nfunction spanToPlainText(span) {\n  let text = \"\";\n  return span.children.forEach(current => {\n    isPortableTextToolkitTextNode(current) ? text += current.text : isPortableTextToolkitSpan(current) && (text += spanToPlainText(current));\n  }), text;\n}\nconst leadingSpace = /^\\s/,\n  trailingSpace = /\\s$/;\nfunction toPlainText(block) {\n  const blocks = Array.isArray(block) ? block : [block];\n  let text = \"\";\n  return blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) return;\n    let pad = !1;\n    current.children.forEach(span => {\n      isPortableTextSpan(span) ? (text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? \" \" : \"\", text += span.text, pad = !1) : pad = !0;\n    }), index !== blocks.length - 1 && (text += `\n\n`);\n  }), text;\n}\nconst LIST_NEST_MODE_HTML = \"html\",\n  LIST_NEST_MODE_DIRECT = \"direct\";\nexport { LIST_NEST_MODE_DIRECT, LIST_NEST_MODE_HTML, buildMarksTree, isPortableTextBlock, isPortableTextListItemBlock, isPortableTextSpan, isPortableTextToolkitList, isPortableTextToolkitSpan, isPortableTextToolkitTextNode, nestLists, sortMarksByOccurences, spanToPlainText, toPlainText };\n//# sourceMappingURL=index.js.map\n","import type {PortableTextSpan} from '@sanity/types'\nimport {Node, Path} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\n\nexport function getPreviousSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let previousSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath, {\n    reverse: true,\n  })) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isBefore(childPath, spanPath)) {\n      previousSpan = child\n      break\n    }\n  }\n\n  return previousSpan\n}\n\nexport function getNextSpan({\n  editor,\n  blockPath,\n  spanPath,\n}: {\n  editor: PortableTextSlateEditor\n  blockPath: Path\n  spanPath: Path\n}): PortableTextSpan | undefined {\n  let nextSpan: PortableTextSpan | undefined\n\n  for (const [child, childPath] of Node.children(editor, blockPath)) {\n    if (!editor.isTextSpan(child)) {\n      continue\n    }\n\n    if (Path.isAfter(childPath, spanPath)) {\n      nextSpan = child\n      break\n    }\n  }\n\n  return nextSpan\n}\n","/**\n *\n * This plugin will change Slate's default marks model (every prop is a mark) with the Portable Text model (marks is an array of strings on prop .marks).\n *\n */\n\nimport {isPortableTextBlock, isPortableTextSpan} from '@portabletext/toolkit'\nimport type {PortableTextObject, PortableTextSpan} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {Editor, Element, Node, Path, Range, Text, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {getNextSpan, getPreviousSpan} from '../../internal-utils/sibling-utils'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextMarkModel')\n\nexport function createWithPortableTextMarkModel(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPortableTextMarkModel(editor: PortableTextSlateEditor) {\n    const {apply, normalizeNode} = editor\n    const decorators = types.decorators.map((t) => t.value)\n\n    // Extend Slate's default normalization. Merge spans with same set of .marks when doing merge_node operations, and clean up markDefs / marks\n    editor.normalizeNode = (nodeEntry) => {\n      const [node, path] = nodeEntry\n\n      if (editor.isTextBlock(node)) {\n        const children = Node.children(editor, path)\n\n        for (const [child, childPath] of children) {\n          const nextNode = node.children[childPath[1] + 1]\n\n          if (\n            editor.isTextSpan(child) &&\n            editor.isTextSpan(nextNode) &&\n            child.marks?.every((mark) => nextNode.marks?.includes(mark)) &&\n            nextNode.marks?.every((mark) => child.marks?.includes(mark))\n          ) {\n            debug(\n              'Merging spans',\n              JSON.stringify(child, null, 2),\n              JSON.stringify(nextNode, null, 2),\n            )\n            editorActor.send({type: 'normalizing'})\n            Transforms.mergeNodes(editor, {\n              at: [childPath[0], childPath[1] + 1],\n              voids: true,\n            })\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Add missing .markDefs to block nodes\n       */\n      if (editor.isTextBlock(node) && !Array.isArray(node.markDefs)) {\n        debug('Adding .markDefs to block node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {markDefs: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Add missing .marks to span nodes\n       */\n      if (editor.isTextSpan(node) && !Array.isArray(node.marks)) {\n        debug('Adding .marks to span node')\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {marks: []}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      /**\n       * Remove annotations from empty spans\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n        const decorators = types.decorators.map((decorator) => decorator.value)\n        const annotations = node.marks?.filter(\n          (mark) => !decorators.includes(mark),\n        )\n\n        if (editor.isTextBlock(block)) {\n          if (node.text === '' && annotations && annotations.length > 0) {\n            debug('Removing annotations from empty span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {marks: node.marks?.filter((mark) => decorators.includes(mark))},\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from child spans of block nodes\n       */\n      if (editor.isTextBlock(node)) {\n        const decorators = types.decorators.map((decorator) => decorator.value)\n\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (editor.isTextSpan(child)) {\n            const marks = child.marks ?? []\n            const orphanedAnnotations = marks.filter((mark) => {\n              return (\n                !decorators.includes(mark) &&\n                !node.markDefs?.find((def) => def._key === mark)\n              )\n            })\n\n            if (orphanedAnnotations.length > 0) {\n              debug('Removing orphaned annotations from span node')\n              editorActor.send({type: 'normalizing'})\n              Transforms.setNodes(\n                editor,\n                {\n                  marks: marks.filter(\n                    (mark) => !orphanedAnnotations.includes(mark),\n                  ),\n                },\n                {at: childPath},\n              )\n              editorActor.send({type: 'done normalizing'})\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Remove orphaned annotations from span nodes\n       */\n      if (editor.isTextSpan(node)) {\n        const blockPath = Path.parent(path)\n        const [block] = Editor.node(editor, blockPath)\n\n        if (editor.isTextBlock(block)) {\n          const decorators = types.decorators.map(\n            (decorator) => decorator.value,\n          )\n          const marks = node.marks ?? []\n          const orphanedAnnotations = marks.filter((mark) => {\n            return (\n              !decorators.includes(mark) &&\n              !block.markDefs?.find((def) => def._key === mark)\n            )\n          })\n\n          if (orphanedAnnotations.length > 0) {\n            debug('Removing orphaned annotations from span node')\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {\n                marks: marks.filter(\n                  (mark) => !orphanedAnnotations.includes(mark),\n                ),\n              },\n              {at: path},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      // Remove duplicate markDefs\n      if (editor.isTextBlock(node)) {\n        const markDefs = node.markDefs ?? []\n        const markDefKeys = new Set<string>()\n        const newMarkDefs: Array<PortableTextObject> = []\n\n        for (const markDef of markDefs) {\n          if (!markDefKeys.has(markDef._key)) {\n            markDefKeys.add(markDef._key)\n            newMarkDefs.push(markDef)\n          }\n        }\n\n        if (markDefs.length !== newMarkDefs.length) {\n          debug('Removing duplicate markDefs')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(editor, {markDefs: newMarkDefs}, {at: path})\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      // Check consistency of markDefs (unless we are merging two nodes)\n      if (\n        editor.isTextBlock(node) &&\n        !editor.operations.some(\n          (op) =>\n            op.type === 'merge_node' &&\n            'markDefs' in op.properties &&\n            op.path.length === 1,\n        )\n      ) {\n        const newMarkDefs = (node.markDefs || []).filter((def) => {\n          return node.children.find((child) => {\n            return (\n              Text.isText(child) &&\n              Array.isArray(child.marks) &&\n              child.marks.includes(def._key)\n            )\n          })\n        })\n        if (node.markDefs && !isEqual(newMarkDefs, node.markDefs)) {\n          debug('Removing markDef not in use')\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {\n              markDefs: newMarkDefs,\n            },\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    editor.apply = (op) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'set_selection') {\n        const marks = Editor.marks(editor)\n\n        if (\n          marks &&\n          op.properties &&\n          op.newProperties &&\n          op.properties.anchor &&\n          op.properties.focus &&\n          op.newProperties.anchor &&\n          op.newProperties.focus\n        ) {\n          const previousSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.properties.anchor,\n            focus: op.properties.focus,\n          })\n          const newSelectionIsCollapsed = Range.isCollapsed({\n            anchor: op.newProperties.anchor,\n            focus: op.newProperties.focus,\n          })\n\n          if (previousSelectionIsCollapsed && newSelectionIsCollapsed) {\n            const focusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.properties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const newFocusSpan: PortableTextSpan | undefined = Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: op.newProperties.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0]?.[0]\n            const movedToNextSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] + 1 &&\n              focusSpan.text.length === op.properties.focus.offset &&\n              op.newProperties.focus.offset === 0\n            const movedToPreviousSpan =\n              focusSpan &&\n              newFocusSpan &&\n              op.newProperties.focus.path[0] === op.properties.focus.path[0] &&\n              op.newProperties.focus.path[1] ===\n                op.properties.focus.path[1] - 1 &&\n              op.properties.focus.offset === 0 &&\n              newFocusSpan.text.length === op.newProperties.focus.offset\n\n            // If the editor has marks and we are not visually moving the\n            // selection then we just abort. Otherwise the marks would be\n            // cleared and we can't use them for the possible subsequent insert\n            // operation.\n            if (movedToNextSpan || movedToPreviousSpan) {\n              return\n            }\n          }\n        }\n      }\n\n      if (op.type === 'insert_node') {\n        const {selection} = editor\n\n        if (selection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {depth: 1})\n          const previousSpan = getPreviousSpan({\n            editor,\n            blockPath,\n            spanPath: op.path,\n          })\n          const previousSpanAnnotations = previousSpan\n            ? previousSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const nextSpan = getNextSpan({\n            editor,\n            blockPath,\n            spanPath: [op.path[0], op.path[1] - 1],\n          })\n          const nextSpanAnnotations = nextSpan\n            ? nextSpan.marks?.filter((mark) => !decorators.includes(mark))\n            : []\n\n          const annotationsEnding =\n            previousSpanAnnotations?.filter(\n              (annotation) => !nextSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheEndOfAnnotation = annotationsEnding.length > 0\n\n          if (\n            atTheEndOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsEnding.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsEnding.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const annotationsStarting =\n            nextSpanAnnotations?.filter(\n              (annotation) => !previousSpanAnnotations?.includes(annotation),\n            ) ?? []\n          const atTheStartOfAnnotation = annotationsStarting.length > 0\n\n          if (\n            atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.some((mark) => annotationsStarting.includes(mark))\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks:\n                op.node.marks?.filter(\n                  (mark) => !annotationsStarting.includes(mark),\n                ) ?? [],\n            })\n            return\n          }\n\n          const nextSpanDecorators =\n            nextSpan?.marks?.filter((mark) => decorators.includes(mark)) ?? []\n          const decoratorStarting = nextSpanDecorators.length > 0\n\n          if (\n            decoratorStarting &&\n            atTheEndOfAnnotation &&\n            !atTheStartOfAnnotation &&\n            isPortableTextSpan(op.node) &&\n            op.node.marks?.length === 0\n          ) {\n            Transforms.insertNodes(editor, {\n              ...op.node,\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              marks: nextSpanDecorators,\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'insert_text') {\n        const {selection} = editor\n        const collapsedSelection = selection\n          ? Range.isCollapsed(selection)\n          : false\n\n        if (selection && collapsedSelection) {\n          const [_block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: selection.focus,\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          const marks = span.marks ?? []\n          const marksWithoutAnnotations = marks.filter((mark) =>\n            decorators.includes(mark),\n          )\n          const spanHasAnnotations =\n            marks.length > marksWithoutAnnotations.length\n\n          const spanIsEmpty = span.text.length === 0\n\n          const atTheBeginningOfSpan = selection.anchor.offset === 0\n          const atTheEndOfSpan = selection.anchor.offset === span.text.length\n\n          const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n          const nextSpan = getNextSpan({editor, blockPath, spanPath})\n          const nextSpanAnnotations =\n            nextSpan?.marks?.filter((mark) => !decorators.includes(mark)) ?? []\n          const spanAnnotations = marks.filter(\n            (mark) => !decorators.includes(mark),\n          )\n\n          const previousSpanHasAnnotations = previousSpan\n            ? previousSpan.marks?.some((mark) => !decorators.includes(mark))\n            : false\n          const previousSpanHasSameAnnotations = previousSpan\n            ? previousSpan.marks\n                ?.filter((mark) => !decorators.includes(mark))\n                .every((mark) => marks.includes(mark))\n            : false\n          const previousSpanHasSameAnnotation = previousSpan\n            ? previousSpan.marks?.some(\n                (mark) => !decorators.includes(mark) && marks.includes(mark),\n              )\n            : false\n\n          const previousSpanHasSameMarks = previousSpan\n            ? previousSpan.marks?.every((mark) => marks.includes(mark))\n            : false\n          const nextSpanSharesSomeAnnotations = spanAnnotations.some((mark) =>\n            nextSpanAnnotations?.includes(mark),\n          )\n\n          if (spanHasAnnotations && !spanIsEmpty) {\n            if (atTheBeginningOfSpan) {\n              if (previousSpanHasSameMarks) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotations) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: previousSpan?.marks ?? [],\n                })\n                return\n              } else if (previousSpanHasSameAnnotation) {\n                apply(op)\n                return\n              } else if (!previousSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n\n            if (atTheEndOfSpan) {\n              if (\n                (nextSpan &&\n                  nextSpanSharesSomeAnnotations &&\n                  nextSpanAnnotations.length < spanAnnotations.length) ||\n                !nextSpanSharesSomeAnnotations\n              ) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: nextSpan?.marks ?? [],\n                })\n                return\n              }\n\n              if (!nextSpan) {\n                Transforms.insertNodes(editor, {\n                  _type: 'span',\n                  _key: editorActor.getSnapshot().context.keyGenerator(),\n                  text: op.text,\n                  marks: [],\n                })\n                return\n              }\n            }\n          }\n\n          if (atTheBeginningOfSpan && !spanIsEmpty && !!previousSpan) {\n            Transforms.insertNodes(editor, {\n              _type: 'span',\n              _key: editorActor.getSnapshot().context.keyGenerator(),\n              text: op.text,\n              marks: previousSpanHasAnnotations\n                ? []\n                : (previousSpan.marks ?? []).filter((mark) =>\n                    decorators.includes(mark),\n                  ),\n            })\n            return\n          }\n        }\n      }\n\n      if (op.type === 'remove_text') {\n        const {selection} = editor\n\n        if (selection && Range.isExpanded(selection)) {\n          const [block, blockPath] = Editor.node(editor, selection, {\n            depth: 1,\n          })\n          const [span, spanPath] =\n            Array.from(\n              Editor.nodes(editor, {\n                mode: 'lowest',\n                at: {path: op.path, offset: op.offset},\n                match: (n) => editor.isTextSpan(n),\n                voids: false,\n              }),\n            )[0] ?? ([undefined, undefined] as const)\n\n          if (span && block && isPortableTextBlock(block)) {\n            const markDefs = block.markDefs ?? []\n            const marks = span.marks ?? []\n            const spanHasAnnotations = marks.some((mark) =>\n              markDefs.find((markDef) => markDef._key === mark),\n            )\n            const deletingFromTheEnd =\n              op.offset + op.text.length === span.text.length\n            const deletingAllText = op.offset === 0 && deletingFromTheEnd\n\n            const previousSpan = getPreviousSpan({editor, blockPath, spanPath})\n            const nextSpan = getNextSpan({editor, blockPath, spanPath})\n\n            const previousSpanHasSameAnnotation = previousSpan\n              ? previousSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n            const nextSpanHasSameAnnotation = nextSpan\n              ? nextSpan.marks?.some(\n                  (mark) => !decorators.includes(mark) && marks.includes(mark),\n                )\n              : false\n\n            if (\n              spanHasAnnotations &&\n              deletingAllText &&\n              !previousSpanHasSameAnnotation &&\n              !nextSpanHasSameAnnotation\n            ) {\n              const marksWithoutAnnotationMarks: string[] = (\n                {\n                  ...(Editor.marks(editor) || {}),\n                }.marks || []\n              ).filter((mark) => decorators.includes(mark))\n\n              Editor.withoutNormalizing(editor, () => {\n                apply(op)\n                Transforms.setNodes(\n                  editor,\n                  {marks: marksWithoutAnnotationMarks},\n                  {at: op.path},\n                )\n              })\n\n              editor.onChange()\n              return\n            }\n          }\n        }\n      }\n\n      /**\n       * Copy over markDefs when merging blocks\n       */\n      if (\n        op.type === 'merge_node' &&\n        op.path.length === 1 &&\n        'markDefs' in op.properties &&\n        op.properties._type === types.block.name &&\n        Array.isArray(op.properties.markDefs) &&\n        op.properties.markDefs.length > 0 &&\n        op.path[0] - 1 >= 0\n      ) {\n        const [targetBlock, targetPath] = Editor.node(editor, [op.path[0] - 1])\n\n        if (editor.isTextBlock(targetBlock)) {\n          const oldDefs =\n            (Array.isArray(targetBlock.markDefs) && targetBlock.markDefs) || []\n          const newMarkDefs = uniq([...oldDefs, ...op.properties.markDefs])\n\n          debug(`Copying markDefs over to merged block`, op)\n          Transforms.setNodes(\n            editor,\n            {markDefs: newMarkDefs},\n            {at: targetPath, voids: false},\n          )\n          apply(op)\n          return\n        }\n      }\n\n      apply(op)\n    }\n\n    return editor\n  }\n}\n\nexport const removeDecoratorActionImplementation: BehaviorActionImplementation<\n  'decorator.remove'\n> = ({action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const {selection} = editor\n\n  if (selection) {\n    if (Range.isExpanded(selection)) {\n      // Split if needed\n      Transforms.setNodes(\n        editor,\n        {},\n        {match: Text.isText, split: true, hanging: true},\n      )\n      if (editor.selection) {\n        const splitTextNodes = [\n          ...Editor.nodes(editor, {\n            at: editor.selection,\n            match: Text.isText,\n          }),\n        ]\n        splitTextNodes.forEach(([node, path]) => {\n          const block = editor.children[path[0]]\n          if (Element.isElement(block) && block.children.includes(node)) {\n            Transforms.setNodes(\n              editor,\n              {\n                marks: (Array.isArray(node.marks) ? node.marks : []).filter(\n                  (eMark: string) => eMark !== mark,\n                ),\n                _type: 'span',\n              },\n              {at: path},\n            )\n          }\n        })\n      }\n    } else {\n      const [block, blockPath] = Editor.node(editor, selection, {\n        depth: 1,\n      })\n      const lonelyEmptySpan =\n        editor.isTextBlock(block) &&\n        block.children.length === 1 &&\n        editor.isTextSpan(block.children[0]) &&\n        block.children[0].text === ''\n          ? block.children[0]\n          : undefined\n\n      if (lonelyEmptySpan) {\n        const existingMarks = lonelyEmptySpan.marks ?? []\n        const existingMarksWithoutDecorator = existingMarks.filter(\n          (existingMark) => existingMark !== mark,\n        )\n\n        Transforms.setNodes(\n          editor,\n          {\n            marks: existingMarksWithoutDecorator,\n          },\n          {\n            at: blockPath,\n            match: (node) => editor.isTextSpan(node),\n          },\n        )\n      } else {\n        const existingMarks: string[] =\n          {\n            ...(Editor.marks(editor) || {}),\n          }.marks || []\n        const marks = {\n          ...(Editor.marks(editor) || {}),\n          marks: existingMarks.filter((eMark) => eMark !== mark),\n        } as Text\n        editor.marks = {marks: marks.marks, _type: 'span'} as Text\n      }\n    }\n\n    if (editor.selection) {\n      // Reselect\n      const selection = editor.selection\n      editor.selection = {...selection}\n    }\n  }\n}\n\nexport function isDecoratorActive({\n  editor,\n  decorator,\n}: {\n  editor: PortableTextSlateEditor\n  decorator: string\n}) {\n  if (!editor.selection) {\n    return false\n  }\n\n  const selectedTextNodes = Array.from(\n    Editor.nodes(editor, {match: Text.isText, at: editor.selection}),\n  )\n\n  if (selectedTextNodes.length === 0) {\n    return false\n  }\n\n  if (Range.isExpanded(editor.selection)) {\n    return selectedTextNodes.every((n) => {\n      const [node] = n\n\n      return node.marks?.includes(decorator)\n    })\n  }\n\n  return (\n    {\n      ...(Editor.marks(editor) || {}),\n    }.marks || []\n  ).includes(decorator)\n}\n","import {\n  isPortableTextSpan,\n  type Path,\n  type PortableTextBlock,\n  type PortableTextChild,\n  type PortableTextObject,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  Editor,\n  Node,\n  Range,\n  Element as SlateElement,\n  Path as SlatePath,\n  Text,\n  Transforms,\n} from 'slate'\nimport type {DOMNode} from 'slate-dom'\nimport {ReactEditor} from 'slate-react'\nimport type {BehaviorActionImplementation} from '../../behavior-actions/behavior.actions'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {toPortableTextRange, toSlateRange} from '../../internal-utils/ranges'\nimport {isListItemActive, isStyleActive} from '../../internal-utils/slate-utils'\nimport {fromSlateValue, toSlateValue} from '../../internal-utils/values'\nimport {\n  KEY_TO_VALUE_ELEMENT,\n  SLATE_TO_PORTABLE_TEXT_RANGE,\n} from '../../internal-utils/weakMaps'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorSelection,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {isDecoratorActive} from './createWithPortableTextMarkModel'\n\nconst debug = debugWithName('API:editable')\n\nexport function createEditableAPI(\n  editor: PortableTextSlateEditor,\n  editorActor: EditorActor,\n) {\n  const types = editorActor.getSnapshot().context.schema\n\n  const editableApi: EditableAPI = {\n    focus: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'focus',\n        },\n        editor,\n      })\n    },\n    blur: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'blur',\n        },\n        editor,\n      })\n    },\n    toggleMark: (mark: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'decorator.toggle',\n          decorator: mark,\n        },\n        editor,\n      })\n    },\n    toggleList: (listItem: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'list item.toggle',\n          listItem,\n        },\n        editor,\n      })\n    },\n    toggleBlockStyle: (style: string): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'style.toggle',\n          style,\n        },\n        editor,\n      })\n    },\n    isMarkActive: (mark: string): boolean => {\n      // Try/catch this, as Slate may error because the selection is currently wrong\n      // TODO: catch only relevant error from Slate\n      try {\n        return isDecoratorActive({editor, decorator: mark})\n      } catch (err) {\n        console.warn(err)\n        return false\n      }\n    },\n    marks: (): string[] => {\n      return (\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      )\n    },\n    undo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n    },\n    redo: (): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n    },\n    select: (selection: EditorSelection): void => {\n      const slateSelection = toSlateRange(selection, editor)\n      if (slateSelection) {\n        Transforms.select(editor, slateSelection)\n      } else {\n        Transforms.deselect(editor)\n      }\n      editor.onChange()\n    },\n    focusBlock: (): PortableTextBlock | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block) {\n          return fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n        }\n      }\n      return undefined\n    },\n    focusChild: (): PortableTextChild | undefined => {\n      if (editor.selection) {\n        const block = Node.descendant(\n          editor,\n          editor.selection.focus.path.slice(0, 1),\n        )\n        if (block && editor.isTextBlock(block)) {\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0] as PortableTextTextBlock\n          return ptBlock.children[editor.selection.focus.path[1]]\n        }\n      }\n      return undefined\n    },\n    insertChild: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      if (type.name !== types.span.name) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'insert.inline object',\n            inlineObject: {\n              name: type.name,\n              value,\n            },\n          },\n          editor,\n        })\n\n        return (\n          toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              types.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            editor.selection,\n            types,\n          )?.focus.path ?? []\n        )\n      }\n\n      if (!editor.selection) {\n        throw new Error('The editor has no selection')\n      }\n      const [focusBlock] = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection.focus.path.slice(0, 1),\n          match: (n) => n._type === types.block.name,\n        }),\n      )[0] || [undefined]\n      if (!focusBlock) {\n        throw new Error('No focused text block')\n      }\n      if (\n        type.name !== types.span.name &&\n        !types.inlineObjects.some((t) => t.name === type.name)\n      ) {\n        throw new Error(\n          'This type cannot be inserted as a child to a text block',\n        )\n      }\n      const block = toSlateValue(\n        [\n          {\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            _type: types.block.name,\n            children: [\n              {\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                _type: type.name,\n                ...(value ? value : {}),\n              },\n            ],\n          },\n        ],\n        {schemaTypes: editorActor.getSnapshot().context.schema},\n      )[0] as unknown as SlateElement\n      const child = block.children[0]\n      const focusChildPath = editor.selection.focus.path.slice(0, 2)\n      const isSpanNode = child._type === types.span.name\n      const focusNode = Node.get(editor, focusChildPath)\n\n      // If we are inserting a span, and currently have focus on an inline object,\n      // move the selection to the next span (guaranteed by normalizing rules) before inserting it.\n      if (isSpanNode && focusNode._type !== types.span.name) {\n        debug(\n          'Inserting span child next to inline object child, moving selection + 1',\n        )\n        editor.move({distance: 1, unit: 'character'})\n      }\n\n      Transforms.insertNodes(editor, child, {\n        select: true,\n        at: editor.selection,\n      })\n      editor.onChange()\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path || []\n      )\n    },\n    insertBlock: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n      value?: {[prop: string]: any},\n    ): Path => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.block',\n          block: {\n            _type: type.name,\n            ...(value ? value : {}),\n          },\n          placement: 'auto',\n        },\n        editor,\n      })\n\n      return (\n        toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )?.focus.path ?? []\n      )\n    },\n    hasBlockStyle: (style: string): boolean => {\n      try {\n        return isStyleActive({editor, style})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    hasListStyle: (listItem: string): boolean => {\n      try {\n        return isListItemActive({editor, listItem})\n      } catch {\n        // This is fine.\n        return false\n      }\n    },\n    isVoid: (element: PortableTextBlock | PortableTextChild) => {\n      return ![types.block.name, types.span.name].includes(element._type)\n    },\n    findByPath: (\n      path: Path,\n    ): [\n      PortableTextBlock | PortableTextChild | undefined,\n      Path | undefined,\n    ] => {\n      const slatePath = toSlateRange(\n        {focus: {path, offset: 0}, anchor: {path, offset: 0}},\n        editor,\n      )\n      if (slatePath) {\n        const [block, blockPath] = Editor.node(\n          editor,\n          slatePath.focus.path.slice(0, 1),\n        )\n        if (block && blockPath && typeof block._key === 'string') {\n          if (path.length === 1 && slatePath.focus.path.length === 1) {\n            return [\n              fromSlateValue([block], types.block.name)[0],\n              [{_key: block._key}],\n            ]\n          }\n          const ptBlock = fromSlateValue(\n            [block],\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          )[0]\n          if (editor.isTextBlock(ptBlock)) {\n            const ptChild = ptBlock.children[slatePath.focus.path[1]]\n            if (ptChild) {\n              return [\n                ptChild,\n                [{_key: block._key}, 'children', {_key: ptChild._key}],\n              ]\n            }\n          }\n        }\n      }\n      return [undefined, undefined]\n    },\n    findDOMNode: (\n      element: PortableTextBlock | PortableTextChild,\n    ): DOMNode | undefined => {\n      let node: DOMNode | undefined\n      try {\n        const [item] = Array.from(\n          Editor.nodes(editor, {\n            at: [],\n            match: (n) => n._key === element._key,\n          }) || [],\n        )[0] || [undefined]\n        node = ReactEditor.toDOMNode(editor, item)\n      } catch {\n        // Nothing\n      }\n      return node\n    },\n    activeAnnotations: (): PortableTextObject[] => {\n      if (!editor.selection || editor.selection.focus.path.length < 2) {\n        return []\n      }\n      try {\n        const activeAnnotations: PortableTextObject[] = []\n        const spans = Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) =>\n            Text.isText(node) &&\n            node.marks !== undefined &&\n            Array.isArray(node.marks) &&\n            node.marks.length > 0,\n        })\n        for (const [span, path] of spans) {\n          const [block] = Editor.node(editor, path, {depth: 1})\n          if (editor.isTextBlock(block)) {\n            block.markDefs?.forEach((def) => {\n              if (\n                Text.isText(span) &&\n                span.marks &&\n                Array.isArray(span.marks) &&\n                span.marks.includes(def._key)\n              ) {\n                activeAnnotations.push(def)\n              }\n            })\n          }\n        }\n        return activeAnnotations\n      } catch {\n        return []\n      }\n    },\n    isAnnotationActive: (\n      annotationType: PortableTextObject['_type'],\n    ): boolean => {\n      return isAnnotationActive({editor, annotation: {name: annotationType}})\n    },\n    addAnnotation: (type, value) => {\n      let paths: ReturnType<EditableAPI['addAnnotation']> = undefined\n\n      Editor.withoutNormalizing(editor, () => {\n        paths = addAnnotationActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: types,\n          },\n          action: {\n            type: 'annotation.add',\n            annotation: {name: type.name, value: value ?? {}},\n            editor,\n          },\n        })\n      })\n      editor.onChange()\n\n      return paths\n    },\n    delete: (\n      selection: EditorSelection,\n      options?: EditableAPIDeleteOptions,\n    ): void => {\n      if (selection) {\n        const range = toSlateRange(selection, editor)\n        const hasRange =\n          range && range.anchor.path.length > 0 && range.focus.path.length > 0\n        if (!hasRange) {\n          throw new Error('Invalid range')\n        }\n        if (range) {\n          if (!options?.mode || options?.mode === 'selected') {\n            debug(`Deleting content in selection`)\n            Transforms.delete(editor, {\n              at: range,\n              hanging: true,\n              voids: true,\n            })\n            editor.onChange()\n            return\n          }\n          if (options?.mode === 'blocks') {\n            debug(`Deleting blocks touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  editor.isTextBlock(node) ||\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node))\n                )\n              },\n            })\n          }\n          if (options?.mode === 'children') {\n            debug(`Deleting children touched by selection`)\n            Transforms.removeNodes(editor, {\n              at: range,\n              voids: true,\n              match: (node) => {\n                return (\n                  node._type === types.span.name || // Text children\n                  (!editor.isTextBlock(node) && SlateElement.isElement(node)) // inline blocks\n                )\n              },\n            })\n          }\n          // If the editor was emptied, insert a placeholder block\n          // directly into the editor's children. We don't want to do this\n          // through a Transform (because that would trigger a change event\n          // that would insert the placeholder into the actual value\n          // which should remain empty)\n          if (editor.children.length === 0) {\n            editor.children = [editor.pteCreateTextBlock({decorators: []})]\n          }\n          editor.onChange()\n        }\n      }\n    },\n    removeAnnotation: <TSchemaType extends {name: string}>(\n      type: TSchemaType,\n    ): void => {\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'annotation.remove',\n          annotation: {name: type.name},\n        },\n        editor,\n      })\n    },\n    getSelection: (): EditorSelection | null => {\n      let ptRange: EditorSelection = null\n      if (editor.selection) {\n        const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n        if (existing) {\n          return existing\n        }\n        ptRange = toPortableTextRange(\n          fromSlateValue(\n            editor.children,\n            types.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n          editor.selection,\n          types,\n        )\n        SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n      }\n      return ptRange\n    },\n    getValue: () => {\n      return fromSlateValue(\n        editor.children,\n        types.block.name,\n        KEY_TO_VALUE_ELEMENT.get(editor),\n      )\n    },\n    isCollapsedSelection: () => {\n      return !!editor.selection && Range.isCollapsed(editor.selection)\n    },\n    isExpandedSelection: () => {\n      return !!editor.selection && Range.isExpanded(editor.selection)\n    },\n    insertBreak: () => {\n      editor.insertBreak()\n      editor.onChange()\n    },\n    getFragment: () => {\n      return fromSlateValue(editor.getFragment(), types.block.name)\n    },\n    isSelectionsOverlapping: (\n      selectionA: EditorSelection,\n      selectionB: EditorSelection,\n    ) => {\n      // Convert the selections to Slate ranges\n      const rangeA = toSlateRange(selectionA, editor)\n      const rangeB = toSlateRange(selectionB, editor)\n\n      // Make sure the ranges are valid\n      const isValidRanges = Range.isRange(rangeA) && Range.isRange(rangeB)\n\n      // Check if the ranges are overlapping\n      const isOverlapping = isValidRanges && Range.includes(rangeA, rangeB)\n\n      return isOverlapping\n    },\n  }\n\n  return editableApi\n}\n\nfunction isAnnotationActive({\n  editor,\n  annotation,\n}: {\n  editor: PortableTextSlateEditor\n  annotation: {\n    name: string\n  }\n}) {\n  if (!editor.selection || editor.selection.focus.path.length < 2) {\n    return false\n  }\n\n  try {\n    const spans = [\n      ...Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => Text.isText(node),\n      }),\n    ]\n\n    if (spans.length === 0) {\n      return false\n    }\n\n    if (\n      spans.some(\n        ([span]) =>\n          !isPortableTextSpan(span) || !span.marks || span.marks?.length === 0,\n      )\n    )\n      return false\n\n    const selectionMarkDefs = spans.reduce((accMarkDefs, [, path]) => {\n      const [block] = Editor.node(editor, path, {depth: 1})\n      if (editor.isTextBlock(block) && block.markDefs) {\n        return [...accMarkDefs, ...block.markDefs]\n      }\n      return accMarkDefs\n    }, [] as PortableTextObject[])\n\n    return spans.every(([span]) => {\n      if (!isPortableTextSpan(span)) return false\n\n      const spanMarkDefs = span.marks?.map(\n        (markKey) =>\n          selectionMarkDefs.find((def) => def?._key === markKey)?._type,\n      )\n\n      return spanMarkDefs?.includes(annotation.name)\n    })\n  } catch {\n    return false\n  }\n}\n\n/**\n * @public\n */\nexport type AddedAnnotationPaths = {\n  /**\n   * @deprecated An annotation may be applied to multiple blocks, resulting\n   * in multiple `markDef`'s being created. Use `markDefPaths` instead.\n   */\n  markDefPath: Path\n  markDefPaths: Array<Path>\n  /**\n   * @deprecated Does not return anything meaningful since an annotation\n   * can span multiple blocks and spans. If references the span closest\n   * to the focus point of the selection.\n   */\n  spanPath: Path\n}\n\nexport const addAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.add',\n  AddedAnnotationPaths | undefined\n> = ({context, action}) => {\n  const editor = action.editor\n\n  if (!editor.selection || Range.isCollapsed(editor.selection)) {\n    return\n  }\n\n  let paths: AddedAnnotationPaths | undefined = undefined\n  let spanPath: Path | undefined\n  let markDefPath: Path | undefined\n  const markDefPaths: Path[] = []\n\n  const selectedBlocks = Editor.nodes(editor, {\n    at: editor.selection,\n    match: (node) => editor.isTextBlock(node),\n    reverse: Range.isBackward(editor.selection),\n  })\n\n  for (const [block, blockPath] of selectedBlocks) {\n    if (block.children.length === 0) {\n      continue\n    }\n\n    if (block.children.length === 1 && block.children[0].text === '') {\n      continue\n    }\n\n    const annotationKey = context.keyGenerator()\n    const markDefs = block.markDefs ?? []\n    const existingMarkDef = markDefs.find(\n      (markDef) =>\n        markDef._type === action.annotation.name &&\n        markDef._key === annotationKey,\n    )\n\n    if (existingMarkDef === undefined) {\n      Transforms.setNodes(\n        editor,\n        {\n          markDefs: [\n            ...markDefs,\n            {\n              _type: action.annotation.name,\n              _key: annotationKey,\n              ...action.annotation.value,\n            },\n          ],\n        },\n        {at: blockPath},\n      )\n\n      markDefPath = [{_key: block._key}, 'markDefs', {_key: annotationKey}]\n\n      if (Range.isBackward(editor.selection)) {\n        markDefPaths.unshift(markDefPath)\n      } else {\n        markDefPaths.push(markDefPath)\n      }\n    }\n\n    Transforms.setNodes(editor, {}, {match: Text.isText, split: true})\n\n    const children = Node.children(editor, blockPath)\n\n    for (const [span, path] of children) {\n      if (!editor.isTextSpan(span)) {\n        continue\n      }\n\n      if (!Range.includes(editor.selection, path)) {\n        continue\n      }\n\n      const marks = span.marks ?? []\n      const existingSameTypeAnnotations = marks.filter((mark) =>\n        markDefs.some(\n          (markDef) =>\n            markDef._key === mark && markDef._type === action.annotation.name,\n        ),\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks: [\n            ...marks.filter(\n              (mark) => !existingSameTypeAnnotations.includes(mark),\n            ),\n            annotationKey,\n          ],\n        },\n        {at: path},\n      )\n\n      spanPath = [{_key: block._key}, 'children', {_key: span._key}]\n    }\n  }\n\n  if (markDefPath && spanPath) {\n    paths = {\n      markDefPath,\n      markDefPaths,\n      spanPath,\n    }\n  }\n\n  return paths\n}\n\nexport const removeAnnotationActionImplementation: BehaviorActionImplementation<\n  'annotation.remove'\n> = ({action}) => {\n  const editor = action.editor\n\n  debug('Removing annotation', action.annotation.name)\n\n  if (!editor.selection) {\n    return\n  }\n\n  if (Range.isCollapsed(editor.selection)) {\n    const [block, blockPath] = Editor.node(editor, editor.selection, {\n      depth: 1,\n    })\n\n    if (!editor.isTextBlock(block)) {\n      return\n    }\n\n    const markDefs = block.markDefs ?? []\n    const potentialAnnotations = markDefs.filter(\n      (markDef) => markDef._type === action.annotation.name,\n    )\n\n    const [selectedChild, selectedChildPath] = Editor.node(\n      editor,\n      editor.selection,\n      {\n        depth: 2,\n      },\n    )\n\n    if (!editor.isTextSpan(selectedChild)) {\n      return\n    }\n\n    const annotationToRemove = selectedChild.marks?.find((mark) =>\n      potentialAnnotations.some((markDef) => markDef._key === mark),\n    )\n\n    if (!annotationToRemove) {\n      return\n    }\n\n    const previousSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath, {\n      reverse: true,\n    })) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isBefore(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        previousSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    const nextSpansWithSameAnnotation: Array<\n      [span: PortableTextSpan, path: SlatePath]\n    > = []\n\n    for (const [child, childPath] of Node.children(editor, blockPath)) {\n      if (!editor.isTextSpan(child)) {\n        continue\n      }\n\n      if (!SlatePath.isAfter(childPath, selectedChildPath)) {\n        continue\n      }\n\n      if (child.marks?.includes(annotationToRemove)) {\n        nextSpansWithSameAnnotation.push([child, childPath])\n      } else {\n        break\n      }\n    }\n\n    for (const [child, childPath] of [\n      ...previousSpansWithSameAnnotation,\n      [selectedChild, selectedChildPath] as const,\n      ...nextSpansWithSameAnnotation,\n    ]) {\n      Transforms.setNodes(\n        editor,\n        {\n          marks: child.marks?.filter((mark) => mark !== annotationToRemove),\n        },\n        {at: childPath},\n      )\n    }\n  } else {\n    Transforms.setNodes(\n      editor,\n      {},\n      {\n        match: (node) => editor.isTextSpan(node),\n        split: true,\n        hanging: true,\n      },\n    )\n\n    const blocks = Editor.nodes(editor, {\n      at: editor.selection,\n      match: (node) => editor.isTextBlock(node),\n    })\n\n    for (const [block, blockPath] of blocks) {\n      const children = Node.children(editor, blockPath)\n\n      for (const [child, childPath] of children) {\n        if (!editor.isTextSpan(child)) {\n          continue\n        }\n\n        if (!Range.includes(editor.selection, childPath)) {\n          continue\n        }\n\n        const markDefs = block.markDefs ?? []\n        const marks = child.marks ?? []\n        const marksWithoutAnnotation = marks.filter((mark) => {\n          const markDef = markDefs.find((markDef) => markDef._key === mark)\n          return markDef?._type !== action.annotation.name\n        })\n\n        if (marksWithoutAnnotation.length !== marks.length) {\n          Transforms.setNodes(\n            editor,\n            {\n              marks: marksWithoutAnnotation,\n            },\n            {at: childPath},\n          )\n        }\n      }\n    }\n  }\n}\n","import {Editor, Transforms, type Element as SlateElement} from 'slate'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue, toSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockSetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.set'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, ...filteredProps} = action.props\n\n  const updatedBlock = parseBlock({\n    context,\n    block: {\n      ...parsedBlock,\n      ...filteredProps,\n    },\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlock) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const slateBlock = toSlateValue([updatedBlock], {\n    schemaTypes: context.schema,\n  })?.at(0) as SlateElement | undefined\n\n  if (!slateBlock) {\n    throw new Error(`Unable to convert block to Slate value`)\n  }\n\n  Transforms.setNodes(action.editor, slateBlock, {at: location})\n}\n","import {omit} from 'lodash'\nimport {Editor, Transforms} from 'slate'\nimport {isTextBlock, parseBlock} from '../internal-utils/parse-blocks'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blockUnsetBehaviorActionImplementation: BehaviorActionImplementation<\n  'block.unset'\n> = ({context, action}) => {\n  const location = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!location) {\n    throw new Error(\n      `Unable to convert ${JSON.stringify(action.at)} into a Slate Range`,\n    )\n  }\n\n  const blockEntry = Editor.node(action.editor, location, {depth: 1})\n  const block = blockEntry?.[0]\n\n  if (!block) {\n    throw new Error(`Unable to find block at ${JSON.stringify(action.at)}`)\n  }\n\n  const parsedBlock = fromSlateValue(\n    [block],\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  ).at(0)\n\n  if (!parsedBlock) {\n    throw new Error(`Unable to parse block at ${JSON.stringify(action.at)}`)\n  }\n\n  if (isTextBlock(context.schema, parsedBlock)) {\n    const propsToRemove = action.props.filter((prop) => prop !== '_type')\n\n    const updatedTextBlock = parseBlock({\n      context,\n      block: omit(parsedBlock, propsToRemove),\n      options: {refreshKeys: false},\n    })\n\n    if (!updatedTextBlock) {\n      throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n    }\n\n    const propsToSet: Record<string, unknown> = {}\n\n    for (const prop of propsToRemove) {\n      if (!(prop in updatedTextBlock)) {\n        propsToSet[prop] = undefined\n      } else {\n        propsToSet[prop] = (updatedTextBlock as Record<string, unknown>)[prop]\n      }\n    }\n\n    Transforms.setNodes(action.editor, propsToSet, {at: location})\n\n    return\n  }\n\n  const updatedBlockObject = parseBlock({\n    context,\n    block: omit(\n      parsedBlock,\n      action.props.filter((prop) => prop !== '_type'),\n    ),\n    options: {refreshKeys: false},\n  })\n\n  if (!updatedBlockObject) {\n    throw new Error(`Unable to update block at ${JSON.stringify(action.at)}`)\n  }\n\n  const {_type, _key, ...props} = updatedBlockObject\n\n  Transforms.setNodes(\n    action.editor,\n    {\n      _type,\n      _key,\n      value: props,\n    },\n    {at: location},\n  )\n}\n","import {ReactEditor} from 'slate-react'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const blurActionImplementation: BehaviorActionImplementation<'blur'> = ({\n  action,\n}) => {\n  ReactEditor.blur(action.editor)\n}\n","import {Editor, Range, Text, Transforms} from 'slate'\nimport {toPortableTextRange, toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const decoratorAddActionImplementation: BehaviorActionImplementation<\n  'decorator.add'\n> = ({context, action}) => {\n  const editor = action.editor\n  const mark = action.decorator\n  const value = fromSlateValue(\n    editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n\n  const manualAnchor = action.offsets?.anchor\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.offsets.anchor,\n        direction: 'backward',\n      })\n    : undefined\n  const manualFocus = action.offsets?.focus\n    ? utils.blockOffsetToSpanSelectionPoint({\n        value,\n        blockOffset: action.offsets.focus,\n        direction: 'forward',\n      })\n    : undefined\n  const manualSelection =\n    manualAnchor && manualFocus\n      ? {\n          anchor: manualAnchor,\n          focus: manualFocus,\n        }\n      : undefined\n\n  const selection = manualSelection\n    ? (toSlateRange(manualSelection, action.editor) ?? editor.selection)\n    : editor.selection\n\n  if (!selection) {\n    return\n  }\n\n  const editorSelection = toPortableTextRange(value, selection, context.schema)\n  const anchorOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.anchor,\n      })\n    : undefined\n  const focusOffset = editorSelection\n    ? utils.selectionPointToBlockOffset({\n        value,\n        selectionPoint: editorSelection.focus,\n      })\n    : undefined\n\n  if (!anchorOffset || !focusOffset) {\n    throw new Error('Unable to find anchor or focus offset')\n  }\n\n  if (Range.isExpanded(selection)) {\n    // Split if needed\n    Transforms.setNodes(\n      editor,\n      {},\n      {at: selection, match: Text.isText, split: true, hanging: true},\n    )\n\n    // The value might have changed after splitting\n    const newValue = fromSlateValue(\n      editor.children,\n      context.schema.block.name,\n      KEY_TO_VALUE_ELEMENT.get(editor),\n    )\n    // We need to find the new selection from the original offsets because the\n    // split operation might have changed the value.\n    const newSelection = utils.blockOffsetsToSelection({\n      value: newValue,\n      offsets: {anchor: anchorOffset, focus: focusOffset},\n      backward: editorSelection?.backward,\n    })\n\n    const trimmedSelection = selectors.getTrimmedSelection({\n      beta: {hasTag: () => false, internalDrag: undefined},\n      context: {\n        activeDecorators: [],\n        converters: [],\n        keyGenerator: context.keyGenerator,\n        readOnly: false,\n        schema: context.schema,\n        selection: newSelection,\n        value: newValue,\n      },\n    })\n\n    if (!trimmedSelection) {\n      throw new Error('Unable to find trimmed selection')\n    }\n\n    const newRange = toSlateRange(trimmedSelection, editor)\n\n    if (!newRange) {\n      throw new Error('Unable to find new selection')\n    }\n\n    // Use new selection to find nodes to decorate\n    const splitTextNodes = Range.isRange(newRange)\n      ? [\n          ...Editor.nodes(editor, {\n            at: newRange,\n            match: (node) => Text.isText(node),\n          }),\n        ]\n      : []\n\n    for (const [node, path] of splitTextNodes) {\n      const marks = [\n        ...(Array.isArray(node.marks) ? node.marks : []).filter(\n          (eMark: string) => eMark !== mark,\n        ),\n        mark,\n      ]\n      Transforms.setNodes(\n        editor,\n        {marks},\n        {at: path, match: Text.isText, split: true, hanging: true},\n      )\n    }\n  } else {\n    const selectedSpan = Array.from(\n      Editor.nodes(editor, {\n        at: selection,\n        match: (node) => editor.isTextSpan(node),\n      }),\n    )?.at(0)\n\n    if (!selectedSpan) {\n      return\n    }\n\n    const [block, blockPath] = Editor.node(editor, selection, {\n      depth: 1,\n    })\n    const lonelyEmptySpan =\n      editor.isTextBlock(block) &&\n      block.children.length === 1 &&\n      editor.isTextSpan(block.children[0]) &&\n      block.children[0].text === ''\n        ? block.children[0]\n        : undefined\n\n    if (lonelyEmptySpan) {\n      const existingMarks = lonelyEmptySpan.marks ?? []\n      const existingMarksWithoutDecorator = existingMarks.filter(\n        (existingMark) => existingMark !== mark,\n      )\n\n      Transforms.setNodes(\n        editor,\n        {\n          marks:\n            existingMarks.length === existingMarksWithoutDecorator.length\n              ? [...existingMarks, mark]\n              : existingMarksWithoutDecorator,\n        },\n        {\n          at: blockPath,\n          match: (node) => editor.isTextSpan(node),\n        },\n      )\n    } else {\n      const existingMarks: string[] =\n        {\n          ...(Editor.marks(editor) || {}),\n        }.marks || []\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        marks: [...existingMarks, mark],\n      }\n      editor.marks = marks as Text\n    }\n  }\n\n  if (editor.selection) {\n    // Reselect\n    const selection = editor.selection\n    editor.selection = {...selection}\n  }\n}\n","import {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteActionImplementation: BehaviorActionImplementation<\n  'delete'\n> = ({action}) => {\n  const range = toSlateRange(action.selection, action.editor)\n\n  if (!range) {\n    throw new Error(\n      `Failed to get Slate Range for selection ${JSON.stringify(action.selection)}`,\n    )\n  }\n\n  action.editor.delete({at: range})\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteBackwardActionImplementation: BehaviorActionImplementation<\n  'delete.backward'\n> = ({action}) => {\n  action.editor.deleteBackward(action.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteBlockActionImplementation: BehaviorActionImplementation<\n  'delete.block'\n> = ({action}) => {\n  const range = toSlateRange(\n    {\n      anchor: {path: action.at, offset: 0},\n      focus: {path: action.at, offset: 0},\n    },\n    action.editor,\n  )\n\n  if (!range) {\n    console.error('Unable to find Slate range from selection points')\n    return\n  }\n\n  Transforms.removeNodes(action.editor, {\n    at: range,\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteForwardActionImplementation: BehaviorActionImplementation<\n  'delete.forward'\n> = ({action}) => {\n  action.editor.deleteForward(action.unit)\n}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const deleteTextActionImplementation: BehaviorActionImplementation<\n  'delete.text'\n> = ({context, action}) => {\n  const value = fromSlateValue(\n    action.editor.children,\n    context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(action.editor),\n  )\n\n  const selection = utils.blockOffsetsToSelection({\n    value,\n    offsets: {\n      anchor: action.anchor,\n      focus: action.focus,\n    },\n  })\n\n  if (!selection) {\n    throw new Error('Unable to find selection from block offsets')\n  }\n\n  const trimmedSelection = selectors.getTrimmedSelection({\n    beta: {hasTag: () => false, internalDrag: undefined},\n    context: {\n      converters: [],\n      schema: context.schema,\n      keyGenerator: context.keyGenerator,\n      activeDecorators: [],\n      readOnly: false,\n      value,\n      selection,\n    },\n  })\n\n  if (!trimmedSelection) {\n    throw new Error('Unable to find trimmed selection')\n  }\n\n  const range = toSlateRange(trimmedSelection, action.editor)\n\n  if (!range) {\n    throw new Error('Unable to find Slate range from trimmed selection')\n  }\n\n  Transforms.delete(action.editor, {\n    at: range,\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const effectActionImplementation: BehaviorActionImplementation<\n  'effect'\n> = ({action}) => {\n  action.effect()\n}\n","import {ReactEditor} from 'slate-react'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const focusActionImplementation: BehaviorActionImplementation<\n  'focus'\n> = ({action}) => {\n  ReactEditor.focus(action.editor)\n}\n","import {Editor, Transforms, type Element} from 'slate'\nimport {toSlateValue} from '../internal-utils/values'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertInlineObjectActionImplementation: BehaviorActionImplementation<\n  'insert.inline object'\n> = ({context, action}) => {\n  if (\n    !context.schema.inlineObjects.some(\n      (inlineObject) => inlineObject.name === action.inlineObject.name,\n    )\n  ) {\n    console.error('Unable to insert unknown inline object')\n    return\n  }\n\n  if (!action.editor.selection) {\n    console.error('Unable to insert inline object without selection')\n    return\n  }\n\n  const [focusTextBlock] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  ).at(0) ?? [undefined, undefined]\n\n  if (!focusTextBlock) {\n    console.error('Unable to perform action without focus text block')\n    return\n  }\n\n  const block = toSlateValue(\n    [\n      {\n        _type: context.schema.block.name,\n        _key: context.keyGenerator(),\n        children: [\n          {\n            _type: action.inlineObject.name,\n            _key: context.keyGenerator(),\n            ...(action.inlineObject.value ?? {}),\n          },\n        ],\n      },\n    ],\n    {schemaTypes: context.schema},\n  ).at(0) as unknown as Element\n  const child = block?.children.at(0)\n\n  if (!child) {\n    console.error('Unable to insert inline object')\n    return\n  }\n\n  Transforms.insertNodes(action.editor, child)\n}\n","import {Editor, Transforms} from 'slate'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertSpanActionImplementation: BehaviorActionImplementation<\n  'insert.span'\n> = ({context, action}) => {\n  if (!action.editor.selection) {\n    console.error('Unable to perform action without selection', action)\n    return\n  }\n\n  const [focusBlock, focusBlockPath] = Array.from(\n    Editor.nodes(action.editor, {\n      at: action.editor.selection.focus.path,\n      match: (node) => action.editor.isTextBlock(node),\n    }),\n  )[0] ?? [undefined, undefined]\n\n  if (!focusBlock || !focusBlockPath) {\n    console.error('Unable to perform action without focus block', action)\n    return\n  }\n\n  const markDefs = focusBlock.markDefs ?? []\n  const annotations = action.annotations\n    ? action.annotations.map((annotation) => ({\n        _type: annotation.name,\n        _key: context.keyGenerator(),\n        ...annotation.value,\n      }))\n    : undefined\n\n  if (annotations && annotations.length > 0) {\n    Transforms.setNodes(action.editor, {\n      markDefs: [...markDefs, ...annotations],\n    })\n  }\n\n  Transforms.insertNodes(action.editor, {\n    _type: 'span',\n    _key: context.keyGenerator(),\n    text: action.text,\n    marks: [\n      ...(annotations?.map((annotation) => annotation._key) ?? []),\n      ...(action.decorators ?? []),\n    ],\n  })\n}\n","import {Editor, Path, Point, Range, Transforms, type Descendant} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {\n  getFocusBlock,\n  getFocusChild,\n  getLastBlock,\n} from '../internal-utils/slate-utils'\nimport {isEqualToEmptyEditor, toSlateValue} from '../internal-utils/values'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertBlockActionImplementation: BehaviorActionImplementation<\n  'insert.block'\n> = ({context, action}) => {\n  const parsedBlock = parseBlock({\n    block: action.block,\n    context,\n    options: {refreshKeys: false},\n  })\n\n  if (!parsedBlock) {\n    throw new Error(`Failed to parse block ${JSON.stringify(action.block)}`)\n  }\n\n  const fragment = toSlateValue([parsedBlock], {schemaTypes: context.schema})[0]\n\n  if (!fragment) {\n    throw new Error(\n      `Failed to convert block to Slate fragment ${JSON.stringify(parsedBlock)}`,\n    )\n  }\n\n  insertBlock({\n    block: fragment,\n    placement: action.placement,\n    select: action.select ?? 'start',\n    editor: action.editor,\n    schema: context.schema,\n  })\n}\n\nexport function insertBlock({\n  block,\n  placement,\n  select,\n  editor,\n  schema,\n}: {\n  block: Descendant\n  placement: 'auto' | 'after' | 'before'\n  select: 'start' | 'end' | 'none'\n  editor: PortableTextSlateEditor\n  schema: EditorSchema\n}) {\n  const [focusBlock, focusBlockPath] = getFocusBlock({editor})\n\n  if (!editor.selection || !focusBlock || !focusBlockPath) {\n    if (select !== 'none') {\n      DOMEditor.focus(editor)\n    }\n\n    const [lastBlock, lastBlockPath] = getLastBlock({editor})\n\n    if (placement === 'before') {\n      Transforms.insertNodes(editor, [block], {at: [0]})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, [0]))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, [0]))\n      }\n    } else if (placement === 'after') {\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      if (lastBlock && isEqualToEmptyEditor([lastBlock], schema)) {\n        // And if the last block was an empty text block, let's remove\n        // that too\n        Transforms.removeNodes(editor, {at: lastBlockPath})\n\n        Transforms.insertNodes(editor, [block], {\n          at: lastBlockPath,\n          select: false,\n        })\n\n        Transforms.deselect(editor)\n\n        if (select === 'start') {\n          Transforms.select(editor, Editor.start(editor, lastBlockPath))\n        } else if (select === 'end') {\n          Transforms.select(editor, Editor.end(editor, lastBlockPath))\n        }\n\n        return\n      }\n\n      if (\n        editor.isTextBlock(block) &&\n        lastBlock &&\n        editor.isTextBlock(lastBlock)\n      ) {\n        const selectionBefore = Editor.end(editor, lastBlockPath)\n\n        Transforms.insertFragment(editor, [block], {\n          at: Editor.end(editor, lastBlockPath),\n        })\n\n        if (select === 'start') {\n          Transforms.select(editor, selectionBefore)\n        } else if (select === 'none') {\n          Transforms.deselect(editor)\n        }\n\n        return\n      }\n\n      const nextPath = lastBlockPath ? [lastBlockPath[0] + 1] : [0]\n\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    }\n  } else {\n    if (placement === 'before') {\n      const currentSelection = editor.selection\n\n      Transforms.insertNodes(editor, [block], {\n        at: focusBlockPath,\n        select: false,\n      })\n\n      const adjustedSelection = Range.transform(currentSelection, {\n        type: 'move_node',\n        path: focusBlockPath,\n        newPath: [focusBlockPath[0] + 1],\n      })\n\n      if (adjustedSelection) {\n        Transforms.select(editor, adjustedSelection)\n      } else {\n        Transforms.select(editor, currentSelection)\n      }\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, focusBlockPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, focusBlockPath))\n      }\n    } else if (placement === 'after') {\n      const nextPath = [focusBlockPath[0] + 1]\n\n      const currentSelection = editor.selection\n      Transforms.insertNodes(editor, [block], {at: nextPath, select: false})\n      Transforms.select(editor, currentSelection)\n\n      if (select === 'start') {\n        Transforms.select(editor, Editor.start(editor, nextPath))\n      } else if (select === 'end') {\n        Transforms.select(editor, Editor.end(editor, nextPath))\n      }\n    } else {\n      // placement === 'auto'\n\n      const currentSelection = editor.selection\n      const focusBlockStartPoint = Editor.start(editor, focusBlockPath)\n\n      if (editor.isTextBlock(focusBlock) && editor.isTextBlock(block)) {\n        if (select === 'end') {\n          Transforms.insertFragment(editor, [block], {\n            voids: true,\n          })\n\n          return\n        }\n\n        Transforms.insertFragment(editor, [block], {\n          at: currentSelection,\n          voids: true,\n        })\n\n        if (select === 'start') {\n          if (Point.equals(currentSelection.anchor, focusBlockStartPoint)) {\n            Transforms.select(editor, Editor.start(editor, focusBlockPath))\n          } else {\n            Transforms.select(editor, currentSelection)\n          }\n        } else {\n          if (!Point.equals(currentSelection.anchor, focusBlockStartPoint)) {\n            Transforms.select(editor, currentSelection)\n          }\n        }\n      } else {\n        if (!editor.isTextBlock(focusBlock)) {\n          Transforms.insertNodes(editor, [block], {select: false})\n\n          const nextPath = [focusBlockPath[0] + 1]\n\n          if (select === 'start') {\n            Transforms.select(editor, Editor.start(editor, nextPath))\n          } else if (select === 'end') {\n            Transforms.select(editor, Editor.end(editor, nextPath))\n          }\n        } else {\n          const focusBlockStartPoint = Editor.start(editor, focusBlockPath)\n          const focusBlockEndPoint = Editor.end(editor, focusBlockPath)\n\n          if (Point.equals(currentSelection.anchor, focusBlockStartPoint)) {\n            Transforms.insertNodes(editor, [block], {\n              at: focusBlockPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, focusBlockPath))\n            }\n\n            if (isEqualToEmptyEditor([focusBlock], schema)) {\n              Transforms.removeNodes(editor, {at: Path.next(focusBlockPath)})\n            }\n          } else if (Point.equals(currentSelection.focus, focusBlockEndPoint)) {\n            const nextPath = [focusBlockPath[0] + 1]\n\n            Transforms.insertNodes(editor, [block], {\n              at: nextPath,\n              select: false,\n            })\n\n            if (select === 'start' || select === 'end') {\n              Transforms.select(editor, Editor.start(editor, nextPath))\n            }\n          } else {\n            const currentSelection = editor.selection\n            const [focusChild] = getFocusChild({editor})\n\n            if (focusChild && editor.isTextSpan(focusChild)) {\n              Transforms.insertFragment(editor, [block], {\n                at: currentSelection,\n              })\n\n              if (select === 'start' || select === 'end') {\n                Transforms.select(editor, [focusBlockPath[0] + 1])\n              } else {\n                Transforms.select(editor, currentSelection)\n              }\n            } else {\n              const nextPath = [focusBlockPath[0] + 1]\n              Transforms.insertNodes(editor, [block], {\n                at: nextPath,\n                select: false,\n              })\n              Transforms.select(editor, currentSelection)\n\n              if (select === 'start') {\n                Transforms.select(editor, Editor.start(editor, nextPath))\n              } else if (select === 'end') {\n                Transforms.select(editor, Editor.end(editor, nextPath))\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const insertTextActionImplementation: BehaviorActionImplementation<\n  'insert.text'\n> = ({action}) => {\n  action.editor.insertText(action.text)\n}\n","import {Transforms} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveBlockActionImplementation: BehaviorActionImplementation<\n  'move.block'\n> = ({action}) => {\n  const at = [toSlatePath(action.at, action.editor)[0]]\n  const to = [toSlatePath(action.to, action.editor)[0]]\n\n  Transforms.moveNodes(action.editor, {\n    at,\n    to,\n    mode: 'highest',\n  })\n}\n","import {Path} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {isKeyedSegment} from '../utils'\nimport {moveBlockActionImplementation} from './behavior.action.move.block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveBlockDownActionImplementation: BehaviorActionImplementation<\n  'move.block down'\n> = ({context, action}) => {\n  const at = [toSlatePath(action.at, action.editor)[0]]\n  const to = [Path.next(at)[0]]\n  const selection = toPortableTextRange(\n    action.editor.children,\n    {\n      anchor: {\n        path: to,\n        offset: 0,\n      },\n      focus: {\n        path: to,\n        offset: 0,\n      },\n    },\n    context.schema,\n  )\n\n  const destinationBlockKey = selection\n    ? isKeyedSegment(selection.focus.path[0])\n      ? selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  if (destinationBlockKey === undefined) {\n    console.error('Could not find destination block key')\n    return\n  }\n\n  moveBlockActionImplementation({\n    context,\n    action: {\n      type: 'move.block',\n      at: action.at,\n      to: [{_key: destinationBlockKey}],\n      editor: action.editor,\n    },\n  })\n}\n","import {Path} from 'slate'\nimport {toSlatePath} from '../internal-utils/paths'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {isKeyedSegment} from '../utils'\nimport {moveBlockActionImplementation} from './behavior.action.move.block'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const moveBlockUpActionImplementation: BehaviorActionImplementation<\n  'move.block up'\n> = ({context, action}) => {\n  const at = [toSlatePath(action.at, action.editor)[0]]\n\n  if (!Path.hasPrevious(at)) {\n    return\n  }\n\n  const to = [Path.previous(at)[0]]\n  const selection = toPortableTextRange(\n    action.editor.children,\n    {\n      anchor: {\n        path: to,\n        offset: 0,\n      },\n      focus: {\n        path: to,\n        offset: 0,\n      },\n    },\n    context.schema,\n  )\n\n  const destinationBlockKey = selection\n    ? isKeyedSegment(selection.focus.path[0])\n      ? selection.focus.path[0]._key\n      : undefined\n    : undefined\n\n  if (destinationBlockKey === undefined) {\n    console.error('Could not find destination block key')\n    return\n  }\n\n  moveBlockActionImplementation({\n    context,\n    action: {\n      type: 'move.block',\n      at: action.at,\n      to: [{_key: destinationBlockKey}],\n      editor: action.editor,\n    },\n  })\n}\n","import type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const noopActionImplementation: BehaviorActionImplementation<\n  'noop'\n> = () => {}\n","import {Transforms} from 'slate'\nimport {toSlateRange} from '../internal-utils/ranges'\nimport type {BehaviorActionImplementation} from './behavior.actions'\n\nexport const selectActionImplementation: BehaviorActionImplementation<\n  'select'\n> = ({action}) => {\n  const newSelection = toSlateRange(action.selection, action.editor)\n\n  if (newSelection) {\n    Transforms.select(action.editor, newSelection)\n  } else {\n    Transforms.deselect(action.editor)\n  }\n}\n","import {omit} from 'lodash'\nimport type {InternalBehaviorAction} from '../behaviors/behavior.types.action'\nimport type {EditorContext} from '../editor/editor-snapshot'\nimport {\n  addAnnotationActionImplementation,\n  removeAnnotationActionImplementation,\n} from '../editor/plugins/createWithEditableAPI'\nimport {removeDecoratorActionImplementation} from '../editor/plugins/createWithPortableTextMarkModel'\nimport {\n  historyRedoActionImplementation,\n  historyUndoActionImplementation,\n} from '../editor/plugins/createWithUndoRedo'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PickFromUnion} from '../type-utils'\nimport {blockSetBehaviorActionImplementation} from './behavior.action.block.set'\nimport {blockUnsetBehaviorActionImplementation} from './behavior.action.block.unset'\nimport {blurActionImplementation} from './behavior.action.blur'\nimport {decoratorAddActionImplementation} from './behavior.action.decorator.add'\nimport {deleteActionImplementation} from './behavior.action.delete'\nimport {deleteBackwardActionImplementation} from './behavior.action.delete.backward'\nimport {deleteBlockActionImplementation} from './behavior.action.delete.block'\nimport {deleteForwardActionImplementation} from './behavior.action.delete.forward'\nimport {deleteTextActionImplementation} from './behavior.action.delete.text'\nimport {effectActionImplementation} from './behavior.action.effect'\nimport {focusActionImplementation} from './behavior.action.focus'\nimport {\n  insertBreakActionImplementation,\n  insertSoftBreakActionImplementation,\n} from './behavior.action.insert-break'\nimport {insertInlineObjectActionImplementation} from './behavior.action.insert-inline-object'\nimport {insertSpanActionImplementation} from './behavior.action.insert-span'\nimport {insertBlockActionImplementation} from './behavior.action.insert.block'\nimport {insertTextActionImplementation} from './behavior.action.insert.text'\nimport {moveBlockActionImplementation} from './behavior.action.move.block'\nimport {moveBlockDownActionImplementation} from './behavior.action.move.block-down'\nimport {moveBlockUpActionImplementation} from './behavior.action.move.block-up'\nimport {noopActionImplementation} from './behavior.action.noop'\nimport {selectActionImplementation} from './behavior.action.select'\n\nconst debug = debugWithName('behaviors:action')\n\nexport type BehaviorActionImplementationContext = Pick<\n  EditorContext,\n  'keyGenerator' | 'schema'\n>\n\nexport type BehaviorActionImplementation<\n  TBehaviorActionType extends InternalBehaviorAction['type'],\n  TReturnType = void,\n> = ({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: PickFromUnion<InternalBehaviorAction, 'type', TBehaviorActionType>\n}) => TReturnType\n\ntype BehaviorActionImplementations = {\n  [TBehaviorActionType in InternalBehaviorAction['type']]: BehaviorActionImplementation<TBehaviorActionType>\n}\n\nconst behaviorActionImplementations: BehaviorActionImplementations = {\n  'annotation.add': addAnnotationActionImplementation,\n  'annotation.remove': removeAnnotationActionImplementation,\n  'block.set': blockSetBehaviorActionImplementation,\n  'block.unset': blockUnsetBehaviorActionImplementation,\n  'blur': blurActionImplementation,\n  'decorator.add': decoratorAddActionImplementation,\n  'decorator.remove': removeDecoratorActionImplementation,\n  'focus': focusActionImplementation,\n  'delete': deleteActionImplementation,\n  'delete.backward': deleteBackwardActionImplementation,\n  'delete.forward': deleteForwardActionImplementation,\n  'delete.block': deleteBlockActionImplementation,\n  'delete.text': deleteTextActionImplementation,\n  'history.redo': historyRedoActionImplementation,\n  'history.undo': historyUndoActionImplementation,\n  'insert.block': insertBlockActionImplementation,\n  'insert.break': insertBreakActionImplementation,\n  'insert.inline object': insertInlineObjectActionImplementation,\n  'insert.soft break': insertSoftBreakActionImplementation,\n  'insert.span': insertSpanActionImplementation,\n  'insert.text': insertTextActionImplementation,\n  'effect': effectActionImplementation,\n  'move.block': moveBlockActionImplementation,\n  'move.block down': moveBlockDownActionImplementation,\n  'move.block up': moveBlockUpActionImplementation,\n  'noop': noopActionImplementation,\n  'select': selectActionImplementation,\n}\n\nexport function performAction({\n  context,\n  action,\n}: {\n  context: BehaviorActionImplementationContext\n  action: InternalBehaviorAction\n}) {\n  debug(JSON.stringify(omit(action, ['editor']), null, 2))\n\n  switch (action.type) {\n    case 'annotation.add': {\n      behaviorActionImplementations['annotation.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'annotation.remove': {\n      behaviorActionImplementations['annotation.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.set': {\n      behaviorActionImplementations['block.set']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'block.unset': {\n      behaviorActionImplementations['block.unset']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'blur': {\n      behaviorActionImplementations.blur({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.add': {\n      behaviorActionImplementations['decorator.add']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'decorator.remove': {\n      behaviorActionImplementations['decorator.remove']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete': {\n      behaviorActionImplementations.delete({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.backward': {\n      behaviorActionImplementations['delete.backward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.block': {\n      behaviorActionImplementations['delete.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.forward': {\n      behaviorActionImplementations['delete.forward']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'delete.text': {\n      behaviorActionImplementations['delete.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'effect': {\n      behaviorActionImplementations.effect({\n        context,\n        action,\n      })\n      break\n    }\n    case 'focus': {\n      behaviorActionImplementations.focus({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.redo': {\n      behaviorActionImplementations['history.redo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'history.undo': {\n      behaviorActionImplementations['history.undo']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.block': {\n      behaviorActionImplementations['insert.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.inline object': {\n      behaviorActionImplementations['insert.inline object']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.break': {\n      behaviorActionImplementations['insert.break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.soft break': {\n      behaviorActionImplementations['insert.soft break']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.span': {\n      behaviorActionImplementations['insert.span']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'insert.text': {\n      behaviorActionImplementations['insert.text']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block': {\n      behaviorActionImplementations['move.block']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block down': {\n      behaviorActionImplementations['move.block down']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'move.block up': {\n      behaviorActionImplementations['move.block up']({\n        context,\n        action,\n      })\n      break\n    }\n    case 'noop': {\n      behaviorActionImplementations.noop({\n        context,\n        action,\n      })\n      break\n    }\n    default: {\n      behaviorActionImplementations.select({\n        context,\n        action,\n      })\n      break\n    }\n  }\n}\n","import {Editor} from 'slate'\nimport {insertSoftBreakActionImplementation} from '../../behavior-actions/behavior.action.insert-break'\nimport {performAction} from '../../behavior-actions/behavior.actions'\nimport {toPortableTextRange} from '../../internal-utils/ranges'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport type {EditorActor} from '../editor-machine'\nimport {isApplyingBehaviorActions} from '../with-applying-behavior-actions'\n\nexport function createWithEventListeners(\n  editorActor: EditorActor,\n  subscriptions: Array<() => () => void>,\n) {\n  return function withEventListeners(editor: Editor) {\n    if (editorActor.getSnapshot().context.maxBlocks !== undefined) {\n      return editor\n    }\n\n    subscriptions.push(() => {\n      const subscription = editorActor.on('*', (event) => {\n        switch (event.type) {\n          // These events are not relevant for Behaviors\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'internal.patch':\n          case 'patches':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n          case 'unset':\n            break\n\n          case 'custom.*':\n            editorActor.send({\n              type: 'custom behavior event',\n              behaviorEvent: event.event,\n              editor,\n            })\n            break\n\n          case 'insert.block object':\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: {\n                type: 'insert.block',\n                block: {\n                  _type: event.blockObject.name,\n                  ...(event.blockObject.value ?? {}),\n                },\n                placement: event.placement,\n              },\n              editor,\n            })\n            break\n\n          default:\n            editorActor.send({\n              type: 'behavior event',\n              behaviorEvent: event,\n              editor,\n            })\n            break\n        }\n      })\n\n      return () => {\n        subscription.unsubscribe()\n      }\n    })\n\n    const {deleteBackward, deleteForward, insertBreak, insertText, select} =\n      editor\n\n    editor.deleteBackward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteBackward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.backward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.deleteForward = (unit) => {\n      if (isApplyingBehaviorActions(editor)) {\n        deleteForward(unit)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'delete.forward',\n          unit,\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertBreak()\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertData = (dataTransfer) => {\n      if (isApplyingBehaviorActions(editor)) {\n        throw new Error('Unexpected call to .insertData(...)')\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'input.*',\n          originEvent: {\n            dataTransfer,\n          },\n        },\n        editor,\n      })\n    }\n\n    editor.insertSoftBreak = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertSoftBreakActionImplementation({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {type: 'insert.soft break', editor},\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.soft break',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.insertText = (text, options) => {\n      if (isApplyingBehaviorActions(editor)) {\n        insertText(text, options)\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'insert.text',\n          text,\n        },\n        editor,\n        defaultActionCallback: () => {\n          insertText(text, options)\n        },\n      })\n      return\n    }\n\n    editor.redo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.redo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.redo',\n        },\n        editor,\n      })\n      return\n    }\n\n    editor.select = (location) => {\n      if (isApplyingBehaviorActions(editor)) {\n        select(location)\n        return\n      }\n\n      const range = Editor.range(editor, location)\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          selection: toPortableTextRange(\n            fromSlateValue(\n              editor.children,\n              editorActor.getSnapshot().context.schema.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n            range,\n            editorActor.getSnapshot().context.schema,\n          ),\n        },\n        editor,\n        defaultActionCallback: () => {\n          select(location)\n        },\n      })\n      return\n    }\n\n    editor.setFragmentData = () => {\n      console.warn('Unexpected call to .setFragmentData(...)')\n      return\n    }\n\n    editor.undo = () => {\n      if (isApplyingBehaviorActions(editor)) {\n        performAction({\n          context: {\n            keyGenerator: editorActor.getSnapshot().context.keyGenerator,\n            schema: editorActor.getSnapshot().context.schema,\n          },\n          action: {\n            type: 'history.undo',\n            editor,\n          },\n        })\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'history.undo',\n        },\n        editor,\n      })\n      return\n    }\n\n    return editor\n  }\n}\n","import {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that the PTE maxBlocks prop is respected\n *\n */\nexport function createWithMaxBlocks(editorActor: EditorActor) {\n  return function withMaxBlocks(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n    editor.apply = (operation) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      const rows = editorActor.getSnapshot().context.maxBlocks ?? -1\n      if (rows > 0 && editor.children.length >= rows) {\n        if (\n          (operation.type === 'insert_node' ||\n            operation.type === 'split_node') &&\n          operation.path.length === 1\n        ) {\n          return\n        }\n      }\n      apply(operation)\n    }\n    return editor\n  }\n}\n","import {Editor, Element, Node, Transforms} from 'slate'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * This plugin makes sure that every new node in the editor get a new _key prop when created\n *\n */\nexport function createWithObjectKeys(\n  editorActor: EditorActor,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  return function withKeys(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply, normalizeNode} = editor\n\n    // The default behavior is to always generate a new key here.\n    // For example, when undoing and redoing we want to retain the keys, but\n    // when we create a new bold span by splitting a non-bold-span we want the produced node to get a new key.\n    editor.apply = (operation) => {\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(operation)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(operation)\n        return\n      }\n\n      if (operation.type === 'split_node') {\n        const existingKeys = [...Node.descendants(editor)].map(\n          ([node]) => node._key,\n        )\n\n        apply({\n          ...operation,\n          properties: {\n            ...operation.properties,\n            _key:\n              operation.properties._key === undefined ||\n              existingKeys.includes(operation.properties._key)\n                ? editorActor.getSnapshot().context.keyGenerator()\n                : operation.properties._key,\n          },\n        })\n\n        return\n      }\n\n      if (operation.type === 'insert_node') {\n        if (!Editor.isEditor(operation.node)) {\n          const existingKeys = [...Node.descendants(editor)].map(\n            ([node]) => node._key,\n          )\n\n          apply({\n            ...operation,\n            node: {\n              ...operation.node,\n              _key:\n                operation.node._key === undefined ||\n                existingKeys.includes(operation.node._key)\n                  ? editorActor.getSnapshot().context.keyGenerator()\n                  : operation.node._key,\n            },\n          })\n\n          return\n        }\n      }\n\n      apply(operation)\n    }\n\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n      if (Element.isElement(node) && node._type === schemaTypes.block.name) {\n        // Set key on block itself\n        if (!node._key) {\n          editorActor.send({type: 'normalizing'})\n          Transforms.setNodes(\n            editor,\n            {_key: editorActor.getSnapshot().context.keyGenerator()},\n            {at: path},\n          )\n          editorActor.send({type: 'done normalizing'})\n          return\n        }\n        // Set keys on it's children\n        for (const [child, childPath] of Node.children(editor, path)) {\n          if (!child._key) {\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {_key: editorActor.getSnapshot().context.keyGenerator()},\n              {at: childPath},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n      normalizeNode(entry)\n    }\n\n    return editor\n  }\n}\n","import {\n  applyAll,\n  type DiffMatchPatch,\n  type InsertPatch,\n  type Patch,\n  type SetPatch,\n  type UnsetPatch,\n} from '@portabletext/patches'\nimport {\n  cleanupEfficiency,\n  DIFF_DELETE,\n  DIFF_EQUAL,\n  DIFF_INSERT,\n  applyPatches as diffMatchPatchApplyPatches,\n  makeDiff,\n  parsePatch,\n} from '@sanity/diff-match-patch'\nimport type {\n  KeyedSegment,\n  Path,\n  PathSegment,\n  PortableTextBlock,\n  PortableTextChild,\n} from '@sanity/types'\nimport {\n  Element,\n  Text,\n  Transforms,\n  type Descendant,\n  type Node,\n  type Path as SlatePath,\n} from 'slate'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport {debugWithName} from './debug'\nimport {toSlateValue} from './values'\nimport {KEY_TO_SLATE_ELEMENT} from './weakMaps'\n\nconst debug = debugWithName('applyPatches')\nconst debugVerbose = debug.enabled && true\n\n/**\n * Creates a function that can apply a patch onto a PortableTextSlateEditor.\n */\nexport function createApplyPatch(\n  schemaTypes: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor, patch: Patch) => boolean {\n  return (editor: PortableTextSlateEditor, patch: Patch): boolean => {\n    let changed = false\n\n    // Save some CPU cycles by not stringifying unless enabled\n    if (debugVerbose) {\n      debug(\n        '\\n\\nNEW PATCH =============================================================',\n      )\n      debug(JSON.stringify(patch, null, 2))\n    }\n\n    try {\n      switch (patch.type) {\n        case 'insert':\n          changed = insertPatch(editor, patch, schemaTypes)\n          break\n        case 'unset':\n          changed = unsetPatch(editor, patch)\n          break\n        case 'set':\n          changed = setPatch(editor, patch)\n          break\n        case 'diffMatchPatch':\n          changed = diffMatchPatch(editor, patch)\n          break\n        default:\n          debug('Unhandled patch', patch.type)\n      }\n    } catch (err) {\n      console.error(err)\n    }\n\n    return changed\n  }\n}\n\n/**\n * Apply a remote diff match patch to the current PTE instance.\n * Note meant for external consumption, only exported for testing purposes.\n *\n * @param editor - Portable text slate editor instance\n * @param patch - The PTE diff match patch operation to apply\n * @returns true if the patch was applied, false otherwise\n * @internal\n */\nexport function diffMatchPatch(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  patch: DiffMatchPatch,\n): boolean {\n  const {block, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  if (!child || !childPath) {\n    debug('Child not found')\n    return false\n  }\n  const isSpanTextDiffMatchPatch =\n    block &&\n    editor.isTextBlock(block) &&\n    patch.path.length === 4 &&\n    patch.path[1] === 'children' &&\n    patch.path[3] === 'text'\n\n  if (!isSpanTextDiffMatchPatch || !Text.isText(child)) {\n    return false\n  }\n\n  const patches = parsePatch(patch.value)\n  const [newValue] = diffMatchPatchApplyPatches(patches, child.text, {\n    allowExceedingIndices: true,\n  })\n  const diff = cleanupEfficiency(makeDiff(child.text, newValue), 5)\n\n  debugState(editor, 'before')\n  let offset = 0\n  for (const [op, text] of diff) {\n    if (op === DIFF_INSERT) {\n      editor.apply({type: 'insert_text', path: childPath, offset, text})\n      offset += text.length\n    } else if (op === DIFF_DELETE) {\n      editor.apply({type: 'remove_text', path: childPath, offset: offset, text})\n    } else if (op === DIFF_EQUAL) {\n      offset += text.length\n    }\n  }\n  debugState(editor, 'after')\n\n  return true\n}\n\nfunction insertPatch(\n  editor: PortableTextSlateEditor,\n  patch: InsertPatch,\n  schemaTypes: PortableTextMemberSchemaTypes,\n) {\n  const {\n    block: targetBlock,\n    child: targetChild,\n    blockPath: targetBlockPath,\n    childPath: targetChildPath,\n  } = findBlockAndChildFromPath(editor, patch.path)\n  if (!targetBlock || !targetBlockPath) {\n    debug('Block not found')\n    return false\n  }\n  if (patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring patch targeting void value')\n    return false\n  }\n  // Insert blocks\n  if (patch.path.length === 1) {\n    const {items, position} = patch\n    const blocksToInsert = toSlateValue(\n      items as PortableTextBlock[],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    ) as Descendant[]\n    const targetBlockIndex = targetBlockPath[0]\n    const normalizedIdx =\n      position === 'after' ? targetBlockIndex + 1 : targetBlockIndex\n    debug(`Inserting blocks at path [${normalizedIdx}]`)\n    debugState(editor, 'before')\n    Transforms.insertNodes(editor, blocksToInsert, {at: [normalizedIdx]})\n    debugState(editor, 'after')\n    return true\n  }\n  // Insert children\n  const {items, position} = patch\n  if (!targetChild || !targetChildPath) {\n    debug('Child not found')\n    return false\n  }\n  const childrenToInsert =\n    targetBlock &&\n    toSlateValue(\n      [{...targetBlock, children: items as PortableTextChild[]}],\n      {schemaTypes},\n      KEY_TO_SLATE_ELEMENT.get(editor),\n    )\n  const targetChildIndex = targetChildPath[1]\n  const normalizedIdx =\n    position === 'after' ? targetChildIndex + 1 : targetChildIndex\n  const childInsertPath = [targetChildPath[0], normalizedIdx]\n  debug(`Inserting children at path ${childInsertPath}`)\n  debugState(editor, 'before')\n  if (childrenToInsert && Element.isElement(childrenToInsert[0])) {\n    Transforms.insertNodes(editor, childrenToInsert[0].children, {\n      at: childInsertPath,\n    })\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction setPatch(editor: PortableTextSlateEditor, patch: SetPatch) {\n  let value = patch.value\n  if (typeof patch.path[3] === 'string') {\n    value = {}\n    value[patch.path[3]] = patch.value\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  if (!block) {\n    debug('Block not found')\n    return false\n  }\n  const isTextBlock = editor.isTextBlock(block)\n\n  // Ignore patches targeting nested void data, like 'markDefs'\n  if (isTextBlock && patch.path.length > 1 && patch.path[1] !== 'children') {\n    debug('Ignoring setting void value')\n    return false\n  }\n\n  debugState(editor, 'before')\n\n  // If this is targeting a text block child\n  if (isTextBlock && child && childPath) {\n    if (Text.isText(value) && Text.isText(child)) {\n      const newText = child.text\n      const oldText = value.text\n      if (oldText !== newText) {\n        debug('Setting text property')\n        editor.apply({\n          type: 'remove_text',\n          path: childPath,\n          offset: 0,\n          text: newText,\n        })\n        editor.apply({\n          type: 'insert_text',\n          path: childPath,\n          offset: 0,\n          text: value.text,\n        })\n        // call OnChange here to emit the new selection\n        // the user's selection might be interfering with\n        editor.onChange()\n      }\n    } else {\n      debug('Setting non-text property')\n      editor.apply({\n        type: 'set_node',\n        path: childPath,\n        properties: {},\n        newProperties: value as Partial<Node>,\n      })\n    }\n    return true\n  } else if (Element.isElement(block) && patch.path.length === 1 && blockPath) {\n    debug('Setting block property')\n    const {children, ...nextRest} = value as unknown as PortableTextBlock\n    const {children: prevChildren, ...prevRest} = block || {children: undefined}\n    // Set any block properties\n    editor.apply({\n      type: 'set_node',\n      path: blockPath,\n      properties: {...prevRest},\n      newProperties: nextRest,\n    })\n    // Replace the children in the block\n    // Note that children must be explicitly inserted, and can't be set with set_node\n    debug('Setting children')\n    block.children.forEach((c, cIndex) => {\n      editor.apply({\n        type: 'remove_node',\n        path: blockPath.concat(block.children.length - 1 - cIndex),\n        node: c,\n      })\n    })\n    if (Array.isArray(children)) {\n      children.forEach((c, cIndex) => {\n        editor.apply({\n          type: 'insert_node',\n          path: blockPath.concat(cIndex),\n          node: c,\n        })\n      })\n    }\n  } else if (block && 'value' in block) {\n    if (patch.path.length > 1 && patch.path[1] !== 'children') {\n      const newVal = applyAll(block.value, [\n        {\n          ...patch,\n          path: patch.path.slice(1),\n        },\n      ])\n      Transforms.setNodes(editor, {...block, value: newVal}, {at: blockPath})\n    } else {\n      return false\n    }\n  }\n  debugState(editor, 'after')\n  return true\n}\n\nfunction unsetPatch(editor: PortableTextSlateEditor, patch: UnsetPatch) {\n  // Value\n  if (patch.path.length === 0) {\n    debug('Removing everything')\n    debugState(editor, 'before')\n    const previousSelection = editor.selection\n    Transforms.deselect(editor)\n    editor.children.forEach((_child, i) => {\n      Transforms.removeNodes(editor, {at: [i]})\n    })\n    Transforms.insertNodes(editor, editor.pteCreateTextBlock({decorators: []}))\n    if (previousSelection) {\n      Transforms.select(editor, {\n        anchor: {path: [0, 0], offset: 0},\n        focus: {path: [0, 0], offset: 0},\n      })\n    }\n    // call OnChange here to emit the new selection\n    editor.onChange()\n    debugState(editor, 'after')\n    return true\n  }\n  const {block, blockPath, child, childPath} = findBlockAndChildFromPath(\n    editor,\n    patch.path,\n  )\n\n  // Single blocks\n  if (patch.path.length === 1) {\n    if (!block || !blockPath) {\n      debug('Block not found')\n      return false\n    }\n    const blockIndex = blockPath[0]\n    debug(`Removing block at path [${blockIndex}]`)\n    debugState(editor, 'before')\n\n    Transforms.removeNodes(editor, {at: [blockIndex]})\n    debugState(editor, 'after')\n    return true\n  }\n\n  // Unset on text block children\n  if (\n    editor.isTextBlock(block) &&\n    patch.path[1] === 'children' &&\n    patch.path.length === 3\n  ) {\n    if (!child || !childPath) {\n      debug('Child not found')\n      return false\n    }\n    debug(`Unsetting child at path ${JSON.stringify(childPath)}`)\n    debugState(editor, 'before')\n    if (debugVerbose) {\n      debug(`Removing child at path ${JSON.stringify(childPath)}`)\n    }\n    Transforms.removeNodes(editor, {at: childPath})\n    debugState(editor, 'after')\n    return true\n  }\n  return false\n}\n\nfunction isKeyedSegment(segment: PathSegment): segment is KeyedSegment {\n  return typeof segment === 'object' && '_key' in segment\n}\n\nfunction debugState(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection'\n  >,\n  stateName: string,\n) {\n  if (!debugVerbose) {\n    return\n  }\n\n  debug(`Children ${stateName}:`, JSON.stringify(editor.children, null, 2))\n  debug(`Selection ${stateName}: `, JSON.stringify(editor.selection, null, 2))\n}\n\nfunction findBlockFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {block?: Descendant; path?: SlatePath} {\n  let blockIndex = -1\n  const block = editor.children.find((node: Descendant, index: number) => {\n    const isMatch = isKeyedSegment(path[0])\n      ? node._key === path[0]._key\n      : index === path[0]\n    if (isMatch) {\n      blockIndex = index\n    }\n    return isMatch\n  })\n  if (!block) {\n    return {}\n  }\n  return {block, path: [blockIndex] as SlatePath}\n}\n\nfunction findBlockAndChildFromPath(\n  editor: Pick<\n    PortableTextSlateEditor,\n    'children' | 'isTextBlock' | 'apply' | 'selection' | 'onChange'\n  >,\n  path: Path,\n): {\n  child?: Descendant\n  childPath?: SlatePath\n  block?: Descendant\n  blockPath?: SlatePath\n} {\n  const {block, path: blockPath} = findBlockFromPath(editor, path)\n  if (!(Element.isElement(block) && path[1] === 'children')) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  let childIndex = -1\n  const child = block.children.find((node, index: number) => {\n    const isMatch = isKeyedSegment(path[2])\n      ? node._key === path[2]._key\n      : index === path[2]\n    if (isMatch) {\n      childIndex = index\n    }\n    return isMatch\n  })\n  if (!child) {\n    return {block, blockPath, child: undefined, childPath: undefined}\n  }\n  return {\n    block,\n    child,\n    blockPath,\n    childPath: blockPath?.concat(childIndex) as SlatePath,\n  }\n}\n","import {insert, setIfMissing, unset, type Patch} from '@portabletext/patches'\nimport {\n  Editor,\n  type Descendant,\n  type InsertNodeOperation,\n  type InsertTextOperation,\n  type MergeNodeOperation,\n  type MoveNodeOperation,\n  type Operation,\n  type RemoveNodeOperation,\n  type RemoveTextOperation,\n  type SetNodeOperation,\n  type SplitNodeOperation,\n} from 'slate'\nimport {createApplyPatch} from '../../internal-utils/applyPatch'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../../internal-utils/values'\nimport {\n  IS_PROCESSING_REMOTE_CHANGES,\n  KEY_TO_VALUE_ELEMENT,\n} from '../../internal-utils/weakMaps'\nimport {withRemoteChanges} from '../../internal-utils/withChanges'\nimport {\n  isPatching,\n  PATCHING,\n  withoutPatching,\n} from '../../internal-utils/withoutPatching'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {getCurrentActionId} from '../with-applying-behavior-actions'\nimport {withoutSaving} from './createWithUndoRedo'\n\nconst debug = debugWithName('plugin:withPatches')\nconst debugVerbose = false\n\nexport interface PatchFunctions {\n  insertNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  insertTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: InsertTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  mergeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MergeNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  moveNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: MoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  removeTextPatch: (\n    editor: PortableTextSlateEditor,\n    operation: RemoveTextOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  setNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SetNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n  splitNodePatch: (\n    editor: PortableTextSlateEditor,\n    operation: SplitNodeOperation,\n    previousChildren: Descendant[],\n  ) => Patch[]\n}\n\ninterface Options {\n  editorActor: EditorActor\n  patchFunctions: PatchFunctions\n  schemaTypes: PortableTextMemberSchemaTypes\n  subscriptions: Array<() => () => void>\n}\n\nexport function createWithPatches({\n  editorActor,\n  patchFunctions,\n  schemaTypes,\n  subscriptions,\n}: Options): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  // The previous editor children are needed to figure out the _key of deleted nodes\n  // The editor.children would no longer contain that information if the node is already deleted.\n  let previousChildren: Descendant[]\n\n  const applyPatch = createApplyPatch(schemaTypes)\n\n  return function withPatches(editor: PortableTextSlateEditor) {\n    IS_PROCESSING_REMOTE_CHANGES.set(editor, false)\n    PATCHING.set(editor, true)\n    previousChildren = [...editor.children]\n\n    const {apply} = editor\n    let bufferedPatches: Patch[] = []\n\n    const handleBufferedRemotePatches = () => {\n      if (bufferedPatches.length === 0) {\n        return\n      }\n      const patches = bufferedPatches\n      bufferedPatches = []\n      let changed = false\n      withRemoteChanges(editor, () => {\n        Editor.withoutNormalizing(editor, () => {\n          withoutPatching(editor, () => {\n            withoutSaving(editor, () => {\n              patches.forEach((patch) => {\n                if (debug.enabled)\n                  debug(`Handling remote patch ${JSON.stringify(patch)}`)\n                changed = applyPatch(editor, patch)\n              })\n            })\n          })\n        })\n        if (changed) {\n          editor.normalize()\n          editor.onChange()\n        }\n      })\n    }\n\n    const handlePatches = ({patches}: {patches: Patch[]}) => {\n      const remotePatches = patches.filter((p) => p.origin !== 'local')\n      if (remotePatches.length === 0) {\n        return\n      }\n      bufferedPatches = bufferedPatches.concat(remotePatches)\n      handleBufferedRemotePatches()\n    }\n\n    subscriptions.push(() => {\n      debug('Subscribing to remote patches')\n      const sub = editorActor.on('patches', handlePatches)\n      return () => {\n        debug('Unsubscribing to remote patches')\n        sub.unsubscribe()\n      }\n    })\n\n    editor.apply = (operation: Operation): void | Editor => {\n      let patches: Patch[] = []\n\n      // Update previous children here before we apply\n      previousChildren = editor.children\n\n      const editorWasEmpty = isEqualToEmptyEditor(previousChildren, schemaTypes)\n\n      // Apply the operation\n      apply(operation)\n\n      const editorIsEmpty = isEqualToEmptyEditor(editor.children, schemaTypes)\n\n      if (!isPatching(editor)) {\n        if (debugVerbose && debug.enabled)\n          debug(\n            `Editor is not producing patch for operation ${operation.type}`,\n            operation,\n          )\n        return editor\n      }\n\n      // If the editor was empty and now isn't, insert the placeholder into it.\n      if (\n        editorWasEmpty &&\n        !editorIsEmpty &&\n        operation.type !== 'set_selection'\n      ) {\n        patches.push(insert(previousChildren, 'before', [0]))\n      }\n\n      switch (operation.type) {\n        case 'insert_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_text':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeTextPatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'remove_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.removeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'split_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.splitNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'insert_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.insertNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'set_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.setNodePatch(editor, operation, previousChildren),\n          ]\n          break\n        case 'merge_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.mergeNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        case 'move_node':\n          patches = [\n            ...patches,\n            ...patchFunctions.moveNodePatch(\n              editor,\n              operation,\n              previousChildren,\n            ),\n          ]\n          break\n        default:\n        // Do nothing\n      }\n\n      // Unset the value if a operation made the editor empty\n      if (\n        !editorWasEmpty &&\n        editorIsEmpty &&\n        ['merge_node', 'set_node', 'remove_text', 'remove_node'].includes(\n          operation.type,\n        )\n      ) {\n        patches = [...patches, unset([])]\n        editorActor.send({\n          type: 'notify.unset',\n          previousValue: fromSlateValue(\n            previousChildren,\n            schemaTypes.block.name,\n            KEY_TO_VALUE_ELEMENT.get(editor),\n          ),\n        })\n      }\n\n      // Prepend patches with setIfMissing if going from empty editor to something involving a patch.\n      if (editorWasEmpty && patches.length > 0) {\n        patches = [setIfMissing([], []), ...patches]\n      }\n\n      // Emit all patches\n      if (patches.length > 0) {\n        for (const patch of patches) {\n          editorActor.send({\n            type: 'internal.patch',\n            patch: {...patch, origin: 'local'},\n            actionId: getCurrentActionId(editor),\n            value: fromSlateValue(\n              editor.children,\n              schemaTypes.block.name,\n              KEY_TO_VALUE_ELEMENT.get(editor),\n            ),\n          })\n        }\n      }\n      return editor\n    }\n    return editor\n  }\n}\n","import {Editor, Path} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isChangingRemotely} from '../../internal-utils/withChanges'\nimport {isRedoing, isUndoing} from '../../internal-utils/withUndoRedo'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {SlateTextBlock, VoidElement} from '../../types/slate'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPlaceholderBlock')\n\n/**\n * Keep a \"placeholder\" block present when the editor is empty\n *\n */\nexport function createWithPlaceholderBlock(\n  editorActor: EditorActor,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  return function withPlaceholderBlock(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const {apply} = editor\n\n    editor.apply = (op) => {\n      if (editorActor.getSnapshot().matches({'edit mode': 'read only'})) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is processing\n       * remote changes.\n       */\n      if (isChangingRemotely(editor)) {\n        apply(op)\n        return\n      }\n\n      /**\n       * We don't want to run any side effects when the editor is undoing or\n       * redoing operations.\n       */\n      if (isUndoing(editor) || isRedoing(editor)) {\n        apply(op)\n        return\n      }\n\n      if (op.type === 'remove_node') {\n        const node = op.node as SlateTextBlock | VoidElement\n        if (op.path[0] === 0 && Editor.isVoid(editor, node)) {\n          // Check next path, if it exists, do nothing\n          const nextPath = Path.next(op.path)\n          // Is removing the first block which is a void (not a text block), add a new empty text block in it, if there is no other element in the next path\n          if (!editor.children[nextPath[0]]) {\n            debug('Adding placeholder block')\n            Editor.insertNode(\n              editor,\n              editor.pteCreateTextBlock({decorators: []}),\n            )\n          }\n        }\n      }\n      apply(op)\n    }\n    return editor\n  }\n}\n","import {Editor, Path, Text as SlateText, Transforms} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextBlockStyle')\n\nexport function createWithPortableTextBlockStyle(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  const defaultStyle = types.styles[0].value\n  return function withPortableTextBlockStyle(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    // Extend Slate's default normalization to reset split node to normal style\n    // if there is no text at the right end of the split.\n    const {normalizeNode} = editor\n\n    editor.normalizeNode = (nodeEntry) => {\n      const [, path] = nodeEntry\n\n      for (const op of editor.operations) {\n        if (\n          op.type === 'split_node' &&\n          op.path.length === 1 &&\n          editor.isTextBlock(op.properties) &&\n          op.properties.style !== defaultStyle &&\n          op.path[0] === path[0] &&\n          !Path.equals(path, op.path)\n        ) {\n          const [child] = Editor.node(editor, [op.path[0] + 1, 0])\n          if (SlateText.isText(child) && child.text === '') {\n            debug(`Normalizing split node to ${defaultStyle} style`, op)\n            editorActor.send({type: 'normalizing'})\n            Transforms.setNodes(\n              editor,\n              {style: defaultStyle},\n              {at: [op.path[0] + 1], voids: false},\n            )\n            editorActor.send({type: 'done normalizing'})\n            return\n          }\n        }\n      }\n\n      normalizeNode(nodeEntry)\n    }\n\n    return editor\n  }\n}\n","import type {BaseRange} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {\n  toPortableTextRange,\n  type ObjectWithKeyAndType,\n} from '../../internal-utils/ranges'\nimport {SLATE_TO_PORTABLE_TEXT_RANGE} from '../../internal-utils/weakMaps'\nimport type {\n  EditorSelection,\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withPortableTextSelections')\nconst debugVerbose = debug.enabled && false\n\n// This plugin will make sure that we emit a PT selection whenever the editor has changed.\nexport function createWithPortableTextSelections(\n  editorActor: EditorActor,\n  types: PortableTextMemberSchemaTypes,\n): (editor: PortableTextSlateEditor) => PortableTextSlateEditor {\n  let prevSelection: BaseRange | null = null\n  return function withPortableTextSelections(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    const emitPortableTextSelection = () => {\n      if (prevSelection !== editor.selection) {\n        let ptRange: EditorSelection = null\n        if (editor.selection) {\n          const existing = SLATE_TO_PORTABLE_TEXT_RANGE.get(editor.selection)\n          if (existing) {\n            ptRange = existing\n          } else {\n            const value = editor.children satisfies ObjectWithKeyAndType[]\n            ptRange = toPortableTextRange(value, editor.selection, types)\n            SLATE_TO_PORTABLE_TEXT_RANGE.set(editor.selection, ptRange)\n          }\n        }\n        if (debugVerbose) {\n          debug(\n            `Emitting selection ${JSON.stringify(ptRange || null)} (${JSON.stringify(\n              editor.selection,\n            )})`,\n          )\n        }\n        if (ptRange) {\n          editorActor.send({type: 'notify.selection', selection: ptRange})\n        } else {\n          editorActor.send({type: 'notify.selection', selection: null})\n        }\n      }\n      prevSelection = editor.selection\n    }\n\n    const {onChange} = editor\n    editor.onChange = () => {\n      onChange()\n      if (!editorActor.getSnapshot().matches({setup: 'setting up'})) {\n        emitPortableTextSelection()\n      }\n    }\n    return editor\n  }\n}\n","import {\n  isPortableTextListBlock,\n  isPortableTextSpan,\n  isPortableTextTextBlock,\n  type PortableTextListBlock,\n  type PortableTextSpan,\n  type PortableTextTextBlock,\n} from '@sanity/types'\nimport {Transforms, type Element} from 'slate'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\nconst debug = debugWithName('plugin:withSchemaTypes')\n/**\n * This plugin makes sure that schema types are recognized properly by Slate as blocks, voids, inlines\n *\n */\nexport function createWithSchemaTypes({\n  editorActor,\n  schemaTypes,\n}: {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}) {\n  return function withSchemaTypes(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.isTextBlock = (value: unknown): value is PortableTextTextBlock => {\n      return (\n        isPortableTextTextBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isTextSpan = (value: unknown): value is PortableTextSpan => {\n      return isPortableTextSpan(value) && value._type === schemaTypes.span.name\n    }\n    editor.isListBlock = (value: unknown): value is PortableTextListBlock => {\n      return (\n        isPortableTextListBlock(value) && value._type === schemaTypes.block.name\n      )\n    }\n    editor.isVoid = (element: Element): boolean => {\n      return (\n        schemaTypes.block.name !== element._type &&\n        (schemaTypes.blockObjects\n          .map((obj) => obj.name)\n          .includes(element._type) ||\n          schemaTypes.inlineObjects\n            .map((obj) => obj.name)\n            .includes(element._type))\n      )\n    }\n    editor.isInline = (element: Element): boolean => {\n      const inlineSchemaTypes = schemaTypes.inlineObjects.map((obj) => obj.name)\n      return (\n        inlineSchemaTypes.includes(element._type) &&\n        '__inline' in element &&\n        element.__inline === true\n      )\n    }\n\n    // Extend Slate's default normalization\n    const {normalizeNode} = editor\n    editor.normalizeNode = (entry) => {\n      const [node, path] = entry\n\n      // If text block children node is missing _type, set it to the span type\n      if (node._type === undefined && path.length === 2) {\n        debug('Setting span type on text node without a type')\n        const span = node as PortableTextSpan\n        const key =\n          span._key || editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(\n          editor,\n          {...span, _type: schemaTypes.span.name, _key: key},\n          {at: path},\n        )\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      // catches cases when the children are missing keys but excludes it when the normalize is running the node as the editor object\n      if (node._key === undefined && (path.length === 1 || path.length === 2)) {\n        debug('Setting missing key on child node without a key')\n        const key = editorActor.getSnapshot().context.keyGenerator()\n        editorActor.send({type: 'normalizing'})\n        Transforms.setNodes(editor, {_key: key}, {at: path})\n        editorActor.send({type: 'done normalizing'})\n        return\n      }\n\n      normalizeNode(entry)\n    }\n    return editor\n  }\n}\n","import {toSlateValue} from '../../internal-utils/values'\nimport type {\n  PortableTextMemberSchemaTypes,\n  PortableTextSlateEditor,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\ninterface Options {\n  editorActor: EditorActor\n  schemaTypes: PortableTextMemberSchemaTypes\n}\n\n/**\n * This plugin makes various util commands available in the editor\n *\n */\nexport function createWithUtils({editorActor, schemaTypes}: Options) {\n  return function withUtils(\n    editor: PortableTextSlateEditor,\n  ): PortableTextSlateEditor {\n    editor.pteCreateTextBlock = (options: {\n      decorators: Array<string>\n      listItem?: string\n      level?: number\n    }) => {\n      const block = toSlateValue(\n        [\n          {\n            _type: schemaTypes.block.name,\n            _key: editorActor.getSnapshot().context.keyGenerator(),\n            style: schemaTypes.styles[0].value || 'normal',\n            ...(options.listItem ? {listItem: options.listItem} : {}),\n            ...(options.level ? {level: options.level} : {}),\n            markDefs: [],\n            children: [\n              {\n                _type: 'span',\n                _key: editorActor.getSnapshot().context.keyGenerator(),\n                text: '',\n                marks: options.decorators.filter((decorator) =>\n                  schemaTypes.decorators.find(({value}) => value === decorator),\n                ),\n              },\n            ],\n          },\n        ],\n        {schemaTypes},\n      )[0]\n      return block\n    }\n    return editor\n  }\n}\n","import type {BaseOperation, Editor, Node, NodeEntry} from 'slate'\nimport {createOperationToPatches} from '../../internal-utils/operationToPatches'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {createWithEventListeners} from './create-with-event-listeners'\nimport {createWithMaxBlocks} from './createWithMaxBlocks'\nimport {createWithObjectKeys} from './createWithObjectKeys'\nimport {createWithPatches} from './createWithPatches'\nimport {createWithPlaceholderBlock} from './createWithPlaceholderBlock'\nimport {createWithPortableTextBlockStyle} from './createWithPortableTextBlockStyle'\nimport {createWithPortableTextMarkModel} from './createWithPortableTextMarkModel'\nimport {createWithPortableTextSelections} from './createWithPortableTextSelections'\nimport {createWithSchemaTypes} from './createWithSchemaTypes'\nimport {createWithUndoRedo} from './createWithUndoRedo'\nimport {createWithUtils} from './createWithUtils'\n\nexport interface OriginalEditorFunctions {\n  apply: (operation: BaseOperation) => void\n  onChange: () => void\n  normalizeNode: (entry: NodeEntry<Node>) => void\n}\n\ntype PluginsOptions = {\n  editorActor: EditorActor\n  subscriptions: Array<() => () => void>\n}\n\nexport const withPlugins = <T extends Editor>(\n  editor: T,\n  options: PluginsOptions,\n): PortableTextSlateEditor => {\n  const e = editor as T & PortableTextSlateEditor\n  const {editorActor} = options\n  const schemaTypes = editorActor.getSnapshot().context.schema\n  const operationToPatches = createOperationToPatches(schemaTypes)\n  const withObjectKeys = createWithObjectKeys(editorActor, schemaTypes)\n  const withSchemaTypes = createWithSchemaTypes({\n    editorActor,\n    schemaTypes,\n  })\n  const withPatches = createWithPatches({\n    editorActor,\n    patchFunctions: operationToPatches,\n    schemaTypes,\n    subscriptions: options.subscriptions,\n  })\n  const withMaxBlocks = createWithMaxBlocks(editorActor)\n  const withUndoRedo = createWithUndoRedo({\n    editorActor,\n    blockSchemaType: schemaTypes.block,\n    subscriptions: options.subscriptions,\n  })\n  const withPortableTextMarkModel = createWithPortableTextMarkModel(\n    editorActor,\n    schemaTypes,\n  )\n  const withPortableTextBlockStyle = createWithPortableTextBlockStyle(\n    editorActor,\n    schemaTypes,\n  )\n\n  const withPlaceholderBlock = createWithPlaceholderBlock(editorActor)\n\n  const withUtils = createWithUtils({\n    editorActor,\n    schemaTypes,\n  })\n  const withPortableTextSelections = createWithPortableTextSelections(\n    editorActor,\n    schemaTypes,\n  )\n  const withEventListeners = createWithEventListeners(\n    editorActor,\n    options.subscriptions,\n  )\n\n  // Ordering is important here, selection dealing last, data manipulation in the middle and core model stuff first.\n  return withEventListeners(\n    withSchemaTypes(\n      withObjectKeys(\n        withPortableTextMarkModel(\n          withPortableTextBlockStyle(\n            withPlaceholderBlock(\n              withUtils(\n                withMaxBlocks(\n                  withUndoRedo(withPatches(withPortableTextSelections(e))),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ),\n  )\n}\n","import {createEditor, type Descendant} from 'slate'\nimport {withReact} from 'slate-react'\nimport {debugWithName} from '../internal-utils/debug'\nimport {\n  KEY_TO_SLATE_ELEMENT,\n  KEY_TO_VALUE_ELEMENT,\n} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\nimport {withPlugins} from './plugins/with-plugins'\n\nconst debug = debugWithName('component:PortableTextEditor:SlateContainer')\n\ntype SlateEditorConfig = {\n  editorActor: EditorActor\n}\n\nexport type SlateEditor = {\n  instance: PortableTextSlateEditor\n  initialValue: Array<Descendant>\n}\n\nconst slateEditors = new WeakMap<EditorActor, SlateEditor>()\n\nexport function createSlateEditor(config: SlateEditorConfig): SlateEditor {\n  const existingSlateEditor = slateEditors.get(config.editorActor)\n\n  if (existingSlateEditor) {\n    debug('Reusing existing Slate editor instance', config.editorActor.id)\n    return existingSlateEditor\n  }\n\n  debug('Creating new Slate editor instance', config.editorActor.id)\n\n  const unsubscriptions: Array<() => void> = []\n  const subscriptions: Array<() => () => void> = []\n\n  const instance = withPlugins(withReact(createEditor()), {\n    editorActor: config.editorActor,\n    subscriptions,\n  })\n\n  KEY_TO_VALUE_ELEMENT.set(instance, {})\n  KEY_TO_SLATE_ELEMENT.set(instance, {})\n\n  for (const subscription of subscriptions) {\n    unsubscriptions.push(subscription())\n  }\n\n  const initialValue = [instance.pteCreateTextBlock({decorators: []})]\n\n  const slateEditor: SlateEditor = {\n    instance,\n    initialValue,\n  }\n\n  slateEditors.set(config.editorActor, slateEditor)\n\n  return slateEditor\n}\n","export const keyIs = {\n  lineBreak: (event) => event.key === 'Enter' && event.shiftKey,\n} satisfies Record<string, KeyboardEventPredicate>\n\ntype KeyboardEventPredicate = (\n  event: Pick<\n    KeyboardEvent,\n    'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n  >,\n) => boolean\n","import {keyIs} from '../internal-utils/key-is'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * On WebKit, Shift+Enter results in an `insertParagraph` input event rather\n * than an `insertLineBreak` input event. This Behavior makes sure we catch\n * that `keyboard.keydown` event beforehand and raise an `insert.soft break` manually.\n */\nexport const raiseInsertSoftBreak = defineBehavior({\n  on: 'keyboard.keydown',\n  guard: ({event}) => keyIs.lineBreak(event.originEvent),\n  actions: [() => [raise({type: 'insert.soft break'})]],\n})\n","import {isActiveAnnotation} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const internalAnnotationBehaviors = [\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.remove', annotation: event.annotation}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'annotation.toggle',\n    guard: ({snapshot, event}) =>\n      !isActiveAnnotation(event.annotation.name)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'annotation.add', annotation: event.annotation}),\n      ],\n    ],\n  }),\n]\n","import {isActiveDecorator} from '../selectors'\nimport {blockOffsetsToSelection} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const internalDecoratorBehaviors = [\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => isActiveDecorator(event.decorator)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'decorator.remove', decorator: event.decorator}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'decorator.toggle',\n    guard: ({snapshot, event}) => {\n      const manualSelection = event.offsets\n        ? blockOffsetsToSelection({\n            value: snapshot.context.value,\n            offsets: event.offsets,\n          })\n        : null\n\n      if (manualSelection) {\n        return !isActiveDecorator(event.decorator)({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: manualSelection,\n          },\n        })\n      }\n\n      return !isActiveDecorator(event.decorator)(snapshot)\n    },\n    actions: [\n      ({event}) => [\n        raise({\n          ...event,\n          type: 'decorator.add',\n        }),\n      ],\n    ],\n  }),\n]\n","import {getFocusTextBlock} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const internalInsertBehaviors = [\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'before',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'before' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'after',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      if (event.placement !== 'auto') {\n        return false\n      }\n\n      const focusTextBlock = getFocusTextBlock(snapshot)\n\n      if (!focusTextBlock) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) =>\n        event.blocks.length === 1\n          ? [\n              raise({\n                type: 'insert.block',\n                block: event.blocks[0],\n                placement: 'auto',\n                select: 'end',\n              }),\n            ]\n          : event.blocks.flatMap((block, index) =>\n              index === 0\n                ? [\n                    raise({\n                      type: 'insert.break',\n                    }),\n                    raise({\n                      type: 'select.previous block',\n                      select: 'end',\n                    }),\n                    raise({\n                      type: 'insert.block',\n                      block,\n                      placement: 'auto',\n                      select: 'end',\n                    }),\n                  ]\n                : index === event.blocks.length - 1\n                  ? [\n                      raise({\n                        type: 'select.next block',\n                        select: 'start',\n                      }),\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'auto',\n                        select: 'end',\n                      }),\n                    ]\n                  : [\n                      raise({\n                        type: 'insert.block',\n                        block,\n                        placement: 'after',\n                        select: 'end',\n                      }),\n                    ],\n            ),\n    ],\n  }),\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({event}) => event.placement === 'auto',\n    actions: [\n      ({event}) =>\n        event.blocks.map((block, index) =>\n          raise({\n            type: 'insert.block',\n            block,\n            placement: index === 0 ? 'auto' : 'after',\n            select: 'end',\n          }),\n        ),\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveListItem} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const internalListItemBehaviors = [\n  defineBehavior({\n    on: 'list item.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              level: 1,\n              listItem: event.listItem,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['level', 'listItem'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [\n        raise({type: 'list item.remove', listItem: event.listItem}),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'list item.toggle',\n    guard: ({snapshot, event}) => !isActiveListItem(event.listItem)(snapshot),\n    actions: [\n      ({event}) => [raise({type: 'list item.add', listItem: event.listItem})],\n    ],\n  }),\n]\n","import {getNextBlock, getPreviousBlock} from '../selectors'\nimport {getBlockEndPoint, getBlockStartPoint} from '../utils'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const internalSelectBehaviors = [\n  defineBehavior({\n    on: 'select.previous block',\n    guard: ({snapshot, event}) => {\n      const previousBlock = getPreviousBlock(snapshot)\n\n      if (!previousBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint(previousBlock)\n          : getBlockStartPoint(previousBlock)\n\n      return {\n        selection: {\n          anchor: point,\n          focus: point,\n        },\n      }\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'select.next block',\n    guard: ({snapshot, event}) => {\n      const nextBlock = getNextBlock(snapshot)\n\n      if (!nextBlock) {\n        return false\n      }\n\n      const point =\n        event.select === 'end'\n          ? getBlockEndPoint(nextBlock)\n          : getBlockStartPoint(nextBlock)\n\n      return {selection: {anchor: point, focus: point}}\n    },\n    actions: [\n      (_, {selection}) => [\n        raise({\n          type: 'select',\n          selection,\n        }),\n      ],\n    ],\n  }),\n]\n","import {getSelectedTextBlocks, isActiveStyle} from '../selectors'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport const internalStyleBehaviors = [\n  defineBehavior({\n    on: 'style.add',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      ({event}, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.set',\n            at: block.path,\n            props: {\n              style: event.style,\n            },\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.remove',\n    guard: ({snapshot}) => {\n      const selectedTextBlocks = getSelectedTextBlocks(snapshot)\n\n      return {selectedTextBlocks}\n    },\n    actions: [\n      (_, {selectedTextBlocks}) =>\n        selectedTextBlocks.map((block) =>\n          raise({\n            type: 'block.unset',\n            at: block.path,\n            props: ['style'],\n          }),\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.remove', style: event.style})]],\n  }),\n  defineBehavior({\n    on: 'style.toggle',\n    guard: ({snapshot, event}) => !isActiveStyle(event.style)(snapshot),\n    actions: [({event}) => [raise({type: 'style.add', style: event.style})]],\n  }),\n]\n","import {isTextBlock} from '../internal-utils/parse-blocks'\nimport * as selectors from '../selectors'\nimport {getTextBlockText} from '../utils'\nimport {raiseInsertSoftBreak} from './behavior.default.raise-soft-break'\nimport {internalAnnotationBehaviors} from './behavior.internal.annotation'\nimport {internalDecoratorBehaviors} from './behavior.internal.decorator'\nimport {internalInsertBehaviors} from './behavior.internal.insert'\nimport {internalListItemBehaviors} from './behavior.internal.list-item'\nimport {internalSelectBehaviors} from './behavior.internal.select'\nimport {internalStyleBehaviors} from './behavior.internal.style'\nimport {raise} from './behavior.types.action'\nimport {defineBehavior} from './behavior.types.behavior'\n\nconst raiseDeserializationSuccessOrFailure = defineBehavior({\n  on: 'deserialize',\n  guard: ({snapshot, event}) => {\n    const deserializeEvents = snapshot.context.converters.flatMap(\n      (converter) => {\n        const data = event.originEvent.originEvent.dataTransfer.getData(\n          converter.mimeType,\n        )\n\n        if (!data) {\n          return []\n        }\n\n        return [\n          converter.deserialize({\n            snapshot,\n            event: {type: 'deserialize', data},\n          }),\n        ]\n      },\n    )\n\n    const firstSuccess = deserializeEvents.find(\n      (deserializeEvent) => deserializeEvent.type === 'deserialization.success',\n    )\n\n    if (!firstSuccess) {\n      return {\n        type: 'deserialization.failure',\n        mimeType: '*/*',\n        reason: deserializeEvents\n          .map((deserializeEvent) =>\n            deserializeEvent.type === 'deserialization.failure'\n              ? deserializeEvent.reason\n              : '',\n          )\n          .join(', '),\n      } as const\n    }\n\n    return firstSuccess\n  },\n  actions: [\n    ({event}, deserializeEvent) => [\n      raise({\n        ...deserializeEvent,\n        originEvent: event.originEvent,\n      }),\n    ],\n  ],\n})\n\nconst raiseSerializationSuccessOrFailure = defineBehavior({\n  on: 'serialize',\n  guard: ({snapshot, event}) => {\n    if (snapshot.context.converters.length === 0) {\n      return false\n    }\n\n    const serializeEvents = snapshot.context.converters.map((converter) =>\n      converter.serialize({\n        snapshot,\n        event: {\n          ...event,\n          originEvent: event.originEvent.type,\n        },\n      }),\n    )\n\n    if (serializeEvents.length === 0) {\n      return false\n    }\n\n    return serializeEvents\n  },\n  actions: [\n    ({event}, serializeEvents) =>\n      serializeEvents.map((serializeEvent) => {\n        return raise({\n          ...serializeEvent,\n          originEvent: event.originEvent,\n        })\n      }),\n  ],\n})\n\nexport const defaultBehaviors = [\n  defineBehavior({\n    on: 'clipboard.copy',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'clipboard.copy',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      const focusSpan = selectors.getFocusSpan(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      return focusSpan && selectionCollapsed\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'clipboard.cut',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection\n        ? {\n            selection: snapshot.context.selection,\n          }\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n        raise({\n          type: 'delete',\n          selection,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.dragstart',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'serialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.success',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            event.originEvent.originEvent.dataTransfer.setData(\n              event.mimeType,\n              event.data,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'serialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Serialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    guard: ({snapshot, event}) => {\n      const dragOrigin = snapshot.beta.internalDrag?.origin\n      const dropPosition = event.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n      return droppingOnDragOrigin\n    },\n    actions: [() => [{type: 'noop'}]],\n  }),\n  defineBehavior({\n    on: 'drag.drop',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'select',\n          selection: event.position.selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      if (\n        event.originEvent.type !== 'drag.drop' ||\n        snapshot.beta.internalDrag === undefined\n      ) {\n        return false\n      }\n\n      const dragOrigin = snapshot.beta.internalDrag.origin\n      const dropPosition = event.originEvent.position.selection\n      const droppingOnDragOrigin = dragOrigin\n        ? selectors.isOverlappingSelection(dropPosition)({\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: dragOrigin.selection,\n            },\n          })\n        : false\n\n      const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      const draggedBlocks = selectors.getSelectedBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragOrigin.selection,\n        },\n      })\n\n      if (!droppingOnDragOrigin) {\n        return {\n          draggingEntireBlocks,\n          draggedBlocks,\n          dragOrigin,\n          originEvent: event.originEvent,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (\n        {event},\n        {draggingEntireBlocks, draggedBlocks, dragOrigin, originEvent},\n      ) => [\n        ...(draggingEntireBlocks\n          ? draggedBlocks.map((block) =>\n              raise({\n                type: 'delete.block',\n                at: block.path,\n              }),\n            )\n          : [\n              raise({\n                type: 'delete',\n                selection: dragOrigin.selection,\n              }),\n            ]),\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: draggingEntireBlocks\n            ? originEvent.position.block === 'start'\n              ? 'before'\n              : originEvent.position.block === 'end'\n                ? 'after'\n                : 'auto'\n            : 'auto',\n        }),\n      ],\n    ],\n  }),\n  /**\n   * If we are pasting text/plain into a text block then we can probably\n   * assume that the intended behavior is that the pasted text inherits\n   * formatting from the text it's pasted into.\n   */\n  defineBehavior({\n    on: 'deserialization.success',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        focusTextBlock &&\n        event.mimeType === 'text/plain' &&\n        event.originEvent.type === 'clipboard.paste'\n      ) {\n        const activeDecorators = snapshot.context.activeDecorators\n        const activeAnnotations = selectors.getActiveAnnotations(snapshot)\n\n        return {\n          activeAnnotations,\n          activeDecorators,\n          textRuns: event.data.flatMap((block) =>\n            isTextBlock(snapshot.context.schema, block)\n              ? [getTextBlockText(block)]\n              : [],\n          ),\n        }\n      }\n\n      return false\n    },\n    actions: [\n      (_, {activeAnnotations, activeDecorators, textRuns}) =>\n        textRuns.flatMap((textRun, index) =>\n          index !== textRuns.length - 1\n            ? [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n                raise({type: 'insert.break'}),\n              ]\n            : [\n                raise({\n                  type: 'insert.span',\n                  text: textRun,\n                  decorators: activeDecorators,\n                  annotations: activeAnnotations.map(\n                    ({_key, _type, ...value}) => ({\n                      name: _type,\n                      value,\n                    }),\n                  ),\n                }),\n              ],\n        ),\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.success',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'insert.blocks',\n          blocks: event.data,\n          placement: 'auto',\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'deserialization.failure',\n    actions: [\n      ({event}) => [\n        {\n          type: 'effect',\n          effect: () => {\n            console.warn(\n              `Deserialization of ${event.mimeType} failed with reason \"${event.reason}\"`,\n            )\n          },\n        },\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot}) => {\n      return snapshot.context.selection &&\n        selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false\n    },\n    actions: [\n      ({event}, {selection}) => [\n        raise({\n          type: 'delete',\n          selection,\n        }),\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'clipboard.paste',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  defineBehavior({\n    on: 'input.*',\n    actions: [\n      ({event}) => [\n        raise({\n          type: 'deserialize',\n          originEvent: event,\n        }),\n      ],\n    ],\n  }),\n  ...internalAnnotationBehaviors,\n  ...internalDecoratorBehaviors,\n  ...internalInsertBehaviors,\n  ...internalListItemBehaviors,\n  ...internalStyleBehaviors,\n  ...internalSelectBehaviors,\n  raiseDeserializationSuccessOrFailure,\n  raiseSerializationSuccessOrFailure,\n  raiseInsertSoftBreak,\n]\n","import type {KeyedSegment, PortableTextBlock} from '@sanity/types'\nimport type {TextUnit} from 'slate'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {MIMEType} from '../internal-utils/mime-type'\nimport type {PickFromUnion} from '../type-utils'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {BlockWithOptionalKey} from '../types/block-with-optional-key'\nimport type {EditorSelection} from '../types/editor'\n\n/**\n * @beta\n */\nexport type BehaviorEvent =\n  | SyntheticBehaviorEvent\n  | InternalBehaviorEvent\n  | NativeBehaviorEvent\n  | CustomBehaviorEvent\n\nexport type BehaviorEventTypeNamespace =\n  | SyntheticBehaviorEventNamespace\n  | InternalBehaviorEventNamespace\n  | NativeBehaviorEventNamespace\n  | CustomBehaviorEventNamespace\n\ntype NamespacedBehaviorEventType<\n  TNamespace extends BehaviorEventTypeNamespace | '',\n> = TNamespace extends ''\n  ? BehaviorEvent['type']\n  : Extract<BehaviorEvent['type'], TNamespace | `${TNamespace}.${string}`>\n\n/**************************************\n * External events\n **************************************/\n\ntype ExternalBehaviorEventNamespace = 'insert'\n\ntype ExternalBehaviorEventType<\n  TNamespace extends ExternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type ExternalBehaviorEvent =\n  | {\n      type: ExternalBehaviorEventType<'insert', 'block object'>\n      placement: InsertPlacement\n      blockObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | PickFromUnion<\n      InternalBehaviorEvent,\n      'type',\n      | 'annotation.toggle'\n      | 'decorator.toggle'\n      | 'insert.blocks'\n      | 'list item.add'\n      | 'list item.remove'\n      | 'list item.toggle'\n      | 'style.add'\n      | 'style.remove'\n      | 'style.toggle'\n    >\n\n/**************************************\n * Synthetic events\n **************************************/\n\ntype SyntheticBehaviorEventType<\n  TNamespace extends SyntheticBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\ntype SyntheticBehaviorEventNamespace =\n  | 'annotation'\n  | 'block'\n  | 'blur'\n  | 'decorator'\n  | 'delete'\n  | 'focus'\n  | 'history'\n  | 'insert'\n  | 'move'\n  | 'select'\n\n/**\n * @beta\n */\nexport type SyntheticBehaviorEvent =\n  | {\n      type: SyntheticBehaviorEventType<'annotation', 'add'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: SyntheticBehaviorEventType<'annotation', 'remove'>\n      annotation: {\n        name: string\n      }\n    }\n  | {\n      type: SyntheticBehaviorEventType<'block', 'set'>\n      at: [KeyedSegment]\n      props: Record<string, unknown>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'block', 'unset'>\n      at: [KeyedSegment]\n      props: Array<string>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'blur'>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'decorator', 'add'>\n      decorator: string\n      offsets?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: SyntheticBehaviorEventType<'decorator', 'remove'>\n      decorator: string\n    }\n  | {\n      type: SyntheticBehaviorEventType<'delete'>\n      selection: NonNullable<EditorSelection>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'delete', 'backward'>\n      unit: TextUnit\n    }\n  | {\n      type: SyntheticBehaviorEventType<'delete', 'block'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: SyntheticBehaviorEventType<'delete', 'forward'>\n      unit: TextUnit\n    }\n  | {\n      type: SyntheticBehaviorEventType<'delete', 'text'>\n      anchor: BlockOffset\n      focus: BlockOffset\n    }\n  | {\n      type: SyntheticBehaviorEventType<'focus'>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'history', 'redo'>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'history', 'undo'>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'insert', 'inline object'>\n      inlineObject: {\n        name: string\n        value?: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: SyntheticBehaviorEventType<'insert', 'break'>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'insert', 'soft break'>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'insert', 'block'>\n      block: BlockWithOptionalKey\n      placement: InsertPlacement\n      select?: 'start' | 'end' | 'none'\n    }\n  | {\n      type: SyntheticBehaviorEventType<'insert', 'span'>\n      text: string\n      annotations?: Array<{\n        name: string\n        value: {[prop: string]: unknown}\n      }>\n      decorators?: Array<string>\n    }\n  | {\n      type: SyntheticBehaviorEventType<'insert', 'text'>\n      text: string\n    }\n  | {\n      type: SyntheticBehaviorEventType<'move', 'block'>\n      at: [KeyedSegment]\n      to: [KeyedSegment]\n    }\n  | {\n      type: SyntheticBehaviorEventType<'move', 'block down'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: SyntheticBehaviorEventType<'move', 'block up'>\n      at: [KeyedSegment]\n    }\n  | {\n      type: SyntheticBehaviorEventType<'select'>\n      selection: EditorSelection\n    }\n\nexport type InsertPlacement = 'auto' | 'after' | 'before'\n\nexport function isKeyboardBehaviorEvent(\n  event: BehaviorEvent,\n): event is KeyboardBehaviorEvent {\n  return event.type.startsWith('keyboard.')\n}\n\n/**************************************\n * Internal events\n **************************************/\n\ntype InternalBehaviorEventNamespace =\n  | 'annotation'\n  | 'decorator'\n  | 'deserialize'\n  | 'deserialization'\n  | 'list item'\n  | 'insert'\n  | 'select'\n  | 'serialize'\n  | 'serialization'\n  | 'style'\n\ntype InternalBehaviorEventType<\n  TNamespace extends InternalBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport type InternalBehaviorEvent =\n  | {\n      type: InternalBehaviorEventType<'annotation', 'toggle'>\n      annotation: {\n        name: string\n        value: {[prop: string]: unknown}\n      }\n    }\n  | {\n      type: InternalBehaviorEventType<'decorator', 'toggle'>\n      decorator: string\n      offsets?: {anchor: BlockOffset; focus: BlockOffset}\n    }\n  | {\n      type: InternalBehaviorEventType<'deserialize'>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: InternalBehaviorEventType<'serialize'>\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: InternalBehaviorEventType<'deserialization', 'success'>\n      mimeType: MIMEType\n      data: Array<PortableTextBlock>\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: InternalBehaviorEventType<'deserialization', 'failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent:\n        | PickFromUnion<\n            NativeBehaviorEvent,\n            'type',\n            'drag.drop' | 'clipboard.paste'\n          >\n        | InputBehaviorEvent\n    }\n  | {\n      type: InternalBehaviorEventType<'serialization', 'success'>\n      mimeType: MIMEType\n      data: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: InternalBehaviorEventType<'serialization', 'failure'>\n      mimeType: MIMEType\n      reason: string\n      originEvent: PickFromUnion<\n        NativeBehaviorEvent,\n        'type',\n        'clipboard.copy' | 'clipboard.cut' | 'drag.dragstart'\n      >\n    }\n  | {\n      type: InternalBehaviorEventType<'insert', 'blocks'>\n      blocks: Array<PortableTextBlock>\n      placement: InsertPlacement\n    }\n  | {\n      type: InternalBehaviorEventType<'list item', 'add'>\n      listItem: string\n    }\n  | {\n      type: InternalBehaviorEventType<'list item', 'remove'>\n      listItem: string\n    }\n  | {\n      type: InternalBehaviorEventType<'list item', 'toggle'>\n      listItem: string\n    }\n  | {\n      type: InternalBehaviorEventType<'select', 'previous block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: InternalBehaviorEventType<'select', 'next block'>\n      select?: 'start' | 'end'\n    }\n  | {\n      type: InternalBehaviorEventType<'style', 'add'>\n      style: string\n    }\n  | {\n      type: InternalBehaviorEventType<'style', 'remove'>\n      style: string\n    }\n  | {\n      type: InternalBehaviorEventType<'style', 'toggle'>\n      style: string\n    }\n\nexport function isInternalBehaviorEvent(\n  event: BehaviorEvent,\n): event is InternalBehaviorEvent {\n  return (\n    event.type === 'deserialize' ||\n    event.type.startsWith('deserialization.') ||\n    event.type === 'insert.blocks' ||\n    event.type.startsWith('list item.') ||\n    event.type === 'serialize' ||\n    event.type.startsWith('serialization.') ||\n    event.type === 'select.next block' ||\n    event.type === 'select.previous block' ||\n    event.type.startsWith('style.')\n  )\n}\n\n/**************************************\n * Native events\n **************************************/\n\ntype NativeBehaviorEventNamespace =\n  | 'clipboard'\n  | 'drag'\n  | 'input'\n  | 'keyboard'\n  | 'mouse'\n\ntype NativeBehaviorEventType<\n  TNamespace extends NativeBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\nexport function isNativeBehaviorEvent(\n  event: BehaviorEvent,\n): event is NativeBehaviorEvent {\n  return (\n    isClipboardBehaviorEvent(event) ||\n    isDragBehaviorEvent(event) ||\n    isInputBehaviorEvent(event) ||\n    isKeyboardBehaviorEvent(event) ||\n    isMouseBehaviorEvent(event)\n  )\n}\n\n/**\n * @beta\n */\nexport type NativeBehaviorEvent =\n  | ClipboardBehaviorEvent\n  | DragBehaviorEvent\n  | InputBehaviorEvent\n  | KeyboardBehaviorEvent\n  | MouseBehaviorEvent\n\ntype ClipboardBehaviorEvent =\n  | {\n      type: NativeBehaviorEventType<'clipboard', 'copy'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: NativeBehaviorEventType<'clipboard', 'cut'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: NativeBehaviorEventType<'clipboard', 'paste'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n\nfunction isClipboardBehaviorEvent(\n  event: BehaviorEvent,\n): event is ClipboardBehaviorEvent {\n  return event.type.startsWith('clipboard.')\n}\n\ntype DragBehaviorEvent =\n  | {\n      type: NativeBehaviorEventType<'drag', 'dragstart'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: Pick<EventPosition, 'selection'>\n    }\n  | {\n      type: NativeBehaviorEventType<'drag', 'drag'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: NativeBehaviorEventType<'drag', 'dragend'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n  | {\n      type: NativeBehaviorEventType<'drag', 'dragenter'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: NativeBehaviorEventType<'drag', 'dragover'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: NativeBehaviorEventType<'drag', 'drop'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n      position: EventPosition\n    }\n  | {\n      type: NativeBehaviorEventType<'drag', 'dragleave'>\n      originEvent: {\n        dataTransfer: DataTransfer\n      }\n    }\n\nfunction isDragBehaviorEvent(event: BehaviorEvent): event is DragBehaviorEvent {\n  return event.type.startsWith('drag.')\n}\n\n/**\n * Used to represent native InputEvents that hold a DataTransfer object.\n *\n * These can either be one of:\n *\n * - insertFromPaste\n * - insertFromPasteAsQuotation\n * - insertFromDrop\n * - insertReplacementText\n * - insertFromYank\n */\nexport type InputBehaviorEvent = {\n  type: NativeBehaviorEventType<'input', '*'>\n  originEvent: {\n    dataTransfer: DataTransfer\n  }\n}\n\nfunction isInputBehaviorEvent(\n  event: BehaviorEvent,\n): event is InputBehaviorEvent {\n  return event.type.startsWith('input.')\n}\n\nexport type KeyboardBehaviorEvent =\n  | {\n      type: NativeBehaviorEventType<'keyboard', 'keydown'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n  | {\n      type: NativeBehaviorEventType<'keyboard', 'keyup'>\n      originEvent: Pick<\n        KeyboardEvent,\n        'key' | 'code' | 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n      >\n    }\n\nexport type MouseBehaviorEvent = {\n  type: NativeBehaviorEventType<'mouse', 'click'>\n  position: EventPosition\n}\n\nfunction isMouseBehaviorEvent(\n  event: BehaviorEvent,\n): event is MouseBehaviorEvent {\n  return event.type.startsWith('mouse.')\n}\n\n/**************************************\n * Custom events\n **************************************/\n\ntype CustomBehaviorEventNamespace = 'custom'\n\ntype CustomBehaviorEventType<\n  TNamespace extends CustomBehaviorEventNamespace,\n  TType extends string = '',\n> = TType extends '' ? `${TNamespace}` : `${TNamespace}.${TType}`\n\n/**\n * @beta\n */\nexport type CustomBehaviorEvent<\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n  TType extends string = string,\n  TInternalType extends CustomBehaviorEventType<\n    'custom',\n    TType\n  > = CustomBehaviorEventType<'custom', TType>,\n> = {\n  type: TInternalType\n} & TPayload\n\nexport function isCustomBehaviorEvent(\n  event: BehaviorEvent,\n): event is CustomBehaviorEvent {\n  return event.type.startsWith('custom.')\n}\n\n/**************************************\n * Resolve behavior event\n **************************************/\n\nexport type ResolveBehaviorEvent<\n  TBehaviorEventType extends\n    | '*'\n    | `${BehaviorEventTypeNamespace}.*`\n    | BehaviorEvent['type'],\n  TPayload extends Record<string, unknown> = Record<string, unknown>,\n> = TBehaviorEventType extends '*'\n  ? BehaviorEvent\n  : TBehaviorEventType extends `${infer TNamespace}.*`\n    ? TNamespace extends BehaviorEventTypeNamespace\n      ? PickFromUnion<\n          BehaviorEvent,\n          'type',\n          NamespacedBehaviorEventType<TNamespace>\n        >\n      : never\n    : TBehaviorEventType extends `custom.${infer TType}`\n      ? CustomBehaviorEvent<TPayload, TType>\n      : TBehaviorEventType extends BehaviorEvent['type']\n        ? PickFromUnion<BehaviorEvent, 'type', TBehaviorEventType>\n        : never\n","import type {Behavior, BehaviorEvent} from '.'\nimport {performAction} from '../behavior-actions/behavior.actions'\nimport type {EditorSchema} from '../editor/define-schema'\nimport type {EditorSnapshot} from '../editor/editor-snapshot'\nimport {\n  withApplyingBehaviorActions,\n  withApplyingBehaviorActionSet,\n} from '../editor/with-applying-behavior-actions'\nimport {debugWithName} from '../internal-utils/debug'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {InternalBehaviorAction} from './behavior.types.action'\nimport {\n  isCustomBehaviorEvent,\n  isInternalBehaviorEvent,\n  isNativeBehaviorEvent,\n} from './behavior.types.event'\n\nconst debug = debugWithName('behaviors:event')\n\nfunction eventCategory(event: BehaviorEvent) {\n  return isNativeBehaviorEvent(event)\n    ? 'native'\n    : isInternalBehaviorEvent(event)\n      ? 'internal'\n      : isCustomBehaviorEvent(event)\n        ? 'custom'\n        : 'synthetic'\n}\n\nexport function performEvent({\n  behaviors,\n  event,\n  editor,\n  keyGenerator,\n  schema,\n  getSnapshot,\n  nativeEvent,\n  defaultActionCallback,\n}: {\n  behaviors: Array<Behavior>\n  event: BehaviorEvent\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  schema: EditorSchema\n  getSnapshot: () => EditorSnapshot\n  defaultActionCallback: (() => void) | undefined\n  nativeEvent:\n    | {\n        preventDefault: () => void\n      }\n    | undefined\n}) {\n  debug(`(${eventCategory(event)})`, JSON.stringify(event, null, 2))\n\n  const defaultAction =\n    isCustomBehaviorEvent(event) ||\n    isNativeBehaviorEvent(event) ||\n    isInternalBehaviorEvent(event)\n      ? undefined\n      : ({\n          ...event,\n          editor,\n        } satisfies InternalBehaviorAction)\n\n  const eventBehaviors = behaviors.filter((behavior) => {\n    // Catches all events\n    if (behavior.on === '*') {\n      return true\n    }\n\n    const [listenedNamespace] =\n      behavior.on.includes('*') && behavior.on.includes('.')\n        ? behavior.on.split('.')\n        : [undefined]\n    const [eventNamespace] = event.type.includes('.')\n      ? event.type.split('.')\n      : [undefined]\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select.block` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace !== undefined &&\n      listenedNamespace === eventNamespace\n    ) {\n      return true\n    }\n\n    // Handles scenarios like a Behavior listening for `select.*` and the event\n    // `select` is fired.\n    if (\n      listenedNamespace !== undefined &&\n      eventNamespace === undefined &&\n      listenedNamespace === event.type\n    ) {\n      return true\n    }\n\n    return behavior.on === event.type\n  })\n\n  if (eventBehaviors.length === 0) {\n    if (defaultActionCallback) {\n      withApplyingBehaviorActions(editor, () => {\n        try {\n          defaultActionCallback()\n        } catch (error) {\n          console.error(\n            new Error(\n              `Performing action \"${event.type}\" failed due to: ${error.message}`,\n            ),\n          )\n        }\n      })\n      return\n    }\n\n    if (!defaultAction) {\n      return\n    }\n\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema,\n          },\n          action: defaultAction,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    })\n    editor.onChange()\n    return\n  }\n\n  const editorSnapshot = getSnapshot()\n\n  let behaviorOverwritten = false\n\n  for (const eventBehavior of eventBehaviors) {\n    const shouldRun =\n      eventBehavior.guard === undefined ||\n      eventBehavior.guard({\n        context: editorSnapshot.context,\n        snapshot: editorSnapshot,\n        event,\n      })\n\n    if (!shouldRun) {\n      continue\n    }\n\n    const actionSets = eventBehavior.actions.map((actionSet) =>\n      actionSet(\n        {\n          context: editorSnapshot.context,\n          snapshot: editorSnapshot,\n          event,\n        },\n        shouldRun,\n      ),\n    )\n\n    for (const actionSet of actionSets) {\n      if (actionSet.length === 0) {\n        continue\n      }\n\n      behaviorOverwritten =\n        behaviorOverwritten ||\n        actionSet.some((action) => action.type !== 'effect')\n\n      withApplyingBehaviorActionSet(editor, () => {\n        for (const action of actionSet) {\n          if (action.type === 'raise') {\n            performEvent({\n              behaviors,\n              event: action.event,\n              editor,\n              keyGenerator,\n              schema,\n              getSnapshot,\n              defaultActionCallback: undefined,\n              nativeEvent: undefined,\n            })\n\n            continue\n          }\n\n          const internalAction = {\n            ...action,\n            editor,\n          }\n\n          try {\n            performAction({\n              context: {\n                keyGenerator,\n                schema,\n              },\n              action: internalAction,\n            })\n          } catch (error) {\n            console.error(\n              new Error(\n                `Performing action \"${internalAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n              ),\n            )\n            break\n          }\n        }\n      })\n      editor.onChange()\n    }\n\n    if (behaviorOverwritten) {\n      nativeEvent?.preventDefault()\n      break\n    }\n  }\n\n  if (!behaviorOverwritten) {\n    if (defaultActionCallback) {\n      withApplyingBehaviorActions(editor, () => {\n        try {\n          defaultActionCallback()\n        } catch (error) {\n          console.error(\n            new Error(\n              `Performing \"${event.type}\" failed due to: ${error.message}`,\n            ),\n          )\n        }\n      })\n      return\n    }\n\n    if (!defaultAction) {\n      return\n    }\n\n    withApplyingBehaviorActions(editor, () => {\n      try {\n        performAction({\n          context: {\n            keyGenerator,\n            schema,\n          },\n          action: defaultAction,\n        })\n      } catch (error) {\n        console.error(\n          new Error(\n            `Performing action \"${defaultAction.type}\" as a result of \"${event.type}\" failed due to: ${error.message}`,\n          ),\n        )\n      }\n    })\n    editor.onChange()\n  }\n}\n","import {Editor} from 'slate'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\n\nexport function getActiveDecorators({\n  schema,\n  slateEditorInstance,\n}: {\n  schema: EditorSchema\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  const decorators = schema.decorators.map((decorator) => decorator.value)\n\n  const marks =\n    {\n      ...(Editor.marks(slateEditorInstance) ?? {}),\n    }.marks ?? []\n\n  return marks.filter((mark) => decorators.includes(mark))\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport {toPortableTextRange} from '../internal-utils/ranges'\nimport {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {EditorSelection, PortableTextSlateEditor} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport type {HasTag} from './editor-machine'\nimport {getActiveDecorators} from './get-active-decorators'\n\n/**\n * @public\n */\nexport type EditorContext = {\n  activeDecorators: Array<string>\n  converters: Array<Converter>\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  selection: EditorSelection\n  value: Array<PortableTextBlock>\n}\n\n/**\n * @public\n */\nexport type EditorSnapshot = {\n  context: EditorContext\n  /**\n   * @beta\n   * Do not rely on this externally\n   */\n  beta: {\n    hasTag: HasTag\n    internalDrag:\n      | {\n          origin: Pick<EventPosition, 'selection'>\n        }\n      | undefined\n  }\n}\n\nexport function createEditorSnapshot({\n  converters,\n  editor,\n  keyGenerator,\n  readOnly,\n  schema,\n  hasTag,\n  internalDrag,\n}: {\n  converters: Array<Converter>\n  editor: PortableTextSlateEditor\n  keyGenerator: () => string\n  readOnly: boolean\n  schema: EditorSchema\n  hasTag: HasTag\n  internalDrag:\n    | {\n        origin: Pick<EventPosition, 'selection'>\n      }\n    | undefined\n}) {\n  const value = fromSlateValue(\n    editor.children,\n    schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(editor),\n  )\n  const selection = toPortableTextRange(value, editor.selection, schema)\n\n  const context = {\n    activeDecorators: getActiveDecorators({\n      schema,\n      slateEditorInstance: editor,\n    }),\n    converters,\n    keyGenerator,\n    readOnly,\n    schema,\n    selection,\n    value,\n  } satisfies EditorContext\n\n  return {\n    context,\n    beta: {\n      hasTag,\n      internalDrag,\n    },\n  } satisfies EditorSnapshot\n}\n","import type {Patch} from '@portabletext/patches'\nimport type {PortableTextBlock} from '@sanity/types'\nimport type {FocusEvent} from 'react'\nimport {\n  assertEvent,\n  assign,\n  emit,\n  enqueueActions,\n  setup,\n  type ActorRefFrom,\n} from 'xstate'\nimport {coreBehaviors} from '../behaviors/behavior.core'\nimport {defaultBehaviors} from '../behaviors/behavior.default'\nimport {performEvent} from '../behaviors/behavior.perform-event'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport type {\n  CustomBehaviorEvent,\n  ExternalBehaviorEvent,\n  InternalBehaviorEvent,\n  NativeBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport type {Converter} from '../converters/converter.types'\nimport type {EventPosition} from '../internal-utils/event-position'\nimport type {NamespaceEvent} from '../type-utils'\nimport type {\n  EditorSelection,\n  InvalidValueResolution,\n  PortableTextSlateEditor,\n} from '../types/editor'\nimport type {EditorSchema} from './define-schema'\nimport {createEditorSnapshot} from './editor-snapshot'\n\nexport * from 'xstate/guards'\n\n/**\n * @public\n */\nexport type PatchesEvent = {\n  type: 'patches'\n  patches: Array<Patch>\n  snapshot: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type MutationEvent = {\n  type: 'mutation'\n  patches: Array<Patch>\n  /**\n   * @deprecated Use `value` instead\n   */\n  snapshot: Array<PortableTextBlock> | undefined\n  value: Array<PortableTextBlock> | undefined\n}\n\n/**\n * @public\n */\nexport type ExternalEditorEvent =\n  | {\n      type: 'add behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'remove behavior'\n      behavior: Behavior\n    }\n  | {\n      type: 'update readOnly'\n      readOnly: boolean\n    }\n  | {\n      type: 'update schema'\n      schema: EditorSchema\n    }\n  | {\n      type: 'update behaviors'\n      behaviors: Array<Behavior>\n    }\n  | {\n      type: 'update key generator'\n      keyGenerator: () => string\n    }\n  | {\n      type: 'update value'\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'update maxBlocks'\n      maxBlocks: number | undefined\n    }\n  | PatchesEvent\n\n/**\n * @public\n */\nexport type EditorEmittedEvent =\n  | {\n      type: 'blurred'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'done loading'\n    }\n  | {\n      type: 'editable'\n    }\n  | {\n      type: 'error'\n      name: string\n      description: string\n      data: unknown\n    }\n  | {\n      type: 'focused'\n      event: FocusEvent<HTMLDivElement, Element>\n    }\n  | {\n      type: 'invalid value'\n      resolution: InvalidValueResolution | null\n      value: Array<PortableTextBlock> | undefined\n    }\n  | {\n      type: 'loading'\n    }\n  | MutationEvent\n  | PatchEvent\n  | {\n      type: 'read only'\n    }\n  | {\n      type: 'ready'\n    }\n  | {\n      type: 'selection'\n      selection: EditorSelection\n    }\n  | {\n      type: 'value changed'\n      value: Array<PortableTextBlock> | undefined\n    }\n\ntype PatchEvent = {\n  type: 'patch'\n  patch: Patch\n}\n\ntype InternalPatchEvent = NamespaceEvent<PatchEvent, 'internal'> & {\n  actionId?: string\n  value: Array<PortableTextBlock>\n}\n\ntype UnsetEvent = {\n  type: 'unset'\n  previousValue: Array<PortableTextBlock>\n}\n\n/**\n * @internal\n */\nexport type EditorActor = ActorRefFrom<typeof editorMachine>\nexport type HasTag = ReturnType<EditorActor['getSnapshot']>['hasTag']\n\n/**\n * @internal\n */\nexport type InternalEditorEvent =\n  | {\n      type: 'normalizing'\n    }\n  | {\n      type: 'done normalizing'\n    }\n  | {\n      type: 'done syncing initial value'\n    }\n  | {\n      type: 'behavior event'\n      behaviorEvent:\n        | InternalBehaviorEvent\n        | SyntheticBehaviorEvent\n        | NativeBehaviorEvent\n      editor: PortableTextSlateEditor\n      defaultActionCallback?: () => void\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | {\n      type: 'custom behavior event'\n      behaviorEvent: CustomBehaviorEvent\n      editor: PortableTextSlateEditor\n      nativeEvent?: {preventDefault: () => void}\n    }\n  | CustomBehaviorEvent\n  | ExternalBehaviorEvent\n  | ExternalEditorEvent\n  | MutationEvent\n  | InternalPatchEvent\n  | NamespaceEvent<EditorEmittedEvent, 'notify'>\n  | NamespaceEvent<UnsetEvent, 'notify'>\n  | SyntheticBehaviorEvent\n  | {\n      type: 'dragstart'\n      origin: Pick<EventPosition, 'selection'>\n      ghost?: HTMLElement\n    }\n  | {type: 'dragend'}\n  | {type: 'drop'}\n\n/**\n * @internal\n */\nexport type InternalEditorEmittedEvent =\n  | EditorEmittedEvent\n  | ExternalBehaviorEvent\n  | InternalPatchEvent\n  | PatchesEvent\n  | UnsetEvent\n  | {\n      type: 'custom.*'\n      event: CustomBehaviorEvent\n    }\n  | SyntheticBehaviorEvent\n\n/**\n * @internal\n */\nexport const editorMachine = setup({\n  types: {\n    context: {} as {\n      behaviors: Set<Behavior>\n      converters: Set<Converter>\n      keyGenerator: () => string\n      pendingEvents: Array<InternalPatchEvent | MutationEvent>\n      schema: EditorSchema\n      initialReadOnly: boolean\n      maxBlocks: number | undefined\n      selection: EditorSelection\n      value: Array<PortableTextBlock> | undefined\n      internalDrag?: {\n        ghost?: HTMLElement\n        origin: Pick<EventPosition, 'selection'>\n      }\n    },\n    events: {} as InternalEditorEvent,\n    emitted: {} as InternalEditorEmittedEvent,\n    input: {} as {\n      behaviors?: Array<Behavior>\n      converters?: Array<Converter>\n      keyGenerator: () => string\n      maxBlocks?: number\n      readOnly?: boolean\n      schema: EditorSchema\n      value?: Array<PortableTextBlock>\n    },\n    tags: {} as 'dragging internally',\n  },\n  actions: {\n    'add behavior to context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'add behavior')\n\n        return new Set([...context.behaviors, event.behavior])\n      },\n    }),\n    'remove behavior from context': assign({\n      behaviors: ({context, event}) => {\n        assertEvent(event, 'remove behavior')\n\n        context.behaviors.delete(event.behavior)\n\n        return new Set([...context.behaviors])\n      },\n    }),\n    'assign behaviors': assign({\n      behaviors: ({event}) => {\n        assertEvent(event, 'update behaviors')\n        return new Set([...event.behaviors])\n      },\n    }),\n    'assign schema': assign({\n      schema: ({event}) => {\n        assertEvent(event, 'update schema')\n        return event.schema\n      },\n    }),\n    'emit patch event': enqueueActions(({event, enqueue}) => {\n      assertEvent(event, 'internal.patch')\n\n      enqueue.emit(event)\n      enqueue.emit({type: 'patch', patch: event.patch})\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit read only': emit({type: 'read only'}),\n    'emit editable': emit({type: 'editable'}),\n    'defer event': assign({\n      pendingEvents: ({context, event}) => {\n        assertEvent(event, ['internal.patch', 'mutation'])\n        return [...context.pendingEvents, event]\n      },\n    }),\n    'emit pending events': enqueueActions(({context, enqueue}) => {\n      for (const event of context.pendingEvents) {\n        if (event.type === 'internal.patch') {\n          enqueue.emit(event)\n          enqueue.emit({type: 'patch', patch: event.patch})\n        } else {\n          enqueue.emit(event)\n        }\n      }\n    }),\n    'emit ready': emit({type: 'ready'}),\n    'clear pending events': assign({\n      pendingEvents: [],\n    }),\n    'handle behavior event': ({context, event, self}) => {\n      assertEvent(event, ['behavior event', 'custom behavior event'])\n\n      performEvent({\n        behaviors: [...context.behaviors.values(), ...defaultBehaviors],\n        event: event.behaviorEvent,\n        editor: event.editor,\n        keyGenerator: context.keyGenerator,\n        schema: context.schema,\n        getSnapshot: () =>\n          createEditorSnapshot({\n            converters: [...context.converters],\n            editor: event.editor,\n            keyGenerator: context.keyGenerator,\n            readOnly: self.getSnapshot().matches({'edit mode': 'read only'}),\n            schema: context.schema,\n            hasTag: (tag) => self.getSnapshot().hasTag(tag),\n            internalDrag: context.internalDrag,\n          }),\n        nativeEvent: event.nativeEvent,\n        defaultActionCallback:\n          event.type === 'behavior event'\n            ? event.defaultActionCallback\n            : undefined,\n      })\n    },\n  },\n}).createMachine({\n  id: 'editor',\n  context: ({input}) => ({\n    behaviors: new Set([...(input.behaviors ?? coreBehaviors)]),\n    converters: new Set(input.converters ?? []),\n    keyGenerator: input.keyGenerator,\n    pendingEvents: [],\n    schema: input.schema,\n    selection: null,\n    initialReadOnly: input.readOnly ?? false,\n    maxBlocks: input.maxBlocks,\n    value: input.value,\n  }),\n  on: {\n    'notify.blurred': {\n      actions: emit(({event}) => ({...event, type: 'blurred'})),\n    },\n    'notify.done loading': {actions: emit({type: 'done loading'})},\n    'notify.error': {actions: emit(({event}) => ({...event, type: 'error'}))},\n    'notify.invalid value': {\n      actions: emit(({event}) => ({...event, type: 'invalid value'})),\n    },\n    'notify.focused': {\n      actions: emit(({event}) => ({...event, type: 'focused'})),\n    },\n    'notify.selection': {\n      actions: [\n        assign({selection: ({event}) => event.selection}),\n        emit(({event}) => ({...event, type: 'selection'})),\n      ],\n    },\n    'notify.unset': {actions: emit(({event}) => ({...event, type: 'unset'}))},\n    'notify.loading': {actions: emit({type: 'loading'})},\n    'notify.value changed': {\n      actions: emit(({event}) => ({...event, type: 'value changed'})),\n    },\n\n    'add behavior': {actions: 'add behavior to context'},\n    'remove behavior': {actions: 'remove behavior from context'},\n    'patches': {actions: emit(({event}) => event)},\n    'update behaviors': {actions: 'assign behaviors'},\n    'update key generator': {\n      actions: assign({keyGenerator: ({event}) => event.keyGenerator}),\n    },\n    'update schema': {actions: 'assign schema'},\n    'update value': {actions: assign({value: ({event}) => event.value})},\n    'update maxBlocks': {\n      actions: assign({maxBlocks: ({event}) => event.maxBlocks}),\n    },\n  },\n  type: 'parallel',\n  states: {\n    'edit mode': {\n      initial: 'read only',\n      states: {\n        'read only': {\n          initial: 'determine initial edit mode',\n          on: {\n            'behavior event': {\n              actions: 'handle behavior event',\n              guard: ({event}) =>\n                event.behaviorEvent.type === 'clipboard.copy' ||\n                event.behaviorEvent.type === 'serialize' ||\n                event.behaviorEvent.type === 'serialization.failure' ||\n                event.behaviorEvent.type === 'serialization.success' ||\n                event.behaviorEvent.type === 'select',\n            },\n          },\n          states: {\n            'determine initial edit mode': {\n              on: {\n                'done syncing initial value': [\n                  {\n                    target: '#editor.edit mode.read only.read only',\n                    guard: ({context}) => context.initialReadOnly,\n                  },\n                  {\n                    target: '#editor.edit mode.editable',\n                  },\n                ],\n              },\n            },\n            'read only': {\n              on: {\n                'update readOnly': {\n                  guard: ({event}) => !event.readOnly,\n                  target: '#editor.edit mode.editable',\n                  actions: ['emit editable'],\n                },\n              },\n            },\n          },\n        },\n        'editable': {\n          on: {\n            'update readOnly': {\n              guard: ({event}) => event.readOnly,\n              target: '#editor.edit mode.read only.read only',\n              actions: ['emit read only'],\n            },\n            'behavior event': {\n              actions: 'handle behavior event',\n            },\n            'custom behavior event': {\n              actions: 'handle behavior event',\n            },\n            'annotation.*': {\n              actions: emit(({event}) => event),\n            },\n            'block.*': {\n              actions: emit(({event}) => event),\n            },\n            'blur': {\n              actions: emit(({event}) => event),\n            },\n            'custom.*': {\n              actions: emit(({event}) => ({type: 'custom.*', event})),\n            },\n            'decorator.*': {\n              actions: emit(({event}) => event),\n            },\n            'delete.*': {\n              actions: emit(({event}) => event),\n            },\n            'focus': {\n              actions: emit(({event}) => event),\n            },\n            'history.*': {\n              actions: emit(({event}) => event),\n            },\n            'insert.*': {\n              actions: emit(({event}) => event),\n            },\n            'list item.*': {\n              actions: emit(({event}) => event),\n            },\n            'move.*': {\n              actions: emit(({event}) => event),\n            },\n            'select': {\n              actions: emit(({event}) => event),\n            },\n            'select.*': {\n              actions: emit(({event}) => event),\n            },\n            'style.*': {\n              actions: emit(({event}) => event),\n            },\n            'text block.*': {\n              actions: emit(({event}) => event),\n            },\n          },\n          initial: 'idle',\n          states: {\n            'idle': {\n              on: {\n                dragstart: {\n                  actions: [\n                    assign({\n                      internalDrag: ({event}) => ({\n                        ghost: event.ghost,\n                        origin: event.origin,\n                      }),\n                    }),\n                  ],\n                  target: 'dragging internally',\n                },\n              },\n            },\n            'dragging internally': {\n              exit: [\n                ({context}) => {\n                  if (context.internalDrag?.ghost) {\n                    try {\n                      context.internalDrag.ghost.parentNode?.removeChild(\n                        context.internalDrag.ghost,\n                      )\n                    } catch (error) {\n                      console.error(\n                        new Error(\n                          `Removing the internal drag ghost failed due to: ${error.message}`,\n                        ),\n                      )\n                    }\n                  }\n                },\n                assign({internalDrag: undefined}),\n              ],\n              tags: ['dragging internally'],\n              on: {\n                dragend: {target: 'idle'},\n                drop: {target: 'idle'},\n              },\n            },\n          },\n        },\n      },\n    },\n    'setup': {\n      initial: 'setting up',\n      states: {\n        'setting up': {\n          exit: ['emit ready'],\n          on: {\n            'internal.patch': {\n              actions: 'defer event',\n            },\n            'mutation': {\n              actions: 'defer event',\n            },\n            'done syncing initial value': {\n              target: 'pristine',\n            },\n          },\n        },\n        'pristine': {\n          initial: 'idle',\n          states: {\n            idle: {\n              on: {\n                'normalizing': {\n                  target: 'normalizing',\n                },\n                'internal.patch': {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                  target: '#editor.setup.dirty',\n                },\n              },\n            },\n            normalizing: {\n              on: {\n                'done normalizing': {\n                  target: 'idle',\n                },\n                'internal.patch': {\n                  actions: 'defer event',\n                },\n                'mutation': {\n                  actions: 'defer event',\n                },\n              },\n            },\n          },\n        },\n        'dirty': {\n          entry: ['emit pending events', 'clear pending events'],\n          on: {\n            'internal.patch': {\n              actions: 'emit patch event',\n            },\n            'mutation': {\n              actions: 'emit mutation event',\n            },\n          },\n        },\n      },\n    },\n  },\n})\n","import {fromSlateValue} from '../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../internal-utils/weakMaps'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\nexport function getValue({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}) {\n  return fromSlateValue(\n    slateEditorInstance.children,\n    editorActorSnapshot.context.schema.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditorInstance),\n  )\n}\n","import {useSelector} from '@xstate/react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {Editor, InternalEditor} from './create-editor'\nimport type {EditorActor} from './editor-machine'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {getActiveDecorators} from './get-active-decorators'\nimport {getValue} from './get-value'\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a === b\n}\n\n/**\n * @public\n */\nexport type EditorSelector<TSelected> = (snapshot: EditorSnapshot) => TSelected\n\n/**\n * @public\n * Hook to select a value from the editor state.\n * @example\n * Pass a selector as the second argument\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const value = useEditorSelector(editor, selector)\n * }\n * ```\n * @example\n * Pass an inline selector as the second argument.\n * In this case, use the editor context to obtain the schema.\n * ```tsx\n * import { useEditorSelector } from '@portabletext/editor'\n *\n * function MyComponent(editor) {\n *  const schema = useEditorSelector(editor, (snapshot) => snapshot.context.schema)\n * }\n * ```\n * @group Hooks\n */\nexport function useEditorSelector<TSelected>(\n  editor: Editor,\n  selector: EditorSelector<TSelected>,\n  compare: (a: TSelected, b: TSelected) => boolean = defaultCompare,\n) {\n  return useSelector(\n    (editor as InternalEditor)._internal.editorActor,\n    (editorActorSnapshot) => {\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot,\n        slateEditorInstance: (editor as InternalEditor)._internal.slateEditor\n          .instance,\n      })\n\n      return selector(snapshot)\n    },\n    compare,\n  )\n}\n\nexport function getEditorSnapshot({\n  editorActorSnapshot,\n  slateEditorInstance,\n}: {\n  editorActorSnapshot: ReturnType<EditorActor['getSnapshot']>\n  slateEditorInstance: PortableTextSlateEditor\n}): EditorSnapshot {\n  return {\n    context: {\n      converters: [...editorActorSnapshot.context.converters],\n      activeDecorators: getActiveDecorators({\n        schema: editorActorSnapshot.context.schema,\n        slateEditorInstance,\n      }),\n      keyGenerator: editorActorSnapshot.context.keyGenerator,\n      readOnly: editorActorSnapshot.matches({'edit mode': 'read only'}),\n      schema: editorActorSnapshot.context.schema,\n      selection: editorActorSnapshot.context.selection,\n      value: getValue({editorActorSnapshot, slateEditorInstance}),\n    },\n    beta: {\n      hasTag: (tag) => editorActorSnapshot.hasTag(tag),\n      internalDrag: editorActorSnapshot.context.internalDrag,\n    },\n  }\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  PortableTextBlock,\n} from '@sanity/types'\nimport {useActorRef} from '@xstate/react'\nimport {useMemo} from 'react'\nimport {\n  createActor,\n  type ActorRef,\n  type EventObject,\n  type Snapshot,\n} from 'xstate'\nimport type {Behavior} from '../behaviors/behavior.types.behavior'\nimport type {\n  CustomBehaviorEvent,\n  ExternalBehaviorEvent,\n  SyntheticBehaviorEvent,\n} from '../behaviors/behavior.types.event'\nimport {coreConverters} from '../converters/converters.core'\nimport {compileType} from '../internal-utils/schema'\nimport type {EditableAPI} from '../types/editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {createSlateEditor, type SlateEditor} from './create-slate-editor'\nimport {compileSchemaDefinition, type SchemaDefinition} from './define-schema'\nimport {\n  editorMachine,\n  type EditorActor,\n  type EditorEmittedEvent,\n  type ExternalEditorEvent,\n} from './editor-machine'\nimport {getEditorSnapshot} from './editor-selector'\nimport type {EditorSnapshot} from './editor-snapshot'\nimport {defaultKeyGenerator} from './key-generator'\nimport {createEditableAPI} from './plugins/createWithEditableAPI'\n\n/**\n * @public\n */\nexport type EditorConfig = {\n  /**\n   * @beta\n   */\n  behaviors?: Array<Behavior>\n  keyGenerator?: () => string\n  /**\n   * @deprecated Will be removed in the next major version\n   */\n  maxBlocks?: number\n  readOnly?: boolean\n  initialValue?: Array<PortableTextBlock>\n} & (\n  | {\n      schemaDefinition: SchemaDefinition\n      schema?: undefined\n    }\n  | {\n      schemaDefinition?: undefined\n      schema: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n    }\n)\n\n/**\n * @public\n */\nexport type EditorEvent =\n  | ExternalEditorEvent\n  | ExternalBehaviorEvent\n  | SyntheticBehaviorEvent\n  | CustomBehaviorEvent\n\n/**\n * @public\n */\nexport type Editor = {\n  getSnapshot: () => EditorSnapshot\n  /**\n   * @beta\n   */\n  registerBehavior: (config: {behavior: Behavior}) => () => void\n  send: (event: EditorEvent) => void\n  on: ActorRef<Snapshot<unknown>, EventObject, EditorEmittedEvent>['on']\n}\n\nexport type InternalEditor = Editor & {\n  _internal: {\n    editable: EditableAPI\n    editorActor: EditorActor\n    slateEditor: SlateEditor\n  }\n}\n\nexport function createInternalEditor(config: EditorConfig): InternalEditor {\n  const editorActor = createActor(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n  editorActor.start()\n\n  return createInternalEditorFromActor(editorActor)\n}\n\nexport function useCreateInternalEditor(config: EditorConfig): InternalEditor {\n  const editorActor = useActorRef(editorMachine, {\n    input: editorConfigToMachineInput(config),\n  })\n\n  return useMemo(\n    () => createInternalEditorFromActor(editorActor),\n    [editorActor],\n  )\n}\n\nfunction editorConfigToMachineInput(config: EditorConfig) {\n  return {\n    behaviors: config.behaviors,\n    converters: coreConverters,\n    keyGenerator: config.keyGenerator ?? defaultKeyGenerator,\n    maxBlocks: config.maxBlocks,\n    readOnly: config.readOnly,\n    schema: config.schemaDefinition\n      ? compileSchemaDefinition(config.schemaDefinition)\n      : createEditorSchema(\n          config.schema.hasOwnProperty('jsonType')\n            ? config.schema\n            : compileType(config.schema),\n        ),\n    value: config.initialValue,\n  } as const\n}\n\nfunction createInternalEditorFromActor(\n  editorActor: EditorActor,\n): InternalEditor {\n  const slateEditor = createSlateEditor({editorActor})\n  const editable = createEditableAPI(slateEditor.instance, editorActor)\n\n  return {\n    getSnapshot: () =>\n      getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor.instance,\n      }),\n    registerBehavior: (config) => {\n      editorActor.send({\n        type: 'add behavior',\n        behavior: config.behavior,\n      })\n\n      return () => {\n        editorActor.send({\n          type: 'remove behavior',\n          behavior: config.behavior,\n        })\n      }\n    },\n    send: (event) => {\n      editorActor.send(event)\n    },\n    on: (event, listener) => {\n      const subscription = editorActor.on(event, (event) => {\n        switch (event.type) {\n          case 'blurred':\n          case 'done loading':\n          case 'editable':\n          case 'error':\n          case 'focused':\n          case 'invalid value':\n          case 'loading':\n          case 'mutation':\n          case 'patch':\n          case 'read only':\n          case 'ready':\n          case 'selection':\n          case 'value changed':\n            listener(event)\n            break\n        }\n      })\n\n      return subscription\n    },\n    _internal: {\n      editable,\n      editorActor,\n      slateEditor,\n    },\n  }\n}\n","import {\n  createContext,\n  startTransition,\n  useContext,\n  useEffect,\n  useState,\n} from 'react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EditorSelection} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\n\n/**\n * A React context for sharing the editor selection.\n */\nconst PortableTextEditorSelectionContext =\n  createContext<EditorSelection | null>(null)\n\n/**\n * @deprecated Use `useEditorSelector` to get the current editor selection.\n * @public\n * Get the current editor selection from the React context.\n */\nexport const usePortableTextEditorSelection = (): EditorSelection => {\n  const selection = useContext(PortableTextEditorSelectionContext)\n\n  if (selection === undefined) {\n    throw new Error(\n      `The \\`usePortableTextEditorSelection\\` hook must be used inside the <PortableTextEditor> component's context.`,\n    )\n  }\n  return selection\n}\nconst debug = debugWithName('component:PortableTextEditor:SelectionProvider')\nconst debugVerbose = debug.enabled && false\n\n/**\n * @internal\n */\nexport function PortableTextEditorSelectionProvider(\n  props: React.PropsWithChildren<{\n    editorActor: EditorActor\n  }>,\n) {\n  const [selection, setSelection] = useState<EditorSelection>(null)\n\n  // Subscribe to, and handle changes from the editor\n  useEffect(() => {\n    debug('Subscribing to selection changes')\n    const subscription = props.editorActor.on('selection', (event) => {\n      // Set the selection state in a transition, we don't need the state immediately.\n      startTransition(() => {\n        if (debugVerbose) debug('Setting selection')\n        setSelection(event.selection)\n      })\n    })\n\n    return () => {\n      debug('Unsubscribing to selection changes')\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return (\n    <PortableTextEditorSelectionContext.Provider value={selection}>\n      {props.children}\n    </PortableTextEditorSelectionContext.Provider>\n  )\n}\n","import type {\n  ArrayDefinition,\n  ArraySchemaType,\n  Path,\n  PortableTextBlock,\n  PortableTextChild,\n  PortableTextObject,\n} from '@sanity/types'\nimport {\n  Component,\n  useEffect,\n  type MutableRefObject,\n  type PropsWithChildren,\n} from 'react'\nimport {Subject} from 'rxjs'\nimport {Slate} from 'slate-react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {debugWithName} from '../internal-utils/debug'\nimport {compileType} from '../internal-utils/schema'\nimport type {\n  EditableAPI,\n  EditableAPIDeleteOptions,\n  EditorChange,\n  EditorChanges,\n  EditorSelection,\n  PatchObservable,\n  PortableTextMemberSchemaTypes,\n} from '../types/editor'\nimport {Synchronizer} from './components/Synchronizer'\nimport {createInternalEditor, type InternalEditor} from './create-editor'\nimport {createEditorSchema} from './create-editor-schema'\nimport {EditorActorContext} from './editor-actor-context'\nimport type {EditorActor} from './editor-machine'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {defaultKeyGenerator} from './key-generator'\nimport type {AddedAnnotationPaths} from './plugins/createWithEditableAPI'\n\nconst debug = debugWithName('component:PortableTextEditor')\n\n/**\n * Props for the PortableTextEditor component\n *\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport type PortableTextEditorProps<\n  TEditor extends InternalEditor | undefined = undefined,\n> = PropsWithChildren<\n  TEditor extends InternalEditor\n    ? {\n        /**\n         * @internal\n         */\n        editor: TEditor\n      }\n    : {\n        editor?: undefined\n\n        /**\n         * Function that gets called when the editor changes the value\n         */\n        onChange: (change: EditorChange) => void\n\n        /**\n         * Schema type for the portable text field\n         */\n        schemaType: ArraySchemaType<PortableTextBlock> | ArrayDefinition\n\n        /**\n         * Maximum number of blocks to allow within the editor\n         */\n        maxBlocks?: number | string\n\n        /**\n         * Function used to generate keys for array items (`_key`)\n         */\n        keyGenerator?: () => string\n\n        /**\n         * Observable of local and remote patches for the edited value.\n         */\n        patches$?: PatchObservable\n\n        /**\n         * Backward compatibility (renamed to patches$).\n         */\n        incomingPatches$?: PatchObservable\n\n        /**\n         * Whether or not the editor should be in read-only mode\n         */\n        readOnly?: boolean\n\n        /**\n         * The current value of the portable text field\n         */\n        value?: PortableTextBlock[]\n\n        /**\n         * A ref to the editor instance\n         */\n        editorRef?: MutableRefObject<PortableTextEditor | null>\n      }\n>\n\n/**\n * The main Portable Text Editor component.\n * @public\n * @deprecated Use `EditorProvider` instead\n */\nexport class PortableTextEditor extends Component<\n  PortableTextEditorProps<InternalEditor | undefined>\n> {\n  public static displayName = 'PortableTextEditor'\n  /**\n   * An observable of all the editor changes.\n   */\n  public change$: EditorChanges = new Subject()\n  /**\n   * A lookup table for all the relevant schema types for this portable text type.\n   */\n  public schemaTypes: PortableTextMemberSchemaTypes\n  /**\n   * The editor instance\n   */\n  private editor: InternalEditor\n  /*\n   * The editor API (currently implemented with Slate).\n   */\n  private editable: EditableAPI\n\n  constructor(props: PortableTextEditorProps) {\n    super(props)\n\n    if (props.editor) {\n      this.editor = props.editor as InternalEditor\n    } else {\n      this.editor = createInternalEditor({\n        keyGenerator: props.keyGenerator ?? defaultKeyGenerator,\n        schema: props.schemaType,\n        initialValue: props.value,\n        maxBlocks:\n          props.maxBlocks === undefined\n            ? undefined\n            : Number.parseInt(props.maxBlocks.toString(), 10),\n        readOnly: props.readOnly,\n      })\n    }\n\n    this.schemaTypes =\n      this.editor._internal.editorActor.getSnapshot().context.schema\n    this.editable = this.editor._internal.editable\n  }\n\n  componentDidUpdate(prevProps: PortableTextEditorProps) {\n    // Set up the schema type lookup table again if the source schema type changes\n    if (\n      !this.props.editor &&\n      !prevProps.editor &&\n      this.props.schemaType !== prevProps.schemaType\n    ) {\n      this.schemaTypes = createEditorSchema(\n        this.props.schemaType.hasOwnProperty('jsonType')\n          ? this.props.schemaType\n          : compileType(this.props.schemaType),\n      )\n\n      this.editor._internal.editorActor.send({\n        type: 'update schema',\n        schema: this.schemaTypes,\n      })\n    }\n\n    if (!this.props.editor && !prevProps.editor) {\n      if (this.props.readOnly !== prevProps.readOnly) {\n        this.editor._internal.editorActor.send({\n          type: 'update readOnly',\n          readOnly: this.props.readOnly ?? false,\n        })\n      }\n\n      if (this.props.maxBlocks !== prevProps.maxBlocks) {\n        this.editor._internal.editorActor.send({\n          type: 'update maxBlocks',\n          maxBlocks:\n            this.props.maxBlocks === undefined\n              ? undefined\n              : Number.parseInt(this.props.maxBlocks.toString(), 10),\n        })\n      }\n\n      if (this.props.value !== prevProps.value) {\n        this.editor._internal.editorActor.send({\n          type: 'update value',\n          value: this.props.value,\n        })\n      }\n\n      if (\n        this.props.editorRef !== prevProps.editorRef &&\n        this.props.editorRef\n      ) {\n        this.props.editorRef.current = this\n      }\n    }\n  }\n\n  public setEditable = (editable: EditableAPI) => {\n    this.editor._internal.editable = {\n      ...this.editor._internal.editable,\n      ...editable,\n    }\n  }\n\n  render() {\n    const legacyPatches = !this.props.editor\n      ? (this.props.incomingPatches$ ?? this.props.patches$)\n      : undefined\n\n    return (\n      <>\n        {legacyPatches ? (\n          <RoutePatchesObservableToEditorActor\n            editorActor={this.editor._internal.editorActor}\n            patches$={legacyPatches}\n          />\n        ) : null}\n        <RouteEventsToChanges\n          editorActor={this.editor._internal.editorActor}\n          onChange={(change) => {\n            if (!this.props.editor) {\n              this.props.onChange(change)\n            }\n            /**\n             * For backwards compatibility, we relay all changes to the\n             * `change$` Subject as well.\n             */\n            this.change$.next(change)\n          }}\n        />\n        <Synchronizer\n          editorActor={this.editor._internal.editorActor}\n          slateEditor={this.editor._internal.slateEditor.instance}\n        />\n        <EditorActorContext.Provider value={this.editor._internal.editorActor}>\n          <Slate\n            editor={this.editor._internal.slateEditor.instance}\n            initialValue={this.editor._internal.slateEditor.initialValue}\n          >\n            <PortableTextEditorContext.Provider value={this}>\n              <PortableTextEditorSelectionProvider\n                editorActor={this.editor._internal.editorActor}\n              >\n                {this.props.children}\n              </PortableTextEditorSelectionProvider>\n            </PortableTextEditorContext.Provider>\n          </Slate>\n        </EditorActorContext.Provider>\n      </>\n    )\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.getActiveAnnotations)\n   * ```\n   */\n  static activeAnnotations = (\n    editor: PortableTextEditor,\n  ): PortableTextObject[] => {\n    return editor && editor.editable ? editor.editable.activeAnnotations() : []\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveAnnotation(...))\n   * ```\n   */\n  static isAnnotationActive = (\n    editor: PortableTextEditor,\n    annotationType: PortableTextObject['_type'],\n  ): boolean => {\n    return editor && editor.editable\n      ? editor.editable.isAnnotationActive(annotationType)\n      : false\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.add',\n   *  annotation: {\n   *    name: '...',\n   *    value: {...},\n   *  }\n   * })\n   * ```\n   */\n  static addAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): AddedAnnotationPaths | undefined =>\n    editor.editable?.addAnnotation(type, value)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'blur',\n   * })\n   * ```\n   */\n  static blur = (editor: PortableTextEditor): void => {\n    debug('Host blurred')\n    editor.editable?.blur()\n  }\n\n  static delete = (\n    editor: PortableTextEditor,\n    selection: EditorSelection,\n    options?: EditableAPIDeleteOptions,\n  ) => editor.editable?.delete(selection, options)\n\n  static findDOMNode = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.findDOMNode(element)\n  }\n\n  static findByPath = (editor: PortableTextEditor, path: Path) => {\n    return editor.editable?.findByPath(path) || []\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'focus',\n   * })\n   * ```\n   */\n  static focus = (editor: PortableTextEditor): void => {\n    debug('Host requesting focus')\n    editor.editable?.focus()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusBlock = useEditorSelector(editor, selectors.getFocusBlock)\n   * ```\n   */\n  static focusBlock = (editor: PortableTextEditor) => {\n    return editor.editable?.focusBlock()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const focusChild = useEditorSelector(editor, selectors.getFocusChild)\n   * ```\n   */\n  static focusChild = (\n    editor: PortableTextEditor,\n  ): PortableTextChild | undefined => {\n    return editor.editable?.focusChild()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selection = useEditorSelector(editor, selectors.getSelection)\n   * ```\n   */\n  static getSelection = (editor: PortableTextEditor) => {\n    return editor.editable ? editor.editable.getSelection() : null\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const value = useEditorSelector(editor, selectors.getValue)\n   * ```\n   */\n  static getValue = (editor: PortableTextEditor) => {\n    return editor.editable?.getValue()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveStyle(...))\n   * ```\n   */\n  static hasBlockStyle = (editor: PortableTextEditor, blockStyle: string) => {\n    return editor.editable?.hasBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveListItem(...))\n   * ```\n   */\n  static hasListStyle = (editor: PortableTextEditor, listStyle: string) => {\n    return editor.editable?.hasListStyle(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionCollapsed = useEditorSelector(editor, selectors.isSelectionCollapsed)\n   * ```\n   */\n  static isCollapsedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isCollapsedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isSelectionExpanded = useEditorSelector(editor, selectors.isSelectionExpanded)\n   * ```\n   */\n  static isExpandedSelection = (editor: PortableTextEditor) =>\n    editor.editable?.isExpandedSelection()\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isActive = useEditorSelector(editor, selectors.isActiveDecorator(...))\n   * ```\n   */\n  static isMarkActive = (editor: PortableTextEditor, mark: string) =>\n    editor.editable?.isMarkActive(mark)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.span',\n   *  text: '...',\n   *  annotations: [{name: '...', value: {...}}],\n   *  decorators: ['...'],\n   * })\n   * editor.send({\n   *  type: 'insert.inline object',\n   *  inlineObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   * })\n   * ```\n   */\n  static insertChild = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    debug(`Host inserting child`)\n    return editor.editable?.insertChild(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.block object',\n   *  blockObject: {\n   *    name: '...',\n   *    value: {...},\n   *  },\n   *  placement: 'auto' | 'after' | 'before',\n   * })\n   * ```\n   */\n  static insertBlock = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n    value?: {[prop: string]: unknown},\n  ): Path | undefined => {\n    return editor.editable?.insertBlock(type, value)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'insert.break',\n   * })\n   * ```\n   */\n  static insertBreak = (editor: PortableTextEditor): void => {\n    return editor.editable?.insertBreak()\n  }\n\n  static isVoid = (\n    editor: PortableTextEditor,\n    element: PortableTextBlock | PortableTextChild,\n  ) => {\n    return editor.editable?.isVoid(element)\n  }\n\n  static isObjectPath = (_editor: PortableTextEditor, path: Path): boolean => {\n    if (!path || !Array.isArray(path)) return false\n    const isChildObjectEditPath = path.length > 3 && path[1] === 'children'\n    const isBlockObjectEditPath = path.length > 1 && path[1] !== 'children'\n    return isBlockObjectEditPath || isChildObjectEditPath\n  }\n\n  static marks = (editor: PortableTextEditor) => {\n    return editor.editable?.marks()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'select',\n   *  selection: {...},\n   * })\n   * ```\n   */\n  static select = (\n    editor: PortableTextEditor,\n    selection: EditorSelection | null,\n  ) => {\n    debug(`Host setting selection`, selection)\n    editor.editable?.select(selection)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'annotation.remove',\n   *  annotation: {\n   *    name: '...',\n   *  },\n   * })\n   * ```\n   */\n  static removeAnnotation = <TSchemaType extends {name: string}>(\n    editor: PortableTextEditor,\n    type: TSchemaType,\n  ) => editor.editable?.removeAnnotation(type)\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'style.toggle',\n   *  style: '...',\n   * })\n   * ```\n   */\n  static toggleBlockStyle = (\n    editor: PortableTextEditor,\n    blockStyle: string,\n  ) => {\n    debug(`Host is toggling block style`)\n    return editor.editable?.toggleBlockStyle(blockStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'list item.toggle',\n   *  listItem: '...',\n   * })\n   * ```\n   */\n  static toggleList = (editor: PortableTextEditor, listStyle: string): void => {\n    return editor.editable?.toggleList(listStyle)\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *  type: 'decorator.toggle',\n   *  decorator: '...',\n   * })\n   * ```\n   */\n  static toggleMark = (editor: PortableTextEditor, mark: string): void => {\n    debug(`Host toggling mark`, mark)\n    editor.editable?.toggleMark(mark)\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const selectedSlice = useEditorSelector(editor, selectors.getSelectedSlice)\n   * ```\n   */\n  static getFragment = (\n    editor: PortableTextEditor,\n  ): PortableTextBlock[] | undefined => {\n    return editor.editable?.getFragment()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.undo',\n   * })\n   * ```\n   */\n  static undo = (editor: PortableTextEditor): void => {\n    debug('Host undoing')\n    editor.editable?.undo()\n  }\n\n  /**\n   * @deprecated\n   * Use `editor.send(...)` instead\n   *\n   * ```\n   * const editor = useEditor()\n   * editor.send({\n   *   type: 'history.redo',\n   * })\n   * ```\n   */\n  static redo = (editor: PortableTextEditor): void => {\n    debug('Host redoing')\n    editor.editable?.redo()\n  }\n\n  /**\n   * @deprecated\n   * Use built-in selectors or write your own: https://www.portabletext.org/reference/selectors/\n   *\n   * ```\n   * import * as selectors from '@portabletext/editor/selectors'\n   * const editor = useEditor()\n   * const isOverlapping = useEditorSelector(editor, selectors.isOverlappingSelection(selectionB))\n   * ```\n   */\n  static isSelectionsOverlapping = (\n    editor: PortableTextEditor,\n    selectionA: EditorSelection,\n    selectionB: EditorSelection,\n  ) => {\n    return editor.editable?.isSelectionsOverlapping(selectionA, selectionB)\n  }\n}\n\nfunction RoutePatchesObservableToEditorActor(props: {\n  editorActor: EditorActor\n  patches$: PatchObservable\n}) {\n  useEffect(() => {\n    const subscription = props.patches$.subscribe((payload) => {\n      props.editorActor.send({\n        type: 'patches',\n        ...payload,\n      })\n    })\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [props.editorActor, props.patches$])\n\n  return null\n}\n\nexport function RouteEventsToChanges(props: {\n  editorActor: EditorActor\n  onChange: (change: EditorChange) => void\n}) {\n  // We want to ensure that _when_ `props.onChange` is called, it uses the current value.\n  // But we don't want to have the `useEffect` run setup + teardown + setup every time the prop might change, as that's unnecessary.\n  // So we use our own polyfill that lets us use an upcoming React hook that solves this exact problem.\n  // https://19.react.dev/learn/separating-events-from-effects#declaring-an-effect-event\n  const handleChange = useEffectEvent((change: EditorChange) =>\n    props.onChange(change),\n  )\n\n  useEffect(() => {\n    debug('Subscribing to editor changes')\n    const sub = props.editorActor.on('*', (event) => {\n      switch (event.type) {\n        case 'blurred': {\n          handleChange({type: 'blur', event: event.event})\n          break\n        }\n        case 'patch':\n          handleChange(event)\n          break\n        case 'loading': {\n          handleChange({type: 'loading', isLoading: true})\n          break\n        }\n        case 'done loading': {\n          handleChange({type: 'loading', isLoading: false})\n          break\n        }\n        case 'focused': {\n          handleChange({type: 'focus', event: event.event})\n          break\n        }\n        case 'value changed': {\n          handleChange({type: 'value', value: event.value})\n          break\n        }\n        case 'invalid value': {\n          handleChange({\n            type: 'invalidValue',\n            resolution: event.resolution,\n            value: event.value,\n          })\n          break\n        }\n        case 'error': {\n          handleChange({\n            ...event,\n            level: 'warning',\n          })\n          break\n        }\n        case 'mutation': {\n          handleChange(event)\n          break\n        }\n        case 'ready': {\n          handleChange(event)\n          break\n        }\n        case 'selection': {\n          handleChange(event)\n          break\n        }\n        case 'unset': {\n          handleChange(event)\n          break\n        }\n      }\n    })\n    return () => {\n      debug('Unsubscribing to changes')\n      sub.unsubscribe()\n    }\n  }, [props.editorActor])\n\n  return null\n}\n","import React, {useMemo} from 'react'\nimport {Slate} from 'slate-react'\nimport {Synchronizer} from './components/Synchronizer'\nimport {\n  useCreateInternalEditor,\n  type Editor,\n  type EditorConfig,\n} from './create-editor'\nimport {EditorActorContext} from './editor-actor-context'\nimport {PortableTextEditorContext} from './hooks/usePortableTextEditor'\nimport {PortableTextEditorSelectionProvider} from './hooks/usePortableTextEditorSelection'\nimport {\n  PortableTextEditor,\n  RouteEventsToChanges,\n  type PortableTextEditorProps,\n} from './PortableTextEditor'\n\nconst EditorContext = React.createContext<Editor | undefined>(undefined)\n\n/**\n * @public\n */\nexport type EditorProviderProps = {\n  initialConfig: EditorConfig\n  children?: React.ReactNode\n}\n\n/**\n * @public\n * The EditorProvider component is used to set up the editor context and configure the Portable Text Editor.\n * @example\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n *\n * function App() {\n *  return (\n *    <EditorProvider initialConfig={{ ... }} >\n *      ...\n *    </EditorProvider>\n *  )\n * }\n *\n * ```\n * @group Components\n */\nexport function EditorProvider(props: EditorProviderProps) {\n  const internalEditor = useCreateInternalEditor(props.initialConfig)\n  const editorActor = internalEditor._internal.editorActor\n  const slateEditor = internalEditor._internal.slateEditor\n  const portableTextEditor = useMemo(\n    () =>\n      new PortableTextEditor({\n        editor: internalEditor,\n      } as unknown as PortableTextEditorProps),\n    [internalEditor],\n  )\n\n  return (\n    <EditorContext.Provider value={internalEditor}>\n      <RouteEventsToChanges\n        editorActor={editorActor}\n        onChange={(change) => {\n          portableTextEditor.change$.next(change)\n        }}\n      />\n      <Synchronizer\n        editorActor={editorActor}\n        slateEditor={slateEditor.instance}\n      />\n      <EditorActorContext.Provider value={editorActor}>\n        <Slate\n          editor={slateEditor.instance}\n          initialValue={slateEditor.initialValue}\n        >\n          <PortableTextEditorContext.Provider value={portableTextEditor}>\n            <PortableTextEditorSelectionProvider editorActor={editorActor}>\n              {props.children}\n            </PortableTextEditorSelectionProvider>\n          </PortableTextEditorContext.Provider>\n        </Slate>\n      </EditorActorContext.Provider>\n    </EditorContext.Provider>\n  )\n}\n\n/**\n * @public\n * Get the current editor context from the `EditorProvider`.\n * Must be used inside the `EditorProvider` component.\n * @returns The current editor object.\n * @example\n * ```tsx\n * import { useEditor } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  const editor = useEditor()\n * }\n * ```\n * @group Hooks\n */\nexport function useEditor() {\n  const editor = React.useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error('No Editor set. Use EditorProvider to set one.')\n  }\n\n  return editor\n}\n"],"names":["createEditorSchema","portableTextType","Error","blockType","of","find","findBlockType","childrenField","fields","field","name","ofType","type","spanType","memberType","inlineObjectTypes","filter","blockObjectTypes","styles","resolveEnabledStyles","decorators","resolveEnabledDecorators","lists","resolveEnabledListItems","block","span","portableText","inlineObjects","blockObjects","annotations","styleField","btField","textStyles","options","list","style","value","length","listField","listItems","defineSchema","definition","compileSchemaDefinition","map","blockObject","defineType","title","undefined","inlineObject","portableTextSchema","defineField","marks","decorator","startCase","annotation","schema","SanitySchema","compile","types","get","pteSchema","rootName","debug","debugWithName","namespace","enabled","createKeyedPath","point","blockPath","path","keyedBlockPath","_key","_type","keyedChildPath","childPath","slice","child","Array","isArray","children","toSlatePath","editor","from","Editor","nodes","at","match","n","isKeySegment","Element","isElement","isVoid","childIndex","findIndex","isEqual","concat","toPortableTextRange","range","anchor","focus","anchorPath","offset","focusPath","backward","Boolean","Range","isRange","isBackward","toSlateRange","selection","moveRangeByOperation","operation","Point","transform","equals","EMPTY_MARKDEFS","VOID_CHILD_KEY","keepObjectEquality","object","keyMap","toSlateValue","schemaTypes","rest","textBlock","hasInlines","hasMissingStyle","hasMissingMarkDefs","markDefs","hasMissingChildren","cType","cKey","cRest","text","__inline","fromSlateValue","textBlockType","_cType","v","k","t","_i","_c","blockValue","isEqualToEmptyEditor","Text","isText","join","getFocusBlock","isEditor","getFocusChild","focusBlock","focusBlockPath","focusChild","Node","getFirstBlock","firstBlockPath","start","node","getLastBlock","lastBlockPath","end","getNodeBlock","isBlockElement","elementToBlock","element","parent","mode","some","isInline","isListItemActive","listItem","selectedBlocks","isTextBlock","every","isListBlock","isStyleActive","IS_PROCESSING_REMOTE_CHANGES","WeakMap","KEY_TO_SLATE_ELEMENT","KEY_TO_VALUE_ELEMENT","SLATE_TO_PORTABLE_TEXT_RANGE","EditorActorContext","createContext","PortableTextEditorContext","usePortableTextEditor","useContext","compileType","rawType","Schema","mutationMachine","setup","context","events","input","emitted","actions","emit","enqueueActions","enqueue","bulk","pendingMutations","patches","snapshot","assign","event","assertEvent","actionId","patch","lastBulk","actors","fromCallback","sendBack","originalApply","slateEditor","apply","op","guards","stateIn","typing","no pending mutations","slate is normalizing","isNormalizing","delays","process","env","NODE_ENV","createMachine","id","states","initial","invoke","src","idle","on","target","after","reenter","mutations","guard","and","not","validateValue","keyGenerator","resolution","valid","validChildTypes","validBlockTypes","unset","description","action","item","i18n","blk","index","isPlainObject","String","values","set","includes","currentBlockTypeName","key","expectedTypeName","isPortableTextTextBlock","typeName","newSpan","autoResolve","setIfMissing","insert","allUsedMarks","uniq","flatten","cld","unusedMarkDefs","def","markDefKey","m","toString","orphanedMarks","mark","dec","spanChildren","orphaned","cMrk","cIndex","newChild","childKey","childType","withRemoteChanges","fn","prev","isChangingRemotely","PATCHING","withoutPatching","isPatching","cloneDiff","diff2","IS_UDOING","IS_REDOING","withUndoing","isUndoing","setIsUndoing","withRedoing","isRedoing","setIsRedoing","defaultKeyGenerator","randomKey","getByteHexTable","table","i","whatwgRNG","rnds8","Uint8Array","getRandomValues","reduce","str","CURRENT_ACTION_ID","withApplyingBehaviorActions","withoutNormalizing","getCurrentActionId","isApplyingBehaviorActions","CURRENT_BEHAVIOR_ACTION_SET","withApplyingBehaviorActionSet","current","actionSetId","getCurrentBehaviorActionSetId","SAVING","REMOTE_PATCHES","UNDO_STEP_LIMIT","isSaving","state","getRemotePatches","createWithUndoRedo","editorActor","blockSchemaType","previousSnapshot","remotePatches","previousBehaviorActionSetId","subscriptions","push","sub","reset","forEach","origin","history","undos","redos","splice","time","Date","unsubscribe","getSnapshot","matches","operations","step","lastOp","overwrite","shouldOverwrite","save","currentBehaviorActionSetId","merge","shouldMerge","newStep","createSelectOperation","timestamp","shift","shouldClear","historyUndoActionImplementation","otherPatches","transformedOperations","transformOperation","reversedOperations","Operation","inverse","reverse","withoutSaving","err","Transforms","deselect","onChange","pop","historyRedoActionImplementation","transformedOperation","insertBlockIndex","items","adjustBlockPath","unsetBlockIndex","operationTargetBlock","findOperationTargetBlock","parsePatch","diffPatch","adjustOffsetBy","changedOffset","utf8Start1","diffs","diff","diffType","DIFF_INSERT","DIFF_DELETE","DIFF_EQUAL","dType","currentFocus","properties","currentAnchor","newFocus","newProperties","newAnchor","level","blockIndex","newPath","Path","syncValueCallback","streamBlocks","syncValueLogic","syncMachine","initialValueSynced","readOnly","pendingValue","previousValue","initial value synced","is busy","editable","isProcessingLocalChanges","isChanging","isBusy","value changed while syncing","pending value equals previous value","entry","exit","always","busy","syncing","updateValue","isChanged","isValid","hadSelection","childrenLength","_","removeNodes","insertNodes","pteCreateTextBlock","select","slateValueFromProps","Promise","resolve","currentBlock","currentBlockIndex","getBlocks","slateValue","blockChanged","blockValid","syncBlock","error","setTimeout","oldBlock","hasChanges","validationValue","validation","console","warn","_updateBlock","_replaceBlock","currentSelection","selectionFocusOnBlock","setNodes","oldBlockChildrenLength","currentBlockChild","currentBlockChildIndex","oldBlockChild","isChildChanged","isTextChanged","isSpanNode","delete","insertText","voids","Synchronizer","props","$","useSelector","_temp","_temp2","t0","t1","t2","t3","t4","syncActorRef","useActorRef","t5","t6","mutationActorRef","t7","t8","subscription","send","useEffect","t10","t9","subscription_0","event_0","bb15","t11","t12","t13","t14","t15","event_1","t16","s_0","s","displayName","converterJson","mimeType","serialize","portableTextConverter","converters","converter","originEvent","reason","deserialize","converterPortableText","beta","internalDrag","blocks","sliceBlocks","data","JSON","stringify","parse","parsedBlocks","flatMap","parsedBlock","parseBlock","refreshKeys","hasTag","converterTextHtml","html","toHTML","onMissingComponent","components","unknownType","htmlToBlocks","unstable_whitespaceOnPasteMode","converterTextPlain","inlineObjectType","blockObjectType","textToHtml","escapeHtml","split","line","replace","entityMap","coreConverters","createOperationToPatches","textBlockName","insertTextPatch","beforeValue","textChild","isTextSpan","prevBlock","prevChild","prevText","diffMatchPatch","removeTextPatch","beforeBlock","prevTextChild","setNodePatch","setNode","omitBy","isUndefined","blockKey","keys","Object","keyName","val","indexOf","insertNodePatch","position","targetKey","splitNodePatch","splitBlock","targetValue","splitSpan","targetSpans","removeNodePatch","spanToRemove","mergeNodePatch","updatedBlock","newBlock","updatedSpan","removedSpan","moveNodePatch","targetBlock","targetChild","childToInsert","insertBreakActionImplementation","anchorBlockPath","descendant","splitNodes","nextBlock","nextBlockPath","next","depth","nextChild","setSelection","newMarkDefKeys","Map","prevNodeSpans","prevNodeSpan","has","newMarks","newMarkDefs","markDef","insertSoftBreakActionImplementation","isPortableTextSpan","isPortableTextBlock","getPreviousSpan","spanPath","previousSpan","isBefore","getNextSpan","nextSpan","isAfter","createWithPortableTextMarkModel","normalizeNode","nodeEntry","nextNode","mergeNodes","orphanedAnnotations","markDefKeys","Set","add","previousSelectionIsCollapsed","isCollapsed","newSelectionIsCollapsed","focusSpan","newFocusSpan","movedToNextSpan","movedToPreviousSpan","_block","previousSpanAnnotations","nextSpanAnnotations","annotationsEnding","atTheEndOfAnnotation","annotationsStarting","atTheStartOfAnnotation","nextSpanDecorators","collapsedSelection","marksWithoutAnnotations","spanHasAnnotations","spanIsEmpty","atTheBeginningOfSpan","atTheEndOfSpan","spanAnnotations","previousSpanHasAnnotations","previousSpanHasSameAnnotations","previousSpanHasSameAnnotation","previousSpanHasSameMarks","nextSpanSharesSomeAnnotations","isExpanded","deletingFromTheEnd","deletingAllText","nextSpanHasSameAnnotation","marksWithoutAnnotationMarks","targetPath","oldDefs","removeDecoratorActionImplementation","hanging","eMark","lonelyEmptySpan","existingMarksWithoutDecorator","existingMark","existingMarks","isDecoratorActive","selectedTextNodes","createEditableAPI","behaviorEvent","blur","toggleMark","toggleList","toggleBlockStyle","isMarkActive","undo","redo","slateSelection","insertChild","focusChildPath","focusNode","move","distance","unit","insertBlock","placement","hasBlockStyle","hasListStyle","findByPath","slatePath","ptBlock","ptChild","findDOMNode","ReactEditor","toDOMNode","activeAnnotations","spans","isAnnotationActive","annotationType","addAnnotation","paths","addAnnotationActionImplementation","SlateElement","removeAnnotation","getSelection","ptRange","existing","getValue","isCollapsedSelection","isExpandedSelection","insertBreak","getFragment","isSelectionsOverlapping","selectionA","selectionB","rangeA","rangeB","selectionMarkDefs","accMarkDefs","markKey","markDefPath","markDefPaths","annotationKey","unshift","existingSameTypeAnnotations","removeAnnotationActionImplementation","potentialAnnotations","selectedChild","selectedChildPath","annotationToRemove","previousSpansWithSameAnnotation","SlatePath","nextSpansWithSameAnnotation","marksWithoutAnnotation","blockSetBehaviorActionImplementation","location","filteredProps","slateBlock","blockUnsetBehaviorActionImplementation","propsToRemove","prop","updatedTextBlock","omit","propsToSet","updatedBlockObject","blurActionImplementation","decoratorAddActionImplementation","manualAnchor","offsets","utils","blockOffset","direction","manualFocus","manualSelection","editorSelection","anchorOffset","selectionPoint","focusOffset","newValue","newSelection","trimmedSelection","selectors","activeDecorators","newRange","splitTextNodes","deleteActionImplementation","deleteBackwardActionImplementation","deleteBackward","deleteBlockActionImplementation","deleteForwardActionImplementation","deleteForward","deleteTextActionImplementation","effectActionImplementation","effect","focusActionImplementation","insertInlineObjectActionImplementation","focusTextBlock","insertSpanActionImplementation","insertBlockActionImplementation","fragment","DOMEditor","lastBlock","nextPath","selectionBefore","insertFragment","adjustedSelection","focusBlockStartPoint","focusBlockEndPoint","insertTextActionImplementation","moveBlockActionImplementation","to","moveNodes","moveBlockDownActionImplementation","destinationBlockKey","isKeyedSegment","moveBlockUpActionImplementation","hasPrevious","previous","noopActionImplementation","selectActionImplementation","behaviorActionImplementations","performAction","createWithEventListeners","maxBlocks","insertData","dataTransfer","insertSoftBreak","defaultActionCallback","setFragmentData","createWithMaxBlocks","rows","createWithObjectKeys","existingKeys","descendants","debugVerbose","createApplyPatch","changed","insertPatch","unsetPatch","setPatch","findBlockAndChildFromPath","diffMatchPatchApplyPatches","allowExceedingIndices","cleanupEfficiency","makeDiff","debugState","targetBlockPath","targetChildPath","blocksToInsert","targetBlockIndex","normalizedIdx","childrenToInsert","targetChildIndex","childInsertPath","newText","nextRest","prevChildren","prevRest","c","newVal","applyAll","previousSelection","_child","segment","stateName","findBlockFromPath","isMatch","createWithPatches","patchFunctions","previousChildren","applyPatch","bufferedPatches","handleBufferedRemotePatches","normalize","handlePatches","p","editorWasEmpty","editorIsEmpty","createWithPlaceholderBlock","insertNode","createWithPortableTextBlockStyle","defaultStyle","SlateText","createWithPortableTextSelections","prevSelection","emitPortableTextSelection","createWithSchemaTypes","isPortableTextListBlock","obj","createWithUtils","withPlugins","e","operationToPatches","withObjectKeys","withSchemaTypes","withPatches","withMaxBlocks","withUndoRedo","withPortableTextMarkModel","withPortableTextBlockStyle","withPlaceholderBlock","withUtils","withPortableTextSelections","slateEditors","createSlateEditor","config","existingSlateEditor","unsubscriptions","instance","withReact","createEditor","initialValue","keyIs","lineBreak","shiftKey","raiseInsertSoftBreak","defineBehavior","raise","internalAnnotationBehaviors","isActiveAnnotation","internalDecoratorBehaviors","isActiveDecorator","blockOffsetsToSelection","internalInsertBehaviors","getFocusTextBlock","internalListItemBehaviors","selectedTextBlocks","getSelectedTextBlocks","isActiveListItem","internalSelectBehaviors","previousBlock","getPreviousBlock","getBlockEndPoint","getBlockStartPoint","getNextBlock","internalStyleBehaviors","isActiveStyle","raiseDeserializationSuccessOrFailure","deserializeEvents","getData","deserializeEvent","raiseSerializationSuccessOrFailure","serializeEvents","serializeEvent","defaultBehaviors","selectionCollapsed","setData","dragOrigin","dropPosition","droppingOnDragOrigin","draggingEntireBlocks","draggedBlocks","textRuns","getTextBlockText","textRun","isKeyboardBehaviorEvent","startsWith","isInternalBehaviorEvent","isNativeBehaviorEvent","isClipboardBehaviorEvent","isDragBehaviorEvent","isInputBehaviorEvent","isMouseBehaviorEvent","isCustomBehaviorEvent","eventCategory","performEvent","behaviors","nativeEvent","defaultAction","eventBehaviors","behavior","listenedNamespace","eventNamespace","message","editorSnapshot","behaviorOverwritten","eventBehavior","shouldRun","actionSets","actionSet","internalAction","preventDefault","getActiveDecorators","slateEditorInstance","createEditorSnapshot","editorMachine","tags","pendingEvents","handle behavior event","self","tag","coreBehaviors","initialReadOnly","dragstart","ghost","parentNode","removeChild","dragend","drop","normalizing","editorActorSnapshot","defaultCompare","a","b","useEditorSelector","selector","compare","getEditorSnapshot","_internal","createInternalEditor","createActor","editorConfigToMachineInput","createInternalEditorFromActor","useCreateInternalEditor","schemaDefinition","hasOwnProperty","registerBehavior","listener","PortableTextEditorSelectionContext","usePortableTextEditorSelection","PortableTextEditorSelectionProvider","useState","startTransition","PortableTextEditor","Component","change$","Subject","constructor","schemaType","Number","parseInt","componentDidUpdate","prevProps","editorRef","setEditable","render","legacyPatches","incomingPatches$","patches$","change","blockStyle","listStyle","isObjectPath","_editor","isChildObjectEditPath","RoutePatchesObservableToEditorActor","subscribe","payload","RouteEventsToChanges","handleChange","useEffectEvent","bb5","isLoading","EditorContext","React","EditorProvider","internalEditor","initialConfig","portableTextEditor","useEditor"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"debugId":null}},
    {"offset": {"line": 9970, "column": 0}, "map": {"version":3,"file":"selector.get-focus-inline-object.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-focus-inline-object.ts"],"sourcesContent":["import {\n  isPortableTextSpan,\n  type KeyedSegment,\n  type PortableTextObject,\n} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getFocusChild} from './selectors'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  | {node: PortableTextObject; path: [KeyedSegment, 'children', KeyedSegment]}\n  | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n"],"names":["getFocusInlineObject","snapshot","focusChild","getFocusChild","isPortableTextSpan","node","path","undefined"],"mappings":";;;;;;;AAWO,MAAMA,uBAGRC,CAAa,aAAA;IACVC,MAAAA,mOAAaC,gBAAAA,EAAcF,QAAQ;IAEzC,OAAOC,cAAc,2JAACE,qBAAAA,EAAmBF,WAAWG,IAAI,IACpD;QAACA,MAAMH,WAAWG,IAAAA;QAAMC,MAAMJ,WAAWI,IAAAA;IAAAA,IACzCC,KAAAA;AACN","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9992, "column": 0}, "map": {"version":3,"file":"util.is-selection-collapsed.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.get-selection-end-point.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.is-selection-collapsed.ts"],"sourcesContent":["import type {EditorSelection, EditorSelectionPoint} from '..'\n\n/**\n * @public\n */\nexport function getSelectionEndPoint<\n  TEditorSelection extends NonNullable<EditorSelection> | null,\n  TEditorSelectionPoint extends\n    EditorSelectionPoint | null = TEditorSelection extends NonNullable<EditorSelection>\n    ? EditorSelectionPoint\n    : null,\n>(selection: TEditorSelection): TEditorSelectionPoint {\n  if (!selection) {\n    return null as TEditorSelectionPoint\n  }\n\n  return (\n    selection.backward ? selection.anchor : selection.focus\n  ) as TEditorSelectionPoint\n}\n","import type {EditorSelection} from '../types/editor'\n\n/**\n * @public\n */\nexport function isSelectionCollapsed(selection: EditorSelection) {\n  if (!selection) {\n    return false\n  }\n\n  return (\n    selection.anchor.path.join() === selection.focus.path.join() &&\n    selection.anchor.offset === selection.focus.offset\n  )\n}\n"],"names":["getSelectionEndPoint","selection","backward","anchor","focus","isSelectionCollapsed","path","join","offset"],"mappings":";;;;AAKO,SAASA,qBAMdC,SAAAA,EAAoD;IACpD,OAAKA,YAKHA,UAAUC,QAAAA,GAAWD,UAAUE,MAAAA,GAASF,UAAUG,KAAAA,GAJ3C;AAMX;ACdO,SAASC,qBAAqBJ,SAAAA,EAA4B;IAC/D,OAAKA,YAKHA,UAAUE,MAAAA,CAAOG,IAAAA,CAAKC,IAAAA,CAAAA,MAAWN,UAAUG,KAAAA,CAAME,IAAAA,CAAKC,IAAAA,CAAAA,KACtDN,UAAUE,MAAAA,CAAOK,MAAAA,KAAWP,UAAUG,KAAAA,CAAMI,MAAAA,GALrC,CAAA;AAOX","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 10010, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/compound-client-rect.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/drag-selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/event-position.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/selection.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/selection-elements.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/components/DefaultObject.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/components/drop-indicator.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/components/Element.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/components/Leaf.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/plugins/createWithHotKeys.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/withSyncRangeDecorations.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor/Editable.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/editor-event-listener.tsx"],"sourcesContent":["export function getCompoundClientRect(nodes: Array<Node>): DOMRect {\n  if (nodes.length === 0) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  const elements = nodes.filter((node) => node instanceof Element)\n\n  const firstRect = elements.at(0)?.getBoundingClientRect()\n\n  if (!firstRect) {\n    return new DOMRect(0, 0, 0, 0)\n  }\n\n  let left = firstRect.left\n  let top = firstRect.top\n  let right = firstRect.right\n  let bottom = firstRect.bottom\n\n  for (let i = 1; i < elements.length; i++) {\n    const rect = elements[i].getBoundingClientRect()\n    left = Math.min(left, rect.left)\n    top = Math.min(top, rect.top)\n    right = Math.max(right, rect.right)\n    bottom = Math.max(bottom, rect.bottom)\n  }\n\n  return new DOMRect(left, top, right - left, bottom - top)\n}\n","import type {EditorSnapshot} from '..'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport type {EventPosition} from './event-position'\n\n/**\n * Given the current editor `snapshot` and an `eventSelection` representing\n * where the drag event origins from, this function calculates the selection\n * in the editor that should be dragged.\n */\nexport function getDragSelection({\n  eventSelection,\n  snapshot,\n}: {\n  eventSelection: EventPosition['selection']\n  snapshot: EditorSnapshot\n}) {\n  let dragSelection = eventSelection\n\n  const draggedInlineObject = selectors.getFocusInlineObject({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggedInlineObject) {\n    return dragSelection\n  }\n\n  const draggingCollapsedSelection = selectors.isSelectionCollapsed({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedTextBlock = selectors.getFocusTextBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n  const draggedSpan = selectors.getFocusSpan({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: eventSelection,\n    },\n  })\n\n  if (draggingCollapsedSelection && draggedTextBlock && draggedSpan) {\n    // Looks like we are dragging an empty span\n    // Let's drag the entire block instead\n    dragSelection = {\n      anchor: utils.getBlockStartPoint(draggedTextBlock),\n      focus: utils.getBlockEndPoint(draggedTextBlock),\n    }\n  }\n\n  const selectedBlocks = selectors.getSelectedBlocks(snapshot)\n\n  if (\n    snapshot.context.selection &&\n    selectors.isSelectionExpanded(snapshot) &&\n    selectedBlocks.length > 1\n  ) {\n    const selectionStartBlock = selectors.getSelectionStartBlock(snapshot)\n    const selectionEndBlock = selectors.getSelectionEndBlock(snapshot)\n\n    if (!selectionStartBlock || !selectionEndBlock) {\n      return dragSelection\n    }\n\n    const selectionStartPoint = utils.getBlockStartPoint(selectionStartBlock)\n    const selectionEndPoint = utils.getBlockEndPoint(selectionEndBlock)\n\n    const eventSelectionInsideBlocks = selectors.isOverlappingSelection(\n      eventSelection,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {anchor: selectionStartPoint, focus: selectionEndPoint},\n      },\n    })\n\n    if (eventSelectionInsideBlocks) {\n      dragSelection = {\n        anchor: selectionStartPoint,\n        focus: selectionEndPoint,\n      }\n    }\n  }\n\n  return dragSelection\n}\n","import {Editor, type BaseRange, type Node} from 'slate'\nimport {DOMEditor, isDOMNode} from 'slate-dom'\nimport type {EditorSchema, EditorSelection} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport * as utils from '../utils'\nimport {toPortableTextRange} from './ranges'\nimport {getFirstBlock, getLastBlock, getNodeBlock} from './slate-utils'\nimport {fromSlateValue} from './values'\n\nexport type EventPosition = {\n  block: 'start' | 'end'\n  /**\n   * Did the event origin from the editor DOM node itself or from a child node?\n   */\n  isEditor: boolean\n  selection: NonNullable<EditorSelection>\n}\nexport type EventPositionBlock = EventPosition['block']\n\nexport function getEventPosition({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPosition | undefined {\n  const node = getEventNode({slateEditor, event})\n\n  if (!node) {\n    return undefined\n  }\n\n  const block = getNodeBlock({\n    editor: slateEditor,\n    schema,\n    node,\n  })\n\n  const positionBlock = getEventPositionBlock({node, slateEditor, event})\n  const selection = getEventSelection({\n    schema,\n    slateEditor,\n    event,\n  })\n\n  if (block && positionBlock && !selection && !Editor.isEditor(node)) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n        focus: utils.getBlockEndPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n      },\n    }\n  }\n\n  if (!positionBlock || !selection) {\n    return undefined\n  }\n\n  const focusBlockPath = selection.focus.path.at(0)\n  const focusBlockKey = utils.isKeyedSegment(focusBlockPath)\n    ? focusBlockPath._key\n    : undefined\n\n  if (!focusBlockKey) {\n    return undefined\n  }\n\n  if (\n    utils.isSelectionCollapsed(selection) &&\n    block &&\n    focusBlockKey !== block._key\n  ) {\n    return {\n      block: positionBlock,\n      isEditor: false,\n      selection: {\n        anchor: utils.getBlockStartPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n        focus: utils.getBlockEndPoint({\n          node: block,\n          path: [{_key: block._key}],\n        }),\n      },\n    }\n  }\n\n  return {\n    block: positionBlock,\n    isEditor: Editor.isEditor(node),\n    selection,\n  }\n}\n\nexport function getEventNode({\n  slateEditor,\n  event,\n}: {\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}) {\n  if (!DOMEditor.hasTarget(slateEditor, event.target)) {\n    return undefined\n  }\n\n  const node = DOMEditor.toSlateNode(slateEditor, event.target)\n\n  return node\n}\n\nfunction getEventPositionBlock({\n  node,\n  slateEditor,\n  event,\n}: {\n  node: Node\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EventPositionBlock | undefined {\n  const [firstBlock] = getFirstBlock({editor: slateEditor})\n\n  if (!firstBlock) {\n    return undefined\n  }\n\n  const firstBlockElement = DOMEditor.toDOMNode(slateEditor, firstBlock)\n  const firstBlockRect = firstBlockElement.getBoundingClientRect()\n\n  if (event.pageY < firstBlockRect.top) {\n    return 'start'\n  }\n\n  const [lastBlock] = getLastBlock({editor: slateEditor})\n\n  if (!lastBlock) {\n    return undefined\n  }\n\n  const lastBlockElement = DOMEditor.toDOMNode(slateEditor, lastBlock)\n  const lastBlockRef = lastBlockElement.getBoundingClientRect()\n\n  if (event.pageY > lastBlockRef.bottom) {\n    return 'end'\n  }\n\n  const element = DOMEditor.toDOMNode(slateEditor, node)\n  const elementRect = element.getBoundingClientRect()\n  const top = elementRect.top\n  const height = elementRect.height\n  const location = Math.abs(top - event.pageY)\n\n  return location < height / 2 ? 'start' : 'end'\n}\n\nexport function getEventSelection({\n  schema,\n  slateEditor,\n  event,\n}: {\n  schema: EditorSchema\n  slateEditor: PortableTextSlateEditor\n  event: DragEvent | MouseEvent\n}): EditorSelection {\n  const range = getSlateRangeFromEvent(slateEditor, event)\n\n  const selection = range\n    ? toPortableTextRange(\n        fromSlateValue(slateEditor.children, schema.block.name),\n        range,\n        schema,\n      )\n    : null\n\n  return selection\n}\n\nfunction getSlateRangeFromEvent(\n  editor: PortableTextSlateEditor,\n  event: DragEvent | MouseEvent,\n) {\n  if (!event.target) {\n    return undefined\n  }\n\n  if (!isDOMNode(event.target)) {\n    return undefined\n  }\n\n  const window = DOMEditor.getWindow(editor)\n\n  let domRange: Range | undefined\n\n  if (window.document.caretPositionFromPoint !== undefined) {\n    const position = window.document.caretPositionFromPoint(\n      event.clientX,\n      event.clientY,\n    )\n\n    if (position) {\n      try {\n        domRange = window.document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      } catch {}\n    }\n  } else if (window.document.caretRangeFromPoint !== undefined) {\n    // Use WebKit-proprietary fallback method\n    domRange =\n      window.document.caretRangeFromPoint(event.clientX, event.clientY) ??\n      undefined\n  } else {\n    console.warn(\n      'Neither caretPositionFromPoint nor caretRangeFromPoint is supported',\n    )\n    return undefined\n  }\n\n  if (!domRange) {\n    return undefined\n  }\n\n  let range: BaseRange | undefined\n\n  try {\n    range = DOMEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      // It can still throw even with this option set to true\n      suppressThrow: false,\n    })\n  } catch {}\n\n  return range\n}\n","import type {Path, PortableTextBlock} from '@sanity/types'\nimport {isEqual} from 'lodash'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\n\nexport function normalizePoint(\n  point: EditorSelectionPoint,\n  value: PortableTextBlock[],\n): EditorSelectionPoint | null {\n  if (!point || !value) {\n    return null\n  }\n  const newPath: Path = []\n  let newOffset: number = point.offset || 0\n  const blockKey =\n    typeof point.path[0] === 'object' &&\n    '_key' in point.path[0] &&\n    point.path[0]._key\n  const childKey =\n    typeof point.path[2] === 'object' &&\n    '_key' in point.path[2] &&\n    point.path[2]._key\n  const block: PortableTextBlock | undefined = value.find(\n    (blk) => blk._key === blockKey,\n  )\n  if (block) {\n    newPath.push({_key: block._key})\n  } else {\n    return null\n  }\n  if (block && point.path[1] === 'children') {\n    if (\n      !block.children ||\n      (Array.isArray(block.children) && block.children.length === 0)\n    ) {\n      return null\n    }\n    const child =\n      Array.isArray(block.children) &&\n      block.children.find((cld) => cld._key === childKey)\n    if (child) {\n      newPath.push('children')\n      newPath.push({_key: child._key})\n      newOffset =\n        child.text && child.text.length >= point.offset\n          ? point.offset\n          : (child.text && child.text.length) || 0\n    } else {\n      return null\n    }\n  }\n  return {path: newPath, offset: newOffset}\n}\n\nexport function normalizeSelection(\n  selection: EditorSelection,\n  value: PortableTextBlock[] | undefined,\n): EditorSelection | null {\n  if (!selection || !value || value.length === 0) {\n    return null\n  }\n  let newAnchor: EditorSelectionPoint | null = null\n  let newFocus: EditorSelectionPoint | null = null\n  const {anchor, focus} = selection\n  if (\n    anchor &&\n    value.find((blk) => isEqual({_key: blk._key}, anchor.path[0]))\n  ) {\n    newAnchor = normalizePoint(anchor, value)\n  }\n  if (focus && value.find((blk) => isEqual({_key: blk._key}, focus.path[0]))) {\n    newFocus = normalizePoint(focus, value)\n  }\n  if (newAnchor && newFocus) {\n    return {anchor: newAnchor, focus: newFocus, backward: selection.backward}\n  }\n  return null\n}\n","import {Editor} from 'slate'\nimport {DOMEditor} from 'slate-dom'\nimport type {EditorSnapshot} from '..'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport {toSlateRange} from './ranges'\n\nexport type SelectionDomNodes = {\n  blockNodes: Array<Node>\n  childNodes: Array<Node>\n}\n\nexport function getSelectionDomNodes({\n  slateEditor,\n  snapshot,\n}: {\n  slateEditor: PortableTextSlateEditor\n  snapshot: EditorSnapshot\n}): SelectionDomNodes {\n  if (!snapshot.context.selection) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const range = toSlateRange(snapshot.context.selection, slateEditor)\n\n  if (!range) {\n    return {\n      blockNodes: [],\n      childNodes: [],\n    }\n  }\n\n  const blockEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'highest',\n      match: (n) => !Editor.isEditor(n),\n    }),\n  )\n\n  const childEntries = Array.from(\n    Editor.nodes(slateEditor, {\n      at: range,\n      mode: 'lowest',\n      match: (n) =>\n        (!Editor.isEditor(n) && slateEditor.isTextSpan(n)) ||\n        !slateEditor.isBlock(n),\n    }),\n  )\n\n  return {\n    blockNodes: blockEntries.map(([blockNode]) =>\n      DOMEditor.toDOMNode(slateEditor, blockNode),\n    ),\n    childNodes: childEntries.map(([childNode]) =>\n      DOMEditor.toDOMNode(slateEditor, childNode),\n    ),\n  }\n}\n","import type {PortableTextBlock, PortableTextChild} from '@sanity/types'\n\nexport function DefaultBlockObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <div style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </div>\n  )\n}\n\nexport function DefaultInlineObject(props: {\n  value: PortableTextBlock | PortableTextChild\n}) {\n  return (\n    <span style={{userSelect: 'none'}}>\n      [{props.value._type}: {props.value._key}]\n    </span>\n  )\n}\n","export function DropIndicator() {\n  return (\n    <div\n      contentEditable={false}\n      className=\"pt-drop-indicator\"\n      style={{\n        position: 'absolute',\n        width: '100%',\n        height: 1,\n        borderBottom: '1px solid currentColor',\n        zIndex: 5,\n      }}\n    >\n      <span />\n    </div>\n  )\n}\n","import type {\n  Path,\n  PortableTextChild,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type FunctionComponent,\n  type JSX,\n  type ReactElement,\n} from 'react'\nimport {Editor, Range, Element as SlateElement} from 'slate'\nimport {\n  ReactEditor,\n  useSelected,\n  useSlateStatic,\n  type RenderElementProps,\n} from 'slate-react'\nimport {defineBehavior} from '../../behaviors'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {EventPositionBlock} from '../../internal-utils/event-position'\nimport {fromSlateValue} from '../../internal-utils/values'\nimport {KEY_TO_VALUE_ELEMENT} from '../../internal-utils/weakMaps'\nimport * as selectors from '../../selectors'\nimport type {\n  BlockRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderListItemFunction,\n  RenderStyleFunction,\n} from '../../types/editor'\nimport {EditorActorContext} from '../editor-actor-context'\nimport {DefaultBlockObject, DefaultInlineObject} from './DefaultObject'\nimport {DropIndicator} from './drop-indicator'\n\nconst debug = debugWithName('components:Element')\nconst debugRenders = false\nconst EMPTY_ANNOTATIONS: PortableTextObject[] = []\n\n/**\n * @internal\n */\nexport interface ElementProps {\n  attributes: RenderElementProps['attributes']\n  children: ReactElement<any>\n  element: SlateElement\n  schemaTypes: PortableTextMemberSchemaTypes\n  readOnly: boolean\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderListItem?: RenderListItemFunction\n  renderStyle?: RenderStyleFunction\n  spellCheck?: boolean\n}\n\nconst inlineBlockStyle = {display: 'inline-block'}\n\n/**\n * Renders Portable Text block and inline object nodes in Slate\n * @internal\n */\nexport const Element: FunctionComponent<ElementProps> = ({\n  attributes,\n  children,\n  element,\n  schemaTypes,\n  readOnly,\n  renderBlock,\n  renderChild,\n  renderListItem,\n  renderStyle,\n  spellCheck,\n}) => {\n  const editorActor = useContext(EditorActorContext)\n  const slateEditor = useSlateStatic()\n  const selected = useSelected()\n  const blockRef = useRef<HTMLDivElement | null>(null)\n  const inlineBlockObjectRef = useRef(null)\n  const focused =\n    (selected &&\n      slateEditor.selection &&\n      Range.isCollapsed(slateEditor.selection)) ||\n    false\n  const [dragPositionBlock, setDragPositionBlock] =\n    useState<EventPositionBlock>()\n\n  useEffect(() => {\n    const behavior = defineBehavior({\n      on: 'drag.dragover',\n      guard: ({snapshot, event}) => {\n        const dropFocusBlock = selectors.getFocusBlock({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: event.position.selection,\n          },\n        })\n\n        if (!dropFocusBlock || dropFocusBlock.node._key !== element._key) {\n          return false\n        }\n\n        const dragOrigin = snapshot.beta.internalDrag?.origin\n\n        if (!dragOrigin) {\n          return false\n        }\n\n        const draggedBlocks = selectors.getSelectedBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection,\n          },\n        })\n\n        if (\n          draggedBlocks.some(\n            (draggedBlock) => draggedBlock.node._key === element._key,\n          )\n        ) {\n          return false\n        }\n\n        const draggingEntireBlocks = selectors.isSelectingEntireBlocks({\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragOrigin.selection,\n          },\n        })\n\n        return draggingEntireBlocks\n      },\n      actions: [\n        ({event}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              setDragPositionBlock(event.position.block)\n            },\n          },\n          {\n            type: 'noop',\n          },\n        ],\n      ],\n    })\n\n    editorActor.send({\n      type: 'add behavior',\n      behavior,\n    })\n\n    return () => {\n      editorActor.send({\n        type: 'remove behavior',\n        behavior,\n      })\n    }\n  }, [editorActor, element._key])\n\n  useEffect(() => {\n    const behavior = defineBehavior({\n      on: 'drag.*',\n      guard: ({event}) => {\n        return event.type !== 'drag.dragover'\n      },\n      actions: [\n        () => [\n          {\n            type: 'effect',\n            effect: () => {\n              setDragPositionBlock(undefined)\n            },\n          },\n        ],\n      ],\n    })\n\n    editorActor.send({\n      type: 'add behavior',\n      behavior,\n    })\n\n    return () => {\n      editorActor.send({\n        type: 'remove behavior',\n        behavior,\n      })\n    }\n  }, [editorActor])\n\n  const value = useMemo(\n    () =>\n      fromSlateValue(\n        [element],\n        schemaTypes.block.name,\n        KEY_TO_VALUE_ELEMENT.get(slateEditor),\n      )[0],\n    [slateEditor, element, schemaTypes.block.name],\n  )\n\n  let renderedBlock = children\n\n  let className: string | undefined\n\n  const blockPath: Path = useMemo(() => [{_key: element._key}], [element])\n\n  if (typeof element._type !== 'string') {\n    throw new Error(`Expected element to have a _type property`)\n  }\n\n  if (typeof element._key !== 'string') {\n    throw new Error(`Expected element to have a _key property`)\n  }\n\n  // Test for inline objects first\n  if (slateEditor.isInline(element)) {\n    const path = ReactEditor.findPath(slateEditor, element)\n    const [block] = Editor.node(slateEditor, path, {depth: 1})\n    const schemaType = schemaTypes.inlineObjects.find(\n      (_type) => _type.name === element._type,\n    )\n    if (!schemaType) {\n      throw new Error('Could not find type for inline block element')\n    }\n    if (SlateElement.isElement(block)) {\n      const elmPath: Path = [\n        {_key: block._key},\n        'children',\n        {_key: element._key},\n      ]\n      if (debugRenders) {\n        debug(`Render ${element._key} (inline object)`)\n      }\n      return (\n        <span {...attributes}>\n          {/* Note that children must follow immediately or cut and selections will not work properly in Chrome. */}\n          {children}\n          <span\n            draggable={!readOnly}\n            className=\"pt-inline-object\"\n            data-testid=\"pt-inline-object\"\n            ref={inlineBlockObjectRef}\n            key={element._key}\n            style={inlineBlockStyle}\n            contentEditable={false}\n          >\n            {renderChild &&\n              renderChild({\n                annotations: EMPTY_ANNOTATIONS, // These inline objects currently doesn't support annotations. This is a limitation of the current PT spec/model.\n                children: <DefaultInlineObject value={value} />,\n                editorElementRef: inlineBlockObjectRef,\n                focused,\n                path: elmPath,\n                schemaType,\n                selected,\n                type: schemaType,\n                value: value as PortableTextChild,\n              })}\n            {!renderChild && <DefaultInlineObject value={value} />}\n          </span>\n        </span>\n      )\n    }\n    throw new Error('Block not found!')\n  }\n\n  // If not inline, it's either a block (text) or a block object (non-text)\n  // NOTE: text blocks aren't draggable with DraggableBlock (yet?)\n  if (element._type === schemaTypes.block.name) {\n    className = `pt-block pt-text-block`\n    const isListItem = 'listItem' in element\n    if (debugRenders) {\n      debug(`Render ${element._key} (text block)`)\n    }\n    const style = ('style' in element && element.style) || 'normal'\n    className = `pt-block pt-text-block pt-text-block-style-${style}`\n    const blockStyleType = schemaTypes.styles.find(\n      (item) => item.value === style,\n    )\n    if (renderStyle && blockStyleType) {\n      renderedBlock = renderStyle({\n        block: element as PortableTextTextBlock,\n        children,\n        focused,\n        selected,\n        value: style,\n        path: blockPath,\n        schemaType: blockStyleType,\n        editorElementRef: blockRef,\n      })\n    }\n    let level: number | undefined\n\n    if (isListItem) {\n      if (typeof element.level === 'number') {\n        level = element.level\n      }\n      className += ` pt-list-item pt-list-item-${element.listItem} pt-list-item-level-${level || 1}`\n    }\n\n    if (slateEditor.isListBlock(value) && isListItem && element.listItem) {\n      const listType = schemaTypes.lists.find(\n        (item) => item.value === element.listItem,\n      )\n      if (renderListItem && listType) {\n        renderedBlock = renderListItem({\n          block: value,\n          children: renderedBlock,\n          focused,\n          selected,\n          value: element.listItem,\n          path: blockPath,\n          schemaType: listType,\n          level: value.level || 1,\n          editorElementRef: blockRef,\n        })\n      }\n    }\n\n    const renderProps: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: renderedBlock,\n        editorElementRef: blockRef,\n        focused,\n        level,\n        listItem: isListItem ? element.listItem : undefined,\n        path: blockPath,\n        selected,\n        style,\n        schemaType: schemaTypes.block,\n        value,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaTypes.block\n        },\n      },\n    )\n\n    const propsOrDefaultRendered = renderBlock\n      ? renderBlock(renderProps as BlockRenderProps)\n      : children\n\n    return (\n      <div\n        key={element._key}\n        {...attributes}\n        className={className}\n        spellCheck={spellCheck}\n      >\n        {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n        <div ref={blockRef}>{propsOrDefaultRendered}</div>\n        {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n      </div>\n    )\n  }\n\n  const schemaType = schemaTypes.blockObjects.find(\n    (_type) => _type.name === element._type,\n  )\n\n  if (!schemaType) {\n    throw new Error(\n      `Could not find schema type for block element of _type ${element._type}`,\n    )\n  }\n\n  if (debugRenders) {\n    debug(`Render ${element._key} (object block)`)\n  }\n\n  className = 'pt-block pt-object-block'\n\n  const block = fromSlateValue(\n    [element],\n    schemaTypes.block.name,\n    KEY_TO_VALUE_ELEMENT.get(slateEditor),\n  )[0]\n\n  let renderedBlockFromProps: JSX.Element | undefined\n\n  if (renderBlock) {\n    const _props: Omit<BlockRenderProps, 'type'> = Object.defineProperty(\n      {\n        children: <DefaultBlockObject value={value} />,\n        editorElementRef: blockRef,\n        focused,\n        path: blockPath,\n        schemaType,\n        selected,\n        value: block,\n      },\n      'type',\n      {\n        enumerable: false,\n        get() {\n          console.warn(\n            \"Property 'type' is deprecated, use 'schemaType' instead.\",\n          )\n          return schemaType\n        },\n      },\n    )\n    renderedBlockFromProps = renderBlock(_props as BlockRenderProps)\n  }\n\n  return (\n    <div key={element._key} {...attributes} className={className}>\n      {dragPositionBlock === 'start' ? <DropIndicator /> : null}\n      {children}\n      <div ref={blockRef} contentEditable={false} draggable={!readOnly}>\n        {renderedBlockFromProps ? (\n          renderedBlockFromProps\n        ) : (\n          <DefaultBlockObject value={value} />\n        )}\n      </div>\n      {dragPositionBlock === 'end' ? <DropIndicator /> : null}\n    </div>\n  )\n}\n\nElement.displayName = 'Element'\n","import type {\n  Path,\n  PortableTextObject,\n  PortableTextTextBlock,\n} from '@sanity/types'\nimport {isEqual, uniq} from 'lodash'\nimport {\n  startTransition,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ReactElement,\n} from 'react'\nimport {Text} from 'slate'\nimport {useSelected, type RenderLeafProps} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport type {\n  BlockAnnotationRenderProps,\n  BlockChildRenderProps,\n  BlockDecoratorRenderProps,\n  PortableTextMemberSchemaTypes,\n  RenderAnnotationFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n} from '../../types/editor'\nimport type {EditorActor} from '../editor-machine'\nimport {usePortableTextEditor} from '../hooks/usePortableTextEditor'\nimport {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('components:Leaf')\n\nconst EMPTY_MARKS: string[] = []\n\n/**\n * @internal\n */\nexport interface LeafProps extends RenderLeafProps {\n  editorActor: EditorActor\n  children: ReactElement<any>\n  schemaTypes: PortableTextMemberSchemaTypes\n  renderAnnotation?: RenderAnnotationFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  readOnly: boolean\n}\n\n/**\n * Renders Portable Text span nodes in Slate\n * @internal\n */\nexport const Leaf = (props: LeafProps) => {\n  const {\n    editorActor,\n    attributes,\n    children,\n    leaf,\n    schemaTypes,\n    renderChild,\n    renderDecorator,\n    renderAnnotation,\n  } = props\n  const spanRef = useRef<HTMLElement>(null)\n  const portableTextEditor = usePortableTextEditor()\n  const blockSelected = useSelected()\n  const [focused, setFocused] = useState(false)\n  const [selected, setSelected] = useState(false)\n  const block = children.props.parent as PortableTextTextBlock | undefined\n  const path: Path = useMemo(\n    () => (block ? [{_key: block?._key}, 'children', {_key: leaf._key}] : []),\n    [block, leaf._key],\n  )\n  const decoratorValues = useMemo(\n    () => schemaTypes.decorators.map((dec) => dec.value),\n    [schemaTypes.decorators],\n  )\n  const marks: string[] = useMemo(\n    () =>\n      uniq(\n        (leaf.marks || EMPTY_MARKS).filter((mark) =>\n          decoratorValues.includes(mark),\n        ),\n      ),\n    [decoratorValues, leaf.marks],\n  )\n  const annotationMarks = Array.isArray(leaf.marks) ? leaf.marks : EMPTY_MARKS\n  const annotations = useMemo(\n    () =>\n      annotationMarks\n        .map(\n          (mark) =>\n            !decoratorValues.includes(mark) &&\n            block?.markDefs?.find((def) => def._key === mark),\n        )\n        .filter(Boolean) as PortableTextObject[],\n    [annotationMarks, block, decoratorValues],\n  )\n\n  const shouldTrackSelectionAndFocus = annotations.length > 0 && blockSelected\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      setFocused(false)\n      return\n    }\n    const sel = PortableTextEditor.getSelection(portableTextEditor)\n    if (\n      sel &&\n      isEqual(sel.focus.path, path) &&\n      PortableTextEditor.isCollapsedSelection(portableTextEditor)\n    ) {\n      startTransition(() => {\n        setFocused(true)\n      })\n    }\n  }, [shouldTrackSelectionAndFocus, path, portableTextEditor])\n\n  // Function to check if this leaf is currently inside the user's text selection\n  const setSelectedFromRange = useCallback(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return\n    }\n    debug('Setting selection and focus from range')\n    const winSelection = window.getSelection()\n    if (!winSelection) {\n      setSelected(false)\n      return\n    }\n    if (winSelection && winSelection.rangeCount > 0) {\n      const range = winSelection.getRangeAt(0)\n      if (spanRef.current && range.intersectsNode(spanRef.current)) {\n        setSelected(true)\n      } else {\n        setSelected(false)\n      }\n    } else {\n      setSelected(false)\n    }\n  }, [shouldTrackSelectionAndFocus])\n\n  useEffect(() => {\n    if (!shouldTrackSelectionAndFocus) {\n      return undefined\n    }\n\n    const onBlur = editorActor.on('blur', () => {\n      setFocused(false)\n      setSelected(false)\n    })\n\n    const onFocus = editorActor.on('focus', () => {\n      const sel = PortableTextEditor.getSelection(portableTextEditor)\n      if (\n        sel &&\n        isEqual(sel.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      }\n      setSelectedFromRange()\n    })\n\n    const onSelection = editorActor.on('selection', (event) => {\n      if (\n        event.selection &&\n        isEqual(event.selection.focus.path, path) &&\n        PortableTextEditor.isCollapsedSelection(portableTextEditor)\n      ) {\n        setFocused(true)\n      } else {\n        setFocused(false)\n      }\n      setSelectedFromRange()\n    })\n\n    return () => {\n      onBlur.unsubscribe()\n      onFocus.unsubscribe()\n      onSelection.unsubscribe()\n    }\n  }, [\n    editorActor,\n    path,\n    portableTextEditor,\n    setSelectedFromRange,\n    shouldTrackSelectionAndFocus,\n  ])\n\n  useEffect(() => setSelectedFromRange(), [setSelectedFromRange])\n\n  const content = useMemo(() => {\n    let returnedChildren = children\n    // Render text nodes\n    if (Text.isText(leaf) && leaf._type === schemaTypes.span.name) {\n      marks.forEach((mark) => {\n        const schemaType = schemaTypes.decorators.find(\n          (dec) => dec.value === mark,\n        )\n        if (schemaType && renderDecorator) {\n          const _props: Omit<BlockDecoratorRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                children: returnedChildren,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                selected,\n                schemaType,\n                value: mark,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaType\n                },\n              },\n            )\n          returnedChildren = renderDecorator(\n            _props as BlockDecoratorRenderProps,\n          )\n        }\n      })\n\n      if (block && annotations.length > 0) {\n        annotations.forEach((annotation) => {\n          const schemaType = schemaTypes.annotations.find(\n            (t) => t.name === annotation._type,\n          )\n          if (schemaType) {\n            if (renderAnnotation) {\n              const _props: Omit<BlockAnnotationRenderProps, 'type'> =\n                Object.defineProperty(\n                  {\n                    block,\n                    children: returnedChildren,\n                    editorElementRef: spanRef,\n                    focused,\n                    path,\n                    selected,\n                    schemaType,\n                    value: annotation,\n                  },\n                  'type',\n                  {\n                    enumerable: false,\n                    get() {\n                      console.warn(\n                        \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                      )\n                      return schemaType\n                    },\n                  },\n                )\n\n              returnedChildren = (\n                <span ref={spanRef}>\n                  {renderAnnotation(_props as BlockAnnotationRenderProps)}\n                </span>\n              )\n            } else {\n              returnedChildren = <span ref={spanRef}>{returnedChildren}</span>\n            }\n          }\n        })\n      }\n      if (block && renderChild) {\n        const child = block.children.find((_child) => _child._key === leaf._key) // Ensure object equality\n        if (child) {\n          const defaultRendered = <>{returnedChildren}</>\n          const _props: Omit<BlockChildRenderProps, 'type'> =\n            Object.defineProperty(\n              {\n                annotations,\n                children: defaultRendered,\n                editorElementRef: spanRef,\n                focused,\n                path,\n                schemaType: schemaTypes.span,\n                selected,\n                value: child,\n              },\n              'type',\n              {\n                enumerable: false,\n                get() {\n                  console.warn(\n                    \"Property 'type' is deprecated, use 'schemaType' instead.\",\n                  )\n                  return schemaTypes.span\n                },\n              },\n            )\n          returnedChildren = renderChild(_props as BlockChildRenderProps)\n        }\n      }\n    }\n    return returnedChildren\n  }, [\n    annotations,\n    block,\n    children,\n    focused,\n    leaf,\n    marks,\n    path,\n    renderAnnotation,\n    renderChild,\n    renderDecorator,\n    schemaTypes.annotations,\n    schemaTypes.decorators,\n    schemaTypes.span,\n    selected,\n  ])\n  return useMemo(\n    () => (\n      <span key={leaf._key} {...attributes} ref={spanRef}>\n        {content}\n      </span>\n    ),\n    [leaf, attributes, content],\n  )\n}\n\nLeaf.displayName = 'Leaf'\n","import type {KeyboardEvent} from 'react'\nimport type {ReactEditor} from 'slate-react'\nimport {debugWithName} from '../../internal-utils/debug'\nimport {isHotkey} from '../../internal-utils/is-hotkey'\nimport type {PortableTextSlateEditor} from '../../types/editor'\nimport type {HotkeyOptions} from '../../types/options'\nimport type {EditorActor} from '../editor-machine'\nimport type {PortableTextEditor} from '../PortableTextEditor'\n\nconst debug = debugWithName('plugin:withHotKeys')\n\n/**\n * This plugin takes care of all hotkeys in the editor\n *\n */\nexport function createWithHotkeys(\n  editorActor: EditorActor,\n  portableTextEditor: PortableTextEditor,\n  hotkeysFromOptions?: HotkeyOptions,\n): (editor: PortableTextSlateEditor & ReactEditor) => any {\n  const reservedHotkeys = ['enter', 'tab', 'shift', 'delete', 'end']\n  const activeHotkeys = hotkeysFromOptions ?? {}\n  return function withHotKeys(editor: PortableTextSlateEditor & ReactEditor) {\n    editor.pteWithHotKeys = (event: KeyboardEvent<HTMLDivElement>): void => {\n      // Wire up custom marks hotkeys\n      Object.keys(activeHotkeys).forEach((cat) => {\n        if (cat === 'marks') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              event.preventDefault()\n              const possibleMark = activeHotkeys[cat]\n              if (possibleMark) {\n                const mark = possibleMark[hotkey]\n                debug(`HotKey ${hotkey} to toggle ${mark}`)\n                editorActor.send({\n                  type: 'behavior event',\n                  behaviorEvent: {\n                    type: 'decorator.toggle',\n                    decorator: mark,\n                  },\n                  editor,\n                })\n              }\n            }\n          }\n        }\n        if (cat === 'custom') {\n          for (const hotkey in activeHotkeys[cat]) {\n            if (reservedHotkeys.includes(hotkey)) {\n              throw new Error(`The hotkey ${hotkey} is reserved!`)\n            }\n            if (isHotkey(hotkey, event.nativeEvent)) {\n              const possibleCommand = activeHotkeys[cat]\n              if (possibleCommand) {\n                const command = possibleCommand[hotkey]\n                command(event, portableTextEditor)\n              }\n            }\n          }\n        }\n      })\n    }\n    return editor\n  }\n}\n","import type {BaseEditor, Operation} from 'slate'\nimport type {ReactEditor} from 'slate-react'\nimport type {PortableTextSlateEditor} from '../types/editor'\nimport type {EditorActor} from './editor-machine'\n\n// React Compiler considers `slateEditor` as immutable, and opts-out if we do this inline in a useEffect, doing it in a function moves it out of the scope, and opts-in again for the rest of the component.\nexport function withSyncRangeDecorations({\n  editorActor,\n  slateEditor,\n  syncRangeDecorations,\n}: {\n  editorActor: EditorActor\n  slateEditor: BaseEditor & ReactEditor & PortableTextSlateEditor\n  syncRangeDecorations: (operation?: Operation) => void\n}) {\n  const originalApply = slateEditor.apply\n\n  slateEditor.apply = (op: Operation) => {\n    originalApply(op)\n\n    if (\n      !editorActor.getSnapshot().matches({'edit mode': 'read only'}) &&\n      op.type !== 'set_selection'\n    ) {\n      syncRangeDecorations(op)\n    }\n  }\n\n  return () => {\n    slateEditor.apply = originalApply\n  }\n}\n","import {useSelector} from '@xstate/react'\nimport {isEqual, noop} from 'lodash'\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ClipboardEvent,\n  type CSSProperties,\n  type FocusEventHandler,\n  type KeyboardEvent,\n  type MutableRefObject,\n  type TextareaHTMLAttributes,\n} from 'react'\nimport {\n  Editor,\n  Path,\n  Range as SlateRange,\n  Transforms,\n  type BaseRange,\n  type NodeEntry,\n  type Operation,\n  type Text,\n} from 'slate'\nimport {\n  ReactEditor,\n  Editable as SlateEditable,\n  useSlate,\n  type RenderElementProps,\n  type RenderLeafProps,\n} from 'slate-react'\nimport {getCompoundClientRect} from '../internal-utils/compound-client-rect'\nimport {debugWithName} from '../internal-utils/debug'\nimport {getDragSelection} from '../internal-utils/drag-selection'\nimport {getEventPosition} from '../internal-utils/event-position'\nimport {parseBlocks} from '../internal-utils/parse-blocks'\nimport {\n  moveRangeByOperation,\n  toPortableTextRange,\n  toSlateRange,\n} from '../internal-utils/ranges'\nimport {normalizeSelection} from '../internal-utils/selection'\nimport {getSelectionDomNodes} from '../internal-utils/selection-elements'\nimport {fromSlateValue, isEqualToEmptyEditor} from '../internal-utils/values'\nimport * as selectors from '../selectors'\nimport type {\n  EditorSelection,\n  OnCopyFn,\n  OnPasteFn,\n  RangeDecoration,\n  RenderAnnotationFunction,\n  RenderBlockFunction,\n  RenderChildFunction,\n  RenderDecoratorFunction,\n  RenderListItemFunction,\n  RenderPlaceholderFunction,\n  RenderStyleFunction,\n  ScrollSelectionIntoViewFunction,\n} from '../types/editor'\nimport type {HotkeyOptions} from '../types/options'\nimport {isSelectionCollapsed} from '../utils'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {Element} from './components/Element'\nimport {Leaf} from './components/Leaf'\nimport {EditorActorContext} from './editor-actor-context'\nimport {getEditorSnapshot} from './editor-selector'\nimport {usePortableTextEditor} from './hooks/usePortableTextEditor'\nimport {createWithHotkeys} from './plugins/createWithHotKeys'\nimport {PortableTextEditor} from './PortableTextEditor'\nimport {withSyncRangeDecorations} from './withSyncRangeDecorations'\n\nconst debug = debugWithName('component:Editable')\n\nconst PLACEHOLDER_STYLE: CSSProperties = {\n  position: 'absolute',\n  userSelect: 'none',\n  pointerEvents: 'none',\n  left: 0,\n  right: 0,\n}\n\ninterface BaseRangeWithDecoration extends BaseRange {\n  rangeDecoration: RangeDecoration\n}\n\n/**\n * @public\n */\nexport type PortableTextEditableProps = Omit<\n  TextareaHTMLAttributes<HTMLDivElement>,\n  'onPaste' | 'onCopy' | 'onBeforeInput'\n> & {\n  hotkeys?: HotkeyOptions\n  onBeforeInput?: (event: InputEvent) => void\n  onPaste?: OnPasteFn\n  onCopy?: OnCopyFn\n  ref: MutableRefObject<HTMLDivElement | null>\n  rangeDecorations?: RangeDecoration[]\n  renderAnnotation?: RenderAnnotationFunction\n  renderBlock?: RenderBlockFunction\n  renderChild?: RenderChildFunction\n  renderDecorator?: RenderDecoratorFunction\n  renderListItem?: RenderListItemFunction\n  renderPlaceholder?: RenderPlaceholderFunction\n  renderStyle?: RenderStyleFunction\n  scrollSelectionIntoView?: ScrollSelectionIntoViewFunction\n  selection?: EditorSelection\n  spellCheck?: boolean\n}\n\n/**\n * @public\n *\n *\n * The core component that renders the editor. Must be placed within the {@link EditorProvider} component.\n *\n * @example\n * ```tsx\n * import { PortableTextEditable, EditorProvider } from '@portabletext/editor'\n *\n * function MyComponent() {\n *  return (\n *   <EditorProvider>\n *    <PortableTextEditable />\n *  </EditorProvider>\n *  )\n * }\n * ```\n * @group Components\n */\nexport const PortableTextEditable = forwardRef<\n  Omit<HTMLDivElement, 'as' | 'onPaste' | 'onBeforeInput'>,\n  PortableTextEditableProps\n>(function PortableTextEditable(props, forwardedRef) {\n  const {\n    hotkeys,\n    onBlur,\n    onFocus,\n    onBeforeInput,\n    onPaste,\n    onCopy,\n    onCut,\n    onClick,\n    onDragStart,\n    onDrag,\n    onDragEnd,\n    onDragEnter,\n    onDragOver,\n    onDrop,\n    onDragLeave,\n    rangeDecorations,\n    renderAnnotation,\n    renderBlock,\n    renderChild,\n    renderDecorator,\n    renderListItem,\n    renderPlaceholder,\n    renderStyle,\n    selection: propsSelection,\n    scrollSelectionIntoView,\n    spellCheck,\n    ...restProps\n  } = props\n\n  const portableTextEditor = usePortableTextEditor()\n  const ref = useRef<HTMLDivElement | null>(null)\n  const [editableElement, setEditableElement] = useState<HTMLDivElement | null>(\n    null,\n  )\n  const [hasInvalidValue, setHasInvalidValue] = useState(false)\n  const [rangeDecorationState, setRangeDecorationsState] = useState<\n    BaseRangeWithDecoration[]\n  >([])\n\n  // Forward ref to parent component\n  useImperativeHandle<HTMLDivElement | null, HTMLDivElement | null>(\n    forwardedRef,\n    () => ref.current,\n  )\n\n  const rangeDecorationsRef = useRef(rangeDecorations)\n\n  const editorActor = useContext(EditorActorContext)\n  const readOnly = useSelector(editorActor, (s) =>\n    s.matches({'edit mode': 'read only'}),\n  )\n  const schemaTypes = useSelector(editorActor, (s) => s.context.schema)\n  const slateEditor = useSlate()\n\n  const blockTypeName = schemaTypes.block.name\n\n  // Output a minimal React editor inside Editable when in readOnly mode.\n  // NOTE: make sure all the plugins used here can be safely run over again at any point.\n  // There will be a problem if they redefine editor methods and then calling the original method within themselves.\n  useMemo(() => {\n    // React/UI-specific plugins\n    if (readOnly) {\n      debug('Editable is in read only mode')\n      return slateEditor\n    }\n    const withHotKeys = createWithHotkeys(\n      editorActor,\n      portableTextEditor,\n      hotkeys,\n    )\n\n    debug('Editable is in edit mode')\n    return withHotKeys(slateEditor)\n  }, [editorActor, hotkeys, portableTextEditor, readOnly, slateEditor])\n\n  const renderElement = useCallback(\n    (eProps: RenderElementProps) => (\n      <Element\n        {...eProps}\n        readOnly={readOnly}\n        renderBlock={renderBlock}\n        renderChild={renderChild}\n        renderListItem={renderListItem}\n        renderStyle={renderStyle}\n        schemaTypes={schemaTypes}\n        spellCheck={spellCheck}\n      />\n    ),\n    [\n      schemaTypes,\n      spellCheck,\n      readOnly,\n      renderBlock,\n      renderChild,\n      renderListItem,\n      renderStyle,\n    ],\n  )\n\n  const renderLeaf = useCallback(\n    (\n      lProps: RenderLeafProps & {\n        leaf: Text & {placeholder?: boolean; rangeDecoration?: RangeDecoration}\n      },\n    ) => {\n      if (lProps.leaf._type === 'span') {\n        let rendered = (\n          <Leaf\n            {...lProps}\n            editorActor={editorActor}\n            schemaTypes={schemaTypes}\n            renderAnnotation={renderAnnotation}\n            renderChild={renderChild}\n            renderDecorator={renderDecorator}\n            readOnly={readOnly}\n          />\n        )\n        if (\n          renderPlaceholder &&\n          lProps.leaf.placeholder &&\n          lProps.text.text === ''\n        ) {\n          return (\n            <>\n              <span style={PLACEHOLDER_STYLE} contentEditable={false}>\n                {renderPlaceholder()}\n              </span>\n              {rendered}\n            </>\n          )\n        }\n        const decoration = lProps.leaf.rangeDecoration\n        if (decoration) {\n          rendered = decoration.component({children: rendered})\n        }\n        return rendered\n      }\n      return lProps.children\n    },\n    [\n      editorActor,\n      readOnly,\n      renderAnnotation,\n      renderChild,\n      renderDecorator,\n      renderPlaceholder,\n      schemaTypes,\n    ],\n  )\n\n  const restoreSelectionFromProps = useCallback(() => {\n    if (propsSelection) {\n      debug(`Selection from props ${JSON.stringify(propsSelection)}`)\n      const normalizedSelection = normalizeSelection(\n        propsSelection,\n        fromSlateValue(slateEditor.children, blockTypeName),\n      )\n      if (normalizedSelection !== null) {\n        debug(\n          `Normalized selection from props ${JSON.stringify(normalizedSelection)}`,\n        )\n        const slateRange = toSlateRange(normalizedSelection, slateEditor)\n        if (slateRange) {\n          Transforms.select(slateEditor, slateRange)\n          // Output selection here in those cases where the editor selection was the same, and there are no set_selection operations made.\n          // The selection is usually automatically emitted to change$ by the withPortableTextSelections plugin whenever there is a set_selection operation applied.\n          if (!slateEditor.operations.some((o) => o.type === 'set_selection')) {\n            editorActor.send({\n              type: 'notify.selection',\n              selection: normalizedSelection,\n            })\n          }\n          slateEditor.onChange()\n        }\n      }\n    }\n  }, [blockTypeName, editorActor, propsSelection, slateEditor])\n\n  const syncRangeDecorations = useCallback(\n    (operation?: Operation) => {\n      if (rangeDecorations && rangeDecorations.length > 0) {\n        const newSlateRanges: BaseRangeWithDecoration[] = []\n        rangeDecorations.forEach((rangeDecorationItem) => {\n          const slateRange = toSlateRange(\n            rangeDecorationItem.selection,\n            slateEditor,\n          )\n          if (!SlateRange.isRange(slateRange)) {\n            if (rangeDecorationItem.onMoved) {\n              rangeDecorationItem.onMoved({\n                newSelection: null,\n                rangeDecoration: rangeDecorationItem,\n                origin: 'local',\n              })\n            }\n            return\n          }\n          let newRange: BaseRange | null | undefined\n          if (operation) {\n            newRange = moveRangeByOperation(slateRange, operation)\n            if (\n              (newRange && newRange !== slateRange) ||\n              (newRange === null && slateRange)\n            ) {\n              const value = PortableTextEditor.getValue(portableTextEditor)\n              const newRangeSelection = toPortableTextRange(\n                value,\n                newRange,\n                schemaTypes,\n              )\n              if (rangeDecorationItem.onMoved) {\n                rangeDecorationItem.onMoved({\n                  newSelection: newRangeSelection,\n                  rangeDecoration: rangeDecorationItem,\n                  origin: 'local',\n                })\n              }\n            }\n          }\n          // If the newRange is null, it means that the range is not valid anymore and should be removed\n          // If it's undefined, it means that the slateRange is still valid and should be kept\n          if (newRange !== null) {\n            newSlateRanges.push({\n              ...(newRange || slateRange),\n              rangeDecoration: rangeDecorationItem,\n            })\n          }\n        })\n        if (newSlateRanges.length > 0) {\n          setRangeDecorationsState(newSlateRanges)\n          return\n        }\n      }\n      setRangeDecorationsState((rangeDecorationState) => {\n        // If there's state then we want to reset\n        if (rangeDecorationState.length > 0) {\n          return []\n        }\n        // Otherwise we no-op, React will skip a state update if what we return has reference equality to the previous state\n        return rangeDecorationState\n      })\n    },\n    [portableTextEditor, rangeDecorations, schemaTypes, slateEditor],\n  )\n\n  // Restore selection from props when the editor has been initialized properly with it's value\n  useEffect(() => {\n    const onReady = editorActor.on('ready', () => {\n      syncRangeDecorations()\n      restoreSelectionFromProps()\n    })\n    const onInvalidValue = editorActor.on('invalid value', () => {\n      setHasInvalidValue(true)\n    })\n    const onValueChanged = editorActor.on('value changed', () => {\n      setHasInvalidValue(false)\n    })\n\n    return () => {\n      onReady.unsubscribe()\n      onInvalidValue.unsubscribe()\n      onValueChanged.unsubscribe()\n    }\n  }, [editorActor, restoreSelectionFromProps, syncRangeDecorations])\n\n  // Restore selection from props when it changes\n  useEffect(() => {\n    if (propsSelection && !hasInvalidValue) {\n      restoreSelectionFromProps()\n    }\n  }, [hasInvalidValue, propsSelection, restoreSelectionFromProps])\n\n  const [syncedRangeDecorations, setSyncedRangeDecorations] = useState(false)\n  useEffect(() => {\n    if (!syncedRangeDecorations) {\n      // We only want this to run once, on mount\n      setSyncedRangeDecorations(true)\n      syncRangeDecorations()\n    }\n  }, [syncRangeDecorations, syncedRangeDecorations])\n\n  useEffect(() => {\n    if (!isEqual(rangeDecorations, rangeDecorationsRef.current)) {\n      syncRangeDecorations()\n    }\n    rangeDecorationsRef.current = rangeDecorations\n  }, [rangeDecorations, syncRangeDecorations])\n\n  // Sync range decorations after an operation is applied\n  useEffect(() => {\n    const teardown = withSyncRangeDecorations({\n      editorActor,\n      slateEditor,\n      syncRangeDecorations,\n    })\n    return () => teardown()\n  }, [editorActor, slateEditor, syncRangeDecorations])\n\n  // Handle from props onCopy function\n  const handleCopy = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): void | ReactEditor => {\n      if (onCopy) {\n        const result = onCopy(event)\n        // CopyFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for copy event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.copy',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCopy, editorActor, slateEditor],\n  )\n\n  const handleCut = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>) => {\n      if (onCut) {\n        const result = onCut(event)\n        // CutFn may return something to avoid doing default stuff\n        if (result !== undefined) {\n          event.preventDefault()\n        }\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.stopPropagation()\n        event.preventDefault()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for cut event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.cut',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [onCut, editorActor, slateEditor],\n  )\n\n  // Handle incoming pasting events in the editor\n  const handlePaste = useCallback(\n    (event: ClipboardEvent<HTMLDivElement>): Promise<void> | void => {\n      const value = PortableTextEditor.getValue(portableTextEditor)\n      const ptRange = toPortableTextRange(\n        value,\n        slateEditor.selection,\n        schemaTypes,\n      )\n      const path = ptRange?.focus.path || []\n      const onPasteResult = onPaste?.({event, value, path, schemaTypes})\n\n      if (onPasteResult || !slateEditor.selection) {\n        event.preventDefault()\n\n        // Resolve it as promise (can be either async promise or sync return value)\n        editorActor.send({type: 'notify.loading'})\n\n        Promise.resolve(onPasteResult)\n          .then((result) => {\n            debug('Custom paste function from client resolved', result)\n\n            if (!result || !result.insert) {\n              debug('No result from custom paste handler, pasting normally')\n\n              const selection = editorActor.getSnapshot().context.selection\n              const position = selection ? {selection} : undefined\n\n              if (!position) {\n                console.warn('Could not find position for paste event')\n                return\n              }\n\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'clipboard.paste',\n                  originEvent: {\n                    dataTransfer: event.clipboardData,\n                  },\n                  position,\n                },\n                editor: slateEditor,\n                nativeEvent: event,\n              })\n            } else if (result.insert) {\n              editorActor.send({\n                type: 'behavior event',\n                behaviorEvent: {\n                  type: 'insert.blocks',\n                  blocks: parseBlocks({\n                    context: {\n                      keyGenerator:\n                        editorActor.getSnapshot().context.keyGenerator,\n                      schema: editorActor.getSnapshot().context.schema,\n                    },\n                    blocks: result.insert,\n                    options: {\n                      refreshKeys: true,\n                    },\n                  }),\n                  placement: 'auto',\n                },\n                editor: slateEditor,\n              })\n            } else {\n              console.warn(\n                'Your onPaste function returned something unexpected:',\n                result,\n              )\n            }\n          })\n          .catch((error) => {\n            console.warn(error)\n\n            return error\n          })\n          .finally(() => {\n            editorActor.send({type: 'notify.done loading'})\n          })\n      } else if (event.nativeEvent.clipboardData) {\n        // Prevent Slate from handling the event\n        event.preventDefault()\n        event.stopPropagation()\n\n        const selection = editorActor.getSnapshot().context.selection\n        const position = selection ? {selection} : undefined\n\n        if (!position) {\n          console.warn('Could not find position for paste event')\n          return\n        }\n\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'clipboard.paste',\n            originEvent: {\n              dataTransfer: event.nativeEvent.clipboardData,\n            },\n            position,\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n\n      debug('No result from custom paste handler, pasting normally')\n    },\n    [editorActor, onPaste, portableTextEditor, schemaTypes, slateEditor],\n  )\n\n  const handleOnFocus: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onFocus) {\n        onFocus(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        const selection = PortableTextEditor.getSelection(portableTextEditor)\n        // Create an editor selection if it does'nt exist\n        if (selection === null) {\n          Transforms.select(slateEditor, Editor.start(slateEditor, []))\n          slateEditor.onChange()\n        }\n        editorActor.send({type: 'notify.focused', event})\n        const newSelection = PortableTextEditor.getSelection(portableTextEditor)\n        // If the selection is the same, emit it explicitly here as there is no actual onChange event triggered.\n        if (selection === newSelection) {\n          editorActor.send({\n            type: 'notify.selection',\n            selection,\n          })\n        }\n      }\n    },\n    [editorActor, onFocus, portableTextEditor, slateEditor],\n  )\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (onClick) {\n        onClick(event)\n      }\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find EventPosition for MouseEvent')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'mouse.click',\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n    },\n    [onClick, editorActor, slateEditor],\n  )\n\n  const handleOnBlur: FocusEventHandler<HTMLDivElement> = useCallback(\n    (event) => {\n      if (onBlur) {\n        onBlur(event)\n      }\n      if (!event.isPropagationStopped()) {\n        editorActor.send({type: 'notify.blurred', event})\n      }\n    },\n    [editorActor, onBlur],\n  )\n\n  const handleOnBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (onBeforeInput) {\n        onBeforeInput(event)\n      }\n    },\n    [onBeforeInput],\n  )\n\n  // This function will handle unexpected DOM changes inside the Editable rendering,\n  // and make sure that we can maintain a stable slateEditor.selection when that happens.\n  //\n  // For example, if this Editable is rendered inside something that might re-render\n  // this component (hidden contexts) while the user is still actively changing the\n  // contentEditable, this could interfere with the intermediate DOM selection,\n  // which again could be picked up by ReactEditor's event listeners.\n  // If that range is invalid at that point, the slate.editorSelection could be\n  // set either wrong, or invalid, to which slateEditor will throw exceptions\n  // that are impossible to recover properly from or result in a wrong selection.\n  //\n  // Also the other way around, when the ReactEditor will try to create a DOM Range\n  // from the current slateEditor.selection, it may throw unrecoverable errors\n  // if the current editor.selection is invalid according to the DOM.\n  // If this is the case, default to selecting the top of the document, if the\n  // user already had a selection.\n  const validateSelection = useCallback(() => {\n    if (!slateEditor.selection) {\n      return\n    }\n    const root = ReactEditor.findDocumentOrShadowRoot(slateEditor)\n    const {activeElement} = root\n    // Return if the editor isn't the active element\n    if (ref.current !== activeElement) {\n      return\n    }\n    const window = ReactEditor.getWindow(slateEditor)\n    const domSelection = window.getSelection()\n    if (!domSelection || domSelection.rangeCount === 0) {\n      return\n    }\n    const existingDOMRange = domSelection.getRangeAt(0)\n    try {\n      const newDOMRange = ReactEditor.toDOMRange(\n        slateEditor,\n        slateEditor.selection,\n      )\n      if (\n        newDOMRange.startOffset !== existingDOMRange.startOffset ||\n        newDOMRange.endOffset !== existingDOMRange.endOffset\n      ) {\n        debug('DOM range out of sync, validating selection')\n        // Remove all ranges temporary\n        domSelection?.removeAllRanges()\n        // Set the correct range\n        domSelection.addRange(newDOMRange)\n      }\n    } catch {\n      debug(`Could not resolve selection, selecting top document`)\n      // Deselect the editor\n      Transforms.deselect(slateEditor)\n      // Select top document if there is a top block to select\n      if (slateEditor.children.length > 0) {\n        Transforms.select(slateEditor, [0, 0])\n      }\n      slateEditor.onChange()\n    }\n  }, [ref, slateEditor])\n\n  // Observe mutations (child list and subtree) to this component's DOM,\n  // and make sure the editor selection is valid when that happens.\n  useEffect(() => {\n    if (editableElement) {\n      const mutationObserver = new MutationObserver(validateSelection)\n      mutationObserver.observe(editableElement, {\n        attributeOldValue: false,\n        attributes: false,\n        characterData: false,\n        childList: true,\n        subtree: true,\n      })\n      return () => {\n        mutationObserver.disconnect()\n      }\n    }\n    return undefined\n  }, [validateSelection, editableElement])\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyDown) {\n        props.onKeyDown(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        slateEditor.pteWithHotKeys(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keydown',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent<HTMLDivElement>) => {\n      if (props.onKeyUp) {\n        props.onKeyUp(event)\n      }\n      if (!event.isDefaultPrevented()) {\n        editorActor.send({\n          type: 'behavior event',\n          behaviorEvent: {\n            type: 'keyboard.keyup',\n            originEvent: {\n              key: event.key,\n              code: event.code,\n              altKey: event.altKey,\n              ctrlKey: event.ctrlKey,\n              metaKey: event.metaKey,\n              shiftKey: event.shiftKey,\n            },\n          },\n          editor: slateEditor,\n          nativeEvent: event,\n        })\n      }\n    },\n    [props, editorActor, slateEditor],\n  )\n\n  const scrollSelectionIntoViewToSlate = useMemo(() => {\n    // Use slate-react default scroll into view\n    if (scrollSelectionIntoView === undefined) {\n      return undefined\n    }\n    // Disable scroll into view totally\n    if (scrollSelectionIntoView === null) {\n      return noop\n    }\n    // Translate PortableTextEditor prop fn to Slate plugin fn\n    return (_editor: ReactEditor, domRange: Range) => {\n      scrollSelectionIntoView(portableTextEditor, domRange)\n    }\n  }, [portableTextEditor, scrollSelectionIntoView])\n\n  const decorate: (entry: NodeEntry) => BaseRange[] = useCallback(\n    ([, path]) => {\n      if (isEqualToEmptyEditor(slateEditor.children, schemaTypes)) {\n        return [\n          {\n            anchor: {\n              path: [0, 0],\n              offset: 0,\n            },\n            focus: {\n              path: [0, 0],\n              offset: 0,\n            },\n            placeholder: true,\n          },\n        ]\n      }\n      // Editor node has a path length of 0 (should never be decorated)\n      if (path.length === 0) {\n        return []\n      }\n      const result = rangeDecorationState.filter((item) => {\n        // Special case in order to only return one decoration for collapsed ranges\n        if (SlateRange.isCollapsed(item)) {\n          // Collapsed ranges should only be decorated if they are on a block child level (length 2)\n          if (path.length !== 2) {\n            return false\n          }\n          return (\n            Path.equals(item.focus.path, path) &&\n            Path.equals(item.anchor.path, path)\n          )\n        }\n        // Include decorations that either include or intersects with this path\n        return (\n          SlateRange.intersection(item, {\n            anchor: {path, offset: 0},\n            focus: {path, offset: 0},\n          }) || SlateRange.includes(item, path)\n        )\n      })\n      if (result.length > 0) {\n        return result\n      }\n      return []\n    },\n    [slateEditor, schemaTypes, rangeDecorationState],\n  )\n\n  // Set the forwarded ref to be the Slate editable DOM element\n  // Also set the editable element in a state so that the MutationObserver\n  // is setup when this element is ready.\n  useEffect(() => {\n    ref.current = ReactEditor.toDOMNode(\n      slateEditor,\n      slateEditor,\n    ) as HTMLDivElement | null\n    setEditableElement(ref.current)\n  }, [slateEditor, ref])\n\n  useEffect(() => {\n    const window = ReactEditor.getWindow(slateEditor)\n\n    const onDragEnd = () => {\n      editorActor.send({type: 'dragend'})\n    }\n    const onDrop = () => {\n      editorActor.send({type: 'drop'})\n    }\n\n    window.document.addEventListener('dragend', onDragEnd)\n    window.document.addEventListener('drop', onDrop)\n\n    return () => {\n      window.document.removeEventListener('dragend', onDragEnd)\n      window.document.removeEventListener('drop', onDrop)\n    }\n  }, [slateEditor, editorActor])\n\n  const handleDragStart = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragStart?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for dragstart event')\n        return\n      }\n\n      const snapshot = getEditorSnapshot({\n        editorActorSnapshot: editorActor.getSnapshot(),\n        slateEditorInstance: slateEditor,\n      })\n      const dragSelection = getDragSelection({\n        eventSelection: position.selection,\n        snapshot,\n      })\n\n      const selectingEntireBlocks = selectors.isSelectingEntireBlocks({\n        ...snapshot,\n        context: {\n          ...snapshot.context,\n          selection: dragSelection,\n        },\n      })\n\n      const dragGhost = document.createElement('div')\n\n      const draggedDomNodes = getSelectionDomNodes({\n        snapshot: {\n          ...snapshot,\n          context: {\n            ...snapshot.context,\n            selection: dragSelection,\n          },\n        },\n        slateEditor,\n      })\n\n      if (selectingEntireBlocks) {\n        // Clone the DOM Nodes so they won't be visually clipped by scroll-containers etc.\n        const clonedBlockNodes = draggedDomNodes.blockNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const block of clonedBlockNodes) {\n          if (block instanceof HTMLElement) {\n            block.style.position = 'relative'\n          }\n          dragGhost.appendChild(block)\n        }\n\n        // A custom drag ghost element can be configured using this data attribute\n        const customGhost = dragGhost.querySelector(\n          '[data-pt-drag-ghost-element]',\n        )\n        if (customGhost) {\n          dragGhost.replaceChildren(customGhost)\n        }\n\n        // Setting the `data-dragged` attribute so the consumer can style the element while it’s dragged\n        dragGhost.setAttribute('data-dragged', '')\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        if (customGhost) {\n          const customGhostRect = customGhost.getBoundingClientRect()\n          const x = event.clientX - customGhostRect.left\n          const y = event.clientY - customGhostRect.top\n          dragGhost.style.width = `${customGhostRect.width}px`\n          dragGhost.style.height = `${customGhostRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        } else {\n          const blocksDomRect = getCompoundClientRect(\n            draggedDomNodes.blockNodes,\n          )\n          const x = event.clientX - blocksDomRect.left\n          const y = event.clientY - blocksDomRect.top\n          dragGhost.style.width = `${blocksDomRect.width}px`\n          dragGhost.style.height = `${blocksDomRect.height}px`\n          event.dataTransfer.setDragImage(dragGhost, x, y)\n        }\n      } else {\n        const clonedChildNodes = draggedDomNodes.childNodes.map((node) =>\n          node.cloneNode(true),\n        )\n\n        for (const child of clonedChildNodes) {\n          dragGhost.appendChild(child)\n        }\n\n        dragGhost.style.position = 'absolute'\n        dragGhost.style.left = '-99999px'\n        dragGhost.style.boxSizing = 'border-box'\n        document.body.appendChild(dragGhost)\n\n        const childrenDomRect = getCompoundClientRect(\n          draggedDomNodes.childNodes,\n        )\n        const x = event.clientX - childrenDomRect.left\n        const y = event.clientY - childrenDomRect.top\n        dragGhost.style.width = `${childrenDomRect.width}px`\n        dragGhost.style.height = `${childrenDomRect.height}px`\n\n        event.dataTransfer.setDragImage(dragGhost, x, y)\n      }\n\n      // Select drag selection\n      // If the selection is expanded then we just select the end of the\n      // selection\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'select',\n          selection: isSelectionCollapsed(dragSelection)\n            ? dragSelection\n            : {\n                anchor: getSelectionEndPoint(dragSelection),\n                focus: getSelectionEndPoint(dragSelection),\n                backward: false,\n              },\n        },\n        editor: slateEditor,\n      })\n\n      editorActor.send({\n        type: 'dragstart',\n        origin: {\n          selection: dragSelection,\n        },\n        ghost: dragGhost,\n      })\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragstart',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position: {\n            selection: dragSelection,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragStart, editorActor, slateEditor],\n  )\n\n  const handleDrag = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrag?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drag',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrag, editorActor, slateEditor],\n  )\n\n  const handleDragEnd = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnd?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragend',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnd, editorActor, slateEditor],\n  )\n\n  const handleDragEnter = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragEnter?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragenter',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragEnter, editorActor, slateEditor],\n  )\n\n  const handleDragOver = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragOver?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragover',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragOver, editorActor, slateEditor],\n  )\n\n  const handleDrop = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDrop?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        console.warn('Could not find position for drop event')\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.drop',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n          position,\n        },\n        editor: slateEditor,\n        nativeEvent: event,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDrop, editorActor, slateEditor],\n  )\n\n  const handleDragLeave = useCallback(\n    (event: React.DragEvent<HTMLDivElement>) => {\n      onDragLeave?.(event)\n\n      if (event.isDefaultPrevented() || event.isPropagationStopped()) {\n        return\n      }\n\n      const position = getEventPosition({\n        schema: editorActor.getSnapshot().context.schema,\n        slateEditor,\n        event: event.nativeEvent,\n      })\n\n      if (!position) {\n        return\n      }\n\n      editorActor.send({\n        type: 'behavior event',\n        behaviorEvent: {\n          type: 'drag.dragleave',\n          originEvent: {\n            dataTransfer: event.dataTransfer,\n          },\n        },\n        editor: slateEditor,\n      })\n\n      // Prevent Slate from handling the event\n      return true\n    },\n    [onDragLeave, editorActor, slateEditor],\n  )\n\n  if (!portableTextEditor) {\n    return null\n  }\n\n  return hasInvalidValue ? null : (\n    <SlateEditable\n      {...restProps}\n      autoFocus={false}\n      className={restProps.className || 'pt-editable'}\n      decorate={decorate}\n      onBlur={handleOnBlur}\n      onCopy={handleCopy}\n      onCut={handleCut}\n      onClick={handleClick}\n      onDOMBeforeInput={handleOnBeforeInput}\n      onDragStart={handleDragStart}\n      onDrag={handleDrag}\n      onDragEnd={handleDragEnd}\n      onDragEnter={handleDragEnter}\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n      onDragLeave={handleDragLeave}\n      onFocus={handleOnFocus}\n      onKeyDown={handleKeyDown}\n      onKeyUp={handleKeyUp}\n      onPaste={handlePaste}\n      readOnly={readOnly}\n      // We have implemented our own placeholder logic with decorations.\n      // This 'renderPlaceholder' should not be used.\n      renderPlaceholder={undefined}\n      renderElement={renderElement}\n      renderLeaf={renderLeaf}\n      scrollSelectionIntoView={scrollSelectionIntoViewToSlate}\n    />\n  )\n})\n\nPortableTextEditable.displayName = 'ForwardRef(PortableTextEditable)'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from './editor/editor-machine'\nimport {useEditor} from './editor/editor-provider'\n\n/**\n * @public\n * @deprecated\n * This component has been renamed. Use `EventListenerPlugin` instead.\n *\n * ```\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n * ```\n */\nexport function EditorEventListener(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n"],"names":["getCompoundClientRect","nodes","length","DOMRect","elements","filter","node","Element","firstRect","at","getBoundingClientRect","left","top","right","bottom","i","rect","Math","min","max","getDragSelection","eventSelection","snapshot","dragSelection","selectors","context","selection","draggingCollapsedSelection","draggedTextBlock","draggedSpan","anchor","utils","focus","selectedBlocks","selectionStartBlock","selectionEndBlock","selectionStartPoint","selectionEndPoint","getEventPosition","schema","slateEditor","event","getEventNode","block","getNodeBlock","editor","positionBlock","getEventPositionBlock","getEventSelection","Editor","isEditor","path","_key","focusBlockPath","focusBlockKey","undefined","DOMEditor","hasTarget","target","toSlateNode","firstBlock","getFirstBlock","firstBlockRect","toDOMNode","pageY","lastBlock","getLastBlock","lastBlockRef","elementRect","height","abs","range","getSlateRangeFromEvent","toPortableTextRange","fromSlateValue","children","name","isDOMNode","window","getWindow","domRange","document","caretPositionFromPoint","position","clientX","clientY","createRange","setStart","offsetNode","offset","setEnd","caretRangeFromPoint","console","warn","toSlateRange","exactMatch","suppressThrow","normalizePoint","point","value","newPath","newOffset","blockKey","childKey","find","blk","push","Array","isArray","child","cld","text","normalizeSelection","newAnchor","newFocus","isEqual","backward","getSelectionDomNodes","blockNodes","childNodes","blockEntries","from","mode","match","n","childEntries","isTextSpan","isBlock","map","blockNode","childNode","DefaultBlockObject","props","$","_c","t0","Symbol","for","userSelect","t1","_type","DefaultInlineObject","DropIndicator","width","borderBottom","zIndex","debugWithName","EMPTY_ANNOTATIONS","inlineBlockStyle","display","attributes","element","schemaTypes","readOnly","renderBlock","renderChild","renderListItem","renderStyle","spellCheck","editorActor","useContext","EditorActorContext","useSlateStatic","selected","useSelected","blockRef","useRef","inlineBlockObjectRef","focused","Range","isCollapsed","dragPositionBlock","setDragPositionBlock","useState","useEffect","behavior","defineBehavior","on","guard","dropFocusBlock","dragOrigin","beta","internalDrag","origin","some","draggedBlock","actions","type","effect","send","useMemo","KEY_TO_VALUE_ELEMENT","get","renderedBlock","className","blockPath","Error","isInline","ReactEditor","findPath","depth","schemaType","inlineObjects","SlateElement","isElement","elmPath","debugRenders","annotations","editorElementRef","isListItem","style","blockStyleType","styles","item","level","listItem","isListBlock","listType","lists","renderProps","Object","defineProperty","enumerable","propsOrDefaultRendered","blockObjects","renderedBlockFromProps","_props","displayName","debug","EMPTY_MARKS","Leaf","leaf","renderDecorator","renderAnnotation","spanRef","portableTextEditor","usePortableTextEditor","blockSelected","setFocused","setSelected","parent","decoratorValues","decorators","dec","marks","uniq","mark","includes","annotationMarks","markDefs","def","Boolean","shouldTrackSelectionAndFocus","sel","PortableTextEditor","getSelection","isCollapsedSelection","startTransition","setSelectedFromRange","useCallback","winSelection","rangeCount","getRangeAt","current","intersectsNode","onBlur","onFocus","onSelection","unsubscribe","content","returnedChildren","Text","isText","span","forEach","annotation","t","_child","createWithHotkeys","hotkeysFromOptions","reservedHotkeys","activeHotkeys","pteWithHotKeys","keys","cat","hotkey","isHotkey","nativeEvent","preventDefault","possibleMark","behaviorEvent","decorator","possibleCommand","command","withSyncRangeDecorations","syncRangeDecorations","originalApply","apply","op","getSnapshot","matches","PLACEHOLDER_STYLE","pointerEvents","PortableTextEditable","forwardRef","forwardedRef","hotkeys","onBeforeInput","onPaste","onCopy","onCut","onClick","onDragStart","onDrag","onDragEnd","onDragEnter","onDragOver","onDrop","onDragLeave","rangeDecorations","renderPlaceholder","propsSelection","scrollSelectionIntoView","restProps","ref","editableElement","setEditableElement","hasInvalidValue","setHasInvalidValue","rangeDecorationState","setRangeDecorationsState","rangeDecorationsRef","useSelector","s","useSlate","blockTypeName","withHotKeys","renderElement","eProps","renderLeaf","lProps","rendered","placeholder","decoration","rangeDecoration","component","restoreSelectionFromProps","JSON","stringify","normalizedSelection","slateRange","Transforms","select","operations","o","onChange","operation","newSlateRanges","rangeDecorationItem","SlateRange","isRange","onMoved","newSelection","newRange","moveRangeByOperation","getValue","newRangeSelection","onReady","onInvalidValue","onValueChanged","syncedRangeDecorations","setSyncedRangeDecorations","teardown","handleCopy","clipboardData","stopPropagation","originEvent","dataTransfer","handleCut","handlePaste","onPasteResult","Promise","resolve","then","result","insert","blocks","parseBlocks","keyGenerator","options","refreshKeys","placement","catch","error","finally","handleOnFocus","isDefaultPrevented","start","handleClick","isPropagationStopped","handleOnBlur","handleOnBeforeInput","validateSelection","root","findDocumentOrShadowRoot","activeElement","domSelection","existingDOMRange","newDOMRange","toDOMRange","startOffset","endOffset","removeAllRanges","addRange","deselect","mutationObserver","MutationObserver","observe","attributeOldValue","characterData","childList","subtree","disconnect","handleKeyDown","onKeyDown","key","code","altKey","ctrlKey","metaKey","shiftKey","handleKeyUp","onKeyUp","scrollSelectionIntoViewToSlate","noop","_editor","decorate","isEqualToEmptyEditor","Path","equals","intersection","addEventListener","removeEventListener","handleDragStart","getEditorSnapshot","editorActorSnapshot","slateEditorInstance","selectingEntireBlocks","dragGhost","createElement","draggedDomNodes","clonedBlockNodes","cloneNode","HTMLElement","appendChild","customGhost","querySelector","replaceChildren","setAttribute","boxSizing","body","customGhostRect","x","y","setDragImage","blocksDomRect","clonedChildNodes","childrenDomRect","isSelectionCollapsed","getSelectionEndPoint","ghost","handleDrag","handleDragEnd","handleDragEnter","handleDragOver","handleDrop","handleDragLeave","SlateEditable","EditorEventListener","useEditor","useEffectEvent","subscription"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12],"debugId":null}},
    {"offset": {"line": 11790, "column": 0}, "map": {"version":3,"file":"selector.get-text-before.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/selectors/selector.get-text-before.ts"],"sourcesContent":["import type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockStartPoint} from '../utils/util.get-block-start-point'\nimport {isKeyedSegment} from '../utils/util.is-keyed-segment'\nimport {reverseSelection} from '../utils/util.reverse-selection'\nimport {getSelectionText} from './selector.get-selection-text'\n\n/**\n * @public\n */\nexport const getBlockTextBefore: EditorSelector<string> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return ''\n  }\n\n  const selection = snapshot.context.selection.backward\n    ? reverseSelection(snapshot.context.selection)\n    : snapshot.context.selection\n  const point = selection.anchor\n  const key = isKeyedSegment(point.path[0]) ? point.path[0]._key : undefined\n\n  const block = key\n    ? snapshot.context.value.find((block) => block._key === key)\n    : undefined\n\n  if (!block) {\n    return ''\n  }\n\n  const startOfBlock = getBlockStartPoint({\n    node: block,\n    path: [{_key: block._key}],\n  })\n\n  return getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startOfBlock,\n        focus: point,\n      },\n    },\n  })\n}\n"],"names":["getBlockTextBefore","snapshot","context","selection","point","backward","reverseSelection","anchor","key","isKeyedSegment","path","_key","undefined","block","value","find","startOfBlock","getBlockStartPoint","node","getSelectionText","focus"],"mappings":";;;;;;;AASO,MAAMA,qBAA8CC,CAAa,aAAA;IAClE,IAAA,CAACA,SAASC,OAAAA,CAAQC,SAAAA,EACb,OAAA;IAMT,MAAMC,QAAAA,CAHYH,SAASC,OAAAA,CAAQC,SAAAA,CAAUE,QAAAA,sMACzCC,mBAAAA,EAAiBL,SAASC,OAAAA,CAAQC,SAAS,IAC3CF,SAASC,OAAAA,CAAQC,SAAAA,EACGI,MAAAA,EAClBC,yMAAMC,iBAAAA,EAAeL,MAAMM,IAAAA,CAAK,CAAC,CAAC,IAAIN,MAAMM,IAAAA,CAAK,CAAC,CAAA,CAAEC,IAAAA,GAAOC,KAAAA,GAE3DC,QAAQL,MACVP,SAASC,OAAAA,CAAQY,KAAAA,CAAMC,IAAAA,CAAMF,CAAAA,SAAUA,OAAMF,IAAAA,KAASH,GAAG,IACzDI,KAAAA;IAEJ,IAAI,CAACC,OACI,OAAA;IAGT,MAAMG,kNAAeC,qBAAAA,EAAmB;QACtCC,MAAML;QACNH,MAAM;YAAC;gBAACC,MAAME,MAAMF,IAAAA;YAAK,CAAA;SAAA;IAAA,CAC1B;IAED,6NAAOQ,mBAAAA,EAAiB;QAEtBjB,SAAS;YACP,GAAGD,SAASC,OAAAA;YACZC,WAAW;gBACTI,QAAQS;gBACRI,OAAOhB;YAAAA;QACT;IACF,CACD;AACH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11827, "column": 0}, "map": {"version":3,"file":"behavior.markdown.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.markdown.ts"],"sourcesContent":["import {isPortableTextTextBlock} from '@sanity/types'\nimport type {EditorSchema} from '../editor/define-schema'\nimport * as selectors from '../selectors'\nimport {spanSelectionPointToBlockOffset} from '../utils/util.block-offset'\nimport {getTextBlockText} from '../utils/util.get-text-block-text'\nimport {defineBehavior} from './behavior.types.behavior'\n\n/**\n * @beta\n */\nexport type MarkdownBehaviorsConfig = {\n  horizontalRuleObject?: (context: {\n    schema: EditorSchema\n  }) => {name: string; value?: {[prop: string]: unknown}} | undefined\n  defaultStyle?: (context: {schema: EditorSchema}) => string | undefined\n  headingStyle?: (context: {\n    schema: EditorSchema\n    level: number\n  }) => string | undefined\n  blockquoteStyle?: (context: {schema: EditorSchema}) => string | undefined\n  unorderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n  orderedListStyle?: (context: {schema: EditorSchema}) => string | undefined\n}\n\n/**\n * @beta\n * Create markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {createMarkdownBehaviors, coreBehaviors} from '@portabletext/editor/behaviors'\n *\n * function App() {\n *  return (\n *   <EditorProvider\n *    initialConfig={{\n *    behaviors: [\n *    ...coreBehaviors,\n *    ...createMarkdownBehaviors({\n *        horizontalRuleObject: ({schema}) => {\n *          const name = schema.blockObjects.find(\n *            (object) => object.name === 'break',\n *          )?.name\n *          return name ? {name} : undefined\n *        },\n *        defaultStyle: ({schema}) => schema.styles[0].value,\n *        headingStyle: ({schema, level}) =>\n *          schema.styles.find((style) => style.value === `h${level}`)\n *            ?.value,\n *        blockquoteStyle: ({schema}) =>\n *          schema.styles.find((style) => style.value === 'blockquote')\n *            ?.value,\n *        unorderedListStyle: ({schema}) =>\n *          schema.lists.find((list) => list.value === 'bullet')?.value,\n *        orderedListStyle: ({schema}) =>\n *          schema.lists.find((list) => list.value === 'number')?.value,\n *      }),\n *      ]\n *    }}\n *    >\n *    {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n *\n */\nexport function createMarkdownBehaviors(config: MarkdownBehaviorsConfig) {\n  const automaticBlockquoteOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const caretAtTheEndOfQuote = blockOffset.offset === 1\n      const looksLikeMarkdownQuote = /^>/.test(blockText)\n      const blockquoteStyle = config.blockquoteStyle?.(snapshot.context)\n\n      if (\n        caretAtTheEndOfQuote &&\n        looksLikeMarkdownQuote &&\n        blockquoteStyle !== undefined\n      ) {\n        return {focusTextBlock, style: blockquoteStyle}\n      }\n\n      return false\n    },\n    actions: [\n      () => [\n        {\n          type: 'insert.text',\n          text: ' ',\n        },\n      ],\n      (_, {focusTextBlock, style}) => [\n        {\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'delete.text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: 2,\n          },\n        },\n      ],\n    ],\n  })\n  const automaticHr = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const hrCharacter =\n        event.text === '-'\n          ? '-'\n          : event.text === '*'\n            ? '*'\n            : event.text === '_'\n              ? '_'\n              : undefined\n\n      if (hrCharacter === undefined) {\n        return false\n      }\n\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n\n      if (!hrObject || !focusBlock || !selectionCollapsed) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const hrBlockOffsets = {\n        anchor: {\n          path: focusBlock.path,\n          offset: 0,\n        },\n        focus: {\n          path: focusBlock.path,\n          offset: 3,\n        },\n      }\n\n      if (\n        !previousInlineObject &&\n        textBefore === `${hrCharacter}${hrCharacter}`\n      ) {\n        return {hrObject, focusBlock, hrCharacter, hrBlockOffsets}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {hrCharacter}) => [\n        {\n          type: 'insert.text',\n          text: hrCharacter,\n        },\n      ],\n      (_, {hrObject, hrBlockOffsets}) => [\n        {\n          type: 'insert.block',\n          placement: 'before',\n          block: {\n            _type: hrObject.name,\n            ...(hrObject.value ?? {}),\n          },\n        },\n        {\n          type: 'delete.text',\n          ...hrBlockOffsets,\n        },\n      ],\n    ],\n  })\n  const automaticHrOnPaste = defineBehavior({\n    on: 'clipboard.paste',\n    guard: ({snapshot, event}) => {\n      const text = event.originEvent.dataTransfer.getData('text/plain')\n      const hrRegExp = /^(---)$|(___)$|(\\*\\*\\*)$/gm\n      const hrCharacters = text.match(hrRegExp)?.[0]\n      const hrObject = config.horizontalRuleObject?.(snapshot.context)\n      const focusBlock = selectors.getFocusBlock(snapshot)\n\n      if (!hrCharacters || !hrObject || !focusBlock) {\n        return false\n      }\n\n      return {hrCharacters, hrObject, focusBlock}\n    },\n    actions: [\n      (_, {hrCharacters}) => [\n        {\n          type: 'insert.text',\n          text: hrCharacters,\n        },\n      ],\n      ({snapshot}, {hrObject, focusBlock}) =>\n        isPortableTextTextBlock(focusBlock.node)\n          ? [\n              {\n                type: 'insert.block',\n                block: {\n                  _type: snapshot.context.schema.block.name,\n                  children: focusBlock.node.children,\n                },\n                placement: 'after',\n              },\n              {\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              },\n              {type: 'delete.block', at: focusBlock.path},\n            ]\n          : [\n              {\n                type: 'insert.block',\n                block: {\n                  _type: hrObject.name,\n                  ...(hrObject.value ?? {}),\n                },\n                placement: 'after',\n              },\n            ],\n    ],\n  })\n  const automaticHeadingOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (!blockOffset) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const markdownHeadingSearch = /^#+/.exec(blockText)\n      const level = markdownHeadingSearch\n        ? markdownHeadingSearch[0].length\n        : undefined\n      const caretAtTheEndOfHeading = blockOffset.offset === level\n\n      if (previousInlineObject || !caretAtTheEndOfHeading) {\n        return false\n      }\n\n      const style =\n        level !== undefined\n          ? config.headingStyle?.({schema: snapshot.context.schema, level})\n          : undefined\n\n      if (level !== undefined && style !== undefined) {\n        return {\n          focusTextBlock,\n          style: style,\n          level,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [event],\n      (_, {focusTextBlock, style, level}) => [\n        {\n          type: 'block.unset',\n          props: ['listItem', 'level'],\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'block.set',\n          props: {style},\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'delete.text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: level + 1,\n          },\n        },\n      ],\n    ],\n  })\n  const clearStyleOnBackspace = defineBehavior({\n    on: 'delete.backward',\n    guard: ({snapshot}) => {\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const atTheBeginningOfBLock =\n        focusTextBlock.node.children[0]._key === focusSpan.node._key &&\n        snapshot.context.selection?.focus.offset === 0\n\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n\n      if (\n        atTheBeginningOfBLock &&\n        defaultStyle &&\n        focusTextBlock.node.style !== defaultStyle\n      ) {\n        return {defaultStyle, focusTextBlock}\n      }\n\n      return false\n    },\n    actions: [\n      (_, {defaultStyle, focusTextBlock}) => [\n        {\n          type: 'block.set',\n          props: {style: defaultStyle},\n          at: focusTextBlock.path,\n        },\n      ],\n    ],\n  })\n  const automaticListOnSpace = defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      const isSpace = event.text === ' '\n\n      if (!isSpace) {\n        return false\n      }\n\n      const selectionCollapsed = selectors.isSelectionCollapsed(snapshot)\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const focusSpan = selectors.getFocusSpan(snapshot)\n\n      if (!selectionCollapsed || !focusTextBlock || !focusSpan) {\n        return false\n      }\n\n      const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n      const blockOffset = spanSelectionPointToBlockOffset({\n        value: snapshot.context.value,\n        selectionPoint: {\n          path: [\n            {_key: focusTextBlock.node._key},\n            'children',\n            {_key: focusSpan.node._key},\n          ],\n          offset: snapshot.context.selection?.focus.offset ?? 0,\n        },\n      })\n\n      if (previousInlineObject || !blockOffset) {\n        return false\n      }\n\n      const blockText = getTextBlockText(focusTextBlock.node)\n      const defaultStyle = config.defaultStyle?.(snapshot.context)\n      const looksLikeUnorderedList = /^(-|\\*)/.test(blockText)\n      const unorderedListStyle = config.unorderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfUnorderedList = blockOffset.offset === 1\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfUnorderedList &&\n        looksLikeUnorderedList &&\n        unorderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: unorderedListStyle,\n          listItemLength: 1,\n          style: defaultStyle,\n        }\n      }\n\n      const looksLikeOrderedList = /^1\\./.test(blockText)\n      const orderedListStyle = config.orderedListStyle?.(snapshot.context)\n      const caretAtTheEndOfOrderedList = blockOffset.offset === 2\n\n      if (\n        defaultStyle &&\n        caretAtTheEndOfOrderedList &&\n        looksLikeOrderedList &&\n        orderedListStyle !== undefined\n      ) {\n        return {\n          focusTextBlock,\n          listItem: orderedListStyle,\n          listItemLength: 2,\n          style: defaultStyle,\n        }\n      }\n\n      return false\n    },\n    actions: [\n      ({event}) => [event],\n      (_, {focusTextBlock, style, listItem, listItemLength}) => [\n        {\n          type: 'block.set',\n          props: {\n            listItem,\n            level: 1,\n            style,\n          },\n          at: focusTextBlock.path,\n        },\n        {\n          type: 'delete.text',\n          anchor: {\n            path: focusTextBlock.path,\n            offset: 0,\n          },\n          focus: {\n            path: focusTextBlock.path,\n            offset: listItemLength + 1,\n          },\n        },\n      ],\n    ],\n  })\n\n  const markdownBehaviors = [\n    automaticBlockquoteOnSpace,\n    automaticHeadingOnSpace,\n    automaticHr,\n    automaticHrOnPaste,\n    clearStyleOnBackspace,\n    automaticListOnSpace,\n  ]\n\n  return markdownBehaviors\n}\n"],"names":["createMarkdownBehaviors","config","automaticBlockquoteOnSpace","defineBehavior","on","guard","snapshot","event","text","selectionCollapsed","selectors","focusTextBlock","focusSpan","previousInlineObject","blockOffset","spanSelectionPointToBlockOffset","value","context","selectionPoint","path","_key","node","offset","selection","focus","blockText","getTextBlockText","caretAtTheEndOfQuote","looksLikeMarkdownQuote","test","blockquoteStyle","undefined","style","actions","type","_","props","at","anchor","automaticHr","hrCharacter","hrObject","horizontalRuleObject","focusBlock","textBefore","hrBlockOffsets","placement","block","_type","name","automaticHrOnPaste","originEvent","dataTransfer","getData","hrRegExp","hrCharacters","match","isPortableTextTextBlock","schema","children","automaticHeadingOnSpace","markdownHeadingSearch","exec","level","length","caretAtTheEndOfHeading","headingStyle","clearStyleOnBackspace","atTheBeginningOfBLock","defaultStyle","automaticListOnSpace","looksLikeUnorderedList","unorderedListStyle","caretAtTheEndOfUnorderedList","listItem","listItemLength","looksLikeOrderedList","orderedListStyle","caretAtTheEndOfOrderedList"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12171, "column": 0}, "map": {"version":3,"file":"util.merge-text-blocks.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.is-text-block.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/utils/util.merge-text-blocks.ts"],"sourcesContent":["import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {isTypedObject} from '../internal-utils/asserters'\n\n/**\n * @public\n */\nexport function isTextBlock(\n  context: Pick<EditorContext, 'schema'>,\n  block: unknown,\n): block is PortableTextTextBlock {\n  return isTypedObject(block) && block._type === context.schema.block.name\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorContext} from '..'\nimport {parseBlock} from '../internal-utils/parse-blocks'\nimport {isTextBlock} from './util.is-text-block'\n\n/**\n * @beta\n */\nexport function mergeTextBlocks({\n  context,\n  targetBlock,\n  incomingBlock,\n}: {\n  context: Pick<EditorContext, 'keyGenerator' | 'schema'>\n  targetBlock: PortableTextTextBlock\n  incomingBlock: PortableTextTextBlock\n}) {\n  const parsedIncomingBlock = parseBlock({\n    context,\n    block: incomingBlock,\n    options: {refreshKeys: true},\n  })\n\n  if (!parsedIncomingBlock || !isTextBlock(context, parsedIncomingBlock)) {\n    return targetBlock\n  }\n\n  return {\n    ...targetBlock,\n    children: [...targetBlock.children, ...parsedIncomingBlock.children],\n    markDefs: [\n      ...(targetBlock.markDefs ?? []),\n      ...(parsedIncomingBlock.markDefs ?? []),\n    ],\n  }\n}\n"],"names":["isTextBlock","context","block","isTypedObject","_type","schema","name","mergeTextBlocks","targetBlock","incomingBlock","parsedIncomingBlock","parseBlock","options","refreshKeys","children","markDefs"],"mappings":";;;;;;AAOgBA,SAAAA,YACdC,OAAAA,EACAC,KAAAA,EACgC;IAChC,kMAAOC,gBAAAA,EAAcD,KAAK,KAAKA,MAAME,KAAAA,KAAUH,QAAQI,MAAAA,CAAOH,KAAAA,CAAMI,IAAAA;AACtE;ACJO,SAASC,gBAAgB,EAC9BN,OAAAA,EACAO,WAAAA,EACAC,aAAAA,EAKF,EAAG;IACD,MAAMC,iNAAsBC,aAAAA,EAAW;QACrCV;QACAC,OAAOO;QACPG,SAAS;YAACC,aAAa,CAAA;QAAA;IAAI,CAC5B;IAED,OAAI,CAACH,uBAAuB,CAACV,YAAYC,SAASS,mBAAmB,IAC5DF,cAGF;QACL,GAAGA,WAAAA;QACHM,UAAU,CAAC;eAAGN,YAAYM,QAAAA,EAAU;eAAGJ,oBAAoBI,QAAQ;SAAA;QACnEC,UAAU,CACR;eAAIP,YAAYO,QAAAA,IAAY,CAAA,CAAA,EAC5B;eAAIL,oBAAoBK,QAAAA,IAAY,CAAG,CAAA;SAAA;IAE3C;AACF","ignoreList":[0,1],"debugId":null}},
    {"offset": {"line": 12208, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.behavior.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.core.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/internal-utils/get-text-to-emphasize.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/behaviors/behavior.decorator-pair.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.decorator-shortcut.ts","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.editor-ref.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.event-listener.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.markdown.tsx","file:///Users/toma/Programming/Projects/sunarte/sunarte-tomagnet-multilang/node_modules/%40portabletext/editor/src/plugins/plugin.one-line.tsx"],"sourcesContent":["import {useEffect} from 'react'\nimport type {Behavior} from '../behaviors'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport function BehaviorPlugin(props: {behaviors: Array<Behavior>}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const unregisterBehaviors = props.behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      unregisterBehaviors.forEach((unregister) => unregister())\n    }\n  }, [editor, props.behaviors])\n\n  return null\n}\n","import {coreBehaviors} from '../behaviors'\nimport {BehaviorPlugin} from './plugin.behavior'\n\n/**\n * @beta\n */\nexport function CoreBehaviorsPlugin() {\n  return <BehaviorPlugin behaviors={coreBehaviors} />\n}\n","export function createPairRegex(char: string, amount: number) {\n  // Negative lookbehind: Ensures that the matched sequence is not preceded by the same character\n  const prePrefix = `(?<!\\\\${char})`\n\n  // Repeats the character `amount` times\n  const prefix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the opening pair (**, *, etc.) is not followed by a space\n  const postPrefix = `(?!\\\\s)`\n\n  // Captures the content inside the pair\n  const content = `([^${char}\\\\n]+?)`\n\n  // Negative lookbehind: Ensures that the content is not followed by a space\n  const preSuffix = `(?<!\\\\s)`\n\n  // Repeats the character `amount` times\n  const suffix = `\\\\${char}`.repeat(Math.max(amount, 1))\n\n  // Negative lookahead: Ensures that the matched sequence is not followed by the same character\n  const postSuffix = `(?!\\\\${char})`\n\n  return `${prePrefix}${prefix}${postPrefix}${content}${preSuffix}${suffix}${postSuffix}`\n}\n\nconst italicRegex = new RegExp(\n  `(${createPairRegex('*', 1)}|${createPairRegex('_', 1)})$`,\n)\n\nconst boldRegex = new RegExp(\n  `(${createPairRegex('*', 2)}|${createPairRegex('_', 2)})$`,\n)\n\nexport function getTextToItalic(text: string) {\n  return text.match(italicRegex)?.at(0)\n}\n\nexport function getTextToBold(text: string) {\n  return text.match(boldRegex)?.at(0)\n}\n","import type {EditorSchema} from '../editor/define-schema'\nimport {createPairRegex} from '../internal-utils/get-text-to-emphasize'\nimport * as selectors from '../selectors'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\nimport {defineBehavior} from './behavior.types.behavior'\n\nexport function createDecoratorPairBehavior(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n  onDecorate: (offset: BlockOffset) => void\n}) {\n  if (config.pair.amount < 1) {\n    console.warn(\n      `The amount of characters in the pair should be greater than 0`,\n    )\n  }\n\n  const pairRegex = createPairRegex(config.pair.char, config.pair.amount)\n  const regEx = new RegExp(`(${pairRegex})$`)\n\n  return defineBehavior({\n    on: 'insert.text',\n    guard: ({snapshot, event}) => {\n      if (config.pair.amount < 1) {\n        return false\n      }\n\n      const decorator = config.decorator({schema: snapshot.context.schema})\n\n      if (decorator === undefined) {\n        return false\n      }\n\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n      const selectionStartPoint = selectors.getSelectionStartPoint(snapshot)\n      const selectionStartOffset = selectionStartPoint\n        ? utils.spanSelectionPointToBlockOffset({\n            value: snapshot.context.value,\n            selectionPoint: selectionStartPoint,\n          })\n        : undefined\n\n      if (!focusTextBlock || !selectionStartOffset) {\n        return false\n      }\n\n      const textBefore = selectors.getBlockTextBefore(snapshot)\n      const newText = `${textBefore}${event.text}`\n      const textToDecorate = newText.match(regEx)?.at(0)\n\n      if (textToDecorate === undefined) {\n        return false\n      }\n\n      const prefixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length = 4\n          offset: newText.length - textToDecorate.length,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar**\".length - \"**bar**\".length + \"*\".length * 2 = 6\n          offset:\n            newText.length -\n            textToDecorate.length +\n            config.pair.char.length * config.pair.amount,\n        },\n      }\n\n      const suffixOffsets = {\n        anchor: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length - 2 = 9\n          offset:\n            selectionStartOffset.offset +\n            event.text.length -\n            config.pair.char.length * config.pair.amount,\n        },\n        focus: {\n          path: focusTextBlock.path,\n          // Example: \"foo **bar*|\" (10) + \"*\".length = 11\n          offset: selectionStartOffset.offset + event.text.length,\n        },\n      }\n\n      // If the prefix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (prefixOffsets.focus.offset - prefixOffsets.anchor.offset > 1) {\n        const prefixSelection = utils.blockOffsetsToSelection({\n          value: snapshot.context.value,\n          offsets: prefixOffsets,\n        })\n        const inlineObjectBeforePrefixFocus = selectors.getPreviousInlineObject(\n          {\n            ...snapshot,\n            context: {\n              ...snapshot.context,\n              selection: prefixSelection\n                ? {\n                    anchor: prefixSelection.focus,\n                    focus: prefixSelection.focus,\n                  }\n                : null,\n            },\n          },\n        )\n        const inlineObjectBeforePrefixFocusOffset =\n          inlineObjectBeforePrefixFocus\n            ? utils.childSelectionPointToBlockOffset({\n                value: snapshot.context.value,\n                selectionPoint: {\n                  path: inlineObjectBeforePrefixFocus.path,\n                  offset: 0,\n                },\n              })\n            : undefined\n\n        if (\n          inlineObjectBeforePrefixFocusOffset &&\n          inlineObjectBeforePrefixFocusOffset.offset >\n            prefixOffsets.anchor.offset &&\n          inlineObjectBeforePrefixFocusOffset.offset <\n            prefixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      // If the suffix is more than one character, then we need to check if\n      // there is an inline object inside it\n      if (suffixOffsets.focus.offset - suffixOffsets.anchor.offset > 1) {\n        const previousInlineObject = selectors.getPreviousInlineObject(snapshot)\n        const previousInlineObjectOffset = previousInlineObject\n          ? utils.childSelectionPointToBlockOffset({\n              value: snapshot.context.value,\n              selectionPoint: {\n                path: previousInlineObject.path,\n                offset: 0,\n              },\n            })\n          : undefined\n\n        if (\n          previousInlineObjectOffset &&\n          previousInlineObjectOffset.offset > suffixOffsets.anchor.offset &&\n          previousInlineObjectOffset.offset < suffixOffsets.focus.offset\n        ) {\n          return false\n        }\n      }\n\n      return {\n        prefixOffsets,\n        suffixOffsets,\n        decorator,\n      }\n    },\n    actions: [\n      // Insert the text as usual in its own undo step\n      ({event}) => [event],\n      (_, {prefixOffsets, suffixOffsets, decorator}) => [\n        // Decorate the text between the prefix and suffix\n        {\n          type: 'decorator.add',\n          decorator,\n          offsets: {\n            anchor: prefixOffsets.focus,\n            focus: suffixOffsets.anchor,\n          },\n        },\n        // Delete the suffix\n        {\n          type: 'delete.text',\n          ...suffixOffsets,\n        },\n        // Delete the prefix\n        {\n          type: 'delete.text',\n          ...prefixOffsets,\n        },\n        // Toggle the decorator off so the next inserted text isn't emphasized\n        {\n          type: 'decorator.remove',\n          decorator,\n        },\n        {\n          type: 'effect',\n          effect: () => {\n            config.onDecorate({\n              ...suffixOffsets.anchor,\n              offset:\n                suffixOffsets.anchor.offset -\n                (prefixOffsets.focus.offset - prefixOffsets.anchor.offset),\n            })\n          },\n        },\n      ],\n    ],\n  })\n}\n","import {useActorRef} from '@xstate/react'\nimport {isEqual} from 'lodash'\nimport {\n  assign,\n  fromCallback,\n  setup,\n  type AnyEventObject,\n  type CallbackLogicFunction,\n} from 'xstate'\nimport {createDecoratorPairBehavior} from '../behaviors/behavior.decorator-pair'\nimport {defineBehavior} from '../behaviors/behavior.types.behavior'\nimport type {Editor} from '../editor/create-editor'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {useEditor} from '../editor/editor-provider'\nimport type {BlockOffset} from '../types/block-offset'\nimport * as utils from '../utils'\n\n/**\n * @beta\n */\nexport function DecoratorShortcutPlugin(config: {\n  decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n  pair: {char: string; amount: number}\n}) {\n  const editor = useEditor()\n\n  useActorRef(decoratorPairMachine, {\n    input: {\n      editor,\n      decorator: config.decorator,\n      pair: config.pair,\n    },\n  })\n\n  return null\n}\n\ntype MarkdownEmphasisEvent =\n  | {\n      type: 'emphasis.add'\n      blockOffset: BlockOffset\n    }\n  | {\n      type: 'selection'\n      blockOffsets?: {\n        anchor: BlockOffset\n        focus: BlockOffset\n      }\n    }\n  | {\n      type: 'delete.backward'\n    }\n\nconst emphasisListener: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {\n    decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n    editor: Editor\n    pair: {char: string; amount: number}\n  }\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: createDecoratorPairBehavior({\n      decorator: input.decorator,\n      pair: input.pair,\n      onDecorate: (offset) => {\n        sendBack({type: 'emphasis.add', blockOffset: offset})\n      },\n    }),\n  })\n\n  return unregister\n}\n\nconst selectionListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'select',\n      guard: ({snapshot, event}) => {\n        if (!event.selection) {\n          return {blockOffsets: undefined}\n        }\n\n        const anchor = utils.spanSelectionPointToBlockOffset({\n          value: snapshot.context.value,\n          selectionPoint: event.selection.anchor,\n        })\n        const focus = utils.spanSelectionPointToBlockOffset({\n          value: snapshot.context.value,\n          selectionPoint: event.selection.focus,\n        })\n\n        if (!anchor || !focus) {\n          return {blockOffsets: undefined}\n        }\n\n        return {\n          blockOffsets: {\n            anchor,\n            focus,\n          },\n        }\n      },\n      actions: [\n        (_, {blockOffsets}) => [\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'selection', blockOffsets})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst deleteBackwardListenerCallback: CallbackLogicFunction<\n  AnyEventObject,\n  MarkdownEmphasisEvent,\n  {editor: Editor}\n> = ({sendBack, input}) => {\n  const unregister = input.editor.registerBehavior({\n    behavior: defineBehavior({\n      on: 'delete.backward',\n      actions: [\n        () => [\n          {\n            type: 'history.undo',\n          },\n          {\n            type: 'effect',\n            effect: () => {\n              sendBack({type: 'delete.backward'})\n            },\n          },\n        ],\n      ],\n    }),\n  })\n\n  return unregister\n}\n\nconst decoratorPairMachine = setup({\n  types: {\n    context: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      offsetAfterEmphasis?: BlockOffset\n      pair: {char: string; amount: number}\n    },\n    input: {} as {\n      decorator: ({schema}: {schema: EditorSchema}) => string | undefined\n      editor: Editor\n      pair: {char: string; amount: number}\n    },\n    events: {} as MarkdownEmphasisEvent,\n  },\n  actors: {\n    'emphasis listener': fromCallback(emphasisListener),\n    'delete.backward listener': fromCallback(deleteBackwardListenerCallback),\n    'selection listener': fromCallback(selectionListenerCallback),\n  },\n}).createMachine({\n  id: 'decorator pair',\n  context: ({input}) => ({\n    decorator: input.decorator,\n    editor: input.editor,\n    pair: input.pair,\n  }),\n  initial: 'idle',\n  states: {\n    'idle': {\n      invoke: [\n        {\n          src: 'emphasis listener',\n          input: ({context}) => ({\n            decorator: context.decorator,\n            editor: context.editor,\n            pair: context.pair,\n          }),\n        },\n      ],\n      on: {\n        'emphasis.add': {\n          target: 'emphasis added',\n          actions: assign({\n            offsetAfterEmphasis: ({event}) => event.blockOffset,\n          }),\n        },\n      },\n    },\n    'emphasis added': {\n      exit: [\n        assign({\n          offsetAfterEmphasis: undefined,\n        }),\n      ],\n      invoke: [\n        {\n          src: 'selection listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n        {\n          src: 'delete.backward listener',\n          input: ({context}) => ({editor: context.editor}),\n        },\n      ],\n      on: {\n        'selection': {\n          target: 'idle',\n          guard: ({context, event}) => {\n            const selectionChanged = !isEqual(\n              {\n                anchor: context.offsetAfterEmphasis,\n                focus: context.offsetAfterEmphasis,\n              },\n              event.blockOffsets,\n            )\n\n            return selectionChanged\n          },\n        },\n        'delete.backward': {\n          target: 'idle',\n        },\n      },\n    },\n  },\n})\n","import React from 'react'\nimport type {Editor} from '../editor/create-editor'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @beta\n */\nexport const EditorRefPlugin = React.forwardRef<Editor | null>((_, ref) => {\n  const editor = useEditor()\n\n  const portableTextEditorRef = React.useRef(editor)\n\n  React.useImperativeHandle(ref, () => portableTextEditorRef.current, [])\n\n  return null\n})\nEditorRefPlugin.displayName = 'EditorRefPlugin'\n","import {useEffect} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport type {EditorEmittedEvent} from '../editor/editor-machine'\nimport {useEditor} from '../editor/editor-provider'\n\n/**\n * @public\n * Listen for events emitted by the editor. Must be used inside `EditorProvider`. Events available include:\n *  - 'blurred'\n *  - 'done loading'\n *  - 'editable'\n *  - 'error'\n *  - 'focused'\n *  - 'invalid value'\n *  - 'loading'\n *  - 'mutation'\n *  - 'patch'\n *  - 'read only'\n *  - 'ready'\n *  - 'selection'\n *  - 'value changed'\n *\n * @example\n * Listen and log events.\n * ```tsx\n * import {EditorProvider} from '@portabletext/editor'\n * import {EventListenerPlugin} from '@portabletext/editor/plugins'\n *\n * function MyComponent() {\n *  return (\n *  <EditorProvider>\n *   <EventListenerPlugin\n *    on={(event) => {\n *     console.log(event)\n *    }\n *   } />\n *   { ... }\n * </EditorProvider>\n *  )\n * }\n * ```\n * @example\n * Handle events when there is a mutation.\n * ```tsx\n * <EventListenerPlugin\n *  on={(event) => {\n *    if (event.type === 'mutation') {\n *      console.log('Value changed:', event.snapshot)\n *    }\n *  }}\n * />\n * ```\n * @group Components\n */\nexport function EventListenerPlugin(props: {\n  on: (event: EditorEmittedEvent) => void\n}) {\n  const editor = useEditor()\n  const on = useEffectEvent(props.on)\n\n  useEffect(() => {\n    const subscription = editor.on('*', on)\n\n    return () => {\n      subscription.unsubscribe()\n    }\n  }, [editor])\n\n  return null\n}\n","import {useEffect} from 'react'\nimport {\n  createMarkdownBehaviors,\n  type MarkdownBehaviorsConfig,\n} from '../behaviors/behavior.markdown'\nimport type {EditorSchema} from '../editor/define-schema'\nimport {useEditor} from '../editor/editor-provider'\nimport {DecoratorShortcutPlugin} from './plugin.decorator-shortcut'\n\n/**\n * @beta\n */\nexport type MarkdownPluginConfig = MarkdownBehaviorsConfig & {\n  boldDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  codeDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  italicDecorator?: ({schema}: {schema: EditorSchema}) => string | undefined\n  strikeThroughDecorator?: ({\n    schema,\n  }: {\n    schema: EditorSchema\n  }) => string | undefined\n}\n\n/**\n * @beta\n * Add markdown behaviors for common markdown actions such as converting ### to headings, --- to HRs, and more.\n *\n * @example\n * Configure the bundled markdown behaviors\n * ```ts\n * import {EditorProvider} from '@portabletext/editor'\n * import {MarkdownPlugin} from '@portabletext/editor/plugins'\n *\n * function App() {\n *   return (\n *    <EditorProvider>\n *      <MarkdownPlugin\n *        config={{\n *          boldDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strong')?.value,\n *          codeDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'code')?.value,\n *          italicDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'em')?.value,\n *          strikeThroughDecorator: ({schema}) =>\n *            schema.decorators.find((decorator) => decorator.value === 'strike-through')?.value,\n *          horizontalRuleObject: ({schema}) => {\n *            const name = schema.blockObjects.find(\n *              (object) => object.name === 'break',\n *            )?.name\n *            return name ? {name} : undefined\n *          },\n *          defaultStyle: ({schema}) => schema.styles[0].value,\n *          headingStyle: ({schema, level}) =>\n *            schema.styles.find((style) => style.value === `h${level}`)\n *              ?.value,\n *          blockquoteStyle: ({schema}) =>\n *            schema.styles.find((style) => style.value === 'blockquote')\n *              ?.value,\n *          unorderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'bullet')?.value,\n *          orderedListStyle: ({schema}) =>\n *            schema.lists.find((list) => list.value === 'number')?.value,\n *        }}\n *      />\n *      {...}\n *    </EditorProvider>\n *  )\n * }\n * ```\n */\nexport function MarkdownPlugin(props: {config: MarkdownPluginConfig}) {\n  const editor = useEditor()\n\n  useEffect(() => {\n    const behaviors = createMarkdownBehaviors(props.config)\n\n    const unregisterBehaviors = behaviors.map((behavior) =>\n      editor.registerBehavior({behavior}),\n    )\n\n    return () => {\n      for (const unregisterBehavior of unregisterBehaviors) {\n        unregisterBehavior()\n      }\n    }\n  }, [editor, props.config])\n\n  return (\n    <>\n      {props.config.boldDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '*', amount: 2}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.boldDecorator}\n            pair={{char: '_', amount: 2}}\n          />\n        </>\n      ) : null}\n      {props.config.codeDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.codeDecorator}\n          pair={{char: '`', amount: 1}}\n        />\n      ) : null}\n      {props.config.italicDecorator ? (\n        <>\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '*', amount: 1}}\n          />\n          <DecoratorShortcutPlugin\n            decorator={props.config.italicDecorator}\n            pair={{char: '_', amount: 1}}\n          />\n        </>\n      ) : null}\n      {props.config.strikeThroughDecorator ? (\n        <DecoratorShortcutPlugin\n          decorator={props.config.strikeThroughDecorator}\n          pair={{char: '~', amount: 2}}\n        />\n      ) : null}\n    </>\n  )\n}\n","import {defineBehavior, raise} from '../behaviors'\nimport * as selectors from '../selectors'\nimport * as utils from '../utils'\nimport {BehaviorPlugin} from './plugin.behavior'\n\nconst oneLineBehaviors = [\n  /**\n   * Hitting Enter on an expanded selection should just delete that selection\n   * without causing a line break.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    guard: ({snapshot}) =>\n      snapshot.context.selection && selectors.isSelectionExpanded(snapshot)\n        ? {selection: snapshot.context.selection}\n        : false,\n    actions: [(_, {selection}) => [{type: 'delete', selection}]],\n  }),\n  /**\n   * All other cases of `insert.break` should be aborted.\n   */\n  defineBehavior({\n    on: 'insert.break',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * `insert.block` `before` or `after` is not allowed in a one-line editor.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({event}) =>\n      event.placement === 'before' || event.placement === 'after',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * An ordinary `insert.block` is acceptable if it's a text block. In that\n   * case it will get merged into the existing text block.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    guard: ({snapshot, event}) => {\n      const focusTextBlock = selectors.getFocusTextBlock(snapshot)\n\n      if (\n        !focusTextBlock ||\n        !utils.isTextBlock(snapshot.context, event.block)\n      ) {\n        return false\n      }\n\n      return true\n    },\n    actions: [\n      ({event}) => [\n        {\n          type: 'insert.block',\n          block: event.block,\n          placement: 'auto',\n          select: 'end',\n        },\n      ],\n    ],\n  }),\n  /**\n   * Fallback Behavior to avoid `insert.block` in case the Behaviors above all\n   * end up with a falsy guard.\n   */\n  defineBehavior({\n    on: 'insert.block',\n    actions: [() => [{type: 'noop'}]],\n  }),\n  /**\n   * If multiple blocks are inserted, then the non-text blocks are filtered out\n   * and the text blocks are merged into one block\n   */\n  defineBehavior({\n    on: 'insert.blocks',\n    guard: ({snapshot, event}) => {\n      return event.blocks\n        .filter((block) => utils.isTextBlock(snapshot.context, block))\n        .reduce((targetBlock, incomingBlock) => {\n          return utils.mergeTextBlocks({\n            context: snapshot.context,\n            targetBlock,\n            incomingBlock,\n          })\n        })\n    },\n    actions: [\n      // `insert.block` is raised so the Behavior above can handle the\n      // insertion\n      (_, block) => [raise({type: 'insert.block', block, placement: 'auto'})],\n    ],\n  }),\n]\n\n/**\n * @beta\n * Restrict the editor to one line. The plugin takes care of blocking\n * `insert.break` events and smart handling of other `insert.*` events.\n *\n * Place it with as high priority as possible to make sure other plugins don't\n * overwrite `insert.*` events before this plugin gets a chance to do so.\n */\nexport function OneLinePlugin() {\n  return <BehaviorPlugin behaviors={oneLineBehaviors} />\n}\n"],"names":["BehaviorPlugin","props","$","_c","editor","useEditor","t0","t1","behaviors","unregisterBehaviors","map","behavior","registerBehavior","forEach","_temp","useEffect","unregister","CoreBehaviorsPlugin","Symbol","for","coreBehaviors","createPairRegex","char","amount","prePrefix","prefix","repeat","Math","max","postPrefix","content","preSuffix","suffix","postSuffix","createDecoratorPairBehavior","config","pair","console","warn","pairRegex","regEx","RegExp","defineBehavior","on","guard","snapshot","event","decorator","schema","context","undefined","focusTextBlock","selectors","selectionStartPoint","selectionStartOffset","utils","value","selectionPoint","newText","text","textToDecorate","match","at","prefixOffsets","anchor","path","offset","length","focus","suffixOffsets","prefixSelection","offsets","inlineObjectBeforePrefixFocus","selection","inlineObjectBeforePrefixFocusOffset","previousInlineObject","previousInlineObjectOffset","actions","_","type","effect","onDecorate","DecoratorShortcutPlugin","input","useActorRef","decoratorPairMachine","emphasisListener","sendBack","blockOffset","selectionListenerCallback","blockOffsets","deleteBackwardListenerCallback","setup","types","events","actors","fromCallback","createMachine","id","initial","states","invoke","src","target","assign","offsetAfterEmphasis","exit","isEqual","EditorRefPlugin","React","forwardRef","ref","portableTextEditorRef","useRef","current","useImperativeHandle","displayName","EventListenerPlugin","useEffectEvent","subscription","unsubscribe","MarkdownPlugin","createMarkdownBehaviors","unregisterBehavior","t2","boldDecorator","t3","codeDecorator","t4","italicDecorator","t5","strikeThroughDecorator","t6","oneLineBehaviors","placement","block","select","blocks","filter","reduce","targetBlock","incomingBlock","raise","OneLinePlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOO,SAAAA,eAAAC,KAAAA,EAAA;IAAA,MAAAC,yNAAAC,EAAA,CAAA,GACLC,uMAAeC,YAAAA,CAAU;IAAC,IAAAC,IAAAC;IAAAL,OAAAA,CAAAA,CAAAA,EAAAA,KAAAE,UAAAF,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,MAAAO,SAAAA,GAAAA,CAEhBF,KAAAA,MAAA;QACR,MAAAG,sBAA4BR,MAAKO,SAAAA,CAAAE,GAAAA,CAAAC,CAAAA,WAC/BP,OAAMQ,gBAAAA,CAAA;gBAAAD;YAAAA,CAA4B,CACpC;QAAC,OAAA,MAAA;YAGCF,oBAAmBI,OAAAA,CAAAC,KAAqC;QAAC;IAAA,GAE1DP,KAACH;QAAAA;QAAQH,MAAKO,SAAA;KAAA,EAAWN,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAO,SAAAA,EAAAN,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAD,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,qKAR5Ba,YAAAA,EAAUT,IAQPC,EAAyB,GAAC;AAAA;AAXxB,SAAAO,MAAAE,UAAAA,EAAA;IAAA,OAS2CA,WAAW;AAAC;ACVvD,SAAAC,sBAAA;IAAAf,MAAAA,IAAAC,qNAAAA,EAAA,CAAA;IAAAG,IAAAA;IAAAJ,OAAAA,CAAAA,CAAA,CAAA,CAAA,KAAAgB,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACEb,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,gBAAA;QAA0Bc,mMAAAA,gBAAAA;IAAiB,CAAA,GAAAlB,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAA5CI;AAA4C;ACPrCe,SAAAA,gBAAgBC,IAAAA,EAAcC,MAAAA,EAAgB;IAE5D,MAAMC,YAAY,CAAA,MAAA,EAASF,IAAI,CAAA,CAAA,CAAA,EAGzBG,SAAS,CAAA,EAAA,EAAKH,IAAI,EAAA,CAAGI,MAAAA,CAAOC,KAAKC,GAAAA,CAAIL,QAAQ,CAAC,CAAC,GAG/CM,aAAa,WAGbC,UAAU,CAAA,GAAA,EAAMR,IAAI,CAAA,OAAA,CAAA,EAGpBS,YAAY,YAGZC,SAAS,CAAA,EAAA,EAAKV,IAAI,EAAA,CAAGI,MAAAA,CAAOC,KAAKC,GAAAA,CAAIL,QAAQ,CAAC,CAAC,GAG/CU,aAAa,CAAA,KAAA,EAAQX,IAAI,CAAA,CAAA,CAAA;IAE/B,OAAO,GAAGE,SAAS,GAAGC,MAAM,GAAGI,UAAU,GAAGC,OAAO,GAAGC,SAAS,GAAGC,MAAM,GAAGC,UAAU,EAAA;AACvF;AChBO,SAASC,4BAA4BC,MAAAA,EAIzC;IACGA,OAAOC,IAAAA,CAAKb,MAAAA,GAAS,KACvBc,QAAQC,IAAAA,CACN,+DACF;IAGF,MAAMC,YAAYlB,gBAAgBc,OAAOC,IAAAA,CAAKd,IAAAA,EAAMa,OAAOC,IAAAA,CAAKb,MAAM,GAChEiB,QAAQ,IAAIC,OAAO,CAAA,CAAA,EAAIF,SAAS,CAAA,EAAA,CAAI;IAE1C,mMAAOG,iBAAAA,EAAe;QACpBC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;YACxBX,IAAAA,OAAOC,IAAAA,CAAKb,MAAAA,GAAS,GAChB,OAAA,CAAA;YAGHwB,MAAAA,YAAYZ,OAAOY,SAAAA,CAAU;gBAACC,QAAQH,SAASI,OAAAA,CAAQD,MAAAA;YAAAA,CAAO;YAEpE,IAAID,cAAcG,KAAAA,GACT,OAAA,CAAA;YAGT,MAAMC,uOAAiBC,oBAAAA,EAA4BP,QAAQ,GACrDQ,sBAAsBD,+OAAAA,EAAiCP,QAAQ,GAC/DS,uBAAuBD,yNACzBE,kCAAAA,EAAsC;gBACpCC,OAAOX,SAASI,OAAAA,CAAQO,KAAAA;gBACxBC,gBAAgBJ;YACjB,CAAA,IACDH,KAAAA;YAEA,IAAA,CAACC,kBAAkB,CAACG,sBACf,OAAA,CAAA;YAIT,MAAMI,UAAU,gNADGN,qBAAAA,EAA6BP,QAAQ,CAC3B,GAAGC,MAAMa,IAAI,EAAA,EACpCC,iBAAiBF,QAAQG,KAAAA,CAAMrB,KAAK,GAAGsB,GAAG,CAAC;YAEjD,IAAIF,mBAAmBV,KAAAA,GACd,OAAA,CAAA;YAGT,MAAMa,gBAAgB;gBACpBC,QAAQ;oBACNC,MAAMd,eAAec,IAAAA;oBAAAA,uDAAAA;oBAErBC,QAAQR,QAAQS,MAAAA,GAASP,eAAeO,MAAAA;gBAC1C;gBACAC,OAAO;oBACLH,MAAMd,eAAec,IAAAA;oBAAAA,wEAAAA;oBAErBC,QACER,QAAQS,MAAAA,GACRP,eAAeO,MAAAA,GACfhC,OAAOC,IAAAA,CAAKd,IAAAA,CAAK6C,MAAAA,GAAShC,OAAOC,IAAAA,CAAKb,MAAAA;gBAAAA;YAAAA,GAItC8C,gBAAgB;gBACpBL,QAAQ;oBACNC,MAAMd,eAAec,IAAAA;oBAAAA,mDAAAA;oBAErBC,QACEZ,qBAAqBY,MAAAA,GACrBpB,MAAMa,IAAAA,CAAKQ,MAAAA,GACXhC,OAAOC,IAAAA,CAAKd,IAAAA,CAAK6C,MAAAA,GAAShC,OAAOC,IAAAA,CAAKb,MAAAA;gBAC1C;gBACA6C,OAAO;oBACLH,MAAMd,eAAec,IAAAA;oBAAAA,gDAAAA;oBAErBC,QAAQZ,qBAAqBY,MAAAA,GAASpB,MAAMa,IAAAA,CAAKQ,MAAAA;gBAAAA;YAErD;YAIA,IAAIJ,cAAcK,KAAAA,CAAMF,MAAAA,GAASH,cAAcC,MAAAA,CAAOE,MAAAA,GAAS,GAAG;gBAC1DI,MAAAA,kBAAkBf,yPAAAA,EAA8B;oBACpDC,OAAOX,SAASI,OAAAA,CAAQO,KAAAA;oBACxBe,SAASR;gBAAAA,CACV,GACKS,qPAAgCpB,2BAAAA,EACpC;oBAEEH,SAAS;wBACP,GAAGJ,SAASI,OAAAA;wBACZwB,WAAWH,kBACP;4BACEN,QAAQM,gBAAgBF,KAAAA;4BACxBA,OAAOE,gBAAgBF,KAAAA;wBAAAA,IAEzB;oBAAA;gBACN,CAEJ,GACMM,sCACJF,+PACIjB,mCAAAA,EAAuC;oBACrCC,OAAOX,SAASI,OAAAA,CAAQO,KAAAA;oBACxBC,gBAAgB;wBACdQ,MAAMO,8BAA8BP,IAAAA;wBACpCC,QAAQ;oBAAA;gBAEX,CAAA,IACDhB,KAAAA;gBAGJwB,IAAAA,uCACAA,oCAAoCR,MAAAA,GAClCH,cAAcC,MAAAA,CAAOE,MAAAA,IACvBQ,oCAAoCR,MAAAA,GAClCH,cAAcK,KAAAA,CAAMF,MAAAA,EAEf,OAAA,CAAA;YAAA;YAMX,IAAIG,cAAcD,KAAAA,CAAMF,MAAAA,GAASG,cAAcL,MAAAA,CAAOE,MAAAA,GAAS,GAAG;gBAC1DS,MAAAA,6OAAuBvB,0BAAAA,EAAkCP,QAAQ,GACjE+B,6BAA6BD,sPAC/BpB,mCAAAA,EAAuC;oBACrCC,OAAOX,SAASI,OAAAA,CAAQO,KAAAA;oBACxBC,gBAAgB;wBACdQ,MAAMU,qBAAqBV,IAAAA;wBAC3BC,QAAQ;oBAAA;gBAEX,CAAA,IACDhB,KAAAA;gBAGF0B,IAAAA,8BACAA,2BAA2BV,MAAAA,GAASG,cAAcL,MAAAA,CAAOE,MAAAA,IACzDU,2BAA2BV,MAAAA,GAASG,cAAcD,KAAAA,CAAMF,MAAAA,EAEjD,OAAA,CAAA;YAAA;YAIJ,OAAA;gBACLH;gBACAM;gBACAtB;YACF;QACF;QACA8B,SAAS;YAAA,gDAAA;YAEP,CAAC,EAAC/B,KAAAA,EAAK,GAAM;oBAACA,KAAK;iBAAA;YACnB,CAACgC,GAAG,EAACf,aAAAA,EAAeM,aAAAA,EAAetB,SAAAA,EAAAA,GAAe;oBAAA,kDAAA;oBAEhD;wBACEgC,MAAM;wBACNhC;wBACAwB,SAAS;4BACPP,QAAQD,cAAcK,KAAAA;4BACtBA,OAAOC,cAAcL,MAAAA;wBAAAA;oBAEzB;oBAAA,oBAAA;oBAEA;wBACEe,MAAM;wBACN,GAAGV,aAAAA;oBACL;oBAAA,oBAAA;oBAEA;wBACEU,MAAM;wBACN,GAAGhB,aAAAA;oBACL;oBAAA,sEAAA;oBAEA;wBACEgB,MAAM;wBACNhC;oBACF;oBACA;wBACEgC,MAAM;wBACNC,QAAQA,MAAM;4BACZ7C,OAAO8C,UAAAA,CAAW;gCAChB,GAAGZ,cAAcL,MAAAA;gCACjBE,QACEG,cAAcL,MAAAA,CAAOE,MAAAA,GAAAA,CACpBH,cAAcK,KAAAA,CAAMF,MAAAA,GAASH,cAAcC,MAAAA,CAAOE,MAAAA;4BAAAA,CACtD;wBAAA;oBACH;iBACF;SAAC;IACF,CAEJ;AACH;ACrLO,SAAAgB,wBAAA/C,MAAAA,EAAA;IAAA,MAAAjC,yNAAAC,EAAA,CAAA,GAILC,uMAAeC,YAAAA,CAAU;IAACC,IAAAA;IAAA,OAAAJ,CAAAA,CAAA,CAAA,CAAA,KAAAiC,OAAAY,SAAAA,IAAA7C,CAAAA,CAAAiC,CAAAA,CAAAA,KAAAA,OAAAC,IAAAA,IAAAlC,CAAAA,CAAAA,EAAAA,KAAAE,SAAAA,CAEQE,KAAA;QAAA6E,OAAA;YAAA/E;YAAA2C,WAGnBZ,OAAMY,SAAAA;YAAAX,MACXD,OAAMC,IAAAA;QAAAA;IAAA,GAEflC,CAAAA,CAAA,CAAA,CAAA,GAAAiC,OAAAY,SAAAA,EAAA7C,CAAAA,CAAA,CAAA,CAAA,GAAAiC,OAAAC,IAAAA,EAAAlC,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EANDkF,wMAAAA,EAAAC,sBAAkC/E,EAMjC,GAAC;AAAA;AAqBJ,MAAMgF,mBAQFA,CAAC,EAACC,QAAAA,EAAUJ,KAAAA,EAAK,GACAA,MAAM/E,MAAAA,CAAOQ,gBAAAA,CAAiB;QAC/CD,UAAUuB,4BAA4B;YACpCa,WAAWoC,MAAMpC,SAAAA;YACjBX,MAAM+C,MAAM/C,IAAAA;YACZ6C,YAAaf,CAAW,WAAA;gBACb,SAAA;oBAACa,MAAM;oBAAgBS,aAAatB;gBAAAA,CAAO;YAAA;QAEvD,CAAA;IACH,CAAC,GAKGuB,4BAIFA,CAAC,EAACF,QAAAA,EAAUJ,KAAAA,EAAK,GACAA,MAAM/E,MAAAA,CAAOQ,gBAAAA,CAAiB;QAC/CD,WAAU+B,4MAAAA,EAAe;YACvBC,IAAI;YACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,KAAW;gBAC5B,IAAI,CAACA,MAAM2B,SAAAA,EACF,OAAA;oBAACiB,cAAcxC,KAAAA;gBAAS;gBAG3Bc,MAAAA,4MAAST,kCAAAA,EAAsC;oBACnDC,OAAOX,SAASI,OAAAA,CAAQO,KAAAA;oBACxBC,gBAAgBX,MAAM2B,SAAAA,CAAUT,MAAAA;gBAAAA,CACjC,GACKI,2MAAQb,kCAAAA,EAAsC;oBAClDC,OAAOX,SAASI,OAAAA,CAAQO,KAAAA;oBACxBC,gBAAgBX,MAAM2B,SAAAA,CAAUL,KAAAA;gBAAAA,CACjC;gBAEG,OAAA,CAACJ,UAAU,CAACI,QACP;oBAACsB,cAAcxC,KAAAA;gBAAAA,IAGjB;oBACLwC,cAAc;wBACZ1B;wBACAI;oBAAAA;gBAEJ;YACF;YACAS,SAAS;gBACP,CAACC,GAAG,EAACY,YAAAA,EAAAA,GAAkB;wBACrB;4BACEX,MAAM;4BACNC,QAAQA,MAAM;gCACH,SAAA;oCAACD,MAAM;oCAAaW;gCAAAA,CAAa;4BAAA;wBAC5C,CACD;qBACF;aAAA;QAEJ,CAAA;IACH,CAAC,GAKGC,iCAIFA,CAAC,EAACJ,QAAAA,EAAUJ,KAAAA,EAAK,GACAA,MAAM/E,MAAAA,CAAOQ,gBAAAA,CAAiB;QAC/CD,sMAAU+B,iBAAAA,EAAe;YACvBC,IAAI;YACJkC,SAAS;gBACP,IAAM;wBACJ;4BACEE,MAAM;wBAAA;wBAER;4BACEA,MAAM;4BACNC,QAAQA,MAAM;gCACH,SAAA;oCAACD,MAAM;gCAAA,CAAkB;4BAAA;wBACpC,CACD;qBACF;aAAA;QAEJ,CAAA;IACH,CAAC,GAKGM,wBAAuBO,6LAAAA,EAAM;IACjCC,OAAO;QACL5C,SAAS,CAAC;QAMVkC,OAAO,CAAC;QAKRW,QAAQ,CAAA;IACV;IACAC,QAAQ;QACN,+MAAqBC,eAAAA,EAAaV,gBAAgB;QAClD,sNAA4BU,eAAAA,EAAaL,8BAA8B;QACvE,gNAAsBK,eAAAA,EAAaP,yBAAyB;IAAA;AAEhE,CAAC,EAAEQ,aAAAA,CAAc;IACfC,IAAI;IACJjD,SAASA,CAAC,EAACkC,KAAAA,EAAAA,GAAAA,CAAY;YACrBpC,WAAWoC,MAAMpC,SAAAA;YACjB3C,QAAQ+E,MAAM/E,MAAAA;YACdgC,MAAM+C,MAAM/C,IAAAA;QAAAA,CAAAA;IAEd+D,SAAS;IACTC,QAAQ;QACN,MAAQ;YACNC,QAAQ;gBACN;oBACEC,KAAK;oBACLnB,OAAOA,CAAC,EAAClC,OAAAA,EAAAA,GAAAA,CAAc;4BACrBF,WAAWE,QAAQF,SAAAA;4BACnB3C,QAAQ6C,QAAQ7C,MAAAA;4BAChBgC,MAAMa,QAAQb,IAAAA;wBAChB,CAAA;gBAAA,CACD;aAAA;YAEHO,IAAI;gBACF,gBAAgB;oBACd4D,QAAQ;oBACR1B,SAAS2B,uNAAAA,EAAO;wBACdC,qBAAqBA,CAAC,EAAC3D,KAAAA,EAAAA,GAAWA,MAAM0C,WAAAA;oBACzC,CAAA;gBAAA;YACH;QAEJ;QACA,kBAAkB;YAChBkB,MAAM;8NACJF,SAAAA,EAAO;oBACLC,qBAAqBvD,KAAAA;gBAAAA,CACtB,CAAC;aAAA;YAEJmD,QAAQ;gBACN;oBACEC,KAAK;oBACLnB,OAAOA,CAAC,EAAClC,OAAAA,EAAAA,GAAAA,CAAc;4BAAC7C,QAAQ6C,QAAQ7C,MAAAA;wBAAM,CAAA;gBAAA;gBAEhD;oBACEkG,KAAK;oBACLnB,OAAOA,CAAC,EAAClC,OAAAA,EAAAA,GAAAA,CAAc;4BAAC7C,QAAQ6C,QAAQ7C,MAAAA;wBAAM,CAAA;gBAAA,CAC/C;aAAA;YAEHuC,IAAI;gBACF,WAAa;oBACX4D,QAAQ;oBACR3D,OAAOA,CAAC,EAACK,OAAAA,EAASH,KAAAA,EAAK,GACI,EAAC6D,kJAAAA,EACxB;4BACE3C,QAAQf,QAAQwD,mBAAAA;4BAChBrC,OAAOnB,QAAQwD,mBAAAA;wBACjB,GACA3D,MAAM4C,YACR;gBAIJ;gBACA,mBAAmB;oBACjBa,QAAQ;gBAAA;YACV;QACF;IACF;AAEJ,CAAC,GCtOYK,kBAAkBC,wKAAAA,CAAMC,UAAAA,CAA0B,CAAAhC,GAAAiC,QAAA;IAAA7G,MAAAA,yNAAAC,EAAA,CAAA,GAC7DC,uMAAeC,YAAAA,CAEf2G,IAAAA,wBAA8BH,wKAAAA,CAAAI,MAAAA,CAAa7G,MAAM;IAAC,IAAAE,IAAAC;IAAA,OAAAL,CAAAA,CAAA,CAAA,CAAA,KAAAgB,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CAEnBb,KAAAA,IAAM0G,sBAAqBE,OAAAA,EAAU3G,KAAA,CAAA,CAAA,EAAEL,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAD,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,iKAAtE2G,UAAAA,CAAAM,mBAAAA,CAA0BJ,KAAKzG,IAAqCC,EAAE,GAAC;AAAA,CAGxE;AACDqG,gBAAgBQ,WAAAA,GAAc;ACsCvB,SAAAC,oBAAApH,KAAAA,EAAA;IAAAC,MAAAA,yNAAAC,EAAA,CAAA,GAGLC,uMAAeC,YAAAA,CACfsC,IAAAA,oKAAW2E,iBAAAA,EAAerH,MAAK0C,EAAG;IAACrC,IAAAA;IAAAJ,CAAAA,CAAAE,CAAAA,CAAAA,KAAAA,UAAAF,CAAAA,CAAAA,EAAAA,KAAAyC,KAAAA,CAEzBrC,KAAAA,MAAA;QACR,MAAAiH,eAAqBnH,OAAMuC,EAAAA,CAAI,KAAKA,EAAE;QAAC,OAAA,MAAA;YAGrC4E,aAAYC,WAAAA,CAAa;QAAC;IAE7BtH,GAAAA,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAAyC,IAAAzC,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA;IAAAK,IAAAA;IAAAL,OAAAA,CAAAA,CAAAA,EAAAA,KAAAE,SAAAA,CAAEG,KAAAA;QAACH,MAAM;KAAA,EAACF,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,KAAAL,CAAAA,CAAA,CAAA,CAAA,EANXa,8KAAAA,EAAUT,IAMPC,EAAQ,GAAC;AAAA;ACKP,SAAAkH,eAAAxH,KAAAA,EAAA;IAAA,MAAAC,QAAAC,iNAAAA,EAAA,EAAA,GACLC,uMAAeC,YAAAA,CAAU;IAAC,IAAAC,IAAAC;IAAAL,CAAAA,CAAAA,EAAAA,KAAAE,UAAAF,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,MAAAkC,MAAAA,GAAAA,CAEhB7B,KAAAA,MAAA;QAGRG,MAAAA,sNAFkBiH,0BAAAA,EAAwBzH,MAAKkC,MAAO,EAEjBzB,GAAAA,CAAAC,CAAAA,WACnCP,OAAMQ,gBAAAA,CAAA;gBAAAD;YAAAA,CAA4B,CACpC;QAAC,OAAA,MAAA;YAAA,KAAA,MAGMgH,sBAA4BlH,oBACZ,mBAAA;QAAC;IAAA,GAGvBF,KAACH;QAAAA;QAAQH,MAAKkC,MAAA;KAAA,EAAQjC,CAAAA,CAAAA,EAAAA,GAAAE,QAAAF,CAAAA,CAAA,CAAA,CAAA,GAAAD,MAAAkC,MAAAA,EAAAjC,CAAAA,CAAAA,EAAAA,GAAAI,IAAAJ,CAAAA,CAAAA,EAAAA,GAAAK,EAAAA,IAAAA,CAAAD,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAAAK,KAAAL,CAAAA,CAAA,CAAA,CAAA,GAZzBa,8KAAAA,EAAUT,IAYPC,EAAsB;IAACqH,IAAAA;IAAA1H,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,MAAAkC,MAAAA,CAAA0F,aAAAA,GAAAA,CAIrBD,KAAA3H,MAAKkC,MAAAA,CAAA0F,aAAAA,GAEF,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,yKAAA,WAAA,EAAA;QAAA,UAAA;YAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,yBACY;gBAAA,WAAA5H,MAAKkC,MAAAA,CAAA0F,aAAAA;gBACV,MAAA;oBAAAvG,MAAO;oBAAGC,QAAA;gBAAA;YAAA,CAElB;YAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,yBACY;gBAAA,WAAAtB,MAAKkC,MAAAA,CAAA0F,aAAAA;gBACV,MAAA;oBAAAvG,MAAO;oBAAGC,QAAA;gBAAA;YAAA;;IAChB,CAAA,IAEE,MAAArB,CAAAA,CAAAD,CAAAA,CAAAA,GAAAA,MAAAkC,MAAAA,CAAA0F,aAAAA,EAAA3H,CAAAA,CAAAA,EAAAA,GAAA0H,EAAAA,IAAAA,KAAA1H,CAAAA,CAAA,CAAA,CAAA;IAAA4H,IAAAA;IAAA5H,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,MAAAkC,MAAAA,CAAA4F,aAAAA,GAAAA,CACPD,KAAA7H,MAAKkC,MAAAA,CAAA4F,aAAAA,GAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EACH,yBACY;QAAA,WAAA9H,MAAKkC,MAAAA,CAAA4F,aAAAA;QACV,MAAA;YAAAzG,MAAO;YAAGC,QAAA;QAAA;IAAA,KAEZ,MAAArB,CAAAA,CAAAD,CAAAA,CAAAA,GAAAA,MAAAkC,MAAAA,CAAA4F,aAAAA,EAAA7H,CAAAA,CAAAA,EAAAA,GAAA4H,EAAAA,IAAAA,KAAA5H,CAAAA,CAAA,CAAA,CAAA;IAAA8H,IAAAA;IAAA9H,CAAAA,CAAAD,CAAAA,CAAAA,KAAAA,MAAAkC,MAAAA,CAAA8F,eAAAA,GAAAA,CACPD,KAAA/H,MAAKkC,MAAAA,CAAA8F,eAAAA,GAEF,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,OAAA,yKAAA,WAAA,EAAA;QAAA,UAAA;YAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,yBACY;gBAAA,WAAAhI,MAAKkC,MAAAA,CAAA8F,eAAAA;gBACV,MAAA;oBAAA3G,MAAO;oBAAGC,QAAA;gBAAA;YAAA,CAElB;YAAA,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAC,yBACY;gBAAA,WAAAtB,MAAKkC,MAAAA,CAAA8F,eAAAA;gBACV,MAAA;oBAAA3G,MAAO;oBAAGC,QAAA;gBAAA;YAAA;;IAChB,CAAA,IAEE,MAAArB,CAAAA,CAAAD,CAAAA,CAAAA,GAAAA,MAAAkC,MAAAA,CAAA8F,eAAAA,EAAA/H,CAAAA,CAAAA,EAAAA,GAAA8H,EAAAA,IAAAA,KAAA9H,CAAAA,CAAA,CAAA,CAAA;IAAAgI,IAAAA;IAAAhI,CAAAA,CAAAD,EAAAA,CAAAA,KAAAA,MAAAkC,MAAAA,CAAAgG,sBAAAA,GAAAA,CACPD,KAAAjI,MAAKkC,MAAAA,CAAAgG,sBAAAA,GAAAA,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,MAAAA,EACH,yBACY;QAAA,WAAAlI,MAAKkC,MAAAA,CAAAgG,sBAAAA;QACV,MAAA;YAAA7G,MAAO;YAAGC,QAAA;QAAA;IAAA,KAEZ,MAAArB,CAAAA,CAAAD,EAAAA,CAAAA,GAAAA,MAAAkC,MAAAA,CAAAgG,sBAAAA,EAAAjI,CAAAA,CAAAA,GAAAA,GAAAgI,EAAAA,IAAAA,KAAAhI,CAAAA,CAAA,EAAA,CAAA;IAAAkI,IAAAA;IAAA,OAAAlI,CAAAA,CAAA,EAAA,CAAA,KAAA0H,MAAA1H,CAAAA,CAAA4H,EAAAA,CAAAA,KAAAA,MAAA5H,CAAAA,CAAA8H,EAAAA,CAAAA,KAAAA,MAAA9H,CAAAA,CAAAA,GAAAA,KAAAgI,KAAAA,CApCVE,KACGR,aAAAA,GAAAA,CAAAA,GAAAA,sKAAAA,CAAAA,OAAAA,yKAAAA,WAAAA,EAAAA;QAAAA,UAAAA;YAAAA;YAYAE;YAMAE;YAYAE;SAKO;IAAA,CAAA,GACPhI,CAAAA,CAAAA,GAAAA,GAAA0H,IAAA1H,CAAAA,CAAAA,GAAAA,GAAA4H,IAAA5H,CAAAA,CAAAA,GAAAA,GAAA8H,IAAA9H,CAAAA,CAAAA,GAAAA,GAAAgI,IAAAhI,CAAAA,CAAAA,GAAAA,GAAAkI,EAAAA,IAAAA,KAAAlI,CAAAA,CAAA,EAAA,CAAA,EArCHkI;AAqCG;ACzHP,MAAMC,mBAAmB;IAAA;;;GAAA,+LAKvB3F,iBAAAA,EAAe;QACbC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAAA,GACPA,SAASI,OAAAA,CAAQwB,SAAAA,IAAarB,4OAAAA,EAA8BP,QAAQ,IAChE;gBAAC4B,WAAW5B,SAASI,OAAAA,CAAQwB,SAAAA;YAAAA,IAC7B,CAAA;QACNI,SAAS;YAAC,CAACC,GAAG,EAACL,SAAAA,EAAAA,GAAe;oBAAC;wBAACM,MAAM;wBAAUN;oBAAAA,CAAU;iBAAC;SAAA;IAAA,CAC5D;IAAA;;GAAA,+LAID/B,iBAAAA,EAAe;QACbC,IAAI;QACJkC,SAAS;YAAC,IAAM;oBAAC;wBAACE,MAAM;oBAAA,CAAO;iBAAC;SAAA;IAAA,CACjC;IAAA;;GAAA,IAIDrC,4MAAAA,EAAe;QACbC,IAAI;QACJC,OAAOA,CAAC,EAACE,KAAAA,EACPA,GAAAA,MAAMwF,SAAAA,KAAc,YAAYxF,MAAMwF,SAAAA,KAAc;QACtDzD,SAAS;YAAC,IAAM;oBAAC;wBAACE,MAAM;oBAAA,CAAO;iBAAC;SAAA;IAAA,CACjC;IAAA;;;GAAA,+LAKDrC,iBAAAA,EAAe;QACbC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,GAIf,CAAA,CAAA,CAHqBM,0OAAAA,EAA4BP,QAAQ,KAIzD,4MAACU,cAAAA,EAAkBV,SAASI,OAAAA,EAASH,MAAMyF,KAAK,CAAA;QAOpD1D,SAAS;YACP,CAAC,EAAC/B,KAAAA,EAAAA,GAAW;oBACX;wBACEiC,MAAM;wBACNwD,OAAOzF,MAAMyF,KAAAA;wBACbD,WAAW;wBACXE,QAAQ;oBAAA,CACT;iBACF;SAAA;IAAA,CAEJ;IAAA;;;GAAA,+LAKD9F,iBAAAA,EAAe;QACbC,IAAI;QACJkC,SAAS;YAAC,IAAM;oBAAC;wBAACE,MAAM;oBAAA,CAAO;iBAAC;SAAA;IAAA,CACjC;IAAA;;;GAAA,+LAKDrC,iBAAAA,EAAe;QACbC,IAAI;QACJC,OAAOA,CAAC,EAACC,QAAAA,EAAUC,KAAAA,EAAAA,GACVA,MAAM2F,MAAAA,CACVC,MAAAA,CAAQH,CAAAA,mNAAUhF,cAAAA,EAAkBV,SAASI,OAAAA,EAASsF,KAAK,CAAC,EAC5DI,MAAAA,CAAO,CAACC,aAAaC,iBACbtF,4NAAAA,EAAsB;oBAC3BN,SAASJ,SAASI,OAAAA;oBAClB2F;oBACAC;gBAAAA,CACD,CACF;QAELhE,SAAS;YAAA,gEAAA;YAAA,YAAA;YAGP,CAACC,GAAGyD,QAAU;gNAACO,QAAAA,EAAM;wBAAC/D,MAAM;wBAAgBwD;wBAAOD,WAAW;oBAAA,CAAO,CAAC;iBAAA;SAAA;IAEzE,CAAA;CAAC;AAWG,SAAAS,gBAAA;IAAA7I,MAAAA,KAAAC,oNAAAA,EAAA,CAAA;IAAAG,IAAAA;IAAAJ,OAAAA,CAAAA,CAAA,CAAA,CAAA,KAAAgB,OAAAC,GAAAA,CAAA,2BAAA,IAAA,CACEb,KAAC,aAAA,GAAA,CAAA,GAAA,sKAAA,CAAA,MAAA,EAAA,gBAAA;QAA0B+H,WAAAA;IAAoB,CAAA,GAAAnI,CAAAA,CAAAA,EAAAA,GAAAI,EAAAA,IAAAA,KAAAJ,CAAAA,CAAA,CAAA,CAAA,EAA/CI;AAA+C","ignoreList":[0,1,2,3,4,5,6,7,8],"debugId":null}}]
}